/*
 * error.c
 *
 *  Created on: May 14, 2023
 *      Author: renatobarresi
 */

#include "error.h"
#include "cmsis_gcc.h"
#include "filesystem.h"
#include <cstring>

constexpr const char * filename = "errorLog.txt";

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
#if ASSERT_STOP_PROGRAM
	while(1);
#endif
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void errorHandler(const char* fileName, int lineNum, errorSeverity errorType, const char* errorName)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    // Store the filename and line in
    if (FileSystemStatus::volumeNotInit == getStatus())
    {
        flash_init();
    }

    switch (errorType)
    {
        case ERROR_FATAL:
            __disable_irq();
            // open a file in write mode
            lfs_t lfs;
            lfs_file_t file;
            if (lfs_file_open(&lfs, &file, "errorLog.txt", LFS_O_WRONLY | LFS_O_CREAT) >= 0)
            {
                char buffer[256];
                // write the error details to the buffer
                snprintf(buffer, sizeof(buffer), "File: %s\nLine: %d\nError: %s\n", fileName, lineNum, errorName);
                // write the buffer to the file
                lfs_file_write(&lfs, &file, buffer, strlen(buffer));
                // close the file
                lfs_file_close(&lfs, &file);
            }

            while (1);
    }
    /* USER CODE END Error_Handler_Debug */
}
