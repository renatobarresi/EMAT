/*
 * spi_module.cpp
 *
 *  Created on: Apr 5, 2023
 *      Author: renatobarresi
 */

#include "spi_module.h"

HAL_StatusTypeDef SPI::init(uint32_t mode, uint32_t direction, uint32_t dataSize) {
	hspi1.Instance = SPI1;
	hspi1.Init.Mode = SPI_MODE_MASTER;
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi1.Init.NSS = SPI_NSS_SOFT;
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
	hspi1.Init.CRCPolynomial = 10;

	//Configure CS GPIO
	__HAL_RCC_GPIOF_CLK_ENABLE();
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(this->CSPort, this->CSPin, GPIO_PIN_RESET);

	return HAL_SPI_Init(hspi_);
}

HAL_StatusTypeDef SPI::transmit(uint8_t *pData, uint16_t size, uint32_t timeout) {
	return HAL_SPI_Transmit(hspi_, pData, size, timeout);
}

HAL_StatusTypeDef SPI::receive(uint8_t *pData, uint16_t size, uint32_t timeout) {
	return HAL_SPI_Receive(hspi_, pData, size, timeout);
}

HAL_StatusTypeDef SPI::transmitReceive(uint8_t *pTxData, uint8_t *pRxData, uint16_t size, uint32_t timeout) {
	return HAL_SPI_TransmitReceive(hspi_, pTxData, pRxData, size, timeout);
}
