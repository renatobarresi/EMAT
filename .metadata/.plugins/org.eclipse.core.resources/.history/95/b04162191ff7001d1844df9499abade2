/*
 * filesystem.cpp
 *
 *  Created on: May 19, 2023
 *      Author: renatobarresi
 */

#include "filesystem.h"
#include "error.h"
#include <string>

/* Constructor */
fileSystem::fileSystem()
{
	flash_init();
	int res = lfs_mount(&lfs, &cfg);
    if (res < 0)
    {
        // If the mount fails, try formatting the filesystem
        res = lfs_format(&lfs, &cfg);
        if (res < 0)
        {
        	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "unable to format filesystem");
        }

        // Try mounting again
        res = lfs_mount(&lfs, &cfg);
        if (res < 0)
        {
        	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "unable to mount filesystem");
        }
    }
}

/* Public methods */
fileSystem& fileSystem::getInstance()
{
	static fileSystem instance;
	return instance;
}


fileSystemReturnType fileSystem::write(const char *fileName, const char *data)
{

    if (fileName == nullptr || data == nullptr)
    {
        // you may want to define specific error codes
    	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "NULL POINTER");
    }


	int res;
	lfs_file_t file;

	res = lfs_file_open(&lfs, &file, fileName, LFS_O_WRONLY | LFS_O_CREAT);

	if (res < 0)
	{
		return fileSystemReturnType::errorOpeningFile;
	}

	res = lfs_file_write(&lfs, &file, data, strlen(data));

    res = lfs_file_close(&lfs, &file);

	return fileSystemReturnType::noError;
}
fileSystemReturnType fileSystem::read(const char *fileName, char *buffer, size_t sizeToRead)
{
    if (fileName == nullptr || buffer == nullptr)
    {
        // you may want to define specific error codes
    	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "NULL POINTER");
    }


	int res;
	lfs_file_t file;

	res = lfs_file_open(&lfs, &file, fileName, LFS_O_RDONLY);

	if (res < 0)
	{
		return fileSystemReturnType::errorOpeningFile;
	}

	res = lfs_file_read(&lfs, &file, buffer, sizeToRead);

	res = lfs_file_close(&lfs, &file);

	return fileSystemReturnType::noError;
}

fileSystemReturnType fileSystem::erase(const char* fileName)
{
    if (fileName == nullptr)
    {
        // Return some error code
    	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "NULL POINTER");
    }

    int res = lfs_remove(&lfs, fileName);

	if (res < 0)
	{
		return fileSystemReturnType::errorErasingFile;
	}

    // If the operation is successful, lfs_remove will return 0
    // In case of an error, it will return a negative number

    return fileSystemReturnType::noError;
}

lfs_soff_t fileSystem::calculateUsedSpace()
{
    lfs_soff_t totalSize = 0;
    lfs_dir_t dir;
    lfs_dir_open(&lfs, &dir, "/");

    struct lfs_info info;
    while (lfs_dir_read(&lfs, &dir, &info) == 1) {
        if(info.type == LFS_TYPE_REG) { // Regular file
            totalSize += info.size;
        }
    }

    lfs_dir_close(&lfs, &dir);

    return totalSize;
}

lfs_soff_t fileSystem::calculateFreeSpace()
{
    lfs_soff_t totalSpace = cfg.block_count * cfg.block_size; // total space
    lfs_soff_t usedSpace = calculateUsedSpace();

    return totalSpace - usedSpace;
}
