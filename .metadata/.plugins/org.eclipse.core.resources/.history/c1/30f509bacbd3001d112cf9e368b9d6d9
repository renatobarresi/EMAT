/*
 * spi_module.cpp
 *
 *  Created on: Apr 5, 2023
 *      Author: renatobarresi
 */

#include "spi_module.h"

HAL_StatusTypeDef SPI::init(uint32_t mode, uint32_t direction, uint32_t dataSize) {
	hspi_->Instance = SPI1; // You can change this to another SPI instance (e.g., SPI2, SPI3)
	hspi_->Init.Mode = mode; // SPI_MODE_MASTER or SPI_MODE_SLAVE
	hspi_->Init.Direction = direction; // SPI_DIRECTION_2LINES, SPI_DIRECTION_1LINE
	hspi_->Init.DataSize = dataSize; // SPI_DATASIZE_8BIT, SPI_DATASIZE_16BIT
	hspi_->Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi_->Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi_->Init.NSS = SPI_NSS_SOFT;
	hspi_->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; // Change this to adjust SPI speed
	hspi_->Init.FirstBit = SPI_FIRSTBIT_MSB;
	hspi_->Init.TIMode = SPI_TIMODE_DISABLE;
	hspi_->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
	hspi_->Init.CRCPolynomial = 10;
	return HAL_SPI_Init(hspi_);
}

HAL_StatusTypeDef SPI::transmit(uint8_t *pData, uint16_t size, uint32_t timeout) {
	return HAL_SPI_Transmit(hspi_, pData, size, timeout);
}

HAL_StatusTypeDef SPI::receive(uint8_t *pData, uint16_t size, uint32_t timeout) {
	return HAL_SPI_Receive(hspi_, pData, size, timeout);
}

HAL_StatusTypeDef SPI::transmitReceive(uint8_t *pTxData, uint8_t *pRxData, uint16_t size, uint32_t timeout) {
	return HAL_SPI_TransmitReceive(hspi_, pTxData, pRxData, size, timeout);
}
