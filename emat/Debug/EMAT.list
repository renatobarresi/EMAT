
EMAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001824  0800bcc4  0800bcc4  0001bcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4e8  0800d4e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4e8  0800d4e8  0001d4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4f0  0800d4f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800d4f0  0800d4f0  0001d4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d510  0800d510  0001d510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000290  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000030c  2000030c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025edb  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043cc  00000000  00000000  00045f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  0004a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c8  00000000  00000000  0004b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002867b  00000000  00000000  0004c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c20  00000000  00000000  00074c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec86d  00000000  00000000  00089873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001760e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000efd8  00000000  00000000  00176130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bcac 	.word	0x0800bcac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800bcac 	.word	0x0800bcac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c8:	f000 b988 	b.w	80005dc <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f81a 	bl	800030c <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__popcountsi2>:
 80002e4:	0843      	lsrs	r3, r0, #1
 80002e6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	0883      	lsrs	r3, r0, #2
 80002ee:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002f2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002f6:	4418      	add	r0, r3
 80002f8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002fc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000300:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000304:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000308:	0e00      	lsrs	r0, r0, #24
 800030a:	4770      	bx	lr

0800030c <__udivmoddi4>:
 800030c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000310:	9d08      	ldr	r5, [sp, #32]
 8000312:	4604      	mov	r4, r0
 8000314:	468e      	mov	lr, r1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d14d      	bne.n	80003b6 <__udivmoddi4+0xaa>
 800031a:	428a      	cmp	r2, r1
 800031c:	4694      	mov	ip, r2
 800031e:	d969      	bls.n	80003f4 <__udivmoddi4+0xe8>
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	b152      	cbz	r2, 800033c <__udivmoddi4+0x30>
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	f1c2 0120 	rsb	r1, r2, #32
 800032e:	fa20 f101 	lsr.w	r1, r0, r1
 8000332:	fa0c fc02 	lsl.w	ip, ip, r2
 8000336:	ea41 0e03 	orr.w	lr, r1, r3
 800033a:	4094      	lsls	r4, r2
 800033c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000340:	0c21      	lsrs	r1, r4, #16
 8000342:	fbbe f6f8 	udiv	r6, lr, r8
 8000346:	fa1f f78c 	uxth.w	r7, ip
 800034a:	fb08 e316 	mls	r3, r8, r6, lr
 800034e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000352:	fb06 f107 	mul.w	r1, r6, r7
 8000356:	4299      	cmp	r1, r3
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x64>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 811f 	bcs.w	80005a4 <__udivmoddi4+0x298>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 811c 	bls.w	80005a4 <__udivmoddi4+0x298>
 800036c:	3e02      	subs	r6, #2
 800036e:	4463      	add	r3, ip
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 f707 	mul.w	r7, r0, r7
 8000384:	42a7      	cmp	r7, r4
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x92>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	f080 810a 	bcs.w	80005a8 <__udivmoddi4+0x29c>
 8000394:	42a7      	cmp	r7, r4
 8000396:	f240 8107 	bls.w	80005a8 <__udivmoddi4+0x29c>
 800039a:	4464      	add	r4, ip
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	1be4      	subs	r4, r4, r7
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa4>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xc2>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80ef 	beq.w	800059e <__udivmoddi4+0x292>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x160>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd4>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80f9 	bhi.w	80005d2 <__udivmoddi4+0x2c6>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	469e      	mov	lr, r3
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa4>
 80003ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa4>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xec>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 8092 	bne.w	8000526 <__udivmoddi4+0x21a>
 8000402:	eba1 010c 	sub.w	r1, r1, ip
 8000406:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040a:	fa1f fe8c 	uxth.w	lr, ip
 800040e:	2601      	movs	r6, #1
 8000410:	0c20      	lsrs	r0, r4, #16
 8000412:	fbb1 f3f7 	udiv	r3, r1, r7
 8000416:	fb07 1113 	mls	r1, r7, r3, r1
 800041a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041e:	fb0e f003 	mul.w	r0, lr, r3
 8000422:	4288      	cmp	r0, r1
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x12c>
 8000426:	eb1c 0101 	adds.w	r1, ip, r1
 800042a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x12a>
 8000430:	4288      	cmp	r0, r1
 8000432:	f200 80cb 	bhi.w	80005cc <__udivmoddi4+0x2c0>
 8000436:	4643      	mov	r3, r8
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1110 	mls	r1, r7, r0, r1
 8000444:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000448:	fb0e fe00 	mul.w	lr, lr, r0
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x156>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d202      	bcs.n	8000460 <__udivmoddi4+0x154>
 800045a:	45a6      	cmp	lr, r4
 800045c:	f200 80bb 	bhi.w	80005d6 <__udivmoddi4+0x2ca>
 8000460:	4608      	mov	r0, r1
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046a:	e79c      	b.n	80003a6 <__udivmoddi4+0x9a>
 800046c:	f1c6 0720 	rsb	r7, r6, #32
 8000470:	40b3      	lsls	r3, r6
 8000472:	fa22 fc07 	lsr.w	ip, r2, r7
 8000476:	ea4c 0c03 	orr.w	ip, ip, r3
 800047a:	fa20 f407 	lsr.w	r4, r0, r7
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	431c      	orrs	r4, r3
 8000484:	40f9      	lsrs	r1, r7
 8000486:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048a:	fa00 f306 	lsl.w	r3, r0, r6
 800048e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000492:	0c20      	lsrs	r0, r4, #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fb09 1118 	mls	r1, r9, r8, r1
 800049c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a0:	fb08 f00e 	mul.w	r0, r8, lr
 80004a4:	4288      	cmp	r0, r1
 80004a6:	fa02 f206 	lsl.w	r2, r2, r6
 80004aa:	d90b      	bls.n	80004c4 <__udivmoddi4+0x1b8>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b4:	f080 8088 	bcs.w	80005c8 <__udivmoddi4+0x2bc>
 80004b8:	4288      	cmp	r0, r1
 80004ba:	f240 8085 	bls.w	80005c8 <__udivmoddi4+0x2bc>
 80004be:	f1a8 0802 	sub.w	r8, r8, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	1a09      	subs	r1, r1, r0
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004cc:	fb09 1110 	mls	r1, r9, r0, r1
 80004d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d8:	458e      	cmp	lr, r1
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1e2>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e4:	d26c      	bcs.n	80005c0 <__udivmoddi4+0x2b4>
 80004e6:	458e      	cmp	lr, r1
 80004e8:	d96a      	bls.n	80005c0 <__udivmoddi4+0x2b4>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4461      	add	r1, ip
 80004ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f2:	fba0 9402 	umull	r9, r4, r0, r2
 80004f6:	eba1 010e 	sub.w	r1, r1, lr
 80004fa:	42a1      	cmp	r1, r4
 80004fc:	46c8      	mov	r8, r9
 80004fe:	46a6      	mov	lr, r4
 8000500:	d356      	bcc.n	80005b0 <__udivmoddi4+0x2a4>
 8000502:	d053      	beq.n	80005ac <__udivmoddi4+0x2a0>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x212>
 8000506:	ebb3 0208 	subs.w	r2, r3, r8
 800050a:	eb61 010e 	sbc.w	r1, r1, lr
 800050e:	fa01 f707 	lsl.w	r7, r1, r7
 8000512:	fa22 f306 	lsr.w	r3, r2, r6
 8000516:	40f1      	lsrs	r1, r6
 8000518:	431f      	orrs	r7, r3
 800051a:	e9c5 7100 	strd	r7, r1, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	40d8      	lsrs	r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa21 f303 	lsr.w	r3, r1, r3
 8000534:	4091      	lsls	r1, r2
 8000536:	4301      	orrs	r1, r0
 8000538:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fbb3 f0f7 	udiv	r0, r3, r7
 8000544:	fb07 3610 	mls	r6, r7, r0, r3
 8000548:	0c0b      	lsrs	r3, r1, #16
 800054a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054e:	fb00 f60e 	mul.w	r6, r0, lr
 8000552:	429e      	cmp	r6, r3
 8000554:	fa04 f402 	lsl.w	r4, r4, r2
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x260>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000562:	d22f      	bcs.n	80005c4 <__udivmoddi4+0x2b8>
 8000564:	429e      	cmp	r6, r3
 8000566:	d92d      	bls.n	80005c4 <__udivmoddi4+0x2b8>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1b9b      	subs	r3, r3, r6
 800056e:	b289      	uxth	r1, r1
 8000570:	fbb3 f6f7 	udiv	r6, r3, r7
 8000574:	fb07 3316 	mls	r3, r7, r6, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb06 f30e 	mul.w	r3, r6, lr
 8000580:	428b      	cmp	r3, r1
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x28a>
 8000584:	eb1c 0101 	adds.w	r1, ip, r1
 8000588:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800058c:	d216      	bcs.n	80005bc <__udivmoddi4+0x2b0>
 800058e:	428b      	cmp	r3, r1
 8000590:	d914      	bls.n	80005bc <__udivmoddi4+0x2b0>
 8000592:	3e02      	subs	r6, #2
 8000594:	4461      	add	r1, ip
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800059c:	e738      	b.n	8000410 <__udivmoddi4+0x104>
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e705      	b.n	80003b0 <__udivmoddi4+0xa4>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e3      	b.n	8000370 <__udivmoddi4+0x64>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6f8      	b.n	800039e <__udivmoddi4+0x92>
 80005ac:	454b      	cmp	r3, r9
 80005ae:	d2a9      	bcs.n	8000504 <__udivmoddi4+0x1f8>
 80005b0:	ebb9 0802 	subs.w	r8, r9, r2
 80005b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7a3      	b.n	8000504 <__udivmoddi4+0x1f8>
 80005bc:	4646      	mov	r6, r8
 80005be:	e7ea      	b.n	8000596 <__udivmoddi4+0x28a>
 80005c0:	4620      	mov	r0, r4
 80005c2:	e794      	b.n	80004ee <__udivmoddi4+0x1e2>
 80005c4:	4640      	mov	r0, r8
 80005c6:	e7d1      	b.n	800056c <__udivmoddi4+0x260>
 80005c8:	46d0      	mov	r8, sl
 80005ca:	e77b      	b.n	80004c4 <__udivmoddi4+0x1b8>
 80005cc:	3b02      	subs	r3, #2
 80005ce:	4461      	add	r1, ip
 80005d0:	e732      	b.n	8000438 <__udivmoddi4+0x12c>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e709      	b.n	80003ea <__udivmoddi4+0xde>
 80005d6:	4464      	add	r4, ip
 80005d8:	3802      	subs	r0, #2
 80005da:	e742      	b.n	8000462 <__udivmoddi4+0x156>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <errorHandler>:
	while(1);
#endif
}

void errorHandler(const char* fileName, int lineNum, errorSeverity errorType, const char* errorName)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b0cb      	sub	sp, #300	; 0x12c
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80005ea:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 80005ee:	6020      	str	r0, [r4, #0]
 80005f0:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80005f4:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80005f8:	6001      	str	r1, [r0, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000600:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800060a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800060e:	460a      	mov	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    switch (errorType)
 8000612:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000616:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d12c      	bne.n	800067a <errorHandler+0x9a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
    {
        case ERROR_FATAL:
            __disable_irq();

            fileSystem& fs = fileSystem::getInstance();
 8000624:	f008 fc02 	bl	8008e2c <_ZN10fileSystem11getInstanceEv>
 8000628:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

            char buffer[BUFFER_SIZE];
            snprintf(buffer, BUFFER_SIZE, "File: %s\nLine: %d\nType: %d\nName: %s\n",
 800062c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000630:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800063a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800063e:	f107 0014 	add.w	r0, r7, #20
 8000642:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000646:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 800064a:	6809      	ldr	r1, [r1, #0]
 800064c:	9102      	str	r1, [sp, #8]
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000654:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <errorHandler+0xa4>)
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	f00a fba4 	bl	800adb0 <sniprintf>
                     fileName, lineNum, errorType, errorName);

            fs.write(errorLogFileName, buffer);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	461a      	mov	r2, r3
 800066e:	4906      	ldr	r1, [pc, #24]	; (8000688 <errorHandler+0xa8>)
 8000670:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000674:	f008 fc02 	bl	8008e7c <_ZN10fileSystem5writeEPKcS1_>

            while (1);
 8000678:	e7fe      	b.n	8000678 <errorHandler+0x98>
    }
    /* USER CODE END Error_Handler_Debug */
}
 800067a:	bf00      	nop
 800067c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	0800bcd4 	.word	0x0800bcd4
 8000688:	0800bcc4 	.word	0x0800bcc4

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 f9e6 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f804 	bl	80006a0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  main_cpp();
 8000698:	f008 fffe 	bl	8009698 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x10>
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f009 ff3c 	bl	800a52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xc8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a26      	ldr	r2, [pc, #152]	; (8000768 <SystemClock_Config+0xc8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <SystemClock_Config+0xc8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ec:	4a1f      	ldr	r2, [pc, #124]	; (800076c <SystemClock_Config+0xcc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fcc1 	bl	800109c <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d005      	beq.n	800072c <SystemClock_Config+0x8c>
  {
	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "Osciator init error");
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <SystemClock_Config+0xd0>)
 8000722:	2200      	movs	r2, #0
 8000724:	217c      	movs	r1, #124	; 0x7c
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <SystemClock_Config+0xd4>)
 8000728:	f7ff ff5a 	bl	80005e0 <errorHandler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f000 ff20 	bl	800158c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d005      	beq.n	800075e <SystemClock_Config+0xbe>
  {
	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "Error init CPU, AHB and APB");
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <SystemClock_Config+0xd8>)
 8000754:	2200      	movs	r2, #0
 8000756:	218a      	movs	r1, #138	; 0x8a
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <SystemClock_Config+0xd4>)
 800075a:	f7ff ff41 	bl	80005e0 <errorHandler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000
 8000770:	0800bcfc 	.word	0x0800bcfc
 8000774:	0800bd10 	.word	0x0800bd10
 8000778:	0800bd24 	.word	0x0800bd24

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>
	...

080007d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "HardFault error");
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HardFault_Handler+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	2158      	movs	r1, #88	; 0x58
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <HardFault_Handler+0x18>)
 80007e0:	f7ff fefe 	bl	80005e0 <errorHandler>
  /* USER CODE END HardFault_IRQn 0 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	0800bd40 	.word	0x0800bd40
 80007ec:	0800bd50 	.word	0x0800bd50

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "MemManage error");
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <MemManage_Handler+0x14>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	2163      	movs	r1, #99	; 0x63
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <MemManage_Handler+0x18>)
 80007fc:	f7ff fef0 	bl	80005e0 <errorHandler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x10>
 8000802:	bf00      	nop
 8000804:	0800bd6c 	.word	0x0800bd6c
 8000808:	0800bd50 	.word	0x0800bd50

0800080c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "BusFault error");
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <BusFault_Handler+0x14>)
 8000812:	2200      	movs	r2, #0
 8000814:	2172      	movs	r1, #114	; 0x72
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <BusFault_Handler+0x18>)
 8000818:	f7ff fee2 	bl	80005e0 <errorHandler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <BusFault_Handler+0x10>
 800081e:	bf00      	nop
 8000820:	0800bd7c 	.word	0x0800bd7c
 8000824:	0800bd50 	.word	0x0800bd50

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "UsageFault error");
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <UsageFault_Handler+0x14>)
 800082e:	2200      	movs	r2, #0
 8000830:	2181      	movs	r1, #129	; 0x81
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <UsageFault_Handler+0x18>)
 8000834:	f7ff fed4 	bl	80005e0 <errorHandler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x10>
 800083a:	bf00      	nop
 800083c:	0800bd8c 	.word	0x0800bd8c
 8000840:	0800bd50 	.word	0x0800bd50

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f955 	bl	8000b04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
	return 1;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_kill>:

int _kill(int pid, int sig)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000878:	f009 fdd4 	bl	800a424 <__errno>
 800087c:	4603      	mov	r3, r0
 800087e:	2216      	movs	r2, #22
 8000880:	601a      	str	r2, [r3, #0]
	return -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_exit>:

void _exit (int status)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000896:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffe7 	bl	800086e <_kill>
	while (1) {}		/* Make sure we hang here */
 80008a0:	e7fe      	b.n	80008a0 <_exit+0x12>

080008a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e00a      	b.n	80008ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008b4:	f3af 8000 	nop.w
 80008b8:	4601      	mov	r1, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	60ba      	str	r2, [r7, #8]
 80008c0:	b2ca      	uxtb	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dbf0      	blt.n	80008b4 <_read+0x12>
	}

return len;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e009      	b.n	8000902 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbf1      	blt.n	80008ee <_write+0x12>
	}
	return len;
 800090a:	687b      	ldr	r3, [r7, #4]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_close>:

int _close(int file)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	return -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093c:	605a      	str	r2, [r3, #4]
	return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_isatty>:

int _isatty(int file)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000962:	b480      	push	{r7}
 8000964:	b085      	sub	sp, #20
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f009 fd3a 	bl	800a424 <__errno>
 80009b0:	4603      	mov	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <_sbrk+0x64>)
 80009cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20030000 	.word	0x20030000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	20000098 	.word	0x20000098
 80009e4:	20000310 	.word	0x20000310

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f009 fd0b 	bl	800a454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fe25 	bl	800068c <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a50:	0800d518 	.word	0x0800d518
  ldr r2, =_sbss
 8000a54:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a58:	2000030c 	.word	0x2000030c

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f90d 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fe72 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f917 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae0:	f000 f8ed 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000004 	.word	0x20000004
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	20000008 	.word	0x20000008

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	2000009c 	.word	0x2000009c

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000009c 	.word	0x2000009c

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff47 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff5c 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffb0 	bl	8000c64 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e177      	b.n	800101c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8166 	bne.w	8001016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80c0 	beq.w	8001016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b66      	ldr	r3, [pc, #408]	; (8001034 <HAL_GPIO_Init+0x324>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a65      	ldr	r2, [pc, #404]	; (8001034 <HAL_GPIO_Init+0x324>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b63      	ldr	r3, [pc, #396]	; (8001034 <HAL_GPIO_Init+0x324>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a61      	ldr	r2, [pc, #388]	; (8001038 <HAL_GPIO_Init+0x328>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a58      	ldr	r2, [pc, #352]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d037      	beq.n	8000f4e <HAL_GPIO_Init+0x23e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a57      	ldr	r2, [pc, #348]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d031      	beq.n	8000f4a <HAL_GPIO_Init+0x23a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a56      	ldr	r2, [pc, #344]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d02b      	beq.n	8000f46 <HAL_GPIO_Init+0x236>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d025      	beq.n	8000f42 <HAL_GPIO_Init+0x232>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a54      	ldr	r2, [pc, #336]	; (800104c <HAL_GPIO_Init+0x33c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d01f      	beq.n	8000f3e <HAL_GPIO_Init+0x22e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a53      	ldr	r2, [pc, #332]	; (8001050 <HAL_GPIO_Init+0x340>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d019      	beq.n	8000f3a <HAL_GPIO_Init+0x22a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_GPIO_Init+0x344>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_GPIO_Init+0x226>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_GPIO_Init+0x348>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <HAL_GPIO_Init+0x222>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x21e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <HAL_GPIO_Init+0x350>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_GPIO_Init+0x21a>
 8000f26:	2309      	movs	r3, #9
 8000f28:	e012      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	e010      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	e00e      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f32:	2307      	movs	r3, #7
 8000f34:	e00c      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00a      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x240>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	4935      	ldr	r1, [pc, #212]	; (8001038 <HAL_GPIO_Init+0x328>)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <HAL_GPIO_Init+0x354>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f92:	4a34      	ldr	r2, [pc, #208]	; (8001064 <HAL_GPIO_Init+0x354>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	4b32      	ldr	r3, [pc, #200]	; (8001064 <HAL_GPIO_Init+0x354>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <HAL_GPIO_Init+0x354>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <HAL_GPIO_Init+0x354>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_GPIO_Init+0x354>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_GPIO_Init+0x354>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_GPIO_Init+0x354>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	f67f ae84 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021400 	.word	0x40021400
 8001054:	40021800 	.word	0x40021800
 8001058:	40021c00 	.word	0x40021c00
 800105c:	40022000 	.word	0x40022000
 8001060:	40022400 	.word	0x40022400
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001084:	e003      	b.n	800108e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	619a      	str	r2, [r3, #24]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e267      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d075      	beq.n	80011a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d00c      	beq.n	80010e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c6:	4b85      	ldr	r3, [pc, #532]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d112      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d2:	4b82      	ldr	r3, [pc, #520]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010de:	d10b      	bne.n	80010f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d05b      	beq.n	80011a4 <HAL_RCC_OscConfig+0x108>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d157      	bne.n	80011a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e242      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x74>
 8001102:	4b76      	ldr	r3, [pc, #472]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a75      	ldr	r2, [pc, #468]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01d      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x98>
 800111a:	4b70      	ldr	r3, [pc, #448]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a6f      	ldr	r2, [pc, #444]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6c      	ldr	r2, [pc, #432]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0xb0>
 8001134:	4b69      	ldr	r3, [pc, #420]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a68      	ldr	r2, [pc, #416]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800113a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b66      	ldr	r3, [pc, #408]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a65      	ldr	r2, [pc, #404]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fcea 	bl	8000b2c <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fce6 	bl	8000b2c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e207      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0xc0>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcd6 	bl	8000b2c <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fcd2 	bl	8000b2c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1f3      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	4b51      	ldr	r3, [pc, #324]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0xe8>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d063      	beq.n	800127a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b2:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d11c      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ca:	4b44      	ldr	r3, [pc, #272]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e1c7      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	e03a      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_RCC_OscConfig+0x244>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff fc8b 	bl	8000b2c <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fc87 	bl	8000b2c <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1a8      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4925      	ldr	r1, [pc, #148]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_RCC_OscConfig+0x244>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fc6a 	bl	8000b2c <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fc66 	bl	8000b2c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e187      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d036      	beq.n	80012f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_RCC_OscConfig+0x248>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff fc4a 	bl	8000b2c <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fc46 	bl	8000b2c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e167      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_OscConfig+0x240>)
 80012b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x200>
 80012ba:	e01b      	b.n	80012f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_RCC_OscConfig+0x248>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fc33 	bl	8000b2c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	e00e      	b.n	80012e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc2f 	bl	8000b2c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d907      	bls.n	80012e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e150      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470000 	.word	0x42470000
 80012e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80012ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ea      	bne.n	80012ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8097 	beq.w	8001430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10f      	bne.n	8001332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b7d      	ldr	r3, [pc, #500]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a7c      	ldr	r2, [pc, #496]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b7a      	ldr	r3, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b77      	ldr	r3, [pc, #476]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133e:	4b74      	ldr	r3, [pc, #464]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a73      	ldr	r2, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134a:	f7ff fbef 	bl	8000b2c <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fbeb 	bl	8000b2c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e10c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x474>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x2ea>
 8001378:	4b64      	ldr	r3, [pc, #400]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a63      	ldr	r2, [pc, #396]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
 8001384:	e01c      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x30c>
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	4a5b      	ldr	r2, [pc, #364]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0x324>
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	; 0x70
 80013b4:	4b55      	ldr	r3, [pc, #340]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a54      	ldr	r2, [pc, #336]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 0304 	bic.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbb0 	bl	8000b2c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fbac 	bl	8000b2c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0cb      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ee      	beq.n	80013d0 <HAL_RCC_OscConfig+0x334>
 80013f2:	e014      	b.n	800141e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fb9a 	bl	8000b2c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fb96 	bl	8000b2c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0b5      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ee      	bne.n	80013fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a38      	ldr	r2, [pc, #224]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a1 	beq.w	800157c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x470>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d05c      	beq.n	8001500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d141      	bne.n	80014d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_RCC_OscConfig+0x478>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb6a 	bl	8000b2c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fb66 	bl	8000b2c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e087      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x470>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	019b      	lsls	r3, r3, #6
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	491b      	ldr	r1, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x478>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb3f 	bl	8000b2c <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fb3b 	bl	8000b2c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e05c      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x416>
 80014d0:	e054      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_RCC_OscConfig+0x478>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb28 	bl	8000b2c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fb24 	bl	8000b2c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e045      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_OscConfig+0x470>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x444>
 80014fe:	e03d      	b.n	800157c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e038      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000
 8001514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x4ec>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d028      	beq.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d121      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d11a      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800154e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001550:	4293      	cmp	r3, r2
 8001552:	d111      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	3b01      	subs	r3, #1
 8001562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0cc      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d90c      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d044      	beq.n	80016ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d119      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	2b03      	cmp	r3, #3
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e067      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4934      	ldr	r1, [pc, #208]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800167c:	f7ff fa56 	bl	8000b2c <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff fa52 	bl	8000b2c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e04f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d20c      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f9b6 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
 800174c:	0800c880 	.word	0x0800c880
 8001750:	20000004 	.word	0x20000004
 8001754:	20000008 	.word	0x20000008

08001758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b094      	sub	sp, #80	; 0x50
 800175e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	647b      	str	r3, [r7, #68]	; 0x44
 8001764:	2300      	movs	r3, #0
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001768:	2300      	movs	r3, #0
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001770:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d00d      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 800177c:	2b08      	cmp	r3, #8
 800177e:	f200 80e1 	bhi.w	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x34>
 8001786:	2b04      	cmp	r3, #4
 8001788:	d003      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x3a>
 800178a:	e0db      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001790:	e0db      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001792:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_GetSysClockFreq+0x208>)
 8001794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001796:	e0d8      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001798:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a2:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ae:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	2200      	movs	r2, #0
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
 80017c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017ca:	4622      	mov	r2, r4
 80017cc:	462b      	mov	r3, r5
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	0159      	lsls	r1, r3, #5
 80017d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017dc:	0150      	lsls	r0, r2, #5
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4621      	mov	r1, r4
 80017e4:	1a51      	subs	r1, r2, r1
 80017e6:	6139      	str	r1, [r7, #16]
 80017e8:	4629      	mov	r1, r5
 80017ea:	eb63 0301 	sbc.w	r3, r3, r1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017fc:	4659      	mov	r1, fp
 80017fe:	018b      	lsls	r3, r1, #6
 8001800:	4651      	mov	r1, sl
 8001802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001806:	4651      	mov	r1, sl
 8001808:	018a      	lsls	r2, r1, #6
 800180a:	4651      	mov	r1, sl
 800180c:	ebb2 0801 	subs.w	r8, r2, r1
 8001810:	4659      	mov	r1, fp
 8001812:	eb63 0901 	sbc.w	r9, r3, r1
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182a:	4690      	mov	r8, r2
 800182c:	4699      	mov	r9, r3
 800182e:	4623      	mov	r3, r4
 8001830:	eb18 0303 	adds.w	r3, r8, r3
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	462b      	mov	r3, r5
 8001838:	eb49 0303 	adc.w	r3, r9, r3
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800184a:	4629      	mov	r1, r5
 800184c:	024b      	lsls	r3, r1, #9
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001854:	4621      	mov	r1, r4
 8001856:	024a      	lsls	r2, r1, #9
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185e:	2200      	movs	r2, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
 8001862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001868:	f7fe fd24 	bl	80002b4 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001874:	e058      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	2200      	movs	r2, #0
 800187e:	4618      	mov	r0, r3
 8001880:	4611      	mov	r1, r2
 8001882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001890:	4642      	mov	r2, r8
 8001892:	464b      	mov	r3, r9
 8001894:	f04f 0000 	mov.w	r0, #0
 8001898:	f04f 0100 	mov.w	r1, #0
 800189c:	0159      	lsls	r1, r3, #5
 800189e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a2:	0150      	lsls	r0, r2, #5
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4641      	mov	r1, r8
 80018aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ae:	4649      	mov	r1, r9
 80018b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c8:	ebb2 040a 	subs.w	r4, r2, sl
 80018cc:	eb63 050b 	sbc.w	r5, r3, fp
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	18e3      	adds	r3, r4, r3
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	464b      	mov	r3, r9
 80018ec:	eb45 0303 	adc.w	r3, r5, r3
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fe:	4629      	mov	r1, r5
 8001900:	028b      	lsls	r3, r1, #10
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001908:	4621      	mov	r1, r4
 800190a:	028a      	lsls	r2, r1, #10
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001912:	2200      	movs	r2, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	61fa      	str	r2, [r7, #28]
 8001918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800191c:	f7fe fcca 	bl	80002b4 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800193a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001942:	e002      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800194c:	4618      	mov	r0, r3
 800194e:	3750      	adds	r7, #80	; 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200

08001964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e07b      	b.n	8001a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	2b00      	cmp	r3, #0
 800197c:	d108      	bne.n	8001990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001986:	d009      	beq.n	800199c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
 800198e:	e005      	b.n	800199c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f007 fd42 	bl	8009440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a20:	ea42 0103 	orr.w	r1, r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	f003 0104 	and.w	r1, r3, #4
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f003 0210 	and.w	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b088      	sub	sp, #32
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4613      	mov	r3, r2
 8001a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_SPI_Transmit+0x22>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e126      	b.n	8001ce6 <HAL_SPI_Transmit+0x270>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aa0:	f7ff f844 	bl	8000b2c <HAL_GetTick>
 8001aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d002      	beq.n	8001abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001aba:	e10b      	b.n	8001cd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_SPI_Transmit+0x52>
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001acc:	e102      	b.n	8001cd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b14:	d10f      	bne.n	8001b36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	2b40      	cmp	r3, #64	; 0x40
 8001b42:	d007      	beq.n	8001b54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b5c:	d14b      	bne.n	8001bf6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_SPI_Transmit+0xf6>
 8001b66:	8afb      	ldrh	r3, [r7, #22]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d13e      	bne.n	8001bea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	881a      	ldrh	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	1c9a      	adds	r2, r3, #2
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b90:	e02b      	b.n	8001bea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d112      	bne.n	8001bc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	1c9a      	adds	r2, r3, #2
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bc4:	e011      	b.n	8001bea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bc6:	f7fe ffb1 	bl	8000b2c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d803      	bhi.n	8001bde <HAL_SPI_Transmit+0x168>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bdc:	d102      	bne.n	8001be4 <HAL_SPI_Transmit+0x16e>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001be8:	e074      	b.n	8001cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ce      	bne.n	8001b92 <HAL_SPI_Transmit+0x11c>
 8001bf4:	e04c      	b.n	8001c90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_SPI_Transmit+0x18e>
 8001bfe:	8afb      	ldrh	r3, [r7, #22]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d140      	bne.n	8001c86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c2a:	e02c      	b.n	8001c86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d113      	bne.n	8001c62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	330c      	adds	r3, #12
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c60:	e011      	b.n	8001c86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c62:	f7fe ff63 	bl	8000b2c <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d803      	bhi.n	8001c7a <HAL_SPI_Transmit+0x204>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c78:	d102      	bne.n	8001c80 <HAL_SPI_Transmit+0x20a>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c84:	e026      	b.n	8001cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1cd      	bne.n	8001c2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fbcb 	bl	8002430 <SPI_EndRxTxTransaction>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10a      	bne.n	8001cc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	77fb      	strb	r3, [r7, #31]
 8001cd0:	e000      	b.n	8001cd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001cd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b088      	sub	sp, #32
 8001cf2:	af02      	add	r7, sp, #8
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d0a:	d112      	bne.n	8001d32 <HAL_SPI_Receive+0x44>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10e      	bne.n	8001d32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2204      	movs	r2, #4
 8001d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f8f1 	bl	8001f10 <HAL_SPI_TransmitReceive>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	e0ea      	b.n	8001f08 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_SPI_Receive+0x52>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e0e3      	b.n	8001f08 <HAL_SPI_Receive+0x21a>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d48:	f7fe fef0 	bl	8000b2c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d002      	beq.n	8001d60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d5e:	e0ca      	b.n	8001ef6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_SPI_Receive+0x7e>
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d70:	e0c1      	b.n	8001ef6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2204      	movs	r2, #4
 8001d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db8:	d10f      	bne.n	8001dda <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d007      	beq.n	8001df8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d162      	bne.n	8001ec6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e00:	e02e      	b.n	8001e60 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d115      	bne.n	8001e3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f103 020c 	add.w	r2, r3, #12
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e3a:	e011      	b.n	8001e60 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e3c:	f7fe fe76 	bl	8000b2c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d803      	bhi.n	8001e54 <HAL_SPI_Receive+0x166>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e52:	d102      	bne.n	8001e5a <HAL_SPI_Receive+0x16c>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e5e:	e04a      	b.n	8001ef6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1cb      	bne.n	8001e02 <HAL_SPI_Receive+0x114>
 8001e6a:	e031      	b.n	8001ed0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d113      	bne.n	8001ea2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	b292      	uxth	r2, r2
 8001e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	1c9a      	adds	r2, r3, #2
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ea0:	e011      	b.n	8001ec6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea2:	f7fe fe43 	bl	8000b2c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d803      	bhi.n	8001eba <HAL_SPI_Receive+0x1cc>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb8:	d102      	bne.n	8001ec0 <HAL_SPI_Receive+0x1d2>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ec4:	e017      	b.n	8001ef6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1cd      	bne.n	8001e6c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fa45 	bl	8002364 <SPI_EndRxTransaction>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
 8001ef2:	e000      	b.n	8001ef6 <HAL_SPI_Receive+0x208>
  }

error :
 8001ef4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_SPI_TransmitReceive+0x26>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e18a      	b.n	800224c <HAL_SPI_TransmitReceive+0x33c>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f3e:	f7fe fdf5 	bl	8000b2c <HAL_GetTick>
 8001f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d00f      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x70>
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f66:	d107      	bne.n	8001f78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <HAL_SPI_TransmitReceive+0x68>
 8001f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d003      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f7e:	e15b      	b.n	8002238 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_SPI_TransmitReceive+0x82>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_SPI_TransmitReceive+0x82>
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f98:	e14e      	b.n	8002238 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d003      	beq.n	8001fae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	887a      	ldrh	r2, [r7, #2]
 8001fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d007      	beq.n	8002002 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800200a:	d178      	bne.n	80020fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_SPI_TransmitReceive+0x10a>
 8002014:	8b7b      	ldrh	r3, [r7, #26]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d166      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	1c9a      	adds	r2, r3, #2
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800203e:	e053      	b.n	80020e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b02      	cmp	r3, #2
 800204c:	d11b      	bne.n	8002086 <HAL_SPI_TransmitReceive+0x176>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d016      	beq.n	8002086 <HAL_SPI_TransmitReceive+0x176>
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d113      	bne.n	8002086 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	1c9a      	adds	r2, r3, #2
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d119      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x1b8>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d014      	beq.n	80020c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	b292      	uxth	r2, r2
 80020aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	1c9a      	adds	r2, r3, #2
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020c8:	f7fe fd30 	bl	8000b2c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d807      	bhi.n	80020e8 <HAL_SPI_TransmitReceive+0x1d8>
 80020d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020de:	d003      	beq.n	80020e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020e6:	e0a7      	b.n	8002238 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1a6      	bne.n	8002040 <HAL_SPI_TransmitReceive+0x130>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1a1      	bne.n	8002040 <HAL_SPI_TransmitReceive+0x130>
 80020fc:	e07c      	b.n	80021f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_TransmitReceive+0x1fc>
 8002106:	8b7b      	ldrh	r3, [r7, #26]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d16b      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002132:	e057      	b.n	80021e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d11c      	bne.n	800217c <HAL_SPI_TransmitReceive+0x26c>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d017      	beq.n	800217c <HAL_SPI_TransmitReceive+0x26c>
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	2b01      	cmp	r3, #1
 8002150:	d114      	bne.n	800217c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	330c      	adds	r3, #12
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d119      	bne.n	80021be <HAL_SPI_TransmitReceive+0x2ae>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d014      	beq.n	80021be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021be:	f7fe fcb5 	bl	8000b2c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d803      	bhi.n	80021d6 <HAL_SPI_TransmitReceive+0x2c6>
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d4:	d102      	bne.n	80021dc <HAL_SPI_TransmitReceive+0x2cc>
 80021d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021e2:	e029      	b.n	8002238 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1a2      	bne.n	8002134 <HAL_SPI_TransmitReceive+0x224>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d19d      	bne.n	8002134 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f917 	bl	8002430 <SPI_EndRxTxTransaction>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002214:	e010      	b.n	8002238 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10b      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	e000      	b.n	8002238 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800224c:	4618      	mov	r0, r3
 800224e:	3730      	adds	r7, #48	; 0x30
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002264:	f7fe fc62 	bl	8000b2c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4413      	add	r3, r2
 8002272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002274:	f7fe fc5a 	bl	8000b2c <HAL_GetTick>
 8002278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	0d1b      	lsrs	r3, r3, #20
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800228a:	e054      	b.n	8002336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002292:	d050      	beq.n	8002336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002294:	f7fe fc4a 	bl	8000b2c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d902      	bls.n	80022aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d13d      	bne.n	8002326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c2:	d111      	bne.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022cc:	d004      	beq.n	80022d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d107      	bne.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f0:	d10f      	bne.n	8002312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e017      	b.n	8002356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3b01      	subs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4013      	ands	r3, r2
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	429a      	cmp	r2, r3
 8002352:	d19b      	bne.n	800228c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000004 	.word	0x20000004

08002364 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002378:	d111      	bne.n	800239e <SPI_EndRxTransaction+0x3a>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002382:	d004      	beq.n	800238e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238c:	d107      	bne.n	800239e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023a6:	d12a      	bne.n	80023fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d012      	beq.n	80023d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff ff49 	bl	8002254 <SPI_WaitFlagStateUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02d      	beq.n	8002424 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e026      	b.n	8002426 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2200      	movs	r2, #0
 80023e0:	2101      	movs	r1, #1
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7ff ff36 	bl	8002254 <SPI_WaitFlagStateUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01a      	beq.n	8002424 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0220 	orr.w	r2, r3, #32
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e013      	b.n	8002426 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	2101      	movs	r1, #1
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7ff ff23 	bl	8002254 <SPI_WaitFlagStateUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e000      	b.n	8002426 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <SPI_EndRxTxTransaction+0x7c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <SPI_EndRxTxTransaction+0x80>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0d5b      	lsrs	r3, r3, #21
 8002448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245a:	d112      	bne.n	8002482 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fef4 	bl	8002254 <SPI_WaitFlagStateUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d016      	beq.n	80024a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e00f      	b.n	80024a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3b01      	subs	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d0f2      	beq.n	8002482 <SPI_EndRxTxTransaction+0x52>
 800249c:	e000      	b.n	80024a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800249e:	bf00      	nop
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000004 	.word	0x20000004
 80024b0:	165e9f81 	.word	0x165e9f81

080024b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <vTaskSwitchContext+0xa4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <vTaskSwitchContext+0xa8>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80024c8:	e03f      	b.n	800254a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <vTaskSwitchContext+0xa8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <vTaskSwitchContext+0xac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	72fb      	strb	r3, [r7, #11]

            return ucReturn;
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f1c3 031f 	rsb	r3, r3, #31
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	491f      	ldr	r1, [pc, #124]	; (8002564 <vTaskSwitchContext+0xb0>)
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <vTaskSwitchContext+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800250c:	bf00      	nop
 800250e:	e7fe      	b.n	800250e <vTaskSwitchContext+0x5a>
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <vTaskSwitchContext+0xb0>)
 800251c:	4413      	add	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	3308      	adds	r3, #8
 8002532:	429a      	cmp	r2, r3
 8002534:	d104      	bne.n	8002540 <vTaskSwitchContext+0x8c>
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <vTaskSwitchContext+0xb4>)
 8002548:	6013      	str	r3, [r2, #0]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000138 	.word	0x20000138
 800255c:	20000134 	.word	0x20000134
 8002560:	20000130 	.word	0x20000130
 8002564:	200000a4 	.word	0x200000a4
 8002568:	200000a0 	.word	0x200000a0
 800256c:	00000000 	.word	0x00000000

08002570 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <pxCurrentTCBConst2>)
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	6808      	ldr	r0, [r1, #0]
 8002576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257a:	f380 8809 	msr	PSP, r0
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	f380 8811 	msr	BASEPRI, r0
 800258a:	4770      	bx	lr
 800258c:	f3af 8000 	nop.w

08002590 <pxCurrentTCBConst2>:
 8002590:	200000a0 	.word	0x200000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
	...

080025a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80025a0:	f3ef 8009 	mrs	r0, PSP
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <pxCurrentTCBConst>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f01e 0f10 	tst.w	lr, #16
 80025b0:	bf08      	it	eq
 80025b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ba:	6010      	str	r0, [r2, #0]
 80025bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80025c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025c4:	f380 8811 	msr	BASEPRI, r0
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f7ff ff70 	bl	80024b4 <vTaskSwitchContext>
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f380 8811 	msr	BASEPRI, r0
 80025dc:	bc09      	pop	{r0, r3}
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	6808      	ldr	r0, [r1, #0]
 80025e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e6:	f01e 0f10 	tst.w	lr, #16
 80025ea:	bf08      	it	eq
 80025ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025f0:	f380 8809 	msr	PSP, r0
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w

08002600 <pxCurrentTCBConst>:
 8002600:	200000a0 	.word	0x200000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop

08002608 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4293      	cmp	r3, r2
 8002618:	bf38      	it	cc
 800261a:	4613      	movcc	r3, r2
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4293      	cmp	r3, r2
 8002638:	bf28      	it	cs
 800263a:	4613      	movcs	r3, r2
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	fbb3 f2f2 	udiv	r2, r3, r2
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	fb01 f202 	mul.w	r2, r1, r2
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	1ad3      	subs	r3, r2, r3
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	4413      	add	r3, r2
 8002682:	3b01      	subs	r3, #1
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ffde 	bl	8002648 <lfs_aligndown>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fd fe01 	bl	80002e4 <__popcountsi2>
 80026e2:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	1ad3      	subs	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8002710:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffee 	bl	8002708 <lfs_fromle32>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffed 	bl	8002736 <lfs_frombe32>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f007 fe94 	bl	800a49c <malloc>
 8002774:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f007 fe90 	bl	800a4ac <free>
#else
    (void)p;
#endif
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68d8      	ldr	r0, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	461a      	mov	r2, r3
 80027c8:	21ff      	movs	r1, #255	; 0xff
 80027ca:	f007 feaf 	bl	800a52c <memset>
    pcache->block = LFS_BLOCK_NULL;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d208      	bcs.n	8002810 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 80027fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002808:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 800280a:	429a      	cmp	r2, r3
 800280c:	f240 811b 	bls.w	8002a46 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8002810:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002814:	e11c      	b.n	8002a50 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002818:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d03f      	beq.n	80028a0 <lfs_bd_read+0xc0>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002826:	429a      	cmp	r2, r3
 8002828:	d13a      	bne.n	80028a0 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8002834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002836:	429a      	cmp	r2, r3
 8002838:	d232      	bcs.n	80028a0 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002840:	429a      	cmp	r2, r3
 8002842:	d324      	bcc.n	800288e <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	1acb      	subs	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	4619      	mov	r1, r3
 8002854:	69b8      	ldr	r0, [r7, #24]
 8002856:	f7ff fee7 	bl	8002628 <lfs_min>
 800285a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002866:	1acb      	subs	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4619      	mov	r1, r3
 800286e:	69f8      	ldr	r0, [r7, #28]
 8002870:	f007 fe34 	bl	800a4dc <memcpy>

                data += diff;
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800287c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800288c:	e0db      	b.n	8002a46 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	4619      	mov	r1, r3
 8002898:	69b8      	ldr	r0, [r7, #24]
 800289a:	f7ff fec5 	bl	8002628 <lfs_min>
 800289e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d13a      	bne.n	8002920 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4413      	add	r3, r2
        if (block == rcache->block &&
 80028b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d232      	bcs.n	8002920 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d324      	bcc.n	800290e <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	1acb      	subs	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	69b8      	ldr	r0, [r7, #24]
 80028d6:	f7ff fea7 	bl	8002628 <lfs_min>
 80028da:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028e6:	1acb      	subs	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4619      	mov	r1, r3
 80028ee:	69f8      	ldr	r0, [r7, #28]
 80028f0:	f007 fdf4 	bl	800a4dc <memcpy>

                data += diff;
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	4413      	add	r3, r2
 80028fa:	61fb      	str	r3, [r7, #28]
                off += diff;
 80028fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800290c:	e09b      	b.n	8002a46 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	4619      	mov	r1, r3
 8002918:	69b8      	ldr	r0, [r7, #24]
 800291a:	f7ff fe85 	bl	8002628 <lfs_min>
 800291e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d336      	bcc.n	8002996 <lfs_bd_read+0x1b6>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	fbb3 f1f2 	udiv	r1, r3, r2
 8002934:	fb01 f202 	mul.w	r2, r1, r2
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d12b      	bne.n	8002996 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002942:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002946:	429a      	cmp	r2, r3
 8002948:	d325      	bcc.n	8002996 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	4619      	mov	r1, r3
 8002952:	69b8      	ldr	r0, [r7, #24]
 8002954:	f7ff fe78 	bl	8002648 <lfs_aligndown>
 8002958:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295e:	685c      	ldr	r4, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800296e:	47a0      	blx	r4
 8002970:	6178      	str	r0, [r7, #20]
            if (err) {
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <lfs_bd_read+0x19c>
                return err;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	e069      	b.n	8002a50 <lfs_bd_read+0x270>
            }

            data += diff;
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800298c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8002994:	e057      	b.n	8002a46 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299e:	429a      	cmp	r2, r3
 80029a0:	d305      	bcc.n	80029ae <lfs_bd_read+0x1ce>
 80029a2:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <lfs_bd_read+0x278>)
 80029a4:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <lfs_bd_read+0x27c>)
 80029a6:	216b      	movs	r1, #107	; 0x6b
 80029a8:	482d      	ldr	r0, [pc, #180]	; (8002a60 <lfs_bd_read+0x280>)
 80029aa:	f007 fd0f 	bl	800a3cc <__assert_func>
        rcache->block = block;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b2:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4619      	mov	r1, r3
 80029bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029be:	f7ff fe43 	bl	8002648 <lfs_aligndown>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80029c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f7ff fe4b 	bl	8002672 <lfs_alignup>
 80029dc:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7ff fe1e 	bl	8002628 <lfs_min>
 80029ec:	4602      	mov	r2, r0
                - rcache->off,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80029f2:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff fe13 	bl	8002628 <lfs_min>
 8002a02:	4602      	mov	r2, r0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a0c:	685c      	ldr	r4, [r3, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	462b      	mov	r3, r5
 8002a26:	47a0      	blx	r4
 8002a28:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	dd05      	ble.n	8002a3c <lfs_bd_read+0x25c>
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <lfs_bd_read+0x284>)
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <lfs_bd_read+0x27c>)
 8002a34:	2176      	movs	r1, #118	; 0x76
 8002a36:	480a      	ldr	r0, [pc, #40]	; (8002a60 <lfs_bd_read+0x280>)
 8002a38:	f007 fcc8 	bl	800a3cc <__assert_func>
        if (err) {
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <lfs_bd_read+0x266>
            return err;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	e004      	b.n	8002a50 <lfs_bd_read+0x270>
    while (size > 0) {
 8002a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f aee4 	bne.w	8002816 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bdb0      	pop	{r4, r5, r7, pc}
 8002a58:	0800bda0 	.word	0x0800bda0
 8002a5c:	0800c890 	.word	0x0800c890
 8002a60:	0800bdc0 	.word	0x0800bdc0
 8002a64:	0800bde4 	.word	0x0800bde4

08002a68 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08e      	sub	sp, #56	; 0x38
 8002a6c:	af04      	add	r7, sp, #16
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	e039      	b.n	8002af8 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8002a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2108      	movs	r1, #8
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fdcb 	bl	8002628 <lfs_min>
 8002a92:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	1ad1      	subs	r1, r2, r3
 8002a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	4413      	add	r3, r2
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	9203      	str	r2, [sp, #12]
 8002aa4:	f107 0210 	add.w	r2, r7, #16
 8002aa8:	9202      	str	r2, [sp, #8]
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fe92 	bl	80027e0 <lfs_bd_read>
 8002abc:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <lfs_bd_cmp+0x60>
            return res;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	e01c      	b.n	8002b02 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	18d1      	adds	r1, r2, r3
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f007 fcf1 	bl	800a4bc <memcmp>
 8002ada:	61b8      	str	r0, [r7, #24]
        if (res) {
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da01      	bge.n	8002aec <lfs_bd_cmp+0x84>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e00a      	b.n	8002b02 <lfs_bd_cmp+0x9a>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e008      	b.n	8002b02 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3c1      	bcc.n	8002a84 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3728      	adds	r7, #40	; 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002b0c:	b5b0      	push	{r4, r5, r7, lr}
 8002b0e:	b08c      	sub	sp, #48	; 0x30
 8002b10:	af04      	add	r7, sp, #16
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b22:	d061      	beq.n	8002be8 <lfs_bd_flush+0xdc>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f113 0f02 	cmn.w	r3, #2
 8002b2c:	d05c      	beq.n	8002be8 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d305      	bcc.n	8002b48 <lfs_bd_flush+0x3c>
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <lfs_bd_flush+0xe8>)
 8002b3e:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <lfs_bd_flush+0xec>)
 8002b40:	219e      	movs	r1, #158	; 0x9e
 8002b42:	482e      	ldr	r0, [pc, #184]	; (8002bfc <lfs_bd_flush+0xf0>)
 8002b44:	f007 fc42 	bl	800a3cc <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f7ff fd8c 	bl	8002672 <lfs_alignup>
 8002b5a:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b60:	689c      	ldr	r4, [r3, #8]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	462b      	mov	r3, r5
 8002b78:	47a0      	blx	r4
 8002b7a:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dd05      	ble.n	8002b8e <lfs_bd_flush+0x82>
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <lfs_bd_flush+0xf4>)
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <lfs_bd_flush+0xec>)
 8002b86:	21a2      	movs	r1, #162	; 0xa2
 8002b88:	481c      	ldr	r0, [pc, #112]	; (8002bfc <lfs_bd_flush+0xf0>)
 8002b8a:	f007 fc1f 	bl	800a3cc <__assert_func>
        if (err) {
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <lfs_bd_flush+0x8c>
            return err;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	e028      	b.n	8002bea <lfs_bd_flush+0xde>
        }

        if (validate) {
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d020      	beq.n	8002be0 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff fdf7 	bl	8002794 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8002bb2:	69f8      	ldr	r0, [r7, #28]
 8002bb4:	9003      	str	r0, [sp, #12]
 8002bb6:	9102      	str	r1, [sp, #8]
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7ff ff50 	bl	8002a68 <lfs_bd_cmp>
 8002bc8:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	da01      	bge.n	8002bd4 <lfs_bd_flush+0xc8>
                return res;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	e00a      	b.n	8002bea <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8002bda:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002bde:	e004      	b.n	8002bea <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff fde5 	bl	80027b2 <lfs_cache_zero>
    }

    return 0;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	0800bdf0 	.word	0x0800bdf0
 8002bf8:	0800c89c 	.word	0x0800c89c
 8002bfc:	0800bdc0 	.word	0x0800bdc0
 8002c00:	0800bde4 	.word	0x0800bde4

08002c04 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fdbd 	bl	8002794 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff ff73 	bl	8002b0c <lfs_bd_flush>
 8002c26:	6178      	str	r0, [r7, #20]
    if (err) {
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <lfs_bd_sync+0x2e>
        return err;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	e011      	b.n	8002c56 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4798      	blx	r3
 8002c40:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dd05      	ble.n	8002c54 <lfs_bd_sync+0x50>
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <lfs_bd_sync+0x5c>)
 8002c4a:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <lfs_bd_sync+0x60>)
 8002c4c:	21c8      	movs	r1, #200	; 0xc8
 8002c4e:	4806      	ldr	r0, [pc, #24]	; (8002c68 <lfs_bd_sync+0x64>)
 8002c50:	f007 fbbc 	bl	800a3cc <__assert_func>
    return err;
 8002c54:	697b      	ldr	r3, [r7, #20]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	0800bde4 	.word	0x0800bde4
 8002c64:	0800c8ac 	.word	0x0800c8ac
 8002c68:	0800bdc0 	.word	0x0800bdc0

08002c6c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	f113 0f02 	cmn.w	r3, #2
 8002c84:	d00b      	beq.n	8002c9e <lfs_bd_prog+0x32>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d305      	bcc.n	8002c9e <lfs_bd_prog+0x32>
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <lfs_bd_prog+0x144>)
 8002c94:	4a47      	ldr	r2, [pc, #284]	; (8002db4 <lfs_bd_prog+0x148>)
 8002c96:	21d3      	movs	r1, #211	; 0xd3
 8002c98:	4847      	ldr	r0, [pc, #284]	; (8002db8 <lfs_bd_prog+0x14c>)
 8002c9a:	f007 fb97 	bl	800a3cc <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	441a      	add	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d977      	bls.n	8002d9e <lfs_bd_prog+0x132>
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <lfs_bd_prog+0x150>)
 8002cb0:	4a40      	ldr	r2, [pc, #256]	; (8002db4 <lfs_bd_prog+0x148>)
 8002cb2:	21d4      	movs	r1, #212	; 0xd4
 8002cb4:	4840      	ldr	r0, [pc, #256]	; (8002db8 <lfs_bd_prog+0x14c>)
 8002cb6:	f007 fb89 	bl	800a3cc <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d151      	bne.n	8002d68 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8002cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d34c      	bcc.n	8002d68 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	4413      	add	r3, r2
                off >= pcache->off &&
 8002cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d243      	bcs.n	8002d68 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8002cee:	4413      	add	r3, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cf4:	f7ff fc98 	bl	8002628 <lfs_min>
 8002cf8:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d04:	1acb      	subs	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	69f9      	ldr	r1, [r7, #28]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f007 fbe5 	bl	800a4dc <memcpy>

            data += diff;
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8002d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6898      	ldr	r0, [r3, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	f7ff fc66 	bl	8002608 <lfs_max>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d126      	bne.n	8002d9e <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff fed8 	bl	8002b0c <lfs_bd_flush>
 8002d5c:	6178      	str	r0, [r7, #20]
                if (err) {
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01c      	beq.n	8002d9e <lfs_bd_prog+0x132>
                    return err;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	e01e      	b.n	8002da6 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d70:	d005      	beq.n	8002d7e <lfs_bd_prog+0x112>
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <lfs_bd_prog+0x154>)
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <lfs_bd_prog+0x148>)
 8002d76:	21f1      	movs	r1, #241	; 0xf1
 8002d78:	480f      	ldr	r0, [pc, #60]	; (8002db8 <lfs_bd_prog+0x14c>)
 8002d7a:	f007 fb27 	bl	800a3cc <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d82:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d8e:	f7ff fc5b 	bl	8002648 <lfs_aligndown>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d18a      	bne.n	8002cba <lfs_bd_prog+0x4e>
    }

    return 0;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	0800be18 	.word	0x0800be18
 8002db4:	0800c8b8 	.word	0x0800c8b8
 8002db8:	0800bdc0 	.word	0x0800bdc0
 8002dbc:	0800be54 	.word	0x0800be54
 8002dc0:	0800be78 	.word	0x0800be78

08002dc4 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d305      	bcc.n	8002de6 <lfs_bd_erase+0x22>
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <lfs_bd_erase+0x54>)
 8002ddc:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <lfs_bd_erase+0x58>)
 8002dde:	21ff      	movs	r1, #255	; 0xff
 8002de0:	480f      	ldr	r0, [pc, #60]	; (8002e20 <lfs_bd_erase+0x5c>)
 8002de2:	f007 faf3 	bl	800a3cc <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	4610      	mov	r0, r2
 8002df4:	4798      	blx	r3
 8002df6:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	dd06      	ble.n	8002e0c <lfs_bd_erase+0x48>
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <lfs_bd_erase+0x60>)
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <lfs_bd_erase+0x58>)
 8002e02:	f240 1101 	movw	r1, #257	; 0x101
 8002e06:	4806      	ldr	r0, [pc, #24]	; (8002e20 <lfs_bd_erase+0x5c>)
 8002e08:	f007 fae0 	bl	800a3cc <__assert_func>
    return err;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	0800bda0 	.word	0x0800bda0
 8002e1c:	0800c8c4 	.word	0x0800c8c4
 8002e20:	0800bdc0 	.word	0x0800bdc0
 8002e24:	0800bde4 	.word	0x0800bde4

08002e28 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e62:	d005      	beq.n	8002e70 <lfs_pair_isnull+0x1e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6e:	d101      	bne.n	8002e74 <lfs_pair_isnull+0x22>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <lfs_pair_isnull+0x24>
 8002e74:	2300      	movs	r3, #0
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d017      	beq.n	8002ece <lfs_pair_cmp+0x46>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d00f      	beq.n	8002ece <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d008      	beq.n	8002ece <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d001      	beq.n	8002ece <lfs_pair_cmp+0x46>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <lfs_pair_cmp+0x48>
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d107      	bne.n	8002f02 <lfs_pair_sync+0x26>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	3304      	adds	r3, #4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d00d      	beq.n	8002f1e <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d108      	bne.n	8002f22 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d101      	bne.n	8002f22 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <lfs_pair_sync+0x48>
 8002f22:	2300      	movs	r3, #0
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fbe0 	bl	8002708 <lfs_fromle32>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1d1c      	adds	r4, r3, #4
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7ff fbd5 	bl	8002708 <lfs_fromle32>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6023      	str	r3, [r4, #0]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}

08002f6a <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8002f6a:	b590      	push	{r4, r7, lr}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fbd1 	bl	800271e <lfs_tole32>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	1d1c      	adds	r4, r3, #4
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f7ff fbc6 	bl	800271e <lfs_tole32>
 8002f92:	4603      	mov	r3, r0
 8002f94:	6023      	str	r3, [r4, #0]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}

08002f9e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	0fdb      	lsrs	r3, r3, #31
 8002fac:	b2db      	uxtb	r3, r3
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	059b      	lsls	r3, r3, #22
 8002fc6:	159b      	asrs	r3, r3, #22
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0d1b      	lsrs	r3, r3, #20
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff2:	b29b      	uxth	r3, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0d1b      	lsrs	r3, r3, #20
 800300c:	b29b      	uxth	r3, r3
 800300e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003012:	b29b      	uxth	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	0d1b      	lsrs	r3, r3, #20
 800302c:	b2db      	uxtb	r3, r3
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffec 	bl	8003020 <lfs_tag_chunk>
 8003048:	4603      	mov	r3, r0
 800304a:	b25b      	sxtb	r3, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	b29b      	uxth	r3, r3
 8003062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003066:	b29b      	uxth	r3, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ff8f 	bl	8002fba <lfs_tag_isdelete>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ffe5 	bl	8003074 <lfs_tag_size>
 80030aa:	4603      	mov	r3, r0
 80030ac:	3304      	adds	r3, #4
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e012      	b.n	80030ec <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4403      	add	r3, r0
 80030e2:	404a      	eors	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	dde9      	ble.n	80030c6 <lfs_gstate_xor+0x10>
    }
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e00b      	b.n	8003126 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <lfs_gstate_iszero+0x20>
            return false;
 800311c:	2300      	movs	r3, #0
 800311e:	e006      	b.n	800312e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b02      	cmp	r3, #2
 800312a:	ddf0      	ble.n	800310e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800312c:	2301      	movs	r3, #1
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff94 	bl	8003074 <lfs_tag_size>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff81 	bl	8003074 <lfs_tag_size>
 8003172:	4603      	mov	r3, r0
 8003174:	b2db      	uxtb	r3, r3
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff28 	bl	8002fe0 <lfs_tag_type1>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff14 	bl	8002fe0 <lfs_tag_type1>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <lfs_gstate_hasmovehere+0x30>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fe5f 	bl	8002e88 <lfs_pair_cmp>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <lfs_gstate_hasmovehere+0x30>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <lfs_gstate_hasmovehere+0x32>
 80031d4:	2300      	movs	r3, #0
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fa89 	bl	8002708 <lfs_fromle32>
 80031f6:	4602      	mov	r2, r0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fa81 	bl	8002708 <lfs_fromle32>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fa79 	bl	8002708 <lfs_fromle32>
 8003216:	4602      	mov	r2, r0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fa74 	bl	800271e <lfs_tole32>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fa6c 	bl	800271e <lfs_tole32>
 8003246:	4602      	mov	r2, r0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fa64 	bl	800271e <lfs_tole32>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	609a      	str	r2, [r3, #8]
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fa49 	bl	8002708 <lfs_fromle32>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fa41 	bl	8002708 <lfs_fromle32>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	605a      	str	r2, [r3, #4]
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fa3c 	bl	800271e <lfs_tole32>
 80032a6:	4602      	mov	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fa34 	bl	800271e <lfs_tole32>
 80032b6:	4602      	mov	r2, r0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	605a      	str	r2, [r3, #4]
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fa19 	bl	8002708 <lfs_fromle32>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fa11 	bl	8002708 <lfs_fromle32>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fa09 	bl	8002708 <lfs_fromle32>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fa01 	bl	8002708 <lfs_fromle32>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f9f9 	bl	8002708 <lfs_fromle32>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff f9f1 	bl	8002708 <lfs_fromle32>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	615a      	str	r2, [r3, #20]
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f9ec 	bl	800271e <lfs_tole32>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f9e4 	bl	800271e <lfs_tole32>
 8003356:	4602      	mov	r2, r0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff f9dc 	bl	800271e <lfs_tole32>
 8003366:	4602      	mov	r2, r0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f9d4 	bl	800271e <lfs_tole32>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f9cc 	bl	800271e <lfs_tole32>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f9c4 	bl	800271e <lfs_tole32>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	615a      	str	r2, [r3, #20]
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e009      	b.n	80033c8 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d101      	bne.n	80033c2 <lfs_mlist_isopen+0x1e>
            return true;
 80033be:	2301      	movs	r3, #1
 80033c0:	e007      	b.n	80033d2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f1      	bne.n	80033b4 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3328      	adds	r3, #40	; 0x28
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e00d      	b.n	800340c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d105      	bne.n	8003406 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]
            break;
 8003404:	e007      	b.n	8003416 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ed      	bne.n	80033f0 <lfs_mlist_remove+0x12>
        }
    }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	629a      	str	r2, [r3, #40]	; 0x28
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4413      	add	r3, r2
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003468:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800346a:	fbb3 f1f2 	udiv	r1, r3, r2
 800346e:	fb01 f202 	mul.w	r2, r1, r2
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	d212      	bcs.n	80034a6 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	440a      	add	r2, r1
 800348c:	6811      	ldr	r1, [r2, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4403      	add	r3, r0
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffe4 	bl	80034b4 <lfs_alloc_ack>
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80034fe:	e04f      	b.n	80035a0 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d132      	bne.n	80035a0 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4413      	add	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003546:	6a12      	ldr	r2, [r2, #32]
 8003548:	fbb3 f1f2 	udiv	r1, r3, r2
 800354c:	fb01 f202 	mul.w	r2, r1, r2
 8003550:	1a9a      	subs	r2, r3, r2
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8003556:	e009      	b.n	800356c <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	429a      	cmp	r2, r3
 8003576:	d011      	beq.n	800359c <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1dd      	bne.n	8003558 <lfs_alloc+0x64>
                }

                return 0;
 800359c:	2300      	movs	r3, #0
 800359e:	e050      	b.n	8003642 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1a9      	bne.n	8003500 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10f      	bne.n	80035d4 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	4413      	add	r3, r2
 80035be:	4a23      	ldr	r2, [pc, #140]	; (800364c <lfs_alloc+0x158>)
 80035c0:	9200      	str	r2, [sp, #0]
 80035c2:	f240 2247 	movw	r2, #583	; 0x247
 80035c6:	4922      	ldr	r1, [pc, #136]	; (8003650 <lfs_alloc+0x15c>)
 80035c8:	4822      	ldr	r0, [pc, #136]	; (8003654 <lfs_alloc+0x160>)
 80035ca:	f007 fb85 	bl	800acd8 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80035ce:	f06f 031b 	mvn.w	r3, #27
 80035d2:	e036      	b.n	8003642 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035e2:	6a12      	ldr	r2, [r2, #32]
 80035e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80035e8:	fb01 f202 	mul.w	r2, r1, r2
 80035ec:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	00da      	lsls	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f7ff f811 	bl	8002628 <lfs_min>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	461a      	mov	r2, r3
 800361e:	2100      	movs	r1, #0
 8003620:	f006 ff84 	bl	800a52c <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8003624:	2301      	movs	r3, #1
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	490b      	ldr	r1, [pc, #44]	; (8003658 <lfs_alloc+0x164>)
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f004 fc96 	bl	8007f5c <lfs_fs_rawtraverse>
 8003630:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f43f af62 	beq.w	80034fe <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff49 	bl	80034d2 <lfs_alloc_drop>
            return err;
 8003640:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	0800bec4 	.word	0x0800bec4
 8003650:	0800bdc0 	.word	0x0800bdc0
 8003654:	0800be9c 	.word	0x0800be9c
 8003658:	08003447 	.word	0x08003447

0800365c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b08f      	sub	sp, #60	; 0x3c
 8003660:	af04      	add	r7, sp, #16
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	333c      	adds	r3, #60	; 0x3c
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fd8e 	bl	80031a4 <lfs_gstate_hasmovehere>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80b9 	beq.w	8003802 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fcdf 	bl	8003054 <lfs_tag_id>
 8003696:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80b2 	beq.w	8003802 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fcd6 	bl	8003054 <lfs_tag_id>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461c      	mov	r4, r3
 80036ac:	6838      	ldr	r0, [r7, #0]
 80036ae:	f7ff fcd1 	bl	8003054 <lfs_tag_id>
 80036b2:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 80036b4:	429c      	cmp	r4, r3
 80036b6:	f200 80a4 	bhi.w	8003802 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80036c0:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80036c2:	e09e      	b.n	8003802 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fce1 	bl	800308e <lfs_tag_dsize>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2204      	movs	r2, #4
 80036e0:	9203      	str	r2, [sp, #12]
 80036e2:	f107 0210 	add.w	r2, r7, #16
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	9201      	str	r2, [sp, #4]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2304      	movs	r3, #4
 80036f0:	460a      	mov	r2, r1
 80036f2:	2100      	movs	r1, #0
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff f873 	bl	80027e0 <lfs_bd_read>
 80036fa:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <lfs_dir_getslice+0xaa>
            return err;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	e089      	b.n	800381a <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f814 	bl	8002736 <lfs_frombe32>
 800370e:	4602      	mov	r2, r0
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4053      	eors	r3, r2
 8003714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003718:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fc9a 	bl	8003054 <lfs_tag_id>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d02b      	beq.n	800377e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003726:	69f8      	ldr	r0, [r7, #28]
 8003728:	f7ff fc5a 	bl	8002fe0 <lfs_tag_type1>
 800372c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d124      	bne.n	800377e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8003734:	69f8      	ldr	r0, [r7, #28]
 8003736:	f7ff fc8d 	bl	8003054 <lfs_tag_id>
 800373a:	4603      	mov	r3, r0
 800373c:	461c      	mov	r4, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fc85 	bl	8003054 <lfs_tag_id>
 800374a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800374c:	429c      	cmp	r4, r3
 800374e:	d816      	bhi.n	800377e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	1ad2      	subs	r2, r2, r3
 8003756:	4b33      	ldr	r3, [pc, #204]	; (8003824 <lfs_dir_getslice+0x1c8>)
 8003758:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800375a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800375e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	429a      	cmp	r2, r3
 8003766:	d102      	bne.n	800376e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8003768:	f06f 0301 	mvn.w	r3, #1
 800376c:	e055      	b.n	800381a <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800376e:	69f8      	ldr	r0, [r7, #28]
 8003770:	f7ff fc63 	bl	800303a <lfs_tag_splice>
 8003774:	4603      	mov	r3, r0
 8003776:	029a      	lsls	r2, r3, #10
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	4413      	add	r3, r2
 800377c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	1ad2      	subs	r2, r2, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	405a      	eors	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d138      	bne.n	8003802 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8003790:	69f8      	ldr	r0, [r7, #28]
 8003792:	f7ff fc12 	bl	8002fba <lfs_tag_isdelete>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 800379c:	f06f 0301 	mvn.w	r3, #1
 80037a0:	e03b      	b.n	800381a <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80037a2:	69f8      	ldr	r0, [r7, #28]
 80037a4:	f7ff fc66 	bl	8003074 <lfs_tag_size>
 80037a8:	4603      	mov	r3, r0
 80037aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe ff3b 	bl	8002628 <lfs_min>
 80037b2:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80037ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037be:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80037c0:	3204      	adds	r2, #4
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	9103      	str	r1, [sp, #12]
 80037c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037c8:	9102      	str	r1, [sp, #8]
 80037ca:	9201      	str	r2, [sp, #4]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4602      	mov	r2, r0
 80037d2:	2100      	movs	r1, #0
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff f803 	bl	80027e0 <lfs_bd_read>
 80037da:	61b8      	str	r0, [r7, #24]
            if (err) {
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <lfs_dir_getslice+0x18a>
                return err;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	e019      	b.n	800381a <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80037e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	18d0      	adds	r0, r2, r3
 80037ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	2100      	movs	r1, #0
 80037f6:	f006 fe99 	bl	800a52c <memset>

            return tag + gdiff;
 80037fa:	6a3a      	ldr	r2, [r7, #32]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	e00b      	b.n	800381a <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fc42 	bl	800308e <lfs_tag_dsize>
 800380a:	4603      	mov	r3, r0
 800380c:	3304      	adds	r3, #4
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	429a      	cmp	r2, r3
 8003812:	f4bf af57 	bcs.w	80036c4 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8003816:	f06f 0301 	mvn.w	r3, #1
}
 800381a:	4618      	mov	r0, r3
 800381c:	372c      	adds	r7, #44	; 0x2c
 800381e:	46bd      	mov	sp, r7
 8003820:	bd90      	pop	{r4, r7, pc}
 8003822:	bf00      	nop
 8003824:	000ffc00 	.word	0x000ffc00

08003828 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af04      	add	r7, sp, #16
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	f7ff fc1c 	bl	8003074 <lfs_tag_size>
 800383c:	4603      	mov	r3, r0
 800383e:	9302      	str	r3, [sp, #8]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff ff04 	bl	800365c <lfs_dir_getslice>
 8003854:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800385e:	b580      	push	{r7, lr}
 8003860:	b08c      	sub	sp, #48	; 0x30
 8003862:	af04      	add	r7, sp, #16
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8003870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003874:	441a      	add	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	429a      	cmp	r2, r3
 800387e:	f240 80c0 	bls.w	8003a02 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8003882:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003886:	e0c1      	b.n	8003a0c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03f      	beq.n	8003912 <lfs_dir_getread+0xb4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f113 0f02 	cmn.w	r3, #2
 800389a:	d13a      	bne.n	8003912 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80038a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d232      	bcs.n	8003912 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d324      	bcc.n	8003900 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	1acb      	subs	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f7fe feae 	bl	8002628 <lfs_min>
 80038cc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038d8:	1acb      	subs	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4619      	mov	r1, r3
 80038e0:	69f8      	ldr	r0, [r7, #28]
 80038e2:	f006 fdfb 	bl	800a4dc <memcpy>

                data += diff;
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	4413      	add	r3, r2
 80038ec:	61fb      	str	r3, [r7, #28]
                off += diff;
 80038ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	4413      	add	r3, r2
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80038f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80038fe:	e080      	b.n	8003a02 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	4619      	mov	r1, r3
 800390a:	69b8      	ldr	r0, [r7, #24]
 800390c:	f7fe fe8c 	bl	8002628 <lfs_min>
 8003910:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f113 0f02 	cmn.w	r3, #2
 800391a:	d13a      	bne.n	8003992 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003928:	429a      	cmp	r2, r3
 800392a:	d232      	bcs.n	8003992 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	429a      	cmp	r2, r3
 8003934:	d324      	bcc.n	8003980 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003940:	1acb      	subs	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	4619      	mov	r1, r3
 8003946:	69b8      	ldr	r0, [r7, #24]
 8003948:	f7fe fe6e 	bl	8002628 <lfs_min>
 800394c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003958:	1acb      	subs	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4619      	mov	r1, r3
 8003960:	69f8      	ldr	r0, [r7, #28]
 8003962:	f006 fdbb 	bl	800a4dc <memcpy>

                data += diff;
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4413      	add	r3, r2
 800396c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800396e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	4413      	add	r3, r2
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800397e:	e040      	b.n	8003a02 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	4619      	mov	r1, r3
 800398a:	69b8      	ldr	r0, [r7, #24]
 800398c:	f7fe fe4c 	bl	8002628 <lfs_min>
 8003990:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	4619      	mov	r1, r3
 80039a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039a4:	f7fe fe50 	bl	8002648 <lfs_aligndown>
 80039a8:	4602      	mov	r2, r0
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80039ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	441a      	add	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4619      	mov	r1, r3
 80039bc:	4610      	mov	r0, r2
 80039be:	f7fe fe58 	bl	8002672 <lfs_alignup>
 80039c2:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7fe fe2b 	bl	8002628 <lfs_min>
 80039d2:	4602      	mov	r2, r0
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	6889      	ldr	r1, [r1, #8]
 80039e4:	9102      	str	r1, [sp, #8]
 80039e6:	9201      	str	r2, [sp, #4]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fe33 	bl	800365c <lfs_dir_getslice>
 80039f6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	da01      	bge.n	8003a02 <lfs_dir_getread+0x1a4>
            return err;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	e004      	b.n	8003a0c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f af3f 	bne.w	8003888 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <lfs_dir_traverse_filter+0x1e>
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <lfs_dir_traverse_filter+0xac>)
 8003a30:	e000      	b.n	8003a34 <lfs_dir_traverse_filter+0x20>
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003a34:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	405a      	eors	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d014      	beq.n	8003a70 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fab5 	bl	8002fba <lfs_tag_isdelete>
 8003a50:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <lfs_dir_traverse_filter+0xac>)
 8003a5a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <lfs_dir_traverse_filter+0xb4>)
 8003a62:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003a64:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003a68:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d104      	bne.n	8003a7a <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
        return true;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e01e      	b.n	8003ab8 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003a7a:	68b8      	ldr	r0, [r7, #8]
 8003a7c:	f7ff fab0 	bl	8002fe0 <lfs_tag_type1>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d116      	bne.n	8003ab6 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8003a88:	68b8      	ldr	r0, [r7, #8]
 8003a8a:	f7ff fae3 	bl	8003054 <lfs_tag_id>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461c      	mov	r4, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fadc 	bl	8003054 <lfs_tag_id>
 8003a9c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003a9e:	429c      	cmp	r4, r3
 8003aa0:	d809      	bhi.n	8003ab6 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	f7ff fac9 	bl	800303a <lfs_tag_splice>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	029a      	lsls	r2, r3, #10
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	441a      	add	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	601a      	str	r2, [r3, #0]
    }

    return false;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	7ffffc00 	.word	0x7ffffc00
 8003ac4:	700ffc00 	.word	0x700ffc00
 8003ac8:	000ffc00 	.word	0x000ffc00

08003acc <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b0c1      	sub	sp, #260	; 0x104
 8003ad0:	af04      	add	r7, sp, #16
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f7ff fad4 	bl	800308e <lfs_tag_dsize>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	441a      	add	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d237      	bcs.n	8003b64 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	f7ff faca 	bl	800308e <lfs_tag_dsize>
 8003afa:	4602      	mov	r2, r0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003b10:	9202      	str	r2, [sp, #8]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	9201      	str	r2, [sp, #4]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2304      	movs	r3, #4
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7fe fe5e 	bl	80027e0 <lfs_bd_read>
 8003b24:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8003b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <lfs_dir_traverse+0x6a>
                    return err;
 8003b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b34:	e3a6      	b.n	8004284 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fdfc 	bl	8002736 <lfs_frombe32>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4053      	eors	r3, r2
 8003b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b48:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8003b56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	e01b      	b.n	8003b9c <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	dd13      	ble.n	8003b94 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8003b6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8003b74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8003b7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b82:	3308      	adds	r3, #8
 8003b84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8003b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b92:	e003      	b.n	8003b9c <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8003b9a:	e2a2      	b.n	80040e2 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8003b9c:	4b7e      	ldr	r3, [pc, #504]	; (8003d98 <lfs_dir_traverse+0x2cc>)
 8003b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	405a      	eors	r2, r3
 8003baa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003bae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f040 8285 	bne.w	80040c6 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8003bbc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003bc0:	f7ff fa48 	bl	8003054 <lfs_tag_id>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80f0 	beq.w	8003dac <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8003bcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d906      	bls.n	8003be2 <lfs_dir_traverse+0x116>
 8003bd4:	4b71      	ldr	r3, [pc, #452]	; (8003d9c <lfs_dir_traverse+0x2d0>)
 8003bd6:	4a72      	ldr	r2, [pc, #456]	; (8003da0 <lfs_dir_traverse+0x2d4>)
 8003bd8:	f240 314e 	movw	r1, #846	; 0x34e
 8003bdc:	4871      	ldr	r0, [pc, #452]	; (8003da4 <lfs_dir_traverse+0x2d8>)
 8003bde:	f006 fbf5 	bl	800a3cc <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8003be2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003be4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	33f0      	adds	r3, #240	; 0xf0
 8003bf2:	443b      	add	r3, r7
 8003bf4:	3b98      	subs	r3, #152	; 0x98
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	33f0      	adds	r3, #240	; 0xf0
 8003c08:	443b      	add	r3, r7
 8003c0a:	3b94      	subs	r3, #148	; 0x94
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	33f0      	adds	r3, #240	; 0xf0
 8003c1e:	443b      	add	r3, r7
 8003c20:	3b90      	subs	r3, #144	; 0x90
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	33f0      	adds	r3, #240	; 0xf0
 8003c34:	443b      	add	r3, r7
 8003c36:	3b8c      	subs	r3, #140	; 0x8c
 8003c38:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	33f0      	adds	r3, #240	; 0xf0
 8003c4c:	443b      	add	r3, r7
 8003c4e:	3b88      	subs	r3, #136	; 0x88
 8003c50:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	33f0      	adds	r3, #240	; 0xf0
 8003c64:	443b      	add	r3, r7
 8003c66:	3b84      	subs	r3, #132	; 0x84
 8003c68:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	33f0      	adds	r3, #240	; 0xf0
 8003c7c:	443b      	add	r3, r7
 8003c7e:	3b80      	subs	r3, #128	; 0x80
 8003c80:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	33f0      	adds	r3, #240	; 0xf0
 8003c94:	443b      	add	r3, r7
 8003c96:	3b7c      	subs	r3, #124	; 0x7c
 8003c98:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	33f0      	adds	r3, #240	; 0xf0
 8003cac:	443b      	add	r3, r7
 8003cae:	3b7a      	subs	r3, #122	; 0x7a
 8003cb0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	33f0      	adds	r3, #240	; 0xf0
 8003cc4:	443b      	add	r3, r7
 8003cc6:	3b78      	subs	r3, #120	; 0x78
 8003cc8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003ccc:	801a      	strh	r2, [r3, #0]
 8003cce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	33f0      	adds	r3, #240	; 0xf0
 8003cdc:	443b      	add	r3, r7
 8003cde:	3b74      	subs	r3, #116	; 0x74
 8003ce0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	33f0      	adds	r3, #240	; 0xf0
 8003cf4:	443b      	add	r3, r7
 8003cf6:	3b70      	subs	r3, #112	; 0x70
 8003cf8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	33f0      	adds	r3, #240	; 0xf0
 8003d0c:	443b      	add	r3, r7
 8003d0e:	3b6c      	subs	r3, #108	; 0x6c
 8003d10:	6019      	str	r1, [r3, #0]
 8003d12:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	33f0      	adds	r3, #240	; 0xf0
 8003d20:	443b      	add	r3, r7
 8003d22:	3b68      	subs	r3, #104	; 0x68
 8003d24:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	33f0      	adds	r3, #240	; 0xf0
 8003d38:	443b      	add	r3, r7
 8003d3a:	3b68      	subs	r3, #104	; 0x68
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d46:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8003d4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <lfs_dir_traverse+0x2dc>)
 8003d74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8003d78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3328      	adds	r3, #40	; 0x28
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3304      	adds	r3, #4
 8003d90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d94:	e6a4      	b.n	8003ae0 <lfs_dir_traverse+0x14>
 8003d96:	bf00      	nop
 8003d98:	7ff00000 	.word	0x7ff00000
 8003d9c:	0800bec8 	.word	0x0800bec8
 8003da0:	0800c8d4 	.word	0x0800c8d4
 8003da4:	0800bdc0 	.word	0x0800bdc0
 8003da8:	08003a15 	.word	0x08003a15
                continue;
            }
        }

popped:
 8003dac:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8003dae:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003db2:	f7ff f94f 	bl	8003054 <lfs_tag_id>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d015      	beq.n	8003de8 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f948 	bl	8003054 <lfs_tag_id>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8003dc8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f200 817c 	bhi.w	80040ca <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff f93d 	bl	8003054 <lfs_tag_id>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f240 8171 	bls.w	80040ca <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff f908 	bl	8003000 <lfs_tag_type3>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f43f ae74 	beq.w	8003ae0 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f900 	bl	8003000 <lfs_tag_type3>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	f240 1301 	movw	r3, #257	; 0x101
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 80e0 	bne.w	8003fce <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8003e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e12:	4ab1      	ldr	r2, [pc, #708]	; (80040d8 <lfs_dir_traverse+0x60c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	f000 815a 	beq.w	80040ce <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8003e1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	33f0      	adds	r3, #240	; 0xf0
 8003e28:	443b      	add	r3, r7
 8003e2a:	3b98      	subs	r3, #152	; 0x98
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	233c      	movs	r3, #60	; 0x3c
 8003e30:	461a      	mov	r2, r3
 8003e32:	2100      	movs	r1, #0
 8003e34:	f006 fb7a 	bl	800a52c <memset>
 8003e38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	33f0      	adds	r3, #240	; 0xf0
 8003e46:	443b      	add	r3, r7
 8003e48:	3b98      	subs	r3, #152	; 0x98
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	33f0      	adds	r3, #240	; 0xf0
 8003e5c:	443b      	add	r3, r7
 8003e5e:	3b94      	subs	r3, #148	; 0x94
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	33f0      	adds	r3, #240	; 0xf0
 8003e72:	443b      	add	r3, r7
 8003e74:	3b90      	subs	r3, #144	; 0x90
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	33f0      	adds	r3, #240	; 0xf0
 8003e88:	443b      	add	r3, r7
 8003e8a:	3b8c      	subs	r3, #140	; 0x8c
 8003e8c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	33f0      	adds	r3, #240	; 0xf0
 8003ea0:	443b      	add	r3, r7
 8003ea2:	3b88      	subs	r3, #136	; 0x88
 8003ea4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	33f0      	adds	r3, #240	; 0xf0
 8003eb8:	443b      	add	r3, r7
 8003eba:	3b84      	subs	r3, #132	; 0x84
 8003ebc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	33f0      	adds	r3, #240	; 0xf0
 8003ed0:	443b      	add	r3, r7
 8003ed2:	3b80      	subs	r3, #128	; 0x80
 8003ed4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	33f0      	adds	r3, #240	; 0xf0
 8003ee8:	443b      	add	r3, r7
 8003eea:	3b7c      	subs	r3, #124	; 0x7c
 8003eec:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	33f0      	adds	r3, #240	; 0xf0
 8003f00:	443b      	add	r3, r7
 8003f02:	3b7a      	subs	r3, #122	; 0x7a
 8003f04:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	33f0      	adds	r3, #240	; 0xf0
 8003f18:	443b      	add	r3, r7
 8003f1a:	3b78      	subs	r3, #120	; 0x78
 8003f1c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	33f0      	adds	r3, #240	; 0xf0
 8003f30:	443b      	add	r3, r7
 8003f32:	3b74      	subs	r3, #116	; 0x74
 8003f34:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	33f0      	adds	r3, #240	; 0xf0
 8003f48:	443b      	add	r3, r7
 8003f4a:	3b70      	subs	r3, #112	; 0x70
 8003f4c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003f50:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8003f52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f56:	3301      	adds	r3, #1
 8003f58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f888 	bl	8003074 <lfs_tag_size>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f871 	bl	8003054 <lfs_tag_id>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	60bb      	str	r3, [r7, #8]
            off = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f86:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8003f94:	4b51      	ldr	r3, [pc, #324]	; (80040dc <lfs_dir_traverse+0x610>)
 8003f96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8003f9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8003fa2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003fa6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8003faa:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8003fb4:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8003fb8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8003fc4:	4413      	add	r3, r2
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8003fcc:	e588      	b.n	8003ae0 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8003fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f815 	bl	8003000 <lfs_tag_type3>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8003fdc:	d159      	bne.n	8004092 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fe4:	e04b      	b.n	800407e <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8003fee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004000:	4413      	add	r3, r2
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004008:	051c      	lsls	r4, r3, #20
 800400a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff f821 	bl	8003054 <lfs_tag_id>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800401a:	4413      	add	r3, r2
 800401c:	029b      	lsls	r3, r3, #10
 800401e:	ea44 0103 	orr.w	r1, r4, r3
 8004022:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	461a      	mov	r2, r3
 8004030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004034:	4413      	add	r3, r2
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800403a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800403e:	4613      	mov	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	461a      	mov	r2, r3
 8004048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800404c:	4413      	add	r3, r2
 800404e:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004050:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004054:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004058:	4798      	blx	r3
 800405a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 800405e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004062:	2b00      	cmp	r3, #0
 8004064:	da02      	bge.n	800406c <lfs_dir_traverse+0x5a0>
                    return res;
 8004066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800406a:	e10b      	b.n	8004284 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 800406c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d12e      	bne.n	80040d2 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004078:	3301      	adds	r3, #1
 800407a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fff7 	bl	8003074 <lfs_tag_size>
 8004086:	4602      	mov	r2, r0
 8004088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408c:	4293      	cmp	r3, r2
 800408e:	d3aa      	bcc.n	8003fe6 <lfs_dir_traverse+0x51a>
 8004090:	e526      	b.n	8003ae0 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8004092:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8004096:	029a      	lsls	r2, r3, #10
 8004098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409a:	18d1      	adds	r1, r2, r3
 800409c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040a0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040a4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80040a8:	4798      	blx	r3
 80040aa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80040ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da02      	bge.n	80040bc <lfs_dir_traverse+0x5f0>
                return res;
 80040b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040ba:	e0e3      	b.n	8004284 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 80040bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10d      	bne.n	80040e0 <lfs_dir_traverse+0x614>
 80040c4:	e50c      	b.n	8003ae0 <lfs_dir_traverse+0x14>
                continue;
 80040c6:	bf00      	nop
 80040c8:	e50a      	b.n	8003ae0 <lfs_dir_traverse+0x14>
            continue;
 80040ca:	bf00      	nop
 80040cc:	e508      	b.n	8003ae0 <lfs_dir_traverse+0x14>
                continue;
 80040ce:	bf00      	nop
 80040d0:	e506      	b.n	8003ae0 <lfs_dir_traverse+0x14>
                    break;
 80040d2:	bf00      	nop
        {
 80040d4:	e504      	b.n	8003ae0 <lfs_dir_traverse+0x14>
 80040d6:	bf00      	nop
 80040d8:	08003a15 	.word	0x08003a15
 80040dc:	600ffc00 	.word	0x600ffc00
                break;
 80040e0:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80040e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80ca 	beq.w	8004280 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80040ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	33f0      	adds	r3, #240	; 0xf0
 80040fc:	443b      	add	r3, r7
 80040fe:	3b98      	subs	r3, #152	; 0x98
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8004104:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	33f0      	adds	r3, #240	; 0xf0
 8004114:	443b      	add	r3, r7
 8004116:	3b94      	subs	r3, #148	; 0x94
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800411c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004120:	1e5a      	subs	r2, r3, #1
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	33f0      	adds	r3, #240	; 0xf0
 800412c:	443b      	add	r3, r7
 800412e:	3b90      	subs	r3, #144	; 0x90
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8004134:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004138:	1e5a      	subs	r2, r3, #1
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	33f0      	adds	r3, #240	; 0xf0
 8004144:	443b      	add	r3, r7
 8004146:	3b8c      	subs	r3, #140	; 0x8c
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800414e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004152:	1e5a      	subs	r2, r3, #1
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	33f0      	adds	r3, #240	; 0xf0
 800415e:	443b      	add	r3, r7
 8004160:	3b88      	subs	r3, #136	; 0x88
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8004168:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800416c:	1e5a      	subs	r2, r3, #1
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	33f0      	adds	r3, #240	; 0xf0
 8004178:	443b      	add	r3, r7
 800417a:	3b84      	subs	r3, #132	; 0x84
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8004182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	33f0      	adds	r3, #240	; 0xf0
 8004192:	443b      	add	r3, r7
 8004194:	3b80      	subs	r3, #128	; 0x80
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 800419c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	33f0      	adds	r3, #240	; 0xf0
 80041ac:	443b      	add	r3, r7
 80041ae:	3b7c      	subs	r3, #124	; 0x7c
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 80041b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041ba:	1e5a      	subs	r2, r3, #1
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	33f0      	adds	r3, #240	; 0xf0
 80041c6:	443b      	add	r3, r7
 80041c8:	3b7a      	subs	r3, #122	; 0x7a
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80041d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041d4:	1e5a      	subs	r2, r3, #1
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	33f0      	adds	r3, #240	; 0xf0
 80041e0:	443b      	add	r3, r7
 80041e2:	3b78      	subs	r3, #120	; 0x78
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80041ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041ee:	1e5a      	subs	r2, r3, #1
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	33f0      	adds	r3, #240	; 0xf0
 80041fa:	443b      	add	r3, r7
 80041fc:	3b74      	subs	r3, #116	; 0x74
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8004204:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004208:	1e5a      	subs	r2, r3, #1
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	33f0      	adds	r3, #240	; 0xf0
 8004214:	443b      	add	r3, r7
 8004216:	3b70      	subs	r3, #112	; 0x70
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800421e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	33f0      	adds	r3, #240	; 0xf0
 800422e:	443b      	add	r3, r7
 8004230:	3b6c      	subs	r3, #108	; 0x6c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8004236:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800423a:	1e5a      	subs	r2, r3, #1
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	33f0      	adds	r3, #240	; 0xf0
 8004246:	443b      	add	r3, r7
 8004248:	3b68      	subs	r3, #104	; 0x68
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8004250:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	33f0      	adds	r3, #240	; 0xf0
 8004260:	443b      	add	r3, r7
 8004262:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8004266:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800426a:	3204      	adds	r2, #4
 800426c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004270:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8004274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004278:	3b01      	subs	r3, #1
 800427a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 800427e:	e596      	b.n	8003dae <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 8004280:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8004284:	4618      	mov	r0, r3
 8004286:	37f4      	adds	r7, #244	; 0xf4
 8004288:	46bd      	mov	sp, r7
 800428a:	bd90      	pop	{r4, r7, pc}

0800428c <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b09f      	sub	sp, #124	; 0x7c
 8004290:	af04      	add	r7, sp, #16
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800429e:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d207      	bcs.n	80042be <lfs_dir_fetchmatch+0x32>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 80042be:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80042c2:	e342      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80042c4:	2300      	movs	r3, #0
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
 80042c8:	2300      	movs	r3, #0
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80042d0:	2300      	movs	r3, #0
 80042d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d4:	e052      	b.n	800437c <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 80042d6:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80042d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80042e0:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80042e2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80042e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042e8:	0092      	lsls	r2, r2, #2
 80042ea:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80042ec:	2104      	movs	r1, #4
 80042ee:	9103      	str	r1, [sp, #12]
 80042f0:	9202      	str	r2, [sp, #8]
 80042f2:	2200      	movs	r2, #0
 80042f4:	9201      	str	r2, [sp, #4]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2304      	movs	r3, #4
 80042fa:	4602      	mov	r2, r0
 80042fc:	2100      	movs	r1, #0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7fe fa6e 	bl	80027e0 <lfs_bd_read>
 8004304:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8004306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	3368      	adds	r3, #104	; 0x68
 800430c:	443b      	add	r3, r7
 800430e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe f9f8 	bl	8002708 <lfs_fromle32>
 8004318:	4602      	mov	r2, r0
 800431a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	3368      	adds	r3, #104	; 0x68
 8004320:	443b      	add	r3, r7
 8004322:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <lfs_dir_fetchmatch+0xac>
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004332:	d001      	beq.n	8004338 <lfs_dir_fetchmatch+0xac>
            return err;
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	e308      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800433e:	d01a      	beq.n	8004376 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8004340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	3368      	adds	r3, #104	; 0x68
 8004346:	443b      	add	r3, r7
 8004348:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800434c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434e:	3301      	adds	r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	bfb8      	it	lt
 8004358:	425b      	neglt	r3, r3
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	3368      	adds	r3, #104	; 0x68
 800435e:	443b      	add	r3, r7
 8004360:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f7fe f9c0 	bl	80026ec <lfs_scmp>
 800436c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800436e:	2b00      	cmp	r3, #0
 8004370:	dd01      	ble.n	8004376 <lfs_dir_fetchmatch+0xea>
            r = i;
 8004372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004374:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8004376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004378:	3301      	adds	r3, #1
 800437a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	2b01      	cmp	r3, #1
 8004380:	dda9      	ble.n	80042d6 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8004382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004384:	2b00      	cmp	r3, #0
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	bfb8      	it	lt
 800438c:	425b      	neglt	r3, r3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800439a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439c:	3301      	adds	r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	bfb8      	it	lt
 80043a6:	425b      	neglt	r3, r3
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80043b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	bfb8      	it	lt
 80043be:	425b      	neglt	r3, r3
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	3368      	adds	r3, #104	; 0x68
 80043c4:	443b      	add	r3, r7
 80043c6:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2200      	movs	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80043d4:	2300      	movs	r3, #0
 80043d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80043d8:	e2a3      	b.n	8004922 <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80043ea:	4a96      	ldr	r2, [pc, #600]	; (8004644 <lfs_dir_fetchmatch+0x3b8>)
 80043ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043f4:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 80043fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe f989 	bl	800271e <lfs_tole32>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	3308      	adds	r3, #8
 8004416:	2204      	movs	r2, #4
 8004418:	4619      	mov	r1, r3
 800441a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800441e:	f004 fb55 	bl	8008acc <lfs_crc>
 8004422:	4603      	mov	r3, r0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe f96c 	bl	8002708 <lfs_fromle32>
 8004430:	4602      	mov	r2, r0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8004436:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004438:	f7fe fe29 	bl	800308e <lfs_tag_dsize>
 800443c:	4602      	mov	r2, r0
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	4413      	add	r3, r2
 8004442:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8004444:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800444a:	69d8      	ldr	r0, [r3, #28]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2204      	movs	r2, #4
 8004452:	9203      	str	r2, [sp, #12]
 8004454:	f107 0220 	add.w	r2, r7, #32
 8004458:	9202      	str	r2, [sp, #8]
 800445a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800445c:	9201      	str	r2, [sp, #4]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	4603      	mov	r3, r0
 8004462:	460a      	mov	r2, r1
 8004464:	2100      	movs	r1, #0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7fe f9ba 	bl	80027e0 <lfs_bd_read>
 800446c:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800446e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8004474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004476:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800447a:	d103      	bne.n	8004484 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	759a      	strb	r2, [r3, #22]
                    break;
 8004482:	e1d6      	b.n	8004832 <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8004484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004486:	e260      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f107 0120 	add.w	r1, r7, #32
 800448e:	2204      	movs	r2, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f004 fb1b 	bl	8008acc <lfs_crc>
 8004496:	4603      	mov	r3, r0
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe f94a 	bl	8002736 <lfs_frombe32>
 80044a2:	4602      	mov	r2, r0
 80044a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a6:	4053      	eors	r3, r2
 80044a8:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fd76 	bl	8002f9e <lfs_tag_isvalid>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f083 0301 	eor.w	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01b      	beq.n	80044f6 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80044be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80044c0:	f7fe fd8e 	bl	8002fe0 <lfs_tag_type1>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80044ca:	d10d      	bne.n	80044e8 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044d4:	6992      	ldr	r2, [r2, #24]
 80044d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80044da:	fb01 f202 	mul.w	r2, r1, r2
 80044de:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <lfs_dir_fetchmatch+0x25c>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <lfs_dir_fetchmatch+0x25e>
 80044e8:	2300      	movs	r3, #0
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	759a      	strb	r2, [r3, #22]
                break;
 80044f4:	e19d      	b.n	8004832 <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe fdc8 	bl	800308e <lfs_tag_dsize>
 80044fe:	4602      	mov	r2, r0
 8004500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004502:	441a      	add	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	759a      	strb	r2, [r3, #22]
                break;
 8004514:	e18d      	b.n	8004832 <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe fd5f 	bl	8002fe0 <lfs_tag_type1>
 8004522:	4603      	mov	r3, r0
 8004524:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004528:	d164      	bne.n	80045f4 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800452a:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004530:	69dc      	ldr	r4, [r3, #28]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004538:	3204      	adds	r2, #4
 800453a:	2104      	movs	r1, #4
 800453c:	9103      	str	r1, [sp, #12]
 800453e:	f107 011c 	add.w	r1, r7, #28
 8004542:	9102      	str	r1, [sp, #8]
 8004544:	9201      	str	r2, [sp, #4]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	4623      	mov	r3, r4
 800454a:	4602      	mov	r2, r0
 800454c:	2100      	movs	r1, #0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7fe f946 	bl	80027e0 <lfs_bd_read>
 8004554:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8004556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800455c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004562:	d103      	bne.n	800456c <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2200      	movs	r2, #0
 8004568:	759a      	strb	r2, [r3, #22]
                        break;
 800456a:	e162      	b.n	8004832 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 800456c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800456e:	e1ec      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe f8c8 	bl	8002708 <lfs_fromle32>
 8004578:	4603      	mov	r3, r0
 800457a:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	429a      	cmp	r2, r3
 8004582:	d003      	beq.n	800458c <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2200      	movs	r2, #0
 8004588:	759a      	strb	r2, [r3, #22]
                    break;
 800458a:	e152      	b.n	8004832 <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fd46 	bl	8003020 <lfs_tag_chunk>
 8004594:	4603      	mov	r3, r0
 8004596:	07db      	lsls	r3, r3, #31
 8004598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800459a:	4053      	eors	r3, r2
 800459c:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80045a6:	2204      	movs	r2, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f004 fa8f 	bl	8008acc <lfs_crc>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80045b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b6:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fd67 	bl	800308e <lfs_tag_dsize>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c4:	441a      	add	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045ce:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80045d6:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80045d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80045de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80045ea:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	e720      	b.n	8004436 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80045f4:	2304      	movs	r3, #4
 80045f6:	647b      	str	r3, [r7, #68]	; 0x44
 80045f8:	e032      	b.n	8004660 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 80045fa:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004600:	69dc      	ldr	r4, [r3, #28]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800460a:	440a      	add	r2, r1
 800460c:	2101      	movs	r1, #1
 800460e:	9103      	str	r1, [sp, #12]
 8004610:	f107 011b 	add.w	r1, r7, #27
 8004614:	9102      	str	r1, [sp, #8]
 8004616:	9201      	str	r2, [sp, #4]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	4623      	mov	r3, r4
 800461c:	4602      	mov	r2, r0
 800461e:	2100      	movs	r1, #0
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7fe f8dd 	bl	80027e0 <lfs_bd_read>
 8004626:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8004628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004630:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004634:	d103      	bne.n	800463e <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	759a      	strb	r2, [r3, #22]
 800463c:	e018      	b.n	8004670 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8004640:	e183      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
 8004642:	bf00      	nop
 8004644:	0800bf08 	.word	0x0800bf08
                }

                crc = lfs_crc(crc, &dat, 1);
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	f107 011b 	add.w	r1, r7, #27
 800464e:	2201      	movs	r2, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f004 fa3b 	bl	8008acc <lfs_crc>
 8004656:	4603      	mov	r3, r0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800465a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465c:	3301      	adds	r3, #1
 800465e:	647b      	str	r3, [r7, #68]	; 0x44
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fd13 	bl	800308e <lfs_tag_dsize>
 8004668:	4602      	mov	r2, r0
 800466a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466c:	4293      	cmp	r3, r2
 800466e:	d3c4      	bcc.n	80045fa <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fcb4 	bl	8002fe0 <lfs_tag_type1>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d113      	bne.n	80046a6 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe fce7 	bl	8003054 <lfs_tag_id>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800468e:	4293      	cmp	r3, r2
 8004690:	f200 8083 	bhi.w	800479a <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fcdc 	bl	8003054 <lfs_tag_id>
 800469c:	4603      	mov	r3, r0
 800469e:	3301      	adds	r3, #1
 80046a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80046a4:	e079      	b.n	800479a <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe fc99 	bl	8002fe0 <lfs_tag_type1>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d134      	bne.n	8004720 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fcbe 	bl	800303a <lfs_tag_splice>
 80046be:	4603      	mov	r3, r0
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046c6:	4413      	add	r3, r2
 80046c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80046cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ce:	4ba1      	ldr	r3, [pc, #644]	; (8004954 <lfs_dir_fetchmatch+0x6c8>)
 80046d0:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80046d2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80046d6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80046da:	6a3a      	ldr	r2, [r7, #32]
 80046dc:	4293      	cmp	r3, r2
 80046de:	d104      	bne.n	80046ea <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 80046e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e8:	e057      	b.n	800479a <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 80046ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f0:	d053      	beq.n	800479a <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe fcad 	bl	8003054 <lfs_tag_id>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461c      	mov	r4, r3
 80046fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe fca7 	bl	8003054 <lfs_tag_id>
 8004706:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8004708:	429c      	cmp	r4, r3
 800470a:	d846      	bhi.n	800479a <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fc93 	bl	800303a <lfs_tag_splice>
 8004714:	4603      	mov	r3, r0
 8004716:	029a      	lsls	r2, r3, #10
 8004718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471a:	4413      	add	r3, r2
 800471c:	64bb      	str	r3, [r7, #72]	; 0x48
 800471e:	e03c      	b.n	800479a <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fc5c 	bl	8002fe0 <lfs_tag_type1>
 8004728:	4603      	mov	r3, r0
 800472a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800472e:	d134      	bne.n	800479a <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fc74 	bl	8003020 <lfs_tag_chunk>
 8004738:	4603      	mov	r3, r0
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800474a:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004750:	69dc      	ldr	r4, [r3, #28]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004758:	3204      	adds	r2, #4
 800475a:	2108      	movs	r1, #8
 800475c:	9103      	str	r1, [sp, #12]
 800475e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004762:	9102      	str	r1, [sp, #8]
 8004764:	9201      	str	r2, [sp, #4]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	4623      	mov	r3, r4
 800476a:	4602      	mov	r2, r0
 800476c:	2100      	movs	r1, #0
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7fe f836 	bl	80027e0 <lfs_bd_read>
 8004774:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8004776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 800477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004782:	d103      	bne.n	800478c <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2200      	movs	r2, #0
 8004788:	759a      	strb	r2, [r3, #22]
                        break;
 800478a:	e052      	b.n	8004832 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	e0dc      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8004790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe fbce 	bl	8002f36 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800479a:	6a3a      	ldr	r2, [r7, #32]
 800479c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800479e:	405a      	eors	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f ae46 	bne.w	8004436 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80047aa:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80047b0:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 80047b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b4:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	f107 0210 	add.w	r2, r7, #16
 80047bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047c0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80047c4:	4798      	blx	r3
 80047c6:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da09      	bge.n	80047e2 <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 80047ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80047d4:	d103      	bne.n	80047de <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	759a      	strb	r2, [r3, #22]
 80047dc:	e029      	b.n	8004832 <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 80047e0:	e0b3      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ec:	e623      	b.n	8004436 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80047ee:	6a3a      	ldr	r2, [r7, #32]
 80047f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f2:	405a      	eors	r2, r3
 80047f4:	4b58      	ldr	r3, [pc, #352]	; (8004958 <lfs_dir_fetchmatch+0x6cc>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
 8004802:	e618      	b.n	8004436 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	2b02      	cmp	r3, #2
 8004808:	f47f ae15 	bne.w	8004436 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe fc20 	bl	8003054 <lfs_tag_id>
 8004814:	4603      	mov	r3, r0
 8004816:	461c      	mov	r4, r3
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fc1a 	bl	8003054 <lfs_tag_id>
 8004820:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8004822:	429c      	cmp	r4, r3
 8004824:	f63f ae07 	bhi.w	8004436 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800482e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004830:	e601      	b.n	8004436 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d100      	bne.n	800483c <lfs_dir_fetchmatch+0x5b0>
 800483a:	e05d      	b.n	80048f8 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	333c      	adds	r3, #60	; 0x3c
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fcad 	bl	80031a4 <lfs_gstate_hasmovehere>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d028      	beq.n	80048a2 <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe fbfd 	bl	8003054 <lfs_tag_id>
 800485a:	4603      	mov	r3, r0
 800485c:	461c      	mov	r4, r3
 800485e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe fbf7 	bl	8003054 <lfs_tag_id>
 8004866:	4603      	mov	r3, r0
 8004868:	429c      	cmp	r4, r3
 800486a:	d104      	bne.n	8004876 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 800486c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800486e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004872:	667b      	str	r3, [r7, #100]	; 0x64
 8004874:	e015      	b.n	80048a2 <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8004876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800487c:	d011      	beq.n	80048a2 <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fbe6 	bl	8003054 <lfs_tag_id>
 8004888:	4603      	mov	r3, r0
 800488a:	461c      	mov	r4, r3
 800488c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fbe0 	bl	8003054 <lfs_tag_id>
 8004894:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8004896:	429c      	cmp	r4, r3
 8004898:	d203      	bcs.n	80048a2 <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800489a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80048a0:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 80048a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00f      	beq.n	80048c8 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80048a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe fbd2 	bl	8003054 <lfs_tag_id>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	8a9b      	ldrh	r3, [r3, #20]
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f7fd feb4 	bl	8002628 <lfs_min>
 80048c0:	4603      	mov	r3, r0
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048c6:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fb67 	bl	8002f9e <lfs_tag_isvalid>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <lfs_dir_fetchmatch+0x64e>
                return besttag;
 80048d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d8:	e037      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80048da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe fbb9 	bl	8003054 <lfs_tag_id>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	8a9b      	ldrh	r3, [r3, #20]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d202      	bcs.n	80048f4 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 80048ee:	f06f 0301 	mvn.w	r3, #1
 80048f2:	e02a      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e028      	b.n	800494a <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fa94 	bl	8002e28 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8004900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004902:	3301      	adds	r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	bfb8      	it	lt
 800490c:	425b      	neglt	r3, r3
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	3368      	adds	r3, #104	; 0x68
 8004912:	443b      	add	r3, r7
 8004914:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800491c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491e:	3301      	adds	r3, #1
 8004920:	65bb      	str	r3, [r7, #88]	; 0x58
 8004922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004924:	2b01      	cmp	r3, #1
 8004926:	f77f ad58 	ble.w	80043da <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	490a      	ldr	r1, [pc, #40]	; (800495c <lfs_dir_fetchmatch+0x6d0>)
 8004934:	9101      	str	r1, [sp, #4]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800493e:	4908      	ldr	r1, [pc, #32]	; (8004960 <lfs_dir_fetchmatch+0x6d4>)
 8004940:	4808      	ldr	r0, [pc, #32]	; (8004964 <lfs_dir_fetchmatch+0x6d8>)
 8004942:	f006 f9c9 	bl	800acd8 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8004946:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800494a:	4618      	mov	r0, r3
 800494c:	376c      	adds	r7, #108	; 0x6c
 800494e:	46bd      	mov	sp, r7
 8004950:	bd90      	pop	{r4, r7, pc}
 8004952:	bf00      	nop
 8004954:	000ffc00 	.word	0x000ffc00
 8004958:	7ffffc00 	.word	0x7ffffc00
 800495c:	0800bec4 	.word	0x0800bec4
 8004960:	0800bdc0 	.word	0x0800bdc0
 8004964:	0800bed0 	.word	0x0800bed0

08004968 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af04      	add	r7, sp, #16
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004974:	2300      	movs	r3, #0
 8004976:	9303      	str	r3, [sp, #12]
 8004978:	2300      	movs	r3, #0
 800497a:	9302      	str	r3, [sp, #8]
 800497c:	2300      	movs	r3, #0
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff fc7c 	bl	800428c <lfs_dir_fetchmatch>
 8004994:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80049ac:	f107 0310 	add.w	r3, r7, #16
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <lfs_dir_getgstate+0x5c>)
 80049b4:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <lfs_dir_getgstate+0x60>)
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7fe ff35 	bl	8003828 <lfs_dir_get>
 80049be:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da05      	bge.n	80049d2 <lfs_dir_getgstate+0x32>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f113 0f02 	cmn.w	r3, #2
 80049cc:	d001      	beq.n	80049d2 <lfs_dir_getgstate+0x32>
        return res;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	e00f      	b.n	80049f2 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f113 0f02 	cmn.w	r3, #2
 80049d8:	d00a      	beq.n	80049f0 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80049da:	f107 0310 	add.w	r3, r7, #16
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fc00 	bl	80031e4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80049e4:	f107 0310 	add.w	r3, r7, #16
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe fb63 	bl	80030b6 <lfs_gstate_xor>
    }

    return 0;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	7ff0000c 	.word	0x7ff0000c
 8004a00:	7ff00000 	.word	0x7ff00000

08004a04 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b08f      	sub	sp, #60	; 0x3c
 8004a08:	af04      	add	r7, sp, #16
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	689c      	ldr	r4, [r3, #8]
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f7fe fb26 	bl	8003074 <lfs_tag_size>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f7fd fdfb 	bl	8002628 <lfs_min>
 8004a32:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8004a34:	6a3c      	ldr	r4, [r7, #32]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	6852      	ldr	r2, [r2, #4]
 8004a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a40:	6849      	ldr	r1, [r1, #4]
 8004a42:	69b8      	ldr	r0, [r7, #24]
 8004a44:	9003      	str	r0, [sp, #12]
 8004a46:	9102      	str	r1, [sp, #8]
 8004a48:	9201      	str	r2, [sp, #4]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	4622      	mov	r2, r4
 8004a50:	2100      	movs	r1, #0
 8004a52:	6a38      	ldr	r0, [r7, #32]
 8004a54:	f7fe f808 	bl	8002a68 <lfs_bd_cmp>
 8004a58:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <lfs_dir_find_match+0x60>
        return res;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	e014      	b.n	8004a8e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	689c      	ldr	r4, [r3, #8]
 8004a68:	68b8      	ldr	r0, [r7, #8]
 8004a6a:	f7fe fb03 	bl	8003074 <lfs_tag_size>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	429c      	cmp	r4, r3
 8004a72:	d00b      	beq.n	8004a8c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	689c      	ldr	r4, [r3, #8]
 8004a78:	68b8      	ldr	r0, [r7, #8]
 8004a7a:	f7fe fafb 	bl	8003074 <lfs_tag_size>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	429c      	cmp	r4, r3
 8004a82:	d201      	bcs.n	8004a88 <lfs_dir_find_match+0x84>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e002      	b.n	8004a8e <lfs_dir_find_match+0x8a>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e000      	b.n	8004a8e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	372c      	adds	r7, #44	; 0x2c
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd90      	pop	{r4, r7, pc}
	...

08004a98 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b093      	sub	sp, #76	; 0x4c
 8004a9c:	af04      	add	r7, sp, #16
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <lfs_dir_find+0x22>
        *id = 0x3ff;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004ab8:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8004aba:	4b6e      	ldr	r3, [pc, #440]	; (8004c74 <lfs_dir_find+0x1dc>)
 8004abc:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8004ace:	496a      	ldr	r1, [pc, #424]	; (8004c78 <lfs_dir_find+0x1e0>)
 8004ad0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ad2:	f006 fbf3 	bl	800b2bc <strspn>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	4413      	add	r3, r2
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8004ade:	4966      	ldr	r1, [pc, #408]	; (8004c78 <lfs_dir_find+0x1e0>)
 8004ae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ae2:	f006 f9e9 	bl	800aeb8 <strcspn>
 8004ae6:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <lfs_dir_find+0x62>
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	781a      	ldrb	r2, [r3, #0]
 8004af2:	4b62      	ldr	r3, [pc, #392]	; (8004c7c <lfs_dir_find+0x1e4>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d00a      	beq.n	8004b10 <lfs_dir_find+0x78>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d10c      	bne.n	8004b1a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8004b00:	2202      	movs	r2, #2
 8004b02:	495f      	ldr	r1, [pc, #380]	; (8004c80 <lfs_dir_find+0x1e8>)
 8004b04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b06:	f005 fcd9 	bl	800a4bc <memcmp>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <lfs_dir_find+0x82>
            name += namelen;
 8004b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	4413      	add	r3, r2
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8004b18:	e7d9      	b.n	8004ace <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8004b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	4413      	add	r3, r2
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8004b26:	4954      	ldr	r1, [pc, #336]	; (8004c78 <lfs_dir_find+0x1e0>)
 8004b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b2a:	f006 fbc7 	bl	800b2bc <strspn>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	4413      	add	r3, r2
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8004b36:	4950      	ldr	r1, [pc, #320]	; (8004c78 <lfs_dir_find+0x1e0>)
 8004b38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b3a:	f006 f9bd 	bl	800aeb8 <strcspn>
 8004b3e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01d      	beq.n	8004b82 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d112      	bne.n	8004b72 <lfs_dir_find+0xda>
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	494c      	ldr	r1, [pc, #304]	; (8004c80 <lfs_dir_find+0x1e8>)
 8004b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b52:	f005 fcb3 	bl	800a4bc <memcmp>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <lfs_dir_find+0xda>
                depth -= 1;
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8004b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8004b70:	e7ad      	b.n	8004ace <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	3301      	adds	r3, #1
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8004b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8004b80:	e7d1      	b.n	8004b26 <lfs_dir_find+0x8e>
                break;
 8004b82:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <lfs_dir_find+0xf8>
            return tag;
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	e06c      	b.n	8004c6a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b94:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe fa31 	bl	8003000 <lfs_tag_type3>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d002      	beq.n	8004baa <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8004ba4:	f06f 0313 	mvn.w	r3, #19
 8004ba8:	e05f      	b.n	8004c6a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fa51 	bl	8003054 <lfs_tag_id>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d01c      	beq.n	8004bf8 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fa47 	bl	8003054 <lfs_tag_id>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bce:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004bd6:	9200      	str	r2, [sp, #0]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <lfs_dir_find+0x1ec>)
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7fe fe23 	bl	8003828 <lfs_dir_get>
 8004be2:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da01      	bge.n	8004bee <lfs_dir_find+0x156>
                return res;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	e03d      	b.n	8004c6a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe f99f 	bl	8002f36 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8004bfe:	212f      	movs	r1, #47	; 0x2f
 8004c00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c02:	f006 f94c 	bl	800ae9e <strchr>
 8004c06:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <lfs_dir_find+0x178>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	e000      	b.n	8004c12 <lfs_dir_find+0x17a>
 8004c10:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	613a      	str	r2, [r7, #16]
 8004c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c18:	617a      	str	r2, [r7, #20]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004c1e:	f107 0210 	add.w	r2, r7, #16
 8004c22:	9203      	str	r2, [sp, #12]
 8004c24:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <lfs_dir_find+0x1f0>)
 8004c26:	9202      	str	r2, [sp, #8]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8004c32:	4622      	mov	r2, r4
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fb28 	bl	800428c <lfs_dir_fetchmatch>
 8004c3c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da01      	bge.n	8004c48 <lfs_dir_find+0x1b0>
                return tag;
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	e010      	b.n	8004c6a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8004c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	4413      	add	r3, r2
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8004c56:	e73a      	b.n	8004ace <lfs_dir_find+0x36>
            if (!dir->split) {
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	7ddb      	ldrb	r3, [r3, #23]
 8004c5c:	f083 0301 	eor.w	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0c8      	beq.n	8004bf8 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8004c66:	f06f 0301 	mvn.w	r3, #1
    }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	373c      	adds	r7, #60	; 0x3c
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd90      	pop	{r4, r7, pc}
 8004c72:	bf00      	nop
 8004c74:	002ffc00 	.word	0x002ffc00
 8004c78:	0800bf10 	.word	0x0800bf10
 8004c7c:	0800bf14 	.word	0x0800bf14
 8004c80:	0800bf18 	.word	0x0800bf18
 8004c84:	700ffc00 	.word	0x700ffc00
 8004c88:	08004a05 	.word	0x08004a05

08004c8c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b08b      	sub	sp, #44	; 0x2c
 8004c90:	af04      	add	r7, sp, #16
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f103 0010 	add.w	r0, r3, #16
 8004ca0:	68fc      	ldr	r4, [r7, #12]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	6852      	ldr	r2, [r2, #4]
 8004caa:	6839      	ldr	r1, [r7, #0]
 8004cac:	9103      	str	r1, [sp, #12]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	9102      	str	r1, [sp, #8]
 8004cb2:	9201      	str	r2, [sp, #4]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4601      	mov	r1, r0
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7fd ffd5 	bl	8002c6c <lfs_bd_prog>
 8004cc2:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <lfs_dir_commitprog+0x42>
        return err;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	e010      	b.n	8004cf0 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f003 fef8 	bl	8008acc <lfs_crc>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	441a      	add	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	605a      	str	r2, [r3, #4]
    return 0;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd90      	pop	{r4, r7, pc}

08004cf8 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b08f      	sub	sp, #60	; 0x3c
 8004cfc:	af04      	add	r7, sp, #16
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fe f9c1 	bl	800308e <lfs_tag_dsize>
 8004d0c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	441a      	add	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d902      	bls.n	8004d24 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8004d1e:	f06f 031b 	mvn.w	r3, #27
 8004d22:	e065      	b.n	8004df0 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4053      	eors	r3, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd fd0c 	bl	800274e <lfs_tobe32>
 8004d36:	4603      	mov	r3, r0
 8004d38:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8004d3a:	f107 0214 	add.w	r2, r7, #20
 8004d3e:	2304      	movs	r3, #4
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff ffa2 	bl	8004c8c <lfs_dir_commitprog>
 8004d48:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <lfs_dir_commitattr+0x5c>
        return err;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	e04d      	b.n	8004df0 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	db0c      	blt.n	8004d74 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	3b04      	subs	r3, #4
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff ff92 	bl	8004c8c <lfs_dir_commitprog>
 8004d68:	61f8      	str	r0, [r7, #28]
        if (err) {
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d039      	beq.n	8004de4 <lfs_dir_commitattr+0xec>
            return err;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	e03d      	b.n	8004df0 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7c:	e02d      	b.n	8004dda <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004d7e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8004d86:	1f1c      	subs	r4, r3, #4
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	440a      	add	r2, r1
 8004d94:	2101      	movs	r1, #1
 8004d96:	9103      	str	r1, [sp, #12]
 8004d98:	f107 0113 	add.w	r1, r7, #19
 8004d9c:	9102      	str	r1, [sp, #8]
 8004d9e:	9201      	str	r2, [sp, #4]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	4623      	mov	r3, r4
 8004da4:	4602      	mov	r2, r0
 8004da6:	2100      	movs	r1, #0
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7fd fd19 	bl	80027e0 <lfs_bd_read>
 8004dae:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <lfs_dir_commitattr+0xc2>
                return err;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	e01a      	b.n	8004df0 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8004dba:	f107 0213 	add.w	r2, r7, #19
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff ff62 	bl	8004c8c <lfs_dir_commitprog>
 8004dc8:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <lfs_dir_commitattr+0xdc>
                return err;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	e00d      	b.n	8004df0 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	3b04      	subs	r3, #4
 8004dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d3cc      	bcc.n	8004d7e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	609a      	str	r2, [r3, #8]
    return 0;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	372c      	adds	r7, #44	; 0x2c
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}

08004df8 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b097      	sub	sp, #92	; 0x5c
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fd fc2d 	bl	8002672 <lfs_alignup>
 8004e18:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8004e22:	e0a6      	b.n	8004f72 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8004e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fd fbf6 	bl	8002628 <lfs_min>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	4413      	add	r3, r2
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8004e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d206      	bcs.n	8004e5a <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	3b08      	subs	r3, #8
 8004e50:	4619      	mov	r1, r3
 8004e52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e54:	f7fd fbe8 	bl	8002628 <lfs_min>
 8004e58:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5e:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2204      	movs	r2, #4
 8004e68:	9203      	str	r2, [sp, #12]
 8004e6a:	f107 0214 	add.w	r2, r7, #20
 8004e6e:	9202      	str	r2, [sp, #8]
 8004e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e72:	9201      	str	r2, [sp, #4]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2304      	movs	r3, #4
 8004e78:	460a      	mov	r2, r1
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fd fcaf 	bl	80027e0 <lfs_bd_read>
 8004e82:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <lfs_dir_commitcrc+0x9e>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004e90:	d001      	beq.n	8004e96 <lfs_dir_commitcrc+0x9e>
            return err;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	e0e8      	b.n	8005068 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fd fc4c 	bl	8002736 <lfs_frombe32>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	0fdb      	lsrs	r3, r3, #31
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004eae:	7efb      	ldrb	r3, [r7, #27]
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	051a      	lsls	r2, r3, #20
 8004eb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	1acb      	subs	r3, r1, r3
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8004ec2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8004ec6:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4053      	eors	r3, r2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fd fc3c 	bl	800274e <lfs_tobe32>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f107 010c 	add.w	r1, r7, #12
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f003 fdf1 	bl	8008acc <lfs_crc>
 8004eea:	4602      	mov	r2, r0
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fd fc12 	bl	800271e <lfs_tole32>
 8004efa:	4603      	mov	r3, r0
 8004efc:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f103 0010 	add.w	r0, r3, #16
 8004f04:	687c      	ldr	r4, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	6852      	ldr	r2, [r2, #4]
 8004f0e:	2108      	movs	r1, #8
 8004f10:	9103      	str	r1, [sp, #12]
 8004f12:	f107 010c 	add.w	r1, r7, #12
 8004f16:	9102      	str	r1, [sp, #8]
 8004f18:	9201      	str	r2, [sp, #4]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4601      	mov	r1, r0
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd fea2 	bl	8002c6c <lfs_bd_prog>
 8004f28:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <lfs_dir_commitcrc+0x13c>
            return err;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	e099      	b.n	8005068 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe f892 	bl	8003074 <lfs_tag_size>
 8004f50:	4603      	mov	r3, r0
 8004f52:	1d1a      	adds	r2, r3, #4
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	441a      	add	r2, r3
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8004f5e:	7efb      	ldrb	r3, [r7, #27]
 8004f60:	07da      	lsls	r2, r3, #31
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	405a      	eors	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f70:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	f63f af53 	bhi.w	8004e24 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f103 0110 	add.w	r1, r3, #16
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	2300      	movs	r3, #0
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fd fe3b 	bl	8002c04 <lfs_bd_sync>
 8004f8e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <lfs_dir_commitcrc+0x1a2>
        return err;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	e066      	b.n	8005068 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8004fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8004fa4:	e05b      	b.n	800505e <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb0:	e030      	b.n	8005014 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d106      	bne.n	8004fc8 <lfs_dir_commitcrc+0x1d0>
 8004fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d002      	beq.n	8004fc8 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8004fc2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004fc6:	e04f      	b.n	8005068 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004fc8:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8004fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8004fd0:	1d18      	adds	r0, r3, #4
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	9203      	str	r2, [sp, #12]
 8004fda:	f107 020b 	add.w	r2, r7, #11
 8004fde:	9202      	str	r2, [sp, #8]
 8004fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe2:	9201      	str	r2, [sp, #4]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	460a      	mov	r2, r1
 8004fea:	2100      	movs	r1, #0
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fd fbf7 	bl	80027e0 <lfs_bd_read>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <lfs_dir_commitcrc+0x206>
                return err;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	e034      	b.n	8005068 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8004ffe:	f107 030b 	add.w	r3, r7, #11
 8005002:	2201      	movs	r2, #1
 8005004:	4619      	mov	r1, r3
 8005006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005008:	f003 fd60 	bl	8008acc <lfs_crc>
 800500c:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	3301      	adds	r3, #1
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	3304      	adds	r3, #4
 8005018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800501a:	429a      	cmp	r2, r3
 800501c:	d3c9      	bcc.n	8004fb2 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8005024:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005028:	e01e      	b.n	8005068 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800502a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005034:	4618      	mov	r0, r3
 8005036:	f7fd faf7 	bl	8002628 <lfs_min>
 800503a:	4602      	mov	r2, r0
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	4413      	add	r3, r2
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8005042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	429a      	cmp	r2, r3
 8005048:	d206      	bcs.n	8005058 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	3b08      	subs	r3, #8
 800504e:	4619      	mov	r1, r3
 8005050:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005052:	f7fd fae9 	bl	8002628 <lfs_min>
 8005056:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	3304      	adds	r3, #4
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800505e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	429a      	cmp	r2, r3
 8005064:	d39f      	bcc.n	8004fa6 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	374c      	adds	r7, #76	; 0x4c
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}

08005070 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af04      	add	r7, sp, #16
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e016      	b.n	80050ae <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	3301      	adds	r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	bfb8      	it	lt
 800508c:	425b      	neglt	r3, r3
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	4413      	add	r3, r2
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fe fa2c 	bl	80034f4 <lfs_alloc>
 800509c:	60f8      	str	r0, [r7, #12]
        if (err) {
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <lfs_dir_alloc+0x38>
            return err;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	e058      	b.n	800515a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3301      	adds	r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	dde5      	ble.n	8005080 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80050c4:	2004      	movs	r0, #4
 80050c6:	9003      	str	r0, [sp, #12]
 80050c8:	9202      	str	r2, [sp, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	9201      	str	r2, [sp, #4]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2304      	movs	r3, #4
 80050d2:	460a      	mov	r2, r1
 80050d4:	2100      	movs	r1, #0
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fd fb82 	bl	80027e0 <lfs_bd_read>
 80050dc:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd fb10 	bl	8002708 <lfs_fromle32>
 80050e8:	4602      	mov	r2, r0
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <lfs_dir_alloc+0x90>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80050fa:	d001      	beq.n	8005100 <lfs_dir_alloc+0x90>
        return err;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	e02c      	b.n	800515a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	dd0e      	ble.n	8005128 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	3301      	adds	r3, #1
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fd faa8 	bl	8002672 <lfs_alignup>
 8005122:	4602      	mov	r2, r0
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2204      	movs	r2, #4
 800512c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005134:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2200      	movs	r2, #0
 800513a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005142:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8005162:	b580      	push	{r7, lr}
 8005164:	b092      	sub	sp, #72	; 0x48
 8005166:	af04      	add	r7, sp, #16
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8005170:	f107 0310 	add.w	r3, r7, #16
 8005174:	4619      	mov	r1, r3
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff ff7a 	bl	8005070 <lfs_dir_alloc>
 800517c:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <lfs_dir_split+0x26>
        return err;
 8005184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005186:	e03c      	b.n	8005202 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	7ddb      	ldrb	r3, [r3, #23]
 800518c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800519c:	f107 0110 	add.w	r1, r7, #16
 80051a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051a4:	9302      	str	r3, [sp, #8]
 80051a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f879 	bl	80052ac <lfs_dir_compact>
 80051ba:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da01      	bge.n	80051c6 <lfs_dir_split+0x64>
        return res;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	e01d      	b.n	8005202 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2201      	movs	r2, #1
 80051d6:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3320      	adds	r3, #32
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f7fd fe51 	bl	8002e88 <lfs_pair_cmp>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <lfs_dir_split+0x9e>
 80051ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3738      	adds	r7, #56	; 0x38
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800520a:	b580      	push	{r7, lr}
 800520c:	b086      	sub	sp, #24
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800521a:	68b8      	ldr	r0, [r7, #8]
 800521c:	f7fd ff37 	bl	800308e <lfs_tag_dsize>
 8005220:	4602      	mov	r2, r0
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	441a      	add	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	601a      	str	r2, [r3, #0]
    return 0;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6859      	ldr	r1, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	f7ff fd51 	bl	8004cf8 <lfs_dir_commitattr>
 8005256:	4603      	mov	r3, r0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8005270:	2b00      	cmp	r3, #0
 8005272:	dd11      	ble.n	8005298 <lfs_dir_needsrelocation+0x38>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	3301      	adds	r3, #1
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800527e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005280:	3201      	adds	r2, #1
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	fbb3 f1f2 	udiv	r1, r3, r2
 800528a:	fb01 f202 	mul.w	r2, r1, r2
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <lfs_dir_needsrelocation+0x38>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <lfs_dir_needsrelocation+0x3a>
 8005298:	2300      	movs	r3, #0
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b0a4      	sub	sp, #144	; 0x90
 80052b0:	af0a      	add	r7, sp, #40	; 0x28
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff ffcc 	bl	8005260 <lfs_dir_needsrelocation>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80052d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00e      	beq.n	80052fe <lfs_dir_compact+0x52>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	657a      	str	r2, [r7, #84]	; 0x54
 80052e6:	2201      	movs	r2, #1
 80052e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ea:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fd fdc9 	bl	8002e88 <lfs_pair_cmp>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f040 8155 	bne.w	80055a8 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005304:	2300      	movs	r3, #0
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
 8005308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
 800530e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005312:	64bb      	str	r3, [r7, #72]	; 0x48
 8005314:	2300      	movs	r3, #0
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <lfs_dir_compact+0x80>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005328:	3b08      	subs	r3, #8
 800532a:	e003      	b.n	8005334 <lfs_dir_compact+0x88>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8005334:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4619      	mov	r1, r3
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7fd fd41 	bl	8002dc4 <lfs_bd_erase>
 8005342:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800534a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005350:	f000 812c 	beq.w	80055ac <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8005354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005356:	e187      	b.n	8005668 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fd f9de 	bl	800271e <lfs_tole32>
 8005362:	4602      	mov	r2, r0
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800536e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005372:	2304      	movs	r3, #4
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff fc89 	bl	8004c8c <lfs_dir_commitprog>
 800537a:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4618      	mov	r0, r3
 8005382:	f7fd f9c1 	bl	8002708 <lfs_fromle32>
 8005386:	4602      	mov	r2, r0
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	609a      	str	r2, [r3, #8]
            if (err) {
 800538c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d006      	beq.n	80053a0 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8005392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005394:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005398:	f000 810a 	beq.w	80055b0 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800539c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800539e:	e163      	b.n	8005668 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80053a0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80053a4:	425b      	negs	r3, r3
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	637a      	str	r2, [r7, #52]	; 0x34
 80053ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80053b2:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80053b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053b8:	9208      	str	r2, [sp, #32]
 80053ba:	4aad      	ldr	r2, [pc, #692]	; (8005670 <lfs_dir_compact+0x3c4>)
 80053bc:	9207      	str	r2, [sp, #28]
 80053be:	9306      	str	r3, [sp, #24]
 80053c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80053c4:	9305      	str	r3, [sp, #20]
 80053c6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	4ba8      	ldr	r3, [pc, #672]	; (8005674 <lfs_dir_compact+0x3c8>)
 80053d2:	9302      	str	r3, [sp, #8]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e0:	2200      	movs	r2, #0
 80053e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7fe fb71 	bl	8003acc <lfs_dir_traverse>
 80053ea:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80053ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d006      	beq.n	8005400 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80053f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80053f8:	f000 80dc 	beq.w	80055b4 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80053fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fe:	e133      	b.n	8005668 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	3318      	adds	r3, #24
 8005404:	4618      	mov	r0, r3
 8005406:	f7fd fd24 	bl	8002e52 <lfs_pair_isnull>
 800540a:	4603      	mov	r3, r0
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d022      	beq.n	800545c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3318      	adds	r3, #24
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd fda5 	bl	8002f6a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	7ddb      	ldrb	r3, [r3, #23]
 8005424:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005428:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800542a:	4a93      	ldr	r2, [pc, #588]	; (8005678 <lfs_dir_compact+0x3cc>)
 800542c:	431a      	orrs	r2, r3
                        dir->tail);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8005432:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fc5e 	bl	8004cf8 <lfs_dir_commitattr>
 800543c:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3318      	adds	r3, #24
 8005442:	4618      	mov	r0, r3
 8005444:	f7fd fd77 	bl	8002f36 <lfs_pair_fromle32>
                if (err) {
 8005448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800544e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005450:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005454:	f000 80b0 	beq.w	80055b8 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8005458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545a:	e105      	b.n	8005668 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800545c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8005468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800546c:	f083 0301 	eor.w	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d011      	beq.n	800549a <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800547c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005480:	4611      	mov	r1, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd fe17 	bl	80030b6 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800548e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f7fd fe0e 	bl	80030b6 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80054a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd fe05 	bl	80030b6 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80054b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054bc:	461a      	mov	r2, r3
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff fa6d 	bl	80049a0 <lfs_dir_getgstate>
 80054c6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80054c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <lfs_dir_compact+0x226>
                return err;
 80054ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d0:	e0ca      	b.n	8005668 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80054d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fd fe12 	bl	8003100 <lfs_gstate_iszero>
 80054dc:	4603      	mov	r3, r0
 80054de:	f083 0301 	eor.w	r3, r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d016      	beq.n	8005516 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80054e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fd fe99 	bl	8003224 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80054f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80054fa:	4a60      	ldr	r2, [pc, #384]	; (800567c <lfs_dir_compact+0x3d0>)
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fbfb 	bl	8004cf8 <lfs_dir_commitattr>
 8005502:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8005504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800550a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005510:	d054      	beq.n	80055bc <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8005512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005514:	e0a8      	b.n	8005668 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8005516:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800551a:	4619      	mov	r1, r3
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff fc6b 	bl	8004df8 <lfs_dir_commitcrc>
 8005522:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800552a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005530:	d046      	beq.n	80055c0 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8005532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005534:	e098      	b.n	8005668 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800553c:	6992      	ldr	r2, [r2, #24]
 800553e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005542:	fb01 f202 	mul.w	r2, r1, r2
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <lfs_dir_compact+0x2ae>
 800554c:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <lfs_dir_compact+0x3d4>)
 800554e:	4a4d      	ldr	r2, [pc, #308]	; (8005684 <lfs_dir_compact+0x3d8>)
 8005550:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8005554:	484c      	ldr	r0, [pc, #304]	; (8005688 <lfs_dir_compact+0x3dc>)
 8005556:	f004 ff39 	bl	800a3cc <__assert_func>
            lfs_pair_swap(dir->pair);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f7fd fc63 	bl	8002e28 <lfs_pair_swap>
            dir->count = end - begin;
 8005562:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005566:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	b29a      	uxth	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8005572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8005578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3348      	adds	r3, #72	; 0x48
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800558a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800558e:	f083 0301 	eor.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d064      	beq.n	8005662 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	333c      	adds	r3, #60	; 0x3c
 800559e:	3230      	adds	r2, #48	; 0x30
 80055a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80055a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80055a6:	e05c      	b.n	8005662 <lfs_dir_compact+0x3b6>
        goto relocate;
 80055a8:	bf00      	nop
 80055aa:	e00a      	b.n	80055c2 <lfs_dir_compact+0x316>
                    goto relocate;
 80055ac:	bf00      	nop
 80055ae:	e008      	b.n	80055c2 <lfs_dir_compact+0x316>
                    goto relocate;
 80055b0:	bf00      	nop
 80055b2:	e006      	b.n	80055c2 <lfs_dir_compact+0x316>
                    goto relocate;
 80055b4:	bf00      	nop
 80055b6:	e004      	b.n	80055c2 <lfs_dir_compact+0x316>
                        goto relocate;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <lfs_dir_compact+0x316>
                        goto relocate;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <lfs_dir_compact+0x316>
                    goto relocate;
 80055c0:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3310      	adds	r3, #16
 80055cc:	4619      	mov	r1, r3
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7fd f8e0 	bl	8002794 <lfs_cache_drop>
        if (!tired) {
 80055d4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80055d8:	f083 0301 	eor.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4a29      	ldr	r2, [pc, #164]	; (800568c <lfs_dir_compact+0x3e0>)
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	f240 725a 	movw	r2, #1882	; 0x75a
 80055ee:	4926      	ldr	r1, [pc, #152]	; (8005688 <lfs_dir_compact+0x3dc>)
 80055f0:	4827      	ldr	r0, [pc, #156]	; (8005690 <lfs_dir_compact+0x3e4>)
 80055f2:	f005 fb71 	bl	800acd8 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	617a      	str	r2, [r7, #20]
 80055fc:	2201      	movs	r2, #1
 80055fe:	61ba      	str	r2, [r7, #24]
 8005600:	f107 0214 	add.w	r2, r7, #20
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f7fd fc3e 	bl	8002e88 <lfs_pair_cmp>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10c      	bne.n	800562c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4a1d      	ldr	r2, [pc, #116]	; (800568c <lfs_dir_compact+0x3e0>)
 8005618:	9200      	str	r2, [sp, #0]
 800561a:	f240 725f 	movw	r2, #1887	; 0x75f
 800561e:	491a      	ldr	r1, [pc, #104]	; (8005688 <lfs_dir_compact+0x3dc>)
 8005620:	481c      	ldr	r0, [pc, #112]	; (8005694 <lfs_dir_compact+0x3e8>)
 8005622:	f005 fb59 	bl	800acd8 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8005626:	f06f 031b 	mvn.w	r3, #27
 800562a:	e01d      	b.n	8005668 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7fd ff5e 	bl	80034f4 <lfs_alloc>
 8005638:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800563a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00c      	beq.n	800565a <lfs_dir_compact+0x3ae>
 8005640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005642:	f113 0f1c 	cmn.w	r3, #28
 8005646:	d106      	bne.n	8005656 <lfs_dir_compact+0x3aa>
 8005648:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800564c:	f083 0301 	eor.w	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <lfs_dir_compact+0x3ae>
            return err;
 8005656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005658:	e006      	b.n	8005668 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 800565a:	2300      	movs	r3, #0
 800565c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8005660:	e64d      	b.n	80052fe <lfs_dir_compact+0x52>
        break;
 8005662:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8005664:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005668:	4618      	mov	r0, r3
 800566a:	3768      	adds	r7, #104	; 0x68
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	08005237 	.word	0x08005237
 8005674:	400ffc00 	.word	0x400ffc00
 8005678:	000ffc08 	.word	0x000ffc08
 800567c:	7ffffc0c 	.word	0x7ffffc0c
 8005680:	0800bf1c 	.word	0x0800bf1c
 8005684:	0800c8e8 	.word	0x0800c8e8
 8005688:	0800bdc0 	.word	0x0800bdc0
 800568c:	0800bec4 	.word	0x0800bec4
 8005690:	0800bf44 	.word	0x0800bf44
 8005694:	0800bf68 	.word	0x0800bf68

08005698 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b097      	sub	sp, #92	; 0x5c
 800569c:	af0a      	add	r7, sp, #40	; 0x28
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80056a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80056ac:	e058      	b.n	8005760 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b8:	b292      	uxth	r2, r2
 80056ba:	4252      	negs	r2, r2
 80056bc:	b292      	uxth	r2, r2
 80056be:	b212      	sxth	r2, r2
 80056c0:	f107 0118 	add.w	r1, r7, #24
 80056c4:	9108      	str	r1, [sp, #32]
 80056c6:	4979      	ldr	r1, [pc, #484]	; (80058ac <lfs_dir_splittingcompact+0x214>)
 80056c8:	9107      	str	r1, [sp, #28]
 80056ca:	9206      	str	r2, [sp, #24]
 80056cc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80056d0:	9205      	str	r2, [sp, #20]
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	2300      	movs	r3, #0
 80056d6:	9303      	str	r3, [sp, #12]
 80056d8:	4b75      	ldr	r3, [pc, #468]	; (80058b0 <lfs_dir_splittingcompact+0x218>)
 80056da:	9302      	str	r3, [sp, #8]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056e8:	2200      	movs	r2, #0
 80056ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7fe f9ed 	bl	8003acc <lfs_dir_traverse>
 80056f2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <lfs_dir_splittingcompact+0x66>
                return err;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	e0d1      	b.n	80058a2 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 80056fe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2bfe      	cmp	r3, #254	; 0xfe
 8005708:	d822      	bhi.n	8005750 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005724:	085b      	lsrs	r3, r3, #1
 8005726:	e003      	b.n	8005730 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800572e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005734:	6992      	ldr	r2, [r2, #24]
 8005736:	4611      	mov	r1, r2
 8005738:	4618      	mov	r0, r3
 800573a:	f7fc ff9a 	bl	8002672 <lfs_alignup>
 800573e:	4603      	mov	r3, r0
 8005740:	4619      	mov	r1, r3
 8005742:	4620      	mov	r0, r4
 8005744:	f7fc ff70 	bl	8002628 <lfs_min>
 8005748:	4602      	mov	r2, r0
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	429a      	cmp	r2, r3
 800574e:	d20e      	bcs.n	800576e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8005750:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575c:	4413      	add	r3, r2
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8005760:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d8a0      	bhi.n	80056ae <lfs_dir_splittingcompact+0x16>
 800576c:	e000      	b.n	8005770 <lfs_dir_splittingcompact+0xd8>
                break;
 800576e:	bf00      	nop
        }

        if (split == begin) {
 8005770:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005776:	429a      	cmp	r2, r3
 8005778:	d02d      	beq.n	80057d6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	b29b      	uxth	r3, r3
 800577e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005782:	9202      	str	r2, [sp, #8]
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff fce6 	bl	8005162 <lfs_dir_split>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <lfs_dir_splittingcompact+0x112>
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f113 0f1c 	cmn.w	r3, #28
 80057a4:	d001      	beq.n	80057aa <lfs_dir_splittingcompact+0x112>
            return err;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	e07b      	b.n	80058a2 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00e      	beq.n	80057ce <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	493e      	ldr	r1, [pc, #248]	; (80058b4 <lfs_dir_splittingcompact+0x21c>)
 80057ba:	9101      	str	r1, [sp, #4]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	f240 72a9 	movw	r2, #1961	; 0x7a9
 80057c4:	493c      	ldr	r1, [pc, #240]	; (80058b8 <lfs_dir_splittingcompact+0x220>)
 80057c6:	483d      	ldr	r0, [pc, #244]	; (80058bc <lfs_dir_splittingcompact+0x224>)
 80057c8:	f005 fa86 	bl	800acd8 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80057cc:	e004      	b.n	80057d8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 80057d4:	e767      	b.n	80056a6 <lfs_dir_splittingcompact+0xe>
            break;
 80057d6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7ff fd40 	bl	8005260 <lfs_dir_needsrelocation>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d04e      	beq.n	8005884 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	613a      	str	r2, [r7, #16]
 80057ec:	2201      	movs	r2, #1
 80057ee:	617a      	str	r2, [r7, #20]
 80057f0:	f107 0210 	add.w	r2, r7, #16
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd fb46 	bl	8002e88 <lfs_pair_cmp>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d140      	bne.n	8005884 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f003 f85c 	bl	80088c0 <lfs_fs_rawsize>
 8005808:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da01      	bge.n	8005814 <lfs_dir_splittingcompact+0x17c>
            return size;
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	e046      	b.n	80058a2 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	085a      	lsrs	r2, r3, #1
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	429a      	cmp	r2, r3
 8005820:	d930      	bls.n	8005884 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	4a23      	ldr	r2, [pc, #140]	; (80058b4 <lfs_dir_splittingcompact+0x21c>)
 8005828:	9200      	str	r2, [sp, #0]
 800582a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800582e:	4922      	ldr	r1, [pc, #136]	; (80058b8 <lfs_dir_splittingcompact+0x220>)
 8005830:	4823      	ldr	r0, [pc, #140]	; (80058c0 <lfs_dir_splittingcompact+0x228>)
 8005832:	f005 fa51 	bl	800acd8 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005836:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800583a:	9302      	str	r3, [sp, #8]
 800583c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff fc88 	bl	8005162 <lfs_dir_split>
 8005852:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <lfs_dir_splittingcompact+0x1ce>
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f113 0f1c 	cmn.w	r3, #28
 8005860:	d001      	beq.n	8005866 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	e01d      	b.n	80058a2 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <lfs_dir_splittingcompact+0x21c>)
 800586e:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8005872:	4911      	ldr	r1, [pc, #68]	; (80058b8 <lfs_dir_splittingcompact+0x220>)
 8005874:	4813      	ldr	r0, [pc, #76]	; (80058c4 <lfs_dir_splittingcompact+0x22c>)
 8005876:	f005 fa2f 	bl	800acd8 <iprintf>
 800587a:	e003      	b.n	8005884 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 800587c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005880:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8005884:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff fd06 	bl	80052ac <lfs_dir_compact>
 80058a0:	4603      	mov	r3, r0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3734      	adds	r7, #52	; 0x34
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	bf00      	nop
 80058ac:	0800520b 	.word	0x0800520b
 80058b0:	400ffc00 	.word	0x400ffc00
 80058b4:	0800bec4 	.word	0x0800bec4
 80058b8:	0800bdc0 	.word	0x0800bdc0
 80058bc:	0800bfa0 	.word	0x0800bfa0
 80058c0:	0800bfd0 	.word	0x0800bfd0
 80058c4:	0800c000 	.word	0x0800c000

080058c8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80058c8:	b5b0      	push	{r4, r5, r7, lr}
 80058ca:	b0a6      	sub	sp, #152	; 0x98
 80058cc:	af0a      	add	r7, sp, #40	; 0x28
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
    int state = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80058da:	2300      	movs	r3, #0
 80058dc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 80058e0:	2300      	movs	r3, #0
 80058e2:	667b      	str	r3, [r7, #100]	; 0x64
 80058e4:	e06d      	b.n	80059c2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80058e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	4413      	add	r3, r2
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fd fb85 	bl	8003000 <lfs_tag_type3>
 80058f6:	4603      	mov	r3, r0
 80058f8:	461a      	mov	r2, r3
 80058fa:	f240 4301 	movw	r3, #1025	; 0x401
 80058fe:	429a      	cmp	r2, r3
 8005900:	d106      	bne.n	8005910 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	8a9b      	ldrh	r3, [r3, #20]
 8005906:	3301      	adds	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	829a      	strh	r2, [r3, #20]
 800590e:	e055      	b.n	80059bc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	4413      	add	r3, r2
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fb70 	bl	8003000 <lfs_tag_type3>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005928:	429a      	cmp	r2, r3
 800592a:	d114      	bne.n	8005956 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	8a9b      	ldrh	r3, [r3, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <lfs_dir_relocatingcommit+0x7a>
 8005934:	4ba4      	ldr	r3, [pc, #656]	; (8005bc8 <lfs_dir_relocatingcommit+0x300>)
 8005936:	4aa5      	ldr	r2, [pc, #660]	; (8005bcc <lfs_dir_relocatingcommit+0x304>)
 8005938:	f240 71df 	movw	r1, #2015	; 0x7df
 800593c:	48a4      	ldr	r0, [pc, #656]	; (8005bd0 <lfs_dir_relocatingcommit+0x308>)
 800593e:	f004 fd45 	bl	800a3cc <__assert_func>
            dir->count -= 1;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	8a9b      	ldrh	r3, [r3, #20]
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005954:	e032      	b.n	80059bc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8005956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	4413      	add	r3, r2
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7fd fb3d 	bl	8002fe0 <lfs_tag_type1>
 8005966:	4603      	mov	r3, r0
 8005968:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800596c:	d126      	bne.n	80059bc <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800596e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	4413      	add	r3, r2
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800597e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	4413      	add	r3, r2
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800598e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	4413      	add	r3, r2
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f7fd fb41 	bl	8003020 <lfs_tag_chunk>
 800599e:	4603      	mov	r3, r0
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	3318      	adds	r3, #24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd fabd 	bl	8002f36 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	3301      	adds	r3, #1
 80059c0:	667b      	str	r3, [r7, #100]	; 0x64
 80059c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059c8:	429a      	cmp	r2, r3
 80059ca:	db8c      	blt.n	80058e6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80059cc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02b      	beq.n	8005a2c <lfs_dir_relocatingcommit+0x164>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	8a9b      	ldrh	r3, [r3, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d127      	bne.n	8005a2c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80059dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <lfs_dir_relocatingcommit+0x12a>
 80059e4:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <lfs_dir_relocatingcommit+0x30c>)
 80059e6:	4a79      	ldr	r2, [pc, #484]	; (8005bcc <lfs_dir_relocatingcommit+0x304>)
 80059e8:	f240 71ec 	movw	r1, #2028	; 0x7ec
 80059ec:	4878      	ldr	r0, [pc, #480]	; (8005bd0 <lfs_dir_relocatingcommit+0x308>)
 80059ee:	f004 fced 	bl	800a3cc <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80059f8:	4619      	mov	r1, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f002 fbd4 	bl	80081a8 <lfs_fs_pred>
 8005a00:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8005a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <lfs_dir_relocatingcommit+0x14c>
 8005a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a0a:	f113 0f02 	cmn.w	r3, #2
 8005a0e:	d001      	beq.n	8005a14 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8005a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a12:	e203      	b.n	8005e1c <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8005a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a16:	f113 0f02 	cmn.w	r3, #2
 8005a1a:	d007      	beq.n	8005a2c <lfs_dir_relocatingcommit+0x164>
 8005a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a20:	7ddb      	ldrb	r3, [r3, #23]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8005a26:	2302      	movs	r3, #2
 8005a28:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8005a2a:	e121      	b.n	8005c70 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	7d9b      	ldrb	r3, [r3, #22]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80fb 	beq.w	8005c2c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8005a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005a52:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <lfs_dir_relocatingcommit+0x1a0>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a64:	3b08      	subs	r3, #8
 8005a66:	e003      	b.n	8005a70 <lfs_dir_relocatingcommit+0x1a8>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005a70:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	3318      	adds	r3, #24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fd fa77 	bl	8002f6a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8005a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a92:	9308      	str	r3, [sp, #32]
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <lfs_dir_relocatingcommit+0x310>)
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9306      	str	r3, [sp, #24]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9303      	str	r3, [sp, #12]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9302      	str	r3, [sp, #8]
 8005aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7fe f806 	bl	8003acc <lfs_dir_traverse>
 8005ac0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fd fa35 	bl	8002f36 <lfs_pair_fromle32>
        if (err) {
 8005acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad4:	f113 0f1c 	cmn.w	r3, #28
 8005ad8:	f000 80aa 	beq.w	8005c30 <lfs_dir_relocatingcommit+0x368>
 8005adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ade:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ae2:	f000 80a5 	beq.w	8005c30 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8005ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae8:	e198      	b.n	8005e1c <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8005aea:	f107 031c 	add.w	r3, r7, #28
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]
 8005af4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005afc:	f107 031c 	add.w	r3, r7, #28
 8005b00:	4611      	mov	r1, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd fad7 	bl	80030b6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005b0e:	f107 031c 	add.w	r3, r7, #28
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fd face 	bl	80030b6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005b20:	f107 031c 	add.w	r3, r7, #28
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd fac5 	bl	80030b6 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005b38:	f107 031c 	add.w	r3, r7, #28
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fd fadf 	bl	8003100 <lfs_gstate_iszero>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f083 0301 	eor.w	r3, r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d027      	beq.n	8005b9e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005b4e:	f107 031c 	add.w	r3, r7, #28
 8005b52:	461a      	mov	r2, r3
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7fe ff22 	bl	80049a0 <lfs_dir_getgstate>
 8005b5c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b66:	e159      	b.n	8005e1c <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8005b68:	f107 031c 	add.w	r3, r7, #28
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fd fb59 	bl	8003224 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8005b72:	f107 031c 	add.w	r3, r7, #28
 8005b76:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <lfs_dir_relocatingcommit+0x314>)
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff f8bb 	bl	8004cf8 <lfs_dir_commitattr>
 8005b82:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8c:	f113 0f1c 	cmn.w	r3, #28
 8005b90:	d050      	beq.n	8005c34 <lfs_dir_relocatingcommit+0x36c>
 8005b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b94:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005b98:	d04c      	beq.n	8005c34 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9c:	e13e      	b.n	8005e1c <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8005b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff f927 	bl	8004df8 <lfs_dir_commitcrc>
 8005baa:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8005bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb4:	f113 0f1c 	cmn.w	r3, #28
 8005bb8:	d03e      	beq.n	8005c38 <lfs_dir_relocatingcommit+0x370>
 8005bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bbc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005bc0:	d03a      	beq.n	8005c38 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc4:	e12a      	b.n	8005e1c <lfs_dir_relocatingcommit+0x554>
 8005bc6:	bf00      	nop
 8005bc8:	0800c02c 	.word	0x0800c02c
 8005bcc:	0800c8f8 	.word	0x0800c8f8
 8005bd0:	0800bdc0 	.word	0x0800bdc0
 8005bd4:	0800c03c 	.word	0x0800c03c
 8005bd8:	08005237 	.word	0x08005237
 8005bdc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005be6:	6992      	ldr	r2, [r2, #24]
 8005be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bec:	fb01 f202 	mul.w	r2, r1, r2
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <lfs_dir_relocatingcommit+0x33c>
 8005bf6:	4b8b      	ldr	r3, [pc, #556]	; (8005e24 <lfs_dir_relocatingcommit+0x55c>)
 8005bf8:	4a8b      	ldr	r2, [pc, #556]	; (8005e28 <lfs_dir_relocatingcommit+0x560>)
 8005bfa:	f640 0136 	movw	r1, #2102	; 0x836
 8005bfe:	488b      	ldr	r0, [pc, #556]	; (8005e2c <lfs_dir_relocatingcommit+0x564>)
 8005c00:	f004 fbe4 	bl	800a3cc <__assert_func>
        dir->off = commit.off;
 8005c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8005c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	333c      	adds	r3, #60	; 0x3c
 8005c16:	3230      	adds	r2, #48	; 0x30
 8005c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3348      	adds	r3, #72	; 0x48
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	605a      	str	r2, [r3, #4]
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	e021      	b.n	8005c70 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8005c2c:	bf00      	nop
 8005c2e:	e004      	b.n	8005c3a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005c30:	bf00      	nop
 8005c32:	e002      	b.n	8005c3a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005c38:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3310      	adds	r3, #16
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7fc fda7 	bl	8002794 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	8a9b      	ldrh	r3, [r3, #20]
 8005c4a:	9302      	str	r3, [sp, #8]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fd1b 	bl	8005698 <lfs_dir_splittingcompact>
 8005c62:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da01      	bge.n	8005c6e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6c:	e0d6      	b.n	8005e1c <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8005c6e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	663b      	str	r3, [r7, #96]	; 0x60
 8005c82:	e0c6      	b.n	8005e12 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c86:	3308      	adds	r3, #8
 8005c88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fd f8fa 	bl	8002e88 <lfs_pair_cmp>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f040 80b8 	bne.w	8005e0c <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8005c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	f103 0408 	add.w	r4, r3, #8
 8005ca4:	4615      	mov	r5, r2
 8005ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005caa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	f000 809d 	beq.w	8005df8 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cc2:	e07b      	b.n	8005dbc <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	4413      	add	r3, r2
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fd f996 	bl	8003000 <lfs_tag_type3>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d115      	bne.n	8005d0c <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8005ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce2:	889c      	ldrh	r4, [r3, #4]
 8005ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	4413      	add	r3, r2
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd f9b0 	bl	8003054 <lfs_tag_id>
 8005cf4:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	d108      	bne.n	8005d0c <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d00:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8005d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d08:	60da      	str	r2, [r3, #12]
 8005d0a:	e054      	b.n	8005db6 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	4413      	add	r3, r2
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fd f972 	bl	8003000 <lfs_tag_type3>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d11c      	bne.n	8005d62 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d2a:	889c      	ldrh	r4, [r3, #4]
 8005d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fd f98c 	bl	8003054 <lfs_tag_id>
 8005d3c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d90f      	bls.n	8005d62 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8005d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d44:	889b      	ldrh	r3, [r3, #4]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d4c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d50:	799b      	ldrb	r3, [r3, #6]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d12f      	bne.n	8005db6 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8005d60:	e029      	b.n	8005db6 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4413      	add	r3, r2
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fd f947 	bl	8003000 <lfs_tag_type3>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	f240 4301 	movw	r3, #1025	; 0x401
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d11b      	bne.n	8005db6 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d80:	889c      	ldrh	r4, [r3, #4]
 8005d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	4413      	add	r3, r2
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fd f961 	bl	8003054 <lfs_tag_id>
 8005d92:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005d94:	429c      	cmp	r4, r3
 8005d96:	d30e      	bcc.n	8005db6 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8005d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d9a:	889b      	ldrh	r3, [r3, #4]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da2:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da6:	799b      	ldrb	r3, [r3, #6]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d104      	bne.n	8005db6 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8005dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db4:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8005db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db8:	3301      	adds	r3, #1
 8005dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f6ff af7e 	blt.w	8005cc4 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8005dc8:	e016      	b.n	8005df8 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8005dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dcc:	889a      	ldrh	r2, [r3, #4]
 8005dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd0:	8b9b      	ldrh	r3, [r3, #28]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd8:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8005dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ddc:	f103 0108 	add.w	r1, r3, #8
 8005de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de2:	3320      	adds	r3, #32
 8005de4:	461a      	mov	r2, r3
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7fe fdbe 	bl	8004968 <lfs_dir_fetch>
 8005dec:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8005dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8005df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df6:	e011      	b.n	8005e1c <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8005df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfa:	889a      	ldrh	r2, [r3, #4]
 8005dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfe:	8b9b      	ldrh	r3, [r3, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d303      	bcc.n	8005e0c <lfs_dir_relocatingcommit+0x544>
 8005e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e06:	7fdb      	ldrb	r3, [r3, #31]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1de      	bne.n	8005dca <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	663b      	str	r3, [r7, #96]	; 0x60
 8005e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f af35 	bne.w	8005c84 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3770      	adds	r7, #112	; 0x70
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bdb0      	pop	{r4, r5, r7, pc}
 8005e24:	0800bf1c 	.word	0x0800bf1c
 8005e28:	0800c8f8 	.word	0x0800c8f8
 8005e2c:	0800bdc0 	.word	0x0800bdc0

08005e30 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b0bc      	sub	sp, #240	; 0xf0
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e46:	e045      	b.n	8005ed4 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d03a      	beq.n	8005eca <lfs_dir_orphaningcommit+0x9a>
 8005e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e58:	3308      	adds	r3, #8
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fd f812 	bl	8002e88 <lfs_pair_cmp>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d12f      	bne.n	8005eca <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d12a      	bne.n	8005eca <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d023      	beq.n	8005eca <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8005e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d91b      	bls.n	8005eca <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8005e92:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fff0 	bl	8006e7c <lfs_file_outline>
 8005e9c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8005ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <lfs_dir_orphaningcommit+0x7e>
                return err;
 8005ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eac:	e2ad      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8005eae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f001 f804 	bl	8006ec0 <lfs_file_flush>
 8005eb8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8005ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <lfs_dir_orphaningcommit+0x9a>
                return err;
 8005ec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ec8:	e29f      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1b5      	bne.n	8005e48 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005ef2:	461d      	mov	r5, r3
 8005ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8005f06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff fcd8 	bl	80058c8 <lfs_dir_relocatingcommit>
 8005f18:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8005f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	da02      	bge.n	8005f2a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8005f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f28:	e26f      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc ffa8 	bl	8002e88 <lfs_pair_cmp>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	461d      	mov	r5, r3
 8005f42:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8005f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d14a      	bne.n	8005ff0 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3348      	adds	r3, #72	; 0x48
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7fe fd1c 	bl	80049a0 <lfs_dir_getgstate>
 8005f68:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8005f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8005f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f78:	e247      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8005f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3318      	adds	r3, #24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fc ffed 	bl	8002f6a <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	7ddb      	ldrb	r3, [r3, #23]
 8005f94:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005f98:	051a      	lsls	r2, r3, #20
 8005f9a:	4bc2      	ldr	r3, [pc, #776]	; (80062a4 <lfs_dir_orphaningcommit+0x474>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	3318      	adds	r3, #24
 8005fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005faa:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005fae:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	9001      	str	r0, [sp, #4]
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	9000      	str	r0, [sp, #0]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff fc84 	bl	80058c8 <lfs_dir_relocatingcommit>
 8005fc0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fc ffb4 	bl	8002f36 <lfs_pair_fromle32>
        if (state < 0) {
 8005fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da02      	bge.n	8005fdc <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8005fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fda:	e216      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8005fdc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005fe0:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8005fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8005ff6:	e1fc      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8005ff8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006000:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006004:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006008:	4ca7      	ldr	r4, [pc, #668]	; (80062a8 <lfs_dir_orphaningcommit+0x478>)
 800600a:	9403      	str	r4, [sp, #12]
 800600c:	9102      	str	r1, [sp, #8]
 800600e:	9201      	str	r2, [sp, #4]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	4603      	mov	r3, r0
 8006014:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8006018:	49a4      	ldr	r1, [pc, #656]	; (80062ac <lfs_dir_orphaningcommit+0x47c>)
 800601a:	48a5      	ldr	r0, [pc, #660]	; (80062b0 <lfs_dir_orphaningcommit+0x480>)
 800601c:	f004 fe5c 	bl	800acd8 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f103 0220 	add.w	r2, r3, #32
 800602c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006030:	4611      	mov	r1, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f7fc ff28 	bl	8002e88 <lfs_pair_cmp>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800603e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8006046:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006056:	e037      	b.n	80060c8 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8006058:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800605c:	f103 0208 	add.w	r2, r3, #8
 8006060:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006064:	4611      	mov	r1, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc ff0e 	bl	8002e88 <lfs_pair_cmp>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8006072:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006076:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800607a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800607c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006084:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8006086:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800608a:	799b      	ldrb	r3, [r3, #6]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d116      	bne.n	80060be <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8006090:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006094:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006098:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fc fef2 	bl	8002e88 <lfs_pair_cmp>
 80060a4:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80060aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80060ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80060b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80060b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80060be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1c3      	bne.n	8006058 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80060d0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80060d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80060d8:	4619      	mov	r1, r3
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f002 f8ec 	bl	80082b8 <lfs_fs_parent>
 80060e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80060e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	da07      	bge.n	80060fc <lfs_dir_orphaningcommit+0x2cc>
 80060ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f0:	f113 0f02 	cmn.w	r3, #2
 80060f4:	d002      	beq.n	80060fc <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80060f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060fa:	e186      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80060fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006100:	f113 0f02 	cmn.w	r3, #2
 8006104:	bf14      	ite	ne
 8006106:	2301      	movne	r3, #1
 8006108:	2300      	moveq	r3, #0
 800610a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800610e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006112:	f113 0f02 	cmn.w	r3, #2
 8006116:	f000 809e 	beq.w	8006256 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800611a:	2101      	movs	r1, #1
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f002 f921 	bl	8008364 <lfs_fs_preporphans>
 8006122:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8006126:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <lfs_dir_orphaningcommit+0x304>
                return err;
 800612e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006132:	e16a      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8006134:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006138:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3330      	adds	r3, #48	; 0x30
 8006140:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006144:	4611      	mov	r1, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f7fd f82c 	bl	80031a4 <lfs_gstate_hasmovehere>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d02d      	beq.n	80061ae <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	4618      	mov	r0, r3
 8006158:	f7fc ff7c 	bl	8003054 <lfs_tag_id>
 800615c:	4603      	mov	r3, r0
 800615e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8006162:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006166:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800616a:	484f      	ldr	r0, [pc, #316]	; (80062a8 <lfs_dir_orphaningcommit+0x478>)
 800616c:	9002      	str	r0, [sp, #8]
 800616e:	9201      	str	r2, [sp, #4]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	460b      	mov	r3, r1
 8006174:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8006178:	494c      	ldr	r1, [pc, #304]	; (80062ac <lfs_dir_orphaningcommit+0x47c>)
 800617a:	484e      	ldr	r0, [pc, #312]	; (80062b4 <lfs_dir_orphaningcommit+0x484>)
 800617c:	f004 fdac 	bl	800acd8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006180:	2200      	movs	r2, #0
 8006182:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f002 f926 	bl	80083d8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800618c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006190:	4618      	mov	r0, r3
 8006192:	f7fc ff5f 	bl	8003054 <lfs_tag_id>
 8006196:	4603      	mov	r3, r0
 8006198:	461a      	mov	r2, r3
 800619a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800619e:	4293      	cmp	r3, r2
 80061a0:	d205      	bcs.n	80061ae <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80061a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80061aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	657b      	str	r3, [r7, #84]	; 0x54
 80061b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b4:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80061b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fc fed5 	bl	8002f6a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80061c0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80061c4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <lfs_dir_orphaningcommit+0x3ac>
 80061cc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80061d6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80061da:	e000      	b.n	80061de <lfs_dir_orphaningcommit+0x3ae>
 80061dc:	2300      	movs	r3, #0
 80061de:	647b      	str	r3, [r7, #68]	; 0x44
 80061e0:	2300      	movs	r3, #0
 80061e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80061ee:	653b      	str	r3, [r7, #80]	; 0x50
 80061f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061f4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80061f8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80061fc:	2000      	movs	r0, #0
 80061fe:	9001      	str	r0, [sp, #4]
 8006200:	2002      	movs	r0, #2
 8006202:	9000      	str	r0, [sp, #0]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fb5f 	bl	80058c8 <lfs_dir_relocatingcommit>
 800620a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800620e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006212:	4618      	mov	r0, r3
 8006214:	f7fc fe8f 	bl	8002f36 <lfs_pair_fromle32>
            if (state < 0) {
 8006218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800621c:	2b00      	cmp	r3, #0
 800621e:	da02      	bge.n	8006226 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8006220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006224:	e0f1      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8006226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800622a:	2b01      	cmp	r3, #1
 800622c:	d113      	bne.n	8006256 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800622e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8006234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800623a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800623e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006246:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800624a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006254:	e0cd      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8006256:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800625a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800625e:	4619      	mov	r1, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f001 ffa1 	bl	80081a8 <lfs_fs_pred>
 8006266:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800626a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <lfs_dir_orphaningcommit+0x452>
 8006272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006276:	f113 0f02 	cmn.w	r3, #2
 800627a:	d002      	beq.n	8006282 <lfs_dir_orphaningcommit+0x452>
            return err;
 800627c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006280:	e0c3      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8006282:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01a      	beq.n	80062c0 <lfs_dir_orphaningcommit+0x490>
 800628a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800628e:	f113 0f02 	cmn.w	r3, #2
 8006292:	d115      	bne.n	80062c0 <lfs_dir_orphaningcommit+0x490>
 8006294:	4b08      	ldr	r3, [pc, #32]	; (80062b8 <lfs_dir_orphaningcommit+0x488>)
 8006296:	4a09      	ldr	r2, [pc, #36]	; (80062bc <lfs_dir_orphaningcommit+0x48c>)
 8006298:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800629c:	4803      	ldr	r0, [pc, #12]	; (80062ac <lfs_dir_orphaningcommit+0x47c>)
 800629e:	f004 f895 	bl	800a3cc <__assert_func>
 80062a2:	bf00      	nop
 80062a4:	000ffc08 	.word	0x000ffc08
 80062a8:	0800bec4 	.word	0x0800bec4
 80062ac:	0800bdc0 	.word	0x0800bdc0
 80062b0:	0800c044 	.word	0x0800c044
 80062b4:	0800c080 	.word	0x0800c080
 80062b8:	0800c0c4 	.word	0x0800c0c4
 80062bc:	0800c914 	.word	0x0800c914

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80062c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062c4:	f113 0f02 	cmn.w	r3, #2
 80062c8:	f000 8093 	beq.w	80063f2 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3330      	adds	r3, #48	; 0x30
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fc ff32 	bl	800313a <lfs_gstate_hasorphans>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d011      	beq.n	8006300 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80062dc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80062e0:	425b      	negs	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	b25b      	sxtb	r3, r3
 80062e6:	4619      	mov	r1, r3
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f002 f83b 	bl	8008364 <lfs_fs_preporphans>
 80062ee:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80062f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80062fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062fe:	e084      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8006300:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006304:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3330      	adds	r3, #48	; 0x30
 800630c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f7fc ff46 	bl	80031a4 <lfs_gstate_hasmovehere>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01c      	beq.n	8006358 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	4618      	mov	r0, r3
 8006324:	f7fc fe96 	bl	8003054 <lfs_tag_id>
 8006328:	4603      	mov	r3, r0
 800632a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800632e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006332:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8006336:	4837      	ldr	r0, [pc, #220]	; (8006414 <lfs_dir_orphaningcommit+0x5e4>)
 8006338:	9002      	str	r0, [sp, #8]
 800633a:	9201      	str	r2, [sp, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	460b      	mov	r3, r1
 8006340:	f640 1221 	movw	r2, #2337	; 0x921
 8006344:	4934      	ldr	r1, [pc, #208]	; (8006418 <lfs_dir_orphaningcommit+0x5e8>)
 8006346:	4835      	ldr	r0, [pc, #212]	; (800641c <lfs_dir_orphaningcommit+0x5ec>)
 8006348:	f004 fcc6 	bl	800acd8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800634c:	2200      	movs	r2, #0
 800634e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f002 f840 	bl	80083d8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8006358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800635e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8006364:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006368:	4618      	mov	r0, r3
 800636a:	f7fc fdfe 	bl	8002f6a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800636e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006372:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <lfs_dir_orphaningcommit+0x55a>
 800637a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006384:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006388:	e000      	b.n	800638c <lfs_dir_orphaningcommit+0x55c>
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
 800638e:	2300      	movs	r3, #0
 8006390:	62bb      	str	r3, [r7, #40]	; 0x28
 8006392:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006396:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800639a:	051a      	lsls	r2, r3, #20
 800639c:	4b20      	ldr	r3, [pc, #128]	; (8006420 <lfs_dir_orphaningcommit+0x5f0>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30
 80063a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80063b0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80063b4:	2000      	movs	r0, #0
 80063b6:	9001      	str	r0, [sp, #4]
 80063b8:	2002      	movs	r0, #2
 80063ba:	9000      	str	r0, [sp, #0]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff fa83 	bl	80058c8 <lfs_dir_relocatingcommit>
 80063c2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80063c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fc fdb3 	bl	8002f36 <lfs_pair_fromle32>
            if (state < 0) {
 80063d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	da02      	bge.n	80063de <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80063d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063dc:	e015      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80063de:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80063e2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80063e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80063f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	f43f adfe 	beq.w	8005ff8 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80063fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <lfs_dir_orphaningcommit+0x5d8>
 8006404:	2303      	movs	r3, #3
 8006406:	e000      	b.n	800640a <lfs_dir_orphaningcommit+0x5da>
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	37e0      	adds	r7, #224	; 0xe0
 800640e:	46bd      	mov	sp, r7
 8006410:	bdb0      	pop	{r4, r5, r7, pc}
 8006412:	bf00      	nop
 8006414:	0800bec4 	.word	0x0800bec4
 8006418:	0800bdc0 	.word	0x0800bdc0
 800641c:	0800c080 	.word	0x0800c080
 8006420:	000ffc08 	.word	0x000ffc08

08006424 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fcf9 	bl	8005e30 <lfs_dir_orphaningcommit>
 800643e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	da01      	bge.n	800644a <lfs_dir_commit+0x26>
        return orphans;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	e00d      	b.n	8006466 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8006450:	2100      	movs	r1, #0
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f002 f860 	bl	8008518 <lfs_fs_deorphan>
 8006458:	6138      	str	r0, [r7, #16]
        if (err) {
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <lfs_dir_commit+0x40>
            return err;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	e000      	b.n	8006466 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800646e:	b590      	push	{r4, r7, lr}
 8006470:	b087      	sub	sp, #28
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	3b08      	subs	r3, #8
 8006486:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <lfs_ctz_index+0x2e>
        return 0;
 8006498:	2300      	movs	r3, #0
 800649a:	e01c      	b.n	80064d6 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3b01      	subs	r3, #1
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fc f917 	bl	80026d4 <lfs_popc>
 80064a6:	4603      	mov	r3, r0
 80064a8:	3302      	adds	r3, #2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	1ad4      	subs	r4, r2, r3
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7fc f905 	bl	80026d4 <lfs_popc>
 80064ca:	4603      	mov	r3, r0
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	1ae2      	subs	r2, r4, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	601a      	str	r2, [r3, #0]
    return i;
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd90      	pop	{r4, r7, pc}

080064de <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80064de:	b590      	push	{r4, r7, lr}
 80064e0:	b08f      	sub	sp, #60	; 0x3c
 80064e2:	af04      	add	r7, sp, #16
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d108      	bne.n	8006504 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80064f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f8:	601a      	str	r2, [r3, #0]
        *off = 0;
 80064fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
        return 0;
 8006500:	2300      	movs	r3, #0
 8006502:	e053      	b.n	80065ac <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	3b01      	subs	r3, #1
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff ffac 	bl	800646e <lfs_ctz_index>
 8006516:	4603      	mov	r3, r0
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800651a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800651e:	4619      	mov	r1, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff ffa4 	bl	800646e <lfs_ctz_index>
 8006526:	4603      	mov	r3, r0
 8006528:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800652a:	e034      	b.n	8006596 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800652c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	3301      	adds	r3, #1
 8006534:	4618      	mov	r0, r3
 8006536:	f7fc f8ae 	bl	8002696 <lfs_npw2>
 800653a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800653c:	1e5c      	subs	r4, r3, #1
 800653e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006540:	f7fc f8b9 	bl	80026b6 <lfs_ctz>
 8006544:	4603      	mov	r3, r0
 8006546:	4619      	mov	r1, r3
 8006548:	4620      	mov	r0, r4
 800654a:	f7fc f86d 	bl	8002628 <lfs_min>
 800654e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	0092      	lsls	r2, r2, #2
 8006556:	2104      	movs	r1, #4
 8006558:	9103      	str	r1, [sp, #12]
 800655a:	4639      	mov	r1, r7
 800655c:	9102      	str	r1, [sp, #8]
 800655e:	9201      	str	r2, [sp, #4]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	2304      	movs	r3, #4
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7fc f939 	bl	80027e0 <lfs_bd_read>
 800656e:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7fc f8c8 	bl	8002708 <lfs_fromle32>
 8006578:	4603      	mov	r3, r0
 800657a:	603b      	str	r3, [r7, #0]
        if (err) {
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <lfs_ctz_find+0xa8>
            return err;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	e012      	b.n	80065ac <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8006586:	2201      	movs	r2, #1
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	461a      	mov	r2, r3
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8006596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	429a      	cmp	r2, r3
 800659c:	d8c6      	bhi.n	800652c <lfs_ctz_find+0x4e>
    }

    *block = head;
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a2:	601a      	str	r2, [r3, #0]
    *off = pos;
 80065a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a8:	601a      	str	r2, [r3, #0]
    return 0;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	372c      	adds	r7, #44	; 0x2c
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd90      	pop	{r4, r7, pc}

080065b4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b092      	sub	sp, #72	; 0x48
 80065b8:	af04      	add	r7, sp, #16
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80065c2:	f107 0320 	add.w	r3, r7, #32
 80065c6:	4619      	mov	r1, r3
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7fc ff93 	bl	80034f4 <lfs_alloc>
 80065ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <lfs_ctz_extend+0x26>
            return err;
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	e0e9      	b.n	80067ae <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	4619      	mov	r1, r3
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7fc fbf0 	bl	8002dc4 <lfs_bd_erase>
 80065e4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80065f2:	f000 80cb 	beq.w	800678c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	e0d9      	b.n	80067ae <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 80065fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d107      	bne.n	8006610 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8006600:	6a3a      	ldr	r2, [r7, #32]
 8006602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006604:	601a      	str	r2, [r3, #0]
                *off = 0;
 8006606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
                return 0;
 800660c:	2300      	movs	r3, #0
 800660e:	e0ce      	b.n	80067ae <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	3b01      	subs	r3, #1
 8006614:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8006616:	f107 031c 	add.w	r3, r7, #28
 800661a:	4619      	mov	r1, r3
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff ff26 	bl	800646e <lfs_ctz_index>
 8006622:	4603      	mov	r3, r0
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	429a      	cmp	r2, r3
 8006636:	d044      	beq.n	80066c2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8006638:	2300      	movs	r3, #0
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
 800663c:	e035      	b.n	80066aa <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	1ad2      	subs	r2, r2, r3
 8006644:	2301      	movs	r3, #1
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	f107 0317 	add.w	r3, r7, #23
 800664c:	9302      	str	r3, [sp, #8]
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4613      	mov	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	2100      	movs	r1, #0
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7fc f8bf 	bl	80027e0 <lfs_bd_read>
 8006662:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <lfs_ctz_extend+0xba>
                        return err;
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	e09f      	b.n	80067ae <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2201      	movs	r2, #1
 8006672:	9203      	str	r2, [sp, #12]
 8006674:	f107 0217 	add.w	r2, r7, #23
 8006678:	9202      	str	r2, [sp, #8]
 800667a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800667c:	9201      	str	r2, [sp, #4]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2301      	movs	r3, #1
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7fc faf0 	bl	8002c6c <lfs_bd_prog>
 800668c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800669a:	d101      	bne.n	80066a0 <lfs_ctz_extend+0xec>
                            goto relocate;
 800669c:	bf00      	nop
                    goto relocate;
 800669e:	e075      	b.n	800678c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 80066a2:	e084      	b.n	80067ae <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	3301      	adds	r3, #1
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d3c5      	bcc.n	800663e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b6:	601a      	str	r2, [r3, #0]
                *off = noff;
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066bc:	601a      	str	r2, [r3, #0]
                return 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	e075      	b.n	80067ae <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	3301      	adds	r3, #1
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80066c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ca:	f7fb fff4 	bl	80026b6 <lfs_ctz>
 80066ce:	4603      	mov	r3, r0
 80066d0:	3301      	adds	r3, #1
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80066d8:	2300      	movs	r3, #0
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
 80066dc:	e049      	b.n	8006772 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fc f81c 	bl	800271e <lfs_tole32>
 80066e6:	4603      	mov	r3, r0
 80066e8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ee:	0092      	lsls	r2, r2, #2
 80066f0:	2104      	movs	r1, #4
 80066f2:	9103      	str	r1, [sp, #12]
 80066f4:	f107 0118 	add.w	r1, r7, #24
 80066f8:	9102      	str	r1, [sp, #8]
 80066fa:	9201      	str	r2, [sp, #4]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	2301      	movs	r3, #1
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7fc fab1 	bl	8002c6c <lfs_bd_prog>
 800670a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	4618      	mov	r0, r3
 8006710:	f7fb fffa 	bl	8002708 <lfs_fromle32>
 8006714:	4603      	mov	r3, r0
 8006716:	61bb      	str	r3, [r7, #24]
                if (err) {
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006724:	d034      	beq.n	8006790 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	e041      	b.n	80067ae <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	3b01      	subs	r3, #1
 800672e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006730:	429a      	cmp	r2, r3
 8006732:	d01b      	beq.n	800676c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006738:	0092      	lsls	r2, r2, #2
 800673a:	2104      	movs	r1, #4
 800673c:	9103      	str	r1, [sp, #12]
 800673e:	f107 0118 	add.w	r1, r7, #24
 8006742:	9102      	str	r1, [sp, #8]
 8006744:	9201      	str	r2, [sp, #4]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	2304      	movs	r3, #4
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	2100      	movs	r1, #0
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7fc f846 	bl	80027e0 <lfs_bd_read>
 8006754:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4618      	mov	r0, r3
 800675a:	f7fb ffd5 	bl	8002708 <lfs_fromle32>
 800675e:	4603      	mov	r3, r0
 8006760:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <lfs_ctz_extend+0x1b8>
                        return err;
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	e020      	b.n	80067ae <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	3301      	adds	r3, #1
 8006770:	633b      	str	r3, [r7, #48]	; 0x30
 8006772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	429a      	cmp	r2, r3
 8006778:	d3b1      	bcc.n	80066de <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800677a:	6a3a      	ldr	r2, [r7, #32]
 800677c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	009a      	lsls	r2, r3, #2
 8006784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006786:	601a      	str	r2, [r3, #0]
            return 0;
 8006788:	2300      	movs	r3, #0
 800678a:	e010      	b.n	80067ae <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8006790:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <lfs_ctz_extend+0x204>)
 8006796:	9200      	str	r2, [sp, #0]
 8006798:	f640 22da 	movw	r2, #2778	; 0xada
 800679c:	4907      	ldr	r1, [pc, #28]	; (80067bc <lfs_ctz_extend+0x208>)
 800679e:	4808      	ldr	r0, [pc, #32]	; (80067c0 <lfs_ctz_extend+0x20c>)
 80067a0:	f004 fa9a 	bl	800acd8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7fb fff4 	bl	8002794 <lfs_cache_drop>
    while (true) {
 80067ac:	e709      	b.n	80065c2 <lfs_ctz_extend+0xe>
    }
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3738      	adds	r7, #56	; 0x38
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	0800bec4 	.word	0x0800bec4
 80067bc:	0800bdc0 	.word	0x0800bdc0
 80067c0:	0800bf44 	.word	0x0800bf44

080067c4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b090      	sub	sp, #64	; 0x40
 80067c8:	af04      	add	r7, sp, #16
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <lfs_ctz_traverse+0x18>
        return 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	e06b      	b.n	80068b4 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	3b01      	subs	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	f107 031c 	add.w	r3, r7, #28
 80067e6:	4619      	mov	r1, r3
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fe40 	bl	800646e <lfs_ctz_index>
 80067ee:	4603      	mov	r3, r0
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80067f8:	4798      	blx	r3
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <lfs_ctz_traverse+0x42>
            return err;
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	e056      	b.n	80068b4 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <lfs_ctz_traverse+0x4c>
            return 0;
 800680c:	2300      	movs	r3, #0
 800680e:	e051      	b.n	80068b4 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	f1c3 0302 	rsb	r3, r3, #2
 800681a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800681c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800681e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8006820:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8006822:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8006824:	9303      	str	r3, [sp, #12]
 8006826:	f107 0314 	add.w	r3, r7, #20
 800682a:	9302      	str	r3, [sp, #8]
 800682c:	2300      	movs	r3, #0
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7fb ffd0 	bl	80027e0 <lfs_bd_read>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	4618      	mov	r0, r3
 8006846:	f7fb ff5f 	bl	8002708 <lfs_fromle32>
 800684a:	4603      	mov	r3, r0
 800684c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fb ff59 	bl	8002708 <lfs_fromle32>
 8006856:	4603      	mov	r3, r0
 8006858:	61bb      	str	r3, [r7, #24]
        if (err) {
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <lfs_ctz_traverse+0xa0>
            return err;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	e027      	b.n	80068b4 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8006864:	2300      	movs	r3, #0
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
 8006868:	e012      	b.n	8006890 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	3330      	adds	r3, #48	; 0x30
 8006870:	443b      	add	r3, r7
 8006872:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8006876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006878:	4611      	mov	r1, r2
 800687a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800687c:	4798      	blx	r3
 800687e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <lfs_ctz_traverse+0xc6>
                return err;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	e014      	b.n	80068b4 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	3301      	adds	r3, #1
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	3b01      	subs	r3, #1
 8006894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006896:	429a      	cmp	r2, r3
 8006898:	dbe7      	blt.n	800686a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	3b01      	subs	r3, #1
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	3330      	adds	r3, #48	; 0x30
 80068a2:	443b      	add	r3, r7
 80068a4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80068a8:	603b      	str	r3, [r7, #0]
        index -= count;
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 80068b2:	e79e      	b.n	80067f2 <lfs_ctz_traverse+0x2e>
    }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3730      	adds	r7, #48	; 0x30
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80068bc:	b5b0      	push	{r4, r5, r7, lr}
 80068be:	b09a      	sub	sp, #104	; 0x68
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f001 ffc3 	bl	8008860 <lfs_fs_forceconsistency>
 80068da:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 80068dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <lfs_file_rawopencfg+0x2a>
            return err;
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	e1b0      	b.n	8006c48 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068ea:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2200      	movs	r2, #0
 80068f6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f103 0108 	add.w	r1, r3, #8
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	3304      	adds	r3, #4
 800690e:	1d3a      	adds	r2, r7, #4
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7fe f8c1 	bl	8004a98 <lfs_dir_find>
 8006916:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8006918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800691a:	2b00      	cmp	r3, #0
 800691c:	da0c      	bge.n	8006938 <lfs_file_rawopencfg+0x7c>
 800691e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006920:	f113 0f02 	cmn.w	r3, #2
 8006924:	d105      	bne.n	8006932 <lfs_file_rawopencfg+0x76>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	889b      	ldrh	r3, [r3, #4]
 800692a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800692e:	4293      	cmp	r3, r2
 8006930:	d102      	bne.n	8006938 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8006932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006934:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006936:	e17c      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2201      	movs	r2, #1
 800693c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7fc fd6e 	bl	8003422 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8006946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006948:	f113 0f02 	cmn.w	r3, #2
 800694c:	d14e      	bne.n	80069ec <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d103      	bne.n	8006960 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8006958:	f06f 0301 	mvn.w	r3, #1
 800695c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800695e:	e168      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4618      	mov	r0, r3
 8006964:	f7f9 fc9e 	bl	80002a4 <strlen>
 8006968:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006970:	429a      	cmp	r2, r3
 8006972:	d903      	bls.n	800697c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8006974:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006978:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800697a:	e15a      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f103 0108 	add.w	r1, r3, #8
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	889b      	ldrh	r3, [r3, #4]
 8006986:	029b      	lsls	r3, r3, #10
 8006988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006992:	2300      	movs	r3, #0
 8006994:	633b      	str	r3, [r7, #48]	; 0x30
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	889b      	ldrh	r3, [r3, #4]
 800699a:	029a      	lsls	r2, r3, #10
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	4313      	orrs	r3, r2
 80069a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	889b      	ldrh	r3, [r3, #4]
 80069ae:	029b      	lsls	r3, r3, #10
 80069b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ba:	2300      	movs	r3, #0
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
 80069be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80069c2:	2303      	movs	r3, #3
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fd2d 	bl	8006424 <lfs_dir_commit>
 80069ca:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80069cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ce:	f113 0f1c 	cmn.w	r3, #28
 80069d2:	d001      	beq.n	80069d8 <lfs_file_rawopencfg+0x11c>
 80069d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d6:	e001      	b.n	80069dc <lfs_file_rawopencfg+0x120>
 80069d8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80069dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80069de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 8125 	bne.w	8006c30 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80069e6:	4b9a      	ldr	r3, [pc, #616]	; (8006c50 <lfs_file_rawopencfg+0x394>)
 80069e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ea:	e044      	b.n	8006a76 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80069f6:	f06f 0310 	mvn.w	r3, #16
 80069fa:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80069fc:	e119      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fc fafd 	bl	8003000 <lfs_tag_type3>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d003      	beq.n	8006a14 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8006a0c:	f06f 0314 	mvn.w	r3, #20
 8006a10:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006a12:	e10e      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00e      	beq.n	8006a3c <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	889b      	ldrh	r3, [r3, #4]
 8006a22:	029b      	lsls	r3, r3, #10
 8006a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a2c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
 8006a3a:	e01c      	b.n	8006a76 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	889b      	ldrh	r3, [r3, #4]
 8006a46:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006a48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a4c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006a54:	9200      	str	r2, [sp, #0]
 8006a56:	4a7f      	ldr	r2, [pc, #508]	; (8006c54 <lfs_file_rawopencfg+0x398>)
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7fc fee5 	bl	8003828 <lfs_dir_get>
 8006a5e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8006a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	da02      	bge.n	8006a6c <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8006a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a68:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006a6a:	e0e2      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	3328      	adds	r3, #40	; 0x28
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fc fbf7 	bl	8003264 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006a76:	2300      	movs	r3, #0
 8006a78:	657b      	str	r3, [r7, #84]	; 0x54
 8006a7a:	e063      	b.n	8006b44 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d03c      	beq.n	8006b02 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a92:	6859      	ldr	r1, [r3, #4]
 8006a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006aa6:	051a      	lsls	r2, r3, #20
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	889b      	ldrh	r3, [r3, #4]
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	ea42 0103 	orr.w	r1, r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab6:	6858      	ldr	r0, [r3, #4]
 8006ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aba:	4613      	mov	r3, r2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4403      	add	r3, r0
 8006ac4:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006ac6:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ace:	6859      	ldr	r1, [r3, #4]
 8006ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4a5d      	ldr	r2, [pc, #372]	; (8006c58 <lfs_file_rawopencfg+0x39c>)
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7fc fe9e 	bl	8003828 <lfs_dir_get>
 8006aec:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8006aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da06      	bge.n	8006b02 <lfs_file_rawopencfg+0x246>
 8006af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af6:	f113 0f02 	cmn.w	r3, #2
 8006afa:	d002      	beq.n	8006b02 <lfs_file_rawopencfg+0x246>
                err = res;
 8006afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afe:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006b00:	e097      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d017      	beq.n	8006b3e <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b12:	6859      	ldr	r1, [r3, #4]
 8006b14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b16:	4613      	mov	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d903      	bls.n	8006b32 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8006b2a:	f06f 031b 	mvn.w	r3, #27
 8006b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006b30:	e07f      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b40:	3301      	adds	r3, #1
 8006b42:	657b      	str	r3, [r7, #84]	; 0x54
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d395      	bcc.n	8006a7c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b64:	e010      	b.n	8006b88 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fb fdfa 	bl	8002766 <lfs_malloc>
 8006b72:	4602      	mov	r2, r0
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8006b80:	f06f 030b 	mvn.w	r3, #11
 8006b84:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006b86:	e054      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3340      	adds	r3, #64	; 0x40
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7fb fe0f 	bl	80027b2 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fc fa32 	bl	8003000 <lfs_tag_type3>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f240 2301 	movw	r3, #513	; 0x201
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d141      	bne.n	8006c2c <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f06f 0201 	mvn.w	r2, #1
 8006bae:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fc fa5e 	bl	8003074 <lfs_tag_size>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d020      	beq.n	8006c2c <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	889b      	ldrh	r3, [r3, #4]
 8006bf4:	029c      	lsls	r4, r3, #10
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfa:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fb fd12 	bl	8002628 <lfs_min>
 8006c04:	4603      	mov	r3, r0
 8006c06:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006c08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <lfs_file_rawopencfg+0x398>)
 8006c16:	4629      	mov	r1, r5
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7fc fe05 	bl	8003828 <lfs_dir_get>
 8006c1e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8006c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	da02      	bge.n	8006c2c <lfs_file_rawopencfg+0x370>
                err = res;
 8006c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c28:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006c2a:	e002      	b.n	8006c32 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e00b      	b.n	8006c48 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8006c30:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f823 	bl	8006c8c <lfs_file_rawclose>
    return err;
 8006c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3760      	adds	r7, #96	; 0x60
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c50:	20100000 	.word	0x20100000
 8006c54:	700ffc00 	.word	0x700ffc00
 8006c58:	7ffffc00 	.word	0x7ffffc00

08006c5c <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <lfs_file_rawopen+0x2c>)
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff fe21 	bl	80068bc <lfs_file_rawopencfg>
 8006c7a:	6178      	str	r0, [r7, #20]
    return err;
 8006c7c:	697b      	ldr	r3, [r7, #20]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	0800c92c 	.word	0x0800c92c

08006c8c <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9e5 	bl	8007068 <lfs_file_rawsync>
 8006c9e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fc fb9b 	bl	80033de <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fb fd61 	bl	800277e <lfs_free>
    }

    return err;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006cc8:	b590      	push	{r4, r7, lr}
 8006cca:	b08d      	sub	sp, #52	; 0x34
 8006ccc:	af06      	add	r7, sp, #24
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8006cd2:	f107 030c 	add.w	r3, r7, #12
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7fc fc0b 	bl	80034f4 <lfs_alloc>
 8006cde:	6138      	str	r0, [r7, #16]
        if (err) {
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <lfs_file_relocate+0x22>
            return err;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	e0bb      	b.n	8006e62 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fc f868 	bl	8002dc4 <lfs_bd_erase>
 8006cf4:	6138      	str	r0, [r7, #16]
        if (err) {
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d006      	beq.n	8006d0a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006d02:	f000 809b 	beq.w	8006e3c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	e0ab      	b.n	8006e62 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	e069      	b.n	8006de4 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d027      	beq.n	8006d6c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f103 0008 	add.w	r0, r3, #8
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	889b      	ldrh	r3, [r3, #4]
 8006d34:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8006d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d3e:	2101      	movs	r1, #1
 8006d40:	9105      	str	r1, [sp, #20]
 8006d42:	f107 010b 	add.w	r1, r7, #11
 8006d46:	9104      	str	r1, [sp, #16]
 8006d48:	6979      	ldr	r1, [r7, #20]
 8006d4a:	9103      	str	r1, [sp, #12]
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	4b47      	ldr	r3, [pc, #284]	; (8006e6c <lfs_file_relocate+0x1a4>)
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	9200      	str	r2, [sp, #0]
 8006d54:	4623      	mov	r3, r4
 8006d56:	2200      	movs	r2, #0
 8006d58:	4601      	mov	r1, r0
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fc fd7f 	bl	800385e <lfs_dir_getread>
 8006d60:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01e      	beq.n	8006da6 <lfs_file_relocate+0xde>
                    return err;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	e07a      	b.n	8006e62 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8006d72:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	1ad4      	subs	r4, r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	2201      	movs	r2, #1
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	f107 020b 	add.w	r2, r7, #11
 8006d88:	9202      	str	r2, [sp, #8]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4623      	mov	r3, r4
 8006d92:	4602      	mov	r2, r0
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fb fd23 	bl	80027e0 <lfs_bd_read>
 8006d9a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <lfs_file_relocate+0xde>
                    return err;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	e05d      	b.n	8006e62 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f103 0110 	add.w	r1, r3, #16
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	9203      	str	r2, [sp, #12]
 8006db4:	f107 020b 	add.w	r2, r7, #11
 8006db8:	9202      	str	r2, [sp, #8]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	9201      	str	r2, [sp, #4]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fb ff51 	bl	8002c6c <lfs_bd_prog>
 8006dca:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006dd8:	d032      	beq.n	8006e40 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	e041      	b.n	8006e62 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3301      	adds	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d390      	bcc.n	8006d10 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69d9      	ldr	r1, [r3, #28]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f003 fb6d 	bl	800a4dc <memcpy>
        file->cache.block = lfs->pcache.block;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3310      	adds	r3, #16
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fb fcc6 	bl	80027b2 <lfs_cache_zero>

        file->block = nblock;
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e012      	b.n	8006e62 <lfs_file_relocate+0x19a>
                goto relocate;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <lfs_file_relocate+0x17a>
                    goto relocate;
 8006e40:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <lfs_file_relocate+0x1a8>)
 8006e46:	9200      	str	r2, [sp, #0]
 8006e48:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 8006e4c:	4909      	ldr	r1, [pc, #36]	; (8006e74 <lfs_file_relocate+0x1ac>)
 8006e4e:	480a      	ldr	r0, [pc, #40]	; (8006e78 <lfs_file_relocate+0x1b0>)
 8006e50:	f003 ff42 	bl	800acd8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3310      	adds	r3, #16
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fb fc9a 	bl	8002794 <lfs_cache_drop>
    while (true) {
 8006e60:	e737      	b.n	8006cd2 <lfs_file_relocate+0xa>
    }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd90      	pop	{r4, r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	fff7fc00 	.word	0xfff7fc00
 8006e70:	0800bec4 	.word	0x0800bec4
 8006e74:	0800bdc0 	.word	0x0800bdc0
 8006e78:	0800bf44 	.word	0x0800bf44

08006e7c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fc fb10 	bl	80034b4 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff ff16 	bl	8006cc8 <lfs_file_relocate>
 8006e9c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <lfs_file_outline+0x2c>
        return err;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e006      	b.n	8006eb6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8006ec0:	b590      	push	{r4, r7, lr}
 8006ec2:	b09f      	sub	sp, #124	; 0x7c
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d011      	beq.n	8006efa <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d105      	bne.n	8006eee <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	3340      	adds	r3, #64	; 0x40
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fb fc53 	bl	8002794 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80a4 	beq.w	8007050 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d176      	bne.n	8007008 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8006f1a:	f107 030c 	add.w	r3, r7, #12
 8006f1e:	2254      	movs	r2, #84	; 0x54
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f003 fb02 	bl	800a52c <memset>
                .ctz.head = file->ctz.head,
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f34:	2301      	movs	r3, #1
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8006f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8006f44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fb fc20 	bl	8002794 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8006f54:	e02b      	b.n	8006fae <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8006f56:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8006f5a:	f107 010c 	add.w	r1, r7, #12
 8006f5e:	2301      	movs	r3, #1
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f90d 	bl	8007180 <lfs_file_flushedread>
 8006f66:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8006f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da01      	bge.n	8006f72 <lfs_file_flush+0xb2>
                    return res;
 8006f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f70:	e06f      	b.n	8007052 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8006f72:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8006f76:	2301      	movs	r3, #1
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa08 	bl	8007390 <lfs_file_flushedwrite>
 8006f80:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8006f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da01      	bge.n	8006f8c <lfs_file_flush+0xcc>
                    return res;
 8006f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8a:	e062      	b.n	8007052 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f94:	d00b      	beq.n	8006fae <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8006f96:	f107 030c 	add.w	r3, r7, #12
 8006f9a:	3340      	adds	r3, #64	; 0x40
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fb fbf8 	bl	8002794 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fb fbf3 	bl	8002794 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d3cd      	bcc.n	8006f56 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7fb fda1 	bl	8002b0c <lfs_bd_flush>
 8006fca:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8006fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d026      	beq.n	8007020 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8006fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fd4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006fd8:	d001      	beq.n	8006fde <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8006fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fdc:	e039      	b.n	8007052 <lfs_file_flush+0x192>
                        goto relocate;
 8006fde:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	4a1d      	ldr	r2, [pc, #116]	; (800705c <lfs_file_flush+0x19c>)
 8006fe6:	9200      	str	r2, [sp, #0]
 8006fe8:	f640 425f 	movw	r2, #3167	; 0xc5f
 8006fec:	491c      	ldr	r1, [pc, #112]	; (8007060 <lfs_file_flush+0x1a0>)
 8006fee:	481d      	ldr	r0, [pc, #116]	; (8007064 <lfs_file_flush+0x1a4>)
 8006ff0:	f003 fe72 	bl	800acd8 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff fe66 	bl	8006cc8 <lfs_file_relocate>
 8006ffc:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8006ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0da      	beq.n	8006fba <lfs_file_flush+0xfa>
                    return err;
 8007004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007006:	e024      	b.n	8007052 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f7fb faf8 	bl	8002608 <lfs_max>
 8007018:	4602      	mov	r2, r0
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	635a      	str	r2, [r3, #52]	; 0x34
 800701e:	e000      	b.n	8007022 <lfs_file_flush+0x162>
                break;
 8007020:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800704e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3774      	adds	r7, #116	; 0x74
 8007056:	46bd      	mov	sp, r7
 8007058:	bd90      	pop	{r4, r7, pc}
 800705a:	bf00      	nop
 800705c:	0800bec4 	.word	0x0800bec4
 8007060:	0800bdc0 	.word	0x0800bdc0
 8007064:	0800bf44 	.word	0x0800bf44

08007068 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b090      	sub	sp, #64	; 0x40
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800707e:	2300      	movs	r3, #0
 8007080:	e07a      	b.n	8007178 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff ff1b 	bl	8006ec0 <lfs_file_flush>
 800708a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	e06a      	b.n	8007178 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d063      	beq.n	8007176 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fb fecd 	bl	8002e52 <lfs_pair_isnull>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f083 0301 	eor.w	r3, r3, #1
 80070be:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d058      	beq.n	8007176 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80070d0:	f240 2301 	movw	r3, #513	; 0x201
 80070d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
 80070e2:	e014      	b.n	800710e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80070e4:	f240 2302 	movw	r3, #514	; 0x202
 80070e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070f0:	3228      	adds	r2, #40	; 0x28
 80070f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070f6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80070fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fc f8c8 	bl	8003294 <lfs_ctz_tole32>
            buffer = &ctz;
 8007104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007108:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800710a:	2308      	movs	r3, #8
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	f103 0108 	add.w	r1, r3, #8
 8007114:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007116:	051a      	lsls	r2, r3, #20
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	889b      	ldrh	r3, [r3, #4]
 800711c:	029b      	lsls	r3, r3, #10
 800711e:	431a      	orrs	r2, r3
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	4313      	orrs	r3, r2
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	61fb      	str	r3, [r7, #28]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	889b      	ldrh	r3, [r3, #4]
 800712e:	029a      	lsls	r2, r3, #10
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	4313      	orrs	r3, r2
 8007138:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800713c:	623b      	str	r3, [r7, #32]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
 8007146:	f107 0218 	add.w	r2, r7, #24
 800714a:	2302      	movs	r3, #2
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff f969 	bl	8006424 <lfs_dir_commit>
 8007152:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	e006      	b.n	8007178 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3740      	adds	r7, #64	; 0x40
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007180:	b5b0      	push	{r4, r5, r7, lr}
 8007182:	b090      	sub	sp, #64	; 0x40
 8007184:	af06      	add	r7, sp, #24
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	429a      	cmp	r2, r3
 80071a0:	d301      	bcc.n	80071a6 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e0b7      	b.n	8007316 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	6838      	ldr	r0, [r7, #0]
 80071b4:	f7fb fa38 	bl	8002628 <lfs_min>
 80071b8:	6038      	str	r0, [r7, #0]
    nsize = size;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80071be:	e0a5      	b.n	800730c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d4:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d130      	bne.n	800723c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11c      	bne.n	8007220 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	3138      	adds	r1, #56	; 0x38
 80071fc:	68b8      	ldr	r0, [r7, #8]
 80071fe:	303c      	adds	r0, #60	; 0x3c
 8007200:	9003      	str	r0, [sp, #12]
 8007202:	9102      	str	r1, [sp, #8]
 8007204:	9201      	str	r2, [sp, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	462b      	mov	r3, r5
 800720a:	4622      	mov	r2, r4
 800720c:	2100      	movs	r1, #0
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff f965 	bl	80064de <lfs_ctz_find>
 8007214:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d009      	beq.n	8007230 <lfs_file_flushedread+0xb0>
                    return err;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	e07a      	b.n	8007316 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f06f 0201 	mvn.w	r2, #1
 8007226:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007240:	69da      	ldr	r2, [r3, #28]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	4619      	mov	r1, r3
 800724a:	6a38      	ldr	r0, [r7, #32]
 800724c:	f7fb f9ec 	bl	8002628 <lfs_min>
 8007250:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d026      	beq.n	80072ac <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f103 0408 	add.w	r4, r3, #8
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 800726e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	889b      	ldrh	r3, [r3, #4]
 8007274:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8007276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800727a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8007282:	69b8      	ldr	r0, [r7, #24]
 8007284:	9005      	str	r0, [sp, #20]
 8007286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007288:	9004      	str	r0, [sp, #16]
 800728a:	9103      	str	r1, [sp, #12]
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	4b24      	ldr	r3, [pc, #144]	; (8007320 <lfs_file_flushedread+0x1a0>)
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	9200      	str	r2, [sp, #0]
 8007294:	462b      	mov	r3, r5
 8007296:	2200      	movs	r2, #0
 8007298:	4621      	mov	r1, r4
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7fc fadf 	bl	800385e <lfs_dir_getread>
 80072a0:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01d      	beq.n	80072e4 <lfs_file_flushedread+0x164>
                return err;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	e034      	b.n	8007316 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80072b6:	69dc      	ldr	r4, [r3, #28]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072c0:	69b9      	ldr	r1, [r7, #24]
 80072c2:	9103      	str	r1, [sp, #12]
 80072c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072c6:	9102      	str	r1, [sp, #8]
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4623      	mov	r3, r4
 80072ce:	4602      	mov	r2, r0
 80072d0:	2100      	movs	r1, #0
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7fb fa84 	bl	80027e0 <lfs_bd_read>
 80072d8:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <lfs_file_flushedread+0x164>
                return err;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	e018      	b.n	8007316 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	441a      	add	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	441a      	add	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80072fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	4413      	add	r3, r2
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8007304:	6a3a      	ldr	r2, [r7, #32]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f47f af56 	bne.w	80071c0 <lfs_file_flushedread+0x40>
    }

    return size;
 8007314:	683b      	ldr	r3, [r7, #0]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3728      	adds	r7, #40	; 0x28
 800731a:	46bd      	mov	sp, r7
 800731c:	bdb0      	pop	{r4, r5, r7, pc}
 800731e:	bf00      	nop
 8007320:	fff7fc00 	.word	0xfff7fc00

08007324 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <lfs_file_rawread+0x28>
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <lfs_file_rawread+0x60>)
 8007340:	4a11      	ldr	r2, [pc, #68]	; (8007388 <lfs_file_rawread+0x64>)
 8007342:	f640 41ea 	movw	r1, #3306	; 0xcea
 8007346:	4811      	ldr	r0, [pc, #68]	; (800738c <lfs_file_rawread+0x68>)
 8007348:	f003 f840 	bl	800a3cc <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fdb0 	bl	8006ec0 <lfs_file_flush>
 8007360:	6178      	str	r0, [r7, #20]
        if (err) {
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <lfs_file_rawread+0x48>
            return err;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	e006      	b.n	800737a <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff ff04 	bl	8007180 <lfs_file_flushedread>
 8007378:	4603      	mov	r3, r0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	0800c0ec 	.word	0x0800c0ec
 8007388:	0800c938 	.word	0x0800c938
 800738c:	0800bdc0 	.word	0x0800bdc0

08007390 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007390:	b5b0      	push	{r4, r5, r7, lr}
 8007392:	b090      	sub	sp, #64	; 0x40
 8007394:	af04      	add	r7, sp, #16
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 810c 	beq.w	80075cc <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	441a      	add	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fb f920 	bl	8002608 <lfs_max>
 80073c8:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80073ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80073e0:	08db      	lsrs	r3, r3, #3
 80073e2:	e003      	b.n	80073ec <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e8:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80073ea:	08db      	lsrs	r3, r3, #3
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fb f91a 	bl	8002628 <lfs_min>
 80073f4:	4603      	mov	r3, r0
 80073f6:	4619      	mov	r1, r3
 80073f8:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80073fc:	f7fb f914 	bl	8002628 <lfs_min>
 8007400:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8007402:	429c      	cmp	r4, r3
 8007404:	f240 80e2 	bls.w	80075cc <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fd36 	bl	8006e7c <lfs_file_outline>
 8007410:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80d9 	beq.w	80075cc <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	e0d5      	b.n	80075d6 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d006      	beq.n	8007444 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800743e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d16b      	bne.n	800751c <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d157      	bne.n	8007500 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d12d      	bne.n	80074b8 <lfs_file_flushedwrite+0x128>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007460:	2b00      	cmp	r3, #0
 8007462:	d029      	beq.n	80074b8 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8007476:	3a01      	subs	r2, #1
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	3138      	adds	r1, #56	; 0x38
 800747c:	68b8      	ldr	r0, [r7, #8]
 800747e:	303c      	adds	r0, #60	; 0x3c
 8007480:	9003      	str	r0, [sp, #12]
 8007482:	9102      	str	r1, [sp, #8]
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	462b      	mov	r3, r5
 800748a:	4622      	mov	r2, r4
 800748c:	2100      	movs	r1, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff f825 	bl	80064de <lfs_ctz_find>
 8007494:	6238      	str	r0, [r7, #32]
                    if (err) {
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	e094      	b.n	80075d6 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	3340      	adds	r3, #64	; 0x40
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7fb f97d 	bl	80027b2 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7fb fffb 	bl	80034b4 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80074c4:	68fc      	ldr	r4, [r7, #12]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	3238      	adds	r2, #56	; 0x38
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	313c      	adds	r1, #60	; 0x3c
 80074d6:	9102      	str	r1, [sp, #8]
 80074d8:	9201      	str	r2, [sp, #4]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	462b      	mov	r3, r5
 80074de:	4622      	mov	r2, r4
 80074e0:	4601      	mov	r1, r0
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff f866 	bl	80065b4 <lfs_ctz_extend>
 80074e8:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00f      	beq.n	8007510 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	e06a      	b.n	80075d6 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f06f 0201 	mvn.w	r2, #1
 8007506:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007520:	69da      	ldr	r2, [r3, #28]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	4619      	mov	r1, r3
 800752a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752c:	f7fb f87c 	bl	8002628 <lfs_min>
 8007530:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007538:	68fc      	ldr	r4, [r7, #12]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007542:	69b9      	ldr	r1, [r7, #24]
 8007544:	9103      	str	r1, [sp, #12]
 8007546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007548:	9102      	str	r1, [sp, #8]
 800754a:	9201      	str	r2, [sp, #4]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	2301      	movs	r3, #1
 8007550:	4622      	mov	r2, r4
 8007552:	4601      	mov	r1, r0
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f7fb fb89 	bl	8002c6c <lfs_bd_prog>
 800755a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01c      	beq.n	800759c <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007568:	d007      	beq.n	800757a <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	e02d      	b.n	80075d6 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 800757a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff fba2 	bl	8006cc8 <lfs_file_relocate>
 8007584:	6178      	str	r0, [r7, #20]
            if (err) {
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0d2      	beq.n	8007532 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	e01c      	b.n	80075d6 <lfs_file_flushedwrite+0x246>
            break;
 800759c:	bf00      	nop
            }
        }

        file->pos += diff;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	441a      	add	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	441a      	add	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80075b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	4413      	add	r3, r2
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80075be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7fb ff74 	bl	80034b4 <lfs_alloc_ack>
    while (nsize > 0) {
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f47f af2b 	bne.w	800742a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 80075d4:	683b      	ldr	r3, [r7, #0]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3730      	adds	r7, #48	; 0x30
 80075da:	46bd      	mov	sp, r7
 80075dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080075e0 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <lfs_file_rawwrite+0x28>
 80075fa:	4b38      	ldr	r3, [pc, #224]	; (80076dc <lfs_file_rawwrite+0xfc>)
 80075fc:	4a38      	ldr	r2, [pc, #224]	; (80076e0 <lfs_file_rawwrite+0x100>)
 80075fe:	f640 5155 	movw	r1, #3413	; 0xd55
 8007602:	4838      	ldr	r0, [pc, #224]	; (80076e4 <lfs_file_rawwrite+0x104>)
 8007604:	f002 fee2 	bl	800a3cc <__assert_func>

    if (file->flags & LFS_F_READING) {
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d009      	beq.n	8007628 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff fc52 	bl	8006ec0 <lfs_file_flush>
 800761c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <lfs_file_rawwrite+0x48>
            return err;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	e055      	b.n	80076d4 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <lfs_file_rawwrite+0x68>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	429a      	cmp	r2, r3
 800763e:	d203      	bcs.n	8007648 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	441a      	add	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	429a      	cmp	r2, r3
 8007656:	d902      	bls.n	800765e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8007658:	f06f 031a 	mvn.w	r3, #26
 800765c:	e03a      	b.n	80076d4 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d121      	bne.n	80076ae <lfs_file_rawwrite+0xce>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	429a      	cmp	r2, r3
 8007674:	d91b      	bls.n	80076ae <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8007684:	e00e      	b.n	80076a4 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]
 800768a:	f107 0217 	add.w	r2, r7, #23
 800768e:	2301      	movs	r3, #1
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f7ff fe7c 	bl	8007390 <lfs_file_flushedwrite>
 8007698:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	2b00      	cmp	r3, #0
 800769e:	da01      	bge.n	80076a4 <lfs_file_rawwrite+0xc4>
                return res;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	e017      	b.n	80076d4 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a8:	6a3a      	ldr	r2, [r7, #32]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d8eb      	bhi.n	8007686 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff fe6b 	bl	8007390 <lfs_file_flushedwrite>
 80076ba:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da01      	bge.n	80076c6 <lfs_file_rawwrite+0xe6>
        return nsize;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	e006      	b.n	80076d4 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 80076d2:	69bb      	ldr	r3, [r7, #24]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3728      	adds	r7, #40	; 0x28
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	0800c11c 	.word	0x0800c11c
 80076e0:	0800c94c 	.word	0x0800c94c
 80076e4:	0800bdc0 	.word	0x0800bdc0

080076e8 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08c      	sub	sp, #48	; 0x30
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <lfs_init+0x2c>
 8007706:	4b92      	ldr	r3, [pc, #584]	; (8007950 <lfs_init+0x268>)
 8007708:	4a92      	ldr	r2, [pc, #584]	; (8007954 <lfs_init+0x26c>)
 800770a:	f640 7146 	movw	r1, #3910	; 0xf46
 800770e:	4892      	ldr	r0, [pc, #584]	; (8007958 <lfs_init+0x270>)
 8007710:	f002 fe5c 	bl	800a3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <lfs_init+0x44>
 800771e:	4b8f      	ldr	r3, [pc, #572]	; (800795c <lfs_init+0x274>)
 8007720:	4a8c      	ldr	r2, [pc, #560]	; (8007954 <lfs_init+0x26c>)
 8007722:	f640 7147 	movw	r1, #3911	; 0xf47
 8007726:	488c      	ldr	r0, [pc, #560]	; (8007958 <lfs_init+0x270>)
 8007728:	f002 fe50 	bl	800a3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <lfs_init+0x5c>
 8007736:	4b8a      	ldr	r3, [pc, #552]	; (8007960 <lfs_init+0x278>)
 8007738:	4a86      	ldr	r2, [pc, #536]	; (8007954 <lfs_init+0x26c>)
 800773a:	f640 7148 	movw	r1, #3912	; 0xf48
 800773e:	4886      	ldr	r0, [pc, #536]	; (8007958 <lfs_init+0x270>)
 8007740:	f002 fe44 	bl	800a3cc <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800774e:	6952      	ldr	r2, [r2, #20]
 8007750:	fbb3 f1f2 	udiv	r1, r3, r2
 8007754:	fb01 f202 	mul.w	r2, r1, r2
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d006      	beq.n	800776c <lfs_init+0x84>
 800775e:	4b81      	ldr	r3, [pc, #516]	; (8007964 <lfs_init+0x27c>)
 8007760:	4a7c      	ldr	r2, [pc, #496]	; (8007954 <lfs_init+0x26c>)
 8007762:	f640 714c 	movw	r1, #3916	; 0xf4c
 8007766:	487c      	ldr	r0, [pc, #496]	; (8007958 <lfs_init+0x270>)
 8007768:	f002 fe30 	bl	800a3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007776:	6992      	ldr	r2, [r2, #24]
 8007778:	fbb3 f1f2 	udiv	r1, r3, r2
 800777c:	fb01 f202 	mul.w	r2, r1, r2
 8007780:	1a9b      	subs	r3, r3, r2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <lfs_init+0xac>
 8007786:	4b78      	ldr	r3, [pc, #480]	; (8007968 <lfs_init+0x280>)
 8007788:	4a72      	ldr	r2, [pc, #456]	; (8007954 <lfs_init+0x26c>)
 800778a:	f640 714d 	movw	r1, #3917	; 0xf4d
 800778e:	4872      	ldr	r0, [pc, #456]	; (8007958 <lfs_init+0x270>)
 8007790:	f002 fe1c 	bl	800a3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800779e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80077a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80077a4:	fb01 f202 	mul.w	r2, r1, r2
 80077a8:	1a9b      	subs	r3, r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d006      	beq.n	80077bc <lfs_init+0xd4>
 80077ae:	4b6f      	ldr	r3, [pc, #444]	; (800796c <lfs_init+0x284>)
 80077b0:	4a68      	ldr	r2, [pc, #416]	; (8007954 <lfs_init+0x26c>)
 80077b2:	f640 714e 	movw	r1, #3918	; 0xf4e
 80077b6:	4868      	ldr	r0, [pc, #416]	; (8007958 <lfs_init+0x270>)
 80077b8:	f002 fe08 	bl	800a3cc <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	3b08      	subs	r3, #8
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fa ff62 	bl	8002696 <lfs_npw2>
 80077d2:	4603      	mov	r3, r0
 80077d4:	009a      	lsls	r2, r3, #2
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d906      	bls.n	80077ee <lfs_init+0x106>
 80077e0:	4b63      	ldr	r3, [pc, #396]	; (8007970 <lfs_init+0x288>)
 80077e2:	4a5c      	ldr	r2, [pc, #368]	; (8007954 <lfs_init+0x26c>)
 80077e4:	f640 7151 	movw	r1, #3921	; 0xf51
 80077e8:	485b      	ldr	r0, [pc, #364]	; (8007958 <lfs_init+0x270>)
 80077ea:	f002 fdef 	bl	800a3cc <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <lfs_init+0x11e>
 80077f8:	4b5e      	ldr	r3, [pc, #376]	; (8007974 <lfs_init+0x28c>)
 80077fa:	4a56      	ldr	r2, [pc, #344]	; (8007954 <lfs_init+0x26c>)
 80077fc:	f640 715a 	movw	r1, #3930	; 0xf5a
 8007800:	4855      	ldr	r0, [pc, #340]	; (8007958 <lfs_init+0x270>)
 8007802:	f002 fde3 	bl	800a3cc <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	e010      	b.n	800783e <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	4618      	mov	r0, r3
 8007824:	f7fa ff9f 	bl	8002766 <lfs_malloc>
 8007828:	4602      	mov	r2, r0
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8007836:	f06f 030b 	mvn.w	r3, #11
 800783a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800783c:	e0fd      	b.n	8007a3a <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800784c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	61da      	str	r2, [r3, #28]
 8007852:	e010      	b.n	8007876 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	4618      	mov	r0, r3
 800785c:	f7fa ff83 	bl	8002766 <lfs_malloc>
 8007860:	4602      	mov	r2, r0
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800786e:	f06f 030b 	mvn.w	r3, #11
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007874:	e0e1      	b.n	8007a3a <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fa ff99 	bl	80027b2 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3310      	adds	r3, #16
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fa ff93 	bl	80027b2 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <lfs_init+0x1bc>
 8007896:	4b38      	ldr	r3, [pc, #224]	; (8007978 <lfs_init+0x290>)
 8007898:	4a2e      	ldr	r2, [pc, #184]	; (8007954 <lfs_init+0x26c>)
 800789a:	f640 7178 	movw	r1, #3960	; 0xf78
 800789e:	482e      	ldr	r0, [pc, #184]	; (8007958 <lfs_init+0x270>)
 80078a0:	f002 fd94 	bl	800a3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <lfs_init+0x1d8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d006      	beq.n	80078ce <lfs_init+0x1e6>
 80078c0:	4b2e      	ldr	r3, [pc, #184]	; (800797c <lfs_init+0x294>)
 80078c2:	4a24      	ldr	r2, [pc, #144]	; (8007954 <lfs_init+0x26c>)
 80078c4:	f640 7179 	movw	r1, #3961	; 0xf79
 80078c8:	4823      	ldr	r0, [pc, #140]	; (8007958 <lfs_init+0x270>)
 80078ca:	f002 fd7f 	bl	800a3cc <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	665a      	str	r2, [r3, #100]	; 0x64
 80078e2:	e010      	b.n	8007906 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fa ff3b 	bl	8002766 <lfs_malloc>
 80078f0:	4602      	mov	r2, r0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d103      	bne.n	8007906 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80078fe:	f06f 030b 	mvn.w	r3, #11
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007904:	e099      	b.n	8007a3a <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800790a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790c:	2bff      	cmp	r3, #255	; 0xff
 800790e:	d906      	bls.n	800791e <lfs_init+0x236>
 8007910:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <lfs_init+0x298>)
 8007912:	4a10      	ldr	r2, [pc, #64]	; (8007954 <lfs_init+0x26c>)
 8007914:	f640 7186 	movw	r1, #3974	; 0xf86
 8007918:	480f      	ldr	r0, [pc, #60]	; (8007958 <lfs_init+0x270>)
 800791a:	f002 fd57 	bl	800a3cc <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d102      	bne.n	8007936 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	22ff      	movs	r2, #255	; 0xff
 8007934:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	da23      	bge.n	8007988 <lfs_init+0x2a0>
 8007940:	4b10      	ldr	r3, [pc, #64]	; (8007984 <lfs_init+0x29c>)
 8007942:	4a04      	ldr	r2, [pc, #16]	; (8007954 <lfs_init+0x26c>)
 8007944:	f640 718c 	movw	r1, #3980	; 0xf8c
 8007948:	4803      	ldr	r0, [pc, #12]	; (8007958 <lfs_init+0x270>)
 800794a:	f002 fd3f 	bl	800a3cc <__assert_func>
 800794e:	bf00      	nop
 8007950:	0800c14c 	.word	0x0800c14c
 8007954:	0800c960 	.word	0x0800c960
 8007958:	0800bdc0 	.word	0x0800bdc0
 800795c:	0800c168 	.word	0x0800c168
 8007960:	0800c184 	.word	0x0800c184
 8007964:	0800c1a0 	.word	0x0800c1a0
 8007968:	0800c1d0 	.word	0x0800c1d0
 800796c:	0800c200 	.word	0x0800c200
 8007970:	0800c234 	.word	0x0800c234
 8007974:	0800c280 	.word	0x0800c280
 8007978:	0800c29c 	.word	0x0800c29c
 800797c:	0800c2bc 	.word	0x0800c2bc
 8007980:	0800c310 	.word	0x0800c310
 8007984:	0800c32c 	.word	0x0800c32c
    lfs->file_max = lfs->cfg->file_max;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80079a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d906      	bls.n	80079be <lfs_init+0x2d6>
 80079b0:	4b26      	ldr	r3, [pc, #152]	; (8007a4c <lfs_init+0x364>)
 80079b2:	4a27      	ldr	r2, [pc, #156]	; (8007a50 <lfs_init+0x368>)
 80079b4:	f640 7192 	movw	r1, #3986	; 0xf92
 80079b8:	4826      	ldr	r0, [pc, #152]	; (8007a54 <lfs_init+0x36c>)
 80079ba:	f002 fd07 	bl	800a3cc <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80079d6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d906      	bls.n	80079f6 <lfs_init+0x30e>
 80079e8:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <lfs_init+0x370>)
 80079ea:	4a19      	ldr	r2, [pc, #100]	; (8007a50 <lfs_init+0x368>)
 80079ec:	f640 7198 	movw	r1, #3992	; 0xf98
 80079f0:	4818      	ldr	r0, [pc, #96]	; (8007a54 <lfs_init+0x36c>)
 80079f2:	f002 fceb 	bl	800a3cc <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079fc:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	333c      	adds	r3, #60	; 0x3c
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	605a      	str	r2, [r3, #4]
 8007a1c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3330      	adds	r3, #48	; 0x30
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3348      	adds	r3, #72	; 0x48
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	605a      	str	r2, [r3, #4]
 8007a34:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e003      	b.n	8007a42 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f80e 	bl	8007a5c <lfs_deinit>
    return err;
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3730      	adds	r7, #48	; 0x30
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	0800c350 	.word	0x0800c350
 8007a50:	0800c960 	.word	0x0800c960
 8007a54:	0800bdc0 	.word	0x0800bdc0
 8007a58:	0800c36c 	.word	0x0800c36c

08007a5c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fa fe83 	bl	800277e <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fa fe79 	bl	800277e <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa fe6f 	bl	800277e <lfs_free>
    }

    return 0;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b0a0      	sub	sp, #128	; 0x80
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
    int err = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fe13 	bl	80076e8 <lfs_init>
 8007ac2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <lfs_rawformat+0x22>
            return err;
 8007aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007acc:	e082      	b.n	8007bd4 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2100      	movs	r1, #0
 8007adc:	f002 fd26 	bl	800a52c <memset>
        lfs->free.off = 0;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fa fd96 	bl	8002628 <lfs_min>
 8007afc:	4602      	mov	r2, r0
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7fb fcd3 	bl	80034b4 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8007b0e:	f107 030c 	add.w	r3, r7, #12
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fd faab 	bl	8005070 <lfs_dir_alloc>
 8007b1a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d14f      	bne.n	8007bc2 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8007b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b26:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b2c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8007b2e:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b34:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8007b36:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8007b3c:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8007b42:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8007b48:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007b4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fb fbf0 	bl	8003334 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007b54:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <lfs_rawformat+0x130>)
 8007b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b58:	2300      	movs	r3, #0
 8007b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b5c:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <lfs_rawformat+0x134>)
 8007b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b60:	4b20      	ldr	r3, [pc, #128]	; (8007be4 <lfs_rawformat+0x138>)
 8007b62:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b64:	4b20      	ldr	r3, [pc, #128]	; (8007be8 <lfs_rawformat+0x13c>)
 8007b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b6e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007b72:	f107 010c 	add.w	r1, r7, #12
 8007b76:	2303      	movs	r3, #3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fe fc53 	bl	8006424 <lfs_dir_commit>
 8007b7e:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8007b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d11f      	bne.n	8007bc6 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007b8c:	f107 010c 	add.w	r1, r7, #12
 8007b90:	2300      	movs	r3, #0
 8007b92:	2200      	movs	r2, #0
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7fe fc45 	bl	8006424 <lfs_dir_commit>
 8007b9a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d113      	bne.n	8007bca <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8007baa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007bae:	f107 030c 	add.w	r3, r7, #12
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7fc fed7 	bl	8004968 <lfs_dir_fetch>
 8007bba:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	e004      	b.n	8007bcc <lfs_rawformat+0x120>
            goto cleanup;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <lfs_rawformat+0x120>
            goto cleanup;
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <lfs_rawformat+0x120>
            goto cleanup;
 8007bca:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ff45 	bl	8007a5c <lfs_deinit>
    return err;
 8007bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3780      	adds	r7, #128	; 0x80
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	40100000 	.word	0x40100000
 8007be0:	0ff00008 	.word	0x0ff00008
 8007be4:	0800c39c 	.word	0x0800c39c
 8007be8:	20100018 	.word	0x20100018

08007bec <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b09c      	sub	sp, #112	; 0x70
 8007bf0:	af04      	add	r7, sp, #16
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fd75 	bl	80076e8 <lfs_init>
 8007bfe:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8007c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <lfs_rawmount+0x1e>
        return err;
 8007c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c08:	e192      	b.n	8007f30 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007c0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c0e:	2220      	movs	r2, #32
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 fc8a 	bl	800a52c <memset>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8007c20:	e10b      	b.n	8007e3a <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	085b      	lsrs	r3, r3, #1
 8007c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d303      	bcc.n	8007c38 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8007c30:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007c34:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007c36:	e177      	b.n	8007f28 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8007c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
 8007c42:	4b8a      	ldr	r3, [pc, #552]	; (8007e6c <lfs_rawmount+0x280>)
 8007c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c46:	2308      	movs	r3, #8
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8007c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c4e:	f103 0218 	add.w	r2, r3, #24
 8007c52:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c5a:	9303      	str	r3, [sp, #12]
 8007c5c:	4b84      	ldr	r3, [pc, #528]	; (8007e70 <lfs_rawmount+0x284>)
 8007c5e:	9302      	str	r3, [sp, #8]
 8007c60:	2300      	movs	r3, #0
 8007c62:	9301      	str	r3, [sp, #4]
 8007c64:	4b83      	ldr	r3, [pc, #524]	; (8007e74 <lfs_rawmount+0x288>)
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4b83      	ldr	r3, [pc, #524]	; (8007e78 <lfs_rawmount+0x28c>)
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fc fb0e 	bl	800428c <lfs_dir_fetchmatch>
 8007c70:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8007c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da02      	bge.n	8007c7e <lfs_rawmount+0x92>
            err = tag;
 8007c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007c7c:	e154      	b.n	8007f28 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8007c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80cd 	beq.w	8007e20 <lfs_rawmount+0x234>
 8007c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fb f996 	bl	8002fba <lfs_tag_isdelete>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f083 0301 	eor.w	r3, r3, #1
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 80c2 	beq.w	8007e20 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8007ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007ca8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007cac:	f107 030c 	add.w	r3, r7, #12
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4b72      	ldr	r3, [pc, #456]	; (8007e7c <lfs_rawmount+0x290>)
 8007cb4:	4a70      	ldr	r2, [pc, #448]	; (8007e78 <lfs_rawmount+0x28c>)
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fb fdb6 	bl	8003828 <lfs_dir_get>
 8007cbc:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8007cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	da02      	bge.n	8007cca <lfs_rawmount+0xde>
                err = tag;
 8007cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007cc8:	e12e      	b.n	8007f28 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8007cca:	f107 030c 	add.w	r3, r7, #12
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fb faf8 	bl	80032c4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8007ce2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d103      	bne.n	8007cf2 <lfs_rawmount+0x106>
 8007cea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d011      	beq.n	8007d16 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8007cf2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8007cf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007cfa:	4961      	ldr	r1, [pc, #388]	; (8007e80 <lfs_rawmount+0x294>)
 8007cfc:	9101      	str	r1, [sp, #4]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	f241 0233 	movw	r2, #4147	; 0x1033
 8007d06:	495f      	ldr	r1, [pc, #380]	; (8007e84 <lfs_rawmount+0x298>)
 8007d08:	485f      	ldr	r0, [pc, #380]	; (8007e88 <lfs_rawmount+0x29c>)
 8007d0a:	f002 ffe5 	bl	800acd8 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8007d0e:	f06f 0315 	mvn.w	r3, #21
 8007d12:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007d14:	e083      	b.n	8007e1e <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d018      	beq.n	8007d4e <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d910      	bls.n	8007d48 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2c:	4954      	ldr	r1, [pc, #336]	; (8007e80 <lfs_rawmount+0x294>)
 8007d2e:	9101      	str	r1, [sp, #4]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4613      	mov	r3, r2
 8007d34:	f241 023c 	movw	r2, #4156	; 0x103c
 8007d38:	4952      	ldr	r1, [pc, #328]	; (8007e84 <lfs_rawmount+0x298>)
 8007d3a:	4854      	ldr	r0, [pc, #336]	; (8007e8c <lfs_rawmount+0x2a0>)
 8007d3c:	f002 ffcc 	bl	800acd8 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8007d40:	f06f 0315 	mvn.w	r3, #21
 8007d44:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007d46:	e06a      	b.n	8007e1e <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d018      	beq.n	8007d86 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d910      	bls.n	8007d80 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d64:	4946      	ldr	r1, [pc, #280]	; (8007e80 <lfs_rawmount+0x294>)
 8007d66:	9101      	str	r1, [sp, #4]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	f241 0247 	movw	r2, #4167	; 0x1047
 8007d70:	4944      	ldr	r1, [pc, #272]	; (8007e84 <lfs_rawmount+0x298>)
 8007d72:	4847      	ldr	r0, [pc, #284]	; (8007e90 <lfs_rawmount+0x2a4>)
 8007d74:	f002 ffb0 	bl	800acd8 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8007d78:	f06f 0315 	mvn.w	r3, #21
 8007d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007d7e:	e04e      	b.n	8007e1e <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d018      	beq.n	8007dbe <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8007d8c:	6a3a      	ldr	r2, [r7, #32]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d910      	bls.n	8007db8 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8007d96:	6a3a      	ldr	r2, [r7, #32]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9c:	4938      	ldr	r1, [pc, #224]	; (8007e80 <lfs_rawmount+0x294>)
 8007d9e:	9101      	str	r1, [sp, #4]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4613      	mov	r3, r2
 8007da4:	f241 0252 	movw	r2, #4178	; 0x1052
 8007da8:	4936      	ldr	r1, [pc, #216]	; (8007e84 <lfs_rawmount+0x298>)
 8007daa:	483a      	ldr	r0, [pc, #232]	; (8007e94 <lfs_rawmount+0x2a8>)
 8007dac:	f002 ff94 	bl	800acd8 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8007db0:	f06f 0315 	mvn.w	r3, #21
 8007db4:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007db6:	e032      	b.n	8007e1e <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8007db8:	6a3a      	ldr	r2, [r7, #32]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d011      	beq.n	8007dee <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	492b      	ldr	r1, [pc, #172]	; (8007e80 <lfs_rawmount+0x294>)
 8007dd4:	9101      	str	r1, [sp, #4]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	f241 025c 	movw	r2, #4188	; 0x105c
 8007dde:	4929      	ldr	r1, [pc, #164]	; (8007e84 <lfs_rawmount+0x298>)
 8007de0:	482d      	ldr	r0, [pc, #180]	; (8007e98 <lfs_rawmount+0x2ac>)
 8007de2:	f002 ff79 	bl	800acd8 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8007de6:	f06f 0315 	mvn.w	r3, #21
 8007dea:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007dec:	e017      	b.n	8007e1e <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d012      	beq.n	8007e20 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	491f      	ldr	r1, [pc, #124]	; (8007e80 <lfs_rawmount+0x294>)
 8007e04:	9101      	str	r1, [sp, #4]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	f241 0263 	movw	r2, #4195	; 0x1063
 8007e0e:	491d      	ldr	r1, [pc, #116]	; (8007e84 <lfs_rawmount+0x298>)
 8007e10:	4822      	ldr	r0, [pc, #136]	; (8007e9c <lfs_rawmount+0x2b0>)
 8007e12:	f002 ff61 	bl	800acd8 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8007e16:	f06f 0315 	mvn.w	r3, #21
 8007e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007e1c:	bf00      	nop
            goto cleanup;
 8007e1e:	e083      	b.n	8007f28 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fc fdb7 	bl	80049a0 <lfs_dir_getgstate>
 8007e32:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8007e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d175      	bne.n	8007f26 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8007e3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e3e:	3318      	adds	r3, #24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fb f806 	bl	8002e52 <lfs_pair_isnull>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f083 0301 	eor.w	r3, r3, #1
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f47f aee7 	bne.w	8007c22 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3320      	adds	r3, #32
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fa fffa 	bl	8002e52 <lfs_pair_isnull>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01d      	beq.n	8007ea0 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8007e64:	f06f 0315 	mvn.w	r3, #21
 8007e68:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8007e6a:	e05d      	b.n	8007f28 <lfs_rawmount+0x33c>
 8007e6c:	0800c39c 	.word	0x0800c39c
 8007e70:	08004a05 	.word	0x08004a05
 8007e74:	0ff00008 	.word	0x0ff00008
 8007e78:	7ffffc00 	.word	0x7ffffc00
 8007e7c:	20100018 	.word	0x20100018
 8007e80:	0800bec4 	.word	0x0800bec4
 8007e84:	0800bdc0 	.word	0x0800bdc0
 8007e88:	0800c3a8 	.word	0x0800c3a8
 8007e8c:	0800c3d4 	.word	0x0800c3d4
 8007e90:	0800c408 	.word	0x0800c408
 8007e94:	0800c43c 	.word	0x0800c43c
 8007e98:	0800c470 	.word	0x0800c470
 8007e9c:	0800c4a4 	.word	0x0800c4a4
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3330      	adds	r3, #48	; 0x30
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fb f92b 	bl	8003100 <lfs_gstate_iszero>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f083 0301 	eor.w	r3, r3, #1
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d010      	beq.n	8007ed8 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ec2:	481d      	ldr	r0, [pc, #116]	; (8007f38 <lfs_rawmount+0x34c>)
 8007ec4:	9002      	str	r0, [sp, #8]
 8007ec6:	9201      	str	r2, [sp, #4]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	f241 0279 	movw	r2, #4217	; 0x1079
 8007ed0:	491a      	ldr	r1, [pc, #104]	; (8007f3c <lfs_rawmount+0x350>)
 8007ed2:	481b      	ldr	r0, [pc, #108]	; (8007f40 <lfs_rawmount+0x354>)
 8007ed4:	f002 ff00 	bl	800acd8 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fb f85e 	bl	8002f9e <lfs_tag_isvalid>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f083 0301 	eor.w	r3, r3, #1
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef0:	441a      	add	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	333c      	adds	r3, #60	; 0x3c
 8007efc:	3230      	adds	r2, #48	; 0x30
 8007efe:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f00:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f0c:	6a12      	ldr	r2, [r2, #32]
 8007f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f12:	fb01 f202 	mul.w	r2, r1, r2
 8007f16:	1a9a      	subs	r2, r3, r2
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7fb fad8 	bl	80034d2 <lfs_alloc_drop>

    return 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e004      	b.n	8007f30 <lfs_rawmount+0x344>
            goto cleanup;
 8007f26:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f80b 	bl	8007f44 <lfs_rawunmount>
    return err;
 8007f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3760      	adds	r7, #96	; 0x60
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	0800bec4 	.word	0x0800bec4
 8007f3c:	0800bdc0 	.word	0x0800bdc0
 8007f40:	0800c4d4 	.word	0x0800c4d4

08007f44 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff fd85 	bl	8007a5c <lfs_deinit>
 8007f52:	4603      	mov	r3, r0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8007f5c:	b590      	push	{r4, r7, lr}
 8007f5e:	b09d      	sub	sp, #116	; 0x74
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007f6a:	f107 0318 	add.w	r3, r7, #24
 8007f6e:	2220      	movs	r2, #32
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 fada 	bl	800a52c <memset>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8007f80:	e0a7      	b.n	80080d2 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	085b      	lsrs	r3, r3, #1
 8007f8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d302      	bcc.n	8007f96 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8007f90:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007f94:	e102      	b.n	800819c <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8007f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f98:	3301      	adds	r3, #1
 8007f9a:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fa0:	e013      	b.n	8007fca <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8007fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fa4:	3306      	adds	r3, #6
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	3360      	adds	r3, #96	; 0x60
 8007faa:	443b      	add	r3, r7
 8007fac:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
 8007fb8:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <lfs_fs_rawtraverse+0x68>
                return err;
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	e0eb      	b.n	800819c <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8007fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	dde8      	ble.n	8007fa2 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8007fd0:	f107 0318 	add.w	r3, r7, #24
 8007fd4:	f103 0218 	add.w	r2, r3, #24
 8007fd8:	f107 0318 	add.w	r3, r7, #24
 8007fdc:	4619      	mov	r1, r3
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f7fc fcc2 	bl	8004968 <lfs_dir_fetch>
 8007fe4:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8007fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <lfs_fs_rawtraverse+0x94>
            return err;
 8007fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fee:	e0d5      	b.n	800819c <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007ff6:	e067      	b.n	80080c8 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8007ff8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ffc:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8007ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008002:	f043 0308 	orr.w	r3, r3, #8
 8008006:	f107 0118 	add.w	r1, r7, #24
 800800a:	f107 0210 	add.w	r2, r7, #16
 800800e:	9200      	str	r2, [sp, #0]
 8008010:	4a64      	ldr	r2, [pc, #400]	; (80081a4 <lfs_fs_rawtraverse+0x248>)
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7fb fc08 	bl	8003828 <lfs_dir_get>
 8008018:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800801a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801c:	2b00      	cmp	r3, #0
 800801e:	da05      	bge.n	800802c <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8008020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008022:	f113 0f02 	cmn.w	r3, #2
 8008026:	d049      	beq.n	80080bc <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	e0b7      	b.n	800819c <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800802c:	f107 0310 	add.w	r3, r7, #16
 8008030:	4618      	mov	r0, r3
 8008032:	f7fb f917 	bl	8003264 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8008036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008038:	4618      	mov	r0, r3
 800803a:	f7fa ffe1 	bl	8003000 <lfs_tag_type3>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	f240 2302 	movw	r3, #514	; 0x202
 8008046:	429a      	cmp	r2, r3
 8008048:	d113      	bne.n	8008072 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800804a:	68f9      	ldr	r1, [r7, #12]
 800804c:	6938      	ldr	r0, [r7, #16]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	9202      	str	r2, [sp, #8]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	9201      	str	r2, [sp, #4]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4603      	mov	r3, r0
 800805c:	460a      	mov	r2, r1
 800805e:	2100      	movs	r1, #0
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f7fe fbaf 	bl	80067c4 <lfs_ctz_traverse>
 8008066:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8008068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d027      	beq.n	80080be <lfs_fs_rawtraverse+0x162>
                    return err;
 800806e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008070:	e094      	b.n	800819c <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8008072:	78fb      	ldrb	r3, [r7, #3]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d022      	beq.n	80080be <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8008078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807a:	4618      	mov	r0, r3
 800807c:	f7fa ffc0 	bl	8003000 <lfs_tag_type3>
 8008080:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8008082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008086:	d11a      	bne.n	80080be <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8008088:	2300      	movs	r3, #0
 800808a:	653b      	str	r3, [r7, #80]	; 0x50
 800808c:	e012      	b.n	80080b4 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800808e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	f107 0210 	add.w	r2, r7, #16
 8008096:	4413      	add	r3, r2
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	4611      	mov	r1, r2
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
 80080a2:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 80080a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <lfs_fs_rawtraverse+0x152>
                        return err;
 80080aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ac:	e076      	b.n	800819c <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 80080ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b0:	3301      	adds	r3, #1
 80080b2:	653b      	str	r3, [r7, #80]	; 0x50
 80080b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	dde9      	ble.n	800808e <lfs_fs_rawtraverse+0x132>
 80080ba:	e000      	b.n	80080be <lfs_fs_rawtraverse+0x162>
                    continue;
 80080bc:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80080be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080c2:	3301      	adds	r3, #1
 80080c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80080c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80080ca:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d392      	bcc.n	8007ff8 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 80080d2:	f107 0318 	add.w	r3, r7, #24
 80080d6:	3318      	adds	r3, #24
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fa feba 	bl	8002e52 <lfs_pair_isnull>
 80080de:	4603      	mov	r3, r0
 80080e0:	f083 0301 	eor.w	r3, r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f47f af4b 	bne.w	8007f82 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f2:	e04f      	b.n	8008194 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 80080f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f6:	799b      	ldrb	r3, [r3, #6]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d147      	bne.n	800818c <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80080fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01d      	beq.n	8008144 <lfs_fs_rawtraverse+0x1e8>
 8008108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d117      	bne.n	8008144 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8008114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008116:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8008120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	9202      	str	r2, [sp, #8]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	9201      	str	r2, [sp, #4]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4623      	mov	r3, r4
 8008130:	4602      	mov	r2, r0
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7fe fb46 	bl	80067c4 <lfs_ctz_traverse>
 8008138:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800813a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8008140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008142:	e02b      	b.n	800819c <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8008144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01e      	beq.n	800818e <lfs_fs_rawtraverse+0x232>
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d118      	bne.n	800818e <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800815c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008166:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	9202      	str	r2, [sp, #8]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	9201      	str	r2, [sp, #4]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	4623      	mov	r3, r4
 8008178:	4602      	mov	r2, r0
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7fe fb22 	bl	80067c4 <lfs_ctz_traverse>
 8008180:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8008182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <lfs_fs_rawtraverse+0x232>
                return err;
 8008188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800818a:	e007      	b.n	800819c <lfs_fs_rawtraverse+0x240>
            continue;
 800818c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800818e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1ac      	bne.n	80080f4 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3764      	adds	r7, #100	; 0x64
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd90      	pop	{r4, r7, pc}
 80081a4:	700ffc00 	.word	0x700ffc00

080081a8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 80081c4:	e024      	b.n	8008210 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d302      	bcc.n	80081da <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80081d4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80081d8:	e027      	b.n	800822a <lfs_fs_pred+0x82>
        }
        cycle += 1;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	3301      	adds	r3, #1
 80081de:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3318      	adds	r3, #24
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fa fe4e 	bl	8002e88 <lfs_pair_cmp>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <lfs_fs_pred+0x4e>
            return 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e019      	b.n	800822a <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3318      	adds	r3, #24
 80081fa:	461a      	mov	r2, r3
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7fc fbb2 	bl	8004968 <lfs_dir_fetch>
 8008204:	6138      	str	r0, [r7, #16]
        if (err) {
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <lfs_fs_pred+0x68>
            return err;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	e00c      	b.n	800822a <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3318      	adds	r3, #24
 8008214:	4618      	mov	r0, r3
 8008216:	f7fa fe1c 	bl	8002e52 <lfs_pair_isnull>
 800821a:	4603      	mov	r3, r0
 800821c:	f083 0301 	eor.w	r3, r3, #1
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1cf      	bne.n	80081c6 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8008226:	f06f 0301 	mvn.w	r3, #1
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8008232:	b5b0      	push	{r4, r5, r7, lr}
 8008234:	b08e      	sub	sp, #56	; 0x38
 8008236:	af04      	add	r7, sp, #16
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8008252:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8008258:	69dd      	ldr	r5, [r3, #28]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	6852      	ldr	r2, [r2, #4]
 8008262:	2108      	movs	r1, #8
 8008264:	9103      	str	r1, [sp, #12]
 8008266:	f107 0110 	add.w	r1, r7, #16
 800826a:	9102      	str	r1, [sp, #8]
 800826c:	9201      	str	r2, [sp, #4]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	462b      	mov	r3, r5
 8008272:	4622      	mov	r2, r4
 8008274:	4601      	mov	r1, r0
 8008276:	6a38      	ldr	r0, [r7, #32]
 8008278:	f7fa fab2 	bl	80027e0 <lfs_bd_read>
 800827c:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <lfs_fs_parent_match+0x56>
        return err;
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	e012      	b.n	80082ae <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8008288:	f107 0310 	add.w	r3, r7, #16
 800828c:	4618      	mov	r0, r3
 800828e:	f7fa fe52 	bl	8002f36 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	1d1a      	adds	r2, r3, #4
 8008296:	f107 0310 	add.w	r3, r7, #16
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f7fa fdf3 	bl	8002e88 <lfs_pair_cmp>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bf14      	ite	ne
 80082a8:	2301      	movne	r3, #1
 80082aa:	2300      	moveq	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3728      	adds	r7, #40	; 0x28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080082b8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08e      	sub	sp, #56	; 0x38
 80082bc:	af04      	add	r7, sp, #16
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 80082d4:	e02f      	b.n	8008336 <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	085b      	lsrs	r3, r3, #1
 80082de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d302      	bcc.n	80082ea <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80082e4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80082e8:	e032      	b.n	8008350 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	3301      	adds	r3, #1
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80082fe:	61bb      	str	r3, [r7, #24]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8008306:	f107 0314 	add.w	r3, r7, #20
 800830a:	9303      	str	r3, [sp, #12]
 800830c:	4b12      	ldr	r3, [pc, #72]	; (8008358 <lfs_fs_parent+0xa0>)
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	2300      	movs	r3, #0
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	4b11      	ldr	r3, [pc, #68]	; (800835c <lfs_fs_parent+0xa4>)
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4b11      	ldr	r3, [pc, #68]	; (8008360 <lfs_fs_parent+0xa8>)
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7fb ffb5 	bl	800428c <lfs_dir_fetchmatch>
 8008322:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <lfs_fs_parent+0x7e>
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	f113 0f02 	cmn.w	r3, #2
 8008330:	d001      	beq.n	8008336 <lfs_fs_parent+0x7e>
            return tag;
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	e00c      	b.n	8008350 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3318      	adds	r3, #24
 800833a:	4618      	mov	r0, r3
 800833c:	f7fa fd89 	bl	8002e52 <lfs_pair_isnull>
 8008340:	4603      	mov	r3, r0
 8008342:	f083 0301 	eor.w	r3, r3, #1
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1c4      	bne.n	80082d6 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800834c:	f06f 0301 	mvn.w	r3, #1
}
 8008350:	4618      	mov	r0, r3
 8008352:	3728      	adds	r7, #40	; 0x28
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	08008233 	.word	0x08008233
 800835c:	20000008 	.word	0x20000008
 8008360:	7ff003ff 	.word	0x7ff003ff

08008364 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008374:	4618      	mov	r0, r3
 8008376:	f7fa fe7d 	bl	8003074 <lfs_tag_size>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <lfs_fs_preporphans+0x32>
 8008380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008384:	2b00      	cmp	r3, #0
 8008386:	da06      	bge.n	8008396 <lfs_fs_preporphans+0x32>
 8008388:	4b10      	ldr	r3, [pc, #64]	; (80083cc <lfs_fs_preporphans+0x68>)
 800838a:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <lfs_fs_preporphans+0x6c>)
 800838c:	f241 114c 	movw	r1, #4428	; 0x114c
 8008390:	4810      	ldr	r0, [pc, #64]	; (80083d4 <lfs_fs_preporphans+0x70>)
 8008392:	f002 f81b 	bl	800a3cc <__assert_func>
    lfs->gstate.tag += orphans;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800839a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800839e:	441a      	add	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3330      	adds	r3, #48	; 0x30
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fa fec2 	bl	800313a <lfs_gstate_hasorphans>
 80083b6:	4603      	mov	r3, r0
 80083b8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80083ba:	ea44 0203 	orr.w	r2, r4, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd90      	pop	{r4, r7, pc}
 80083cc:	0800c50c 	.word	0x0800c50c
 80083d0:	0800c96c 	.word	0x0800c96c
 80083d4:	0800bdc0 	.word	0x0800bdc0

080083d8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	460b      	mov	r3, r1
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	4a17      	ldr	r2, [pc, #92]	; (8008448 <lfs_fs_prepmove+0x70>)
 80083ec:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80083ee:	897b      	ldrh	r3, [r7, #10]
 80083f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80083f4:	428b      	cmp	r3, r1
 80083f6:	d006      	beq.n	8008406 <lfs_fs_prepmove+0x2e>
 80083f8:	897b      	ldrh	r3, [r7, #10]
 80083fa:	029b      	lsls	r3, r3, #10
 80083fc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008400:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008404:	e000      	b.n	8008408 <lfs_fs_prepmove+0x30>
 8008406:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8008408:	431a      	orrs	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800840e:	897b      	ldrh	r3, [r7, #10]
 8008410:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008414:	4293      	cmp	r3, r2
 8008416:	d002      	beq.n	800841e <lfs_fs_prepmove+0x46>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	e000      	b.n	8008420 <lfs_fs_prepmove+0x48>
 800841e:	2300      	movs	r3, #0
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8008424:	897b      	ldrh	r3, [r7, #10]
 8008426:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800842a:	4293      	cmp	r3, r2
 800842c:	d003      	beq.n	8008436 <lfs_fs_prepmove+0x5e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3304      	adds	r3, #4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	e000      	b.n	8008438 <lfs_fs_prepmove+0x60>
 8008436:	2300      	movs	r3, #0
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800843c:	bf00      	nop
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	800003ff 	.word	0x800003ff

0800844c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800844c:	b5b0      	push	{r4, r5, r7, lr}
 800844e:	b094      	sub	sp, #80	; 0x50
 8008450:	af04      	add	r7, sp, #16
 8008452:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	333c      	adds	r3, #60	; 0x3c
 8008458:	4618      	mov	r0, r3
 800845a:	f7fa fe90 	bl	800317e <lfs_gstate_hasmove>
 800845e:	4603      	mov	r3, r0
 8008460:	f083 0301 	eor.w	r3, r3, #1
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <lfs_fs_demove+0x22>
        return 0;
 800846a:	2300      	movs	r3, #0
 800846c:	e049      	b.n	8008502 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	4618      	mov	r0, r3
 800847c:	f7fa fdea 	bl	8003054 <lfs_tag_id>
 8008480:	4603      	mov	r3, r0
 8008482:	461a      	mov	r2, r3
 8008484:	4b21      	ldr	r3, [pc, #132]	; (800850c <lfs_fs_demove+0xc0>)
 8008486:	9302      	str	r3, [sp, #8]
 8008488:	9201      	str	r2, [sp, #4]
 800848a:	9400      	str	r4, [sp, #0]
 800848c:	462b      	mov	r3, r5
 800848e:	f241 1266 	movw	r2, #4454	; 0x1166
 8008492:	491f      	ldr	r1, [pc, #124]	; (8008510 <lfs_fs_demove+0xc4>)
 8008494:	481f      	ldr	r0, [pc, #124]	; (8008514 <lfs_fs_demove+0xc8>)
 8008496:	f002 fc1f 	bl	800acd8 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80084a0:	f107 0318 	add.w	r3, r7, #24
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fc fa5e 	bl	8004968 <lfs_dir_fetch>
 80084ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80084ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <lfs_fs_demove+0x6c>
        return err;
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b6:	e024      	b.n	8008502 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fa fdc9 	bl	8003054 <lfs_tag_id>
 80084c2:	4603      	mov	r3, r0
 80084c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80084c6:	2200      	movs	r2, #0
 80084c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff ff83 	bl	80083d8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80084d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80084d4:	029b      	lsls	r3, r3, #10
 80084d6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80084da:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	f107 0210 	add.w	r2, r7, #16
 80084e8:	f107 0118 	add.w	r1, r7, #24
 80084ec:	2301      	movs	r3, #1
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fd ff98 	bl	8006424 <lfs_dir_commit>
 80084f4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 80084f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <lfs_fs_demove+0xb4>
        return err;
 80084fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fe:	e000      	b.n	8008502 <lfs_fs_demove+0xb6>
    }

    return 0;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3740      	adds	r7, #64	; 0x40
 8008506:	46bd      	mov	sp, r7
 8008508:	bdb0      	pop	{r4, r5, r7, pc}
 800850a:	bf00      	nop
 800850c:	0800bec4 	.word	0x0800bec4
 8008510:	0800bdc0 	.word	0x0800bdc0
 8008514:	0800c540 	.word	0x0800c540

08008518 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8008518:	b5b0      	push	{r4, r5, r7, lr}
 800851a:	b0b2      	sub	sp, #200	; 0xc8
 800851c:	af04      	add	r7, sp, #16
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3330      	adds	r3, #48	; 0x30
 8008528:	4618      	mov	r0, r3
 800852a:	f7fa fe06 	bl	800313a <lfs_gstate_hasorphans>
 800852e:	4603      	mov	r3, r0
 8008530:	f083 0301 	eor.w	r3, r3, #1
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <lfs_fs_deorphan+0x26>
        return 0;
 800853a:	2300      	movs	r3, #0
 800853c:	e17c      	b.n	8008838 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8008544:	f107 030c 	add.w	r3, r7, #12
 8008548:	2220      	movs	r2, #32
 800854a:	2100      	movs	r1, #0
 800854c:	4618      	mov	r0, r3
 800854e:	f001 ffed 	bl	800a52c <memset>
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008558:	2301      	movs	r3, #1
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800855c:	e148      	b.n	80087f0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800855e:	f107 030c 	add.w	r3, r7, #12
 8008562:	f103 0218 	add.w	r2, r3, #24
 8008566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fc f9fb 	bl	8004968 <lfs_dir_fetch>
 8008572:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 8008576:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <lfs_fs_deorphan+0x6c>
                return err;
 800857e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008582:	e159      	b.n	8008838 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8008584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008588:	f083 0301 	eor.w	r3, r3, #1
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 8124 	beq.w	80087dc <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8008594:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	3318      	adds	r3, #24
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff fe89 	bl	80082b8 <lfs_fs_parent>
 80085a6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80085aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	da07      	bge.n	80085c2 <lfs_fs_deorphan+0xaa>
 80085b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085b6:	f113 0f02 	cmn.w	r3, #2
 80085ba:	d002      	beq.n	80085c2 <lfs_fs_deorphan+0xaa>
                    return tag;
 80085bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085c0:	e13a      	b.n	8008838 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 80085c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085c6:	f113 0f02 	cmn.w	r3, #2
 80085ca:	d157      	bne.n	800867c <lfs_fs_deorphan+0x164>
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d054      	beq.n	800867c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80085d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	499a      	ldr	r1, [pc, #616]	; (8008840 <lfs_fs_deorphan+0x328>)
 80085d8:	9101      	str	r1, [sp, #4]
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	f241 12a1 	movw	r2, #4513	; 0x11a1
 80085e2:	4998      	ldr	r1, [pc, #608]	; (8008844 <lfs_fs_deorphan+0x32c>)
 80085e4:	4898      	ldr	r0, [pc, #608]	; (8008848 <lfs_fs_deorphan+0x330>)
 80085e6:	f002 fb77 	bl	800acd8 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80085f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7fc f9d2 	bl	80049a0 <lfs_dir_getgstate>
 80085fc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8008600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <lfs_fs_deorphan+0xf6>
                        return err;
 8008608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800860c:	e114      	b.n	8008838 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800860e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008612:	3318      	adds	r3, #24
 8008614:	4618      	mov	r0, r3
 8008616:	f7fa fca8 	bl	8002f6a <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800861a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800861e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008622:	051a      	lsls	r2, r3, #20
 8008624:	4b89      	ldr	r3, [pc, #548]	; (800884c <lfs_fs_deorphan+0x334>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800862c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008630:	3318      	adds	r3, #24
 8008632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008636:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800863a:	f107 010c 	add.w	r1, r7, #12
 800863e:	2301      	movs	r3, #1
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7fd fbf5 	bl	8005e30 <lfs_dir_orphaningcommit>
 8008646:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800864a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800864e:	3318      	adds	r3, #24
 8008650:	4618      	mov	r0, r3
 8008652:	f7fa fc70 	bl	8002f36 <lfs_pair_fromle32>
                    if (state < 0) {
 8008656:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800865a:	2b00      	cmp	r3, #0
 800865c:	da02      	bge.n	8008664 <lfs_fs_deorphan+0x14c>
                        return state;
 800865e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8008662:	e0e9      	b.n	8008838 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8008664:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008668:	3301      	adds	r3, #1
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8008670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008674:	2b03      	cmp	r3, #3
 8008676:	f040 80af 	bne.w	80087d8 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 800867a:	e763      	b.n	8008544 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 800867c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008680:	f113 0f02 	cmn.w	r3, #2
 8008684:	f000 80aa 	beq.w	80087dc <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8008688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800868c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008690:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4613      	mov	r3, r2
 8008698:	4a6d      	ldr	r2, [pc, #436]	; (8008850 <lfs_fs_deorphan+0x338>)
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7fb f8c4 	bl	8003828 <lfs_dir_get>
 80086a0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80086a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da02      	bge.n	80086b2 <lfs_fs_deorphan+0x19a>
                        return state;
 80086ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086b0:	e0c2      	b.n	8008838 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 80086b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fa fc3d 	bl	8002f36 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	f103 0218 	add.w	r2, r3, #24
 80086c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fa fc06 	bl	8002edc <lfs_pair_sync>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f083 0301 	eor.w	r3, r3, #1
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d07f      	beq.n	80087dc <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80086dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80086e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086e8:	4c55      	ldr	r4, [pc, #340]	; (8008840 <lfs_fs_deorphan+0x328>)
 80086ea:	9403      	str	r4, [sp, #12]
 80086ec:	9102      	str	r1, [sp, #8]
 80086ee:	9201      	str	r2, [sp, #4]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4603      	mov	r3, r0
 80086f4:	f241 12ca 	movw	r2, #4554	; 0x11ca
 80086f8:	4952      	ldr	r1, [pc, #328]	; (8008844 <lfs_fs_deorphan+0x32c>)
 80086fa:	4856      	ldr	r0, [pc, #344]	; (8008854 <lfs_fs_deorphan+0x33c>)
 80086fc:	f002 faec 	bl	800acd8 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8008700:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008704:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3330      	adds	r3, #48	; 0x30
 800870c:	f107 020c 	add.w	r2, r7, #12
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7fa fd46 	bl	80031a4 <lfs_gstate_hasmovehere>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01c      	beq.n	8008758 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	4618      	mov	r0, r3
 8008724:	f7fa fc96 	bl	8003054 <lfs_tag_id>
 8008728:	4603      	mov	r3, r0
 800872a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8008736:	4842      	ldr	r0, [pc, #264]	; (8008840 <lfs_fs_deorphan+0x328>)
 8008738:	9002      	str	r0, [sp, #8]
 800873a:	9201      	str	r2, [sp, #4]
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	460b      	mov	r3, r1
 8008740:	f241 12d5 	movw	r2, #4565	; 0x11d5
 8008744:	493f      	ldr	r1, [pc, #252]	; (8008844 <lfs_fs_deorphan+0x32c>)
 8008746:	4844      	ldr	r0, [pc, #272]	; (8008858 <lfs_fs_deorphan+0x340>)
 8008748:	f002 fac6 	bl	800acd8 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800874c:	2200      	movs	r2, #0
 800874e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff fe40 	bl	80083d8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8008758:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800875c:	4618      	mov	r0, r3
 800875e:	f7fa fc04 	bl	8002f6a <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008762:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008766:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800876a:	4293      	cmp	r3, r2
 800876c:	d007      	beq.n	800877e <lfs_fs_deorphan+0x266>
 800876e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008772:	029b      	lsls	r3, r3, #10
 8008774:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008778:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800877c:	e000      	b.n	8008780 <lfs_fs_deorphan+0x268>
 800877e:	2300      	movs	r3, #0
 8008780:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008782:	2300      	movs	r3, #0
 8008784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008788:	4b34      	ldr	r3, [pc, #208]	; (800885c <lfs_fs_deorphan+0x344>)
 800878a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800878e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008796:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800879a:	f107 010c 	add.w	r1, r7, #12
 800879e:	2302      	movs	r3, #2
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7fd fb45 	bl	8005e30 <lfs_dir_orphaningcommit>
 80087a6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80087aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fa fbc1 	bl	8002f36 <lfs_pair_fromle32>
                        if (state < 0) {
 80087b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da02      	bge.n	80087c2 <lfs_fs_deorphan+0x2aa>
                            return state;
 80087bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 80087c0:	e03a      	b.n	8008838 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 80087c2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80087c6:	3301      	adds	r3, #1
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80087ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d10c      	bne.n	80087f0 <lfs_fs_deorphan+0x2d8>
 80087d6:	e6b5      	b.n	8008544 <lfs_fs_deorphan+0x2c>
                    continue;
 80087d8:	bf00      	nop
 80087da:	e009      	b.n	80087f0 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 80087dc:	f107 040c 	add.w	r4, r7, #12
 80087e0:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80087e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 80087f0:	f107 030c 	add.w	r3, r7, #12
 80087f4:	3318      	adds	r3, #24
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fa fb2b 	bl	8002e52 <lfs_pair_isnull>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f083 0301 	eor.w	r3, r3, #1
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	f47f aeaa 	bne.w	800855e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3330      	adds	r3, #48	; 0x30
 800880e:	4618      	mov	r0, r3
 8008810:	f7fa fca6 	bl	8003160 <lfs_gstate_getorphans>
 8008814:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8008816:	461a      	mov	r2, r3
 8008818:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 800881c:	4619      	mov	r1, r3
 800881e:	4610      	mov	r0, r2
 8008820:	f7f9 ff02 	bl	8002628 <lfs_min>
 8008824:	4603      	mov	r3, r0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	425b      	negs	r3, r3
 800882a:	b2db      	uxtb	r3, r3
 800882c:	b25b      	sxtb	r3, r3
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff fd97 	bl	8008364 <lfs_fs_preporphans>
 8008836:	4603      	mov	r3, r0
            found));
}
 8008838:	4618      	mov	r0, r3
 800883a:	37b8      	adds	r7, #184	; 0xb8
 800883c:	46bd      	mov	sp, r7
 800883e:	bdb0      	pop	{r4, r5, r7, pc}
 8008840:	0800bec4 	.word	0x0800bec4
 8008844:	0800bdc0 	.word	0x0800bdc0
 8008848:	0800c574 	.word	0x0800c574
 800884c:	000ffc08 	.word	0x000ffc08
 8008850:	7ffffc00 	.word	0x7ffffc00
 8008854:	0800c5a4 	.word	0x0800c5a4
 8008858:	0800c5e8 	.word	0x0800c5e8
 800885c:	600ffc08 	.word	0x600ffc08

08008860 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff fdef 	bl	800844c <lfs_fs_demove>
 800886e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <lfs_fs_forceconsistency+0x1a>
        return err;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	e00a      	b.n	8008890 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 800887a:	2101      	movs	r1, #1
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff fe4b 	bl	8008518 <lfs_fs_deorphan>
 8008882:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <lfs_fs_forceconsistency+0x2e>
        return err;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	e000      	b.n	8008890 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	601a      	str	r2, [r3, #0]
    return 0;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	2300      	movs	r3, #0
 80088d2:	4907      	ldr	r1, [pc, #28]	; (80088f0 <lfs_fs_rawsize+0x30>)
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fb41 	bl	8007f5c <lfs_fs_rawtraverse>
 80088da:	60f8      	str	r0, [r7, #12]
    if (err) {
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <lfs_fs_rawsize+0x26>
        return err;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	e000      	b.n	80088e8 <lfs_fs_rawsize+0x28>
    }

    return size;
 80088e6:	68bb      	ldr	r3, [r7, #8]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	08008899 	.word	0x08008899

080088f4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <lfs_format+0x18>
        return err;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	e005      	b.n	8008918 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff f8cc 	bl	8007aac <lfs_rawformat>
 8008914:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008916:	68fb      	ldr	r3, [r7, #12]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <lfs_mount+0x18>
        return err;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	e005      	b.n	8008944 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff f956 	bl	8007bec <lfs_rawmount>
 8008940:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008942:	68fb      	ldr	r3, [r7, #12]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
    if (err) {
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <lfs_file_open+0x1c>
        return err;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	e01a      	b.n	800899e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	4618      	mov	r0, r3
 8008970:	f7fa fd18 	bl	80033a4 <lfs_mlist_isopen>
 8008974:	4603      	mov	r3, r0
 8008976:	f083 0301 	eor.w	r3, r3, #1
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d106      	bne.n	800898e <lfs_file_open+0x42>
 8008980:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <lfs_file_open+0x5c>)
 8008982:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <lfs_file_open+0x60>)
 8008984:	f241 5166 	movw	r1, #5478	; 0x1566
 8008988:	4809      	ldr	r0, [pc, #36]	; (80089b0 <lfs_file_open+0x64>)
 800898a:	f001 fd1f 	bl	800a3cc <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7fe f961 	bl	8006c5c <lfs_file_rawopen>
 800899a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800899c:	697b      	ldr	r3, [r7, #20]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	0800c630 	.word	0x0800c630
 80089ac:	0800c980 	.word	0x0800c980
 80089b0:	0800bdc0 	.word	0x0800bdc0

080089b4 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <lfs_file_close+0x18>
        return err;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	e015      	b.n	80089f8 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fa fce6 	bl	80033a4 <lfs_mlist_isopen>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <lfs_file_close+0x38>
 80089de:	4b08      	ldr	r3, [pc, #32]	; (8008a00 <lfs_file_close+0x4c>)
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <lfs_file_close+0x50>)
 80089e2:	f241 518a 	movw	r1, #5514	; 0x158a
 80089e6:	4808      	ldr	r0, [pc, #32]	; (8008a08 <lfs_file_close+0x54>)
 80089e8:	f001 fcf0 	bl	800a3cc <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7fe f94c 	bl	8006c8c <lfs_file_rawclose>
 80089f4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80089f6:	68fb      	ldr	r3, [r7, #12]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	0800c668 	.word	0x0800c668
 8008a04:	0800c990 	.word	0x0800c990
 8008a08:	0800bdc0 	.word	0x0800bdc0

08008a0c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]
    if (err) {
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <lfs_file_read+0x1c>
        return err;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	e017      	b.n	8008a58 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fa fcb8 	bl	80033a4 <lfs_mlist_isopen>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <lfs_file_read+0x3c>
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <lfs_file_read+0x54>)
 8008a3c:	4a09      	ldr	r2, [pc, #36]	; (8008a64 <lfs_file_read+0x58>)
 8008a3e:	f241 51ac 	movw	r1, #5548	; 0x15ac
 8008a42:	4809      	ldr	r0, [pc, #36]	; (8008a68 <lfs_file_read+0x5c>)
 8008a44:	f001 fcc2 	bl	800a3cc <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7fe fc68 	bl	8007324 <lfs_file_rawread>
 8008a54:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008a56:	693b      	ldr	r3, [r7, #16]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	0800c668 	.word	0x0800c668
 8008a64:	0800c9a0 	.word	0x0800c9a0
 8008a68:	0800bdc0 	.word	0x0800bdc0

08008a6c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]
    if (err) {
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <lfs_file_write+0x1c>
        return err;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	e017      	b.n	8008ab8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fa fc88 	bl	80033a4 <lfs_mlist_isopen>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <lfs_file_write+0x3c>
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <lfs_file_write+0x54>)
 8008a9c:	4a09      	ldr	r2, [pc, #36]	; (8008ac4 <lfs_file_write+0x58>)
 8008a9e:	f241 51be 	movw	r1, #5566	; 0x15be
 8008aa2:	4809      	ldr	r0, [pc, #36]	; (8008ac8 <lfs_file_write+0x5c>)
 8008aa4:	f001 fc92 	bl	800a3cc <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7fe fd96 	bl	80075e0 <lfs_file_rawwrite>
 8008ab4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008ab6:	693b      	ldr	r3, [r7, #16]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	0800c668 	.word	0x0800c668
 8008ac4:	0800c9b0 	.word	0x0800c9b0
 8008ac8:	0800bdc0 	.word	0x0800bdc0

08008acc <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	e024      	b.n	8008b2c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	091a      	lsrs	r2, r3, #4
 8008ae6:	6939      	ldr	r1, [r7, #16]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	440b      	add	r3, r1
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	4619      	mov	r1, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	404b      	eors	r3, r1
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	4912      	ldr	r1, [pc, #72]	; (8008b44 <lfs_crc+0x78>)
 8008afa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008afe:	4053      	eors	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	091a      	lsrs	r2, r3, #4
 8008b06:	6939      	ldr	r1, [r7, #16]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	440b      	add	r3, r1
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	091b      	lsrs	r3, r3, #4
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	4619      	mov	r1, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	404b      	eors	r3, r1
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	4909      	ldr	r1, [pc, #36]	; (8008b44 <lfs_crc+0x78>)
 8008b1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b22:	4053      	eors	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d3d6      	bcc.n	8008ae2 <lfs_crc+0x16>
    }

    return crc;
 8008b34:	68fb      	ldr	r3, [r7, #12]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	0800c9c0 	.word	0x0800c9c0

08008b48 <_ZN6W25Q64C1EP12GPIO_TypeDeft>:
constexpr uint8_t CMD_READ_JDEC          = 0x9F;

constexpr uint8_t STATUS_BUSY_MASK = 0x01;

/* Constructor */
W25Q64::W25Q64(GPIO_TypeDef *cs_gpio_port, uint16_t cs_pin)
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80fb      	strh	r3, [r7, #6]
    : csGPIOPort(cs_gpio_port), csPin(cs_pin), mySPIPort(SPI::getInstance())
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	88fa      	ldrh	r2, [r7, #6]
 8008b60:	809a      	strh	r2, [r3, #4]
 8008b62:	f000 fce5 	bl	8009530 <_ZN3SPI11getInstanceEv>
 8008b66:	4602      	mov	r2, r0
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	609a      	str	r2, [r3, #8]
{
    // Rest of your constructor code
}
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <_ZN6W25Q644initEv>:
/* Public methods */
HAL_StatusTypeDef W25Q64::init()
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;

	// Init GPIO peripheral
	initGPIOOutput(this->csPin, this->csGPIOPort);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	889a      	ldrh	r2, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f000 f9ef 	bl	8008f6c <_Z14initGPIOOutputtP12GPIO_TypeDef>

	// Check if the SPI peripheral has already been initialized
	if (SPIStates::NotInitialized == mySPIPort.state)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d108      	bne.n	8008baa <_ZN6W25Q644initEv+0x34>
	{
		status = mySPIPort.init();
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fcef 	bl	8009580 <_ZN3SPI4initEv>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]
		return status;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	e000      	b.n	8008bac <_ZN6W25Q644initEv+0x36>
	}

	return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <_ZN6W25Q6412write_enableEv>:

void W25Q64::write_enable()
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	cs_select();
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f8d9 	bl	8008d74 <_ZN6W25Q649cs_selectEv>
	mySPIPort.transmit((uint8_t *) &CMD_WRITE_ENABLE, 1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4905      	ldr	r1, [pc, #20]	; (8008be0 <_ZN6W25Q6412write_enableEv+0x2c>)
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fd1a 	bl	8009604 <_ZN3SPI8transmitEPht>
	cs_deselect();
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f8e0 	bl	8008d96 <_ZN6W25Q6411cs_deselectEv>
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	0800ca00 	.word	0x0800ca00

08008be4 <_ZN6W25Q6420read_status_registerEv>:
	mySPIPort.transmit((uint8_t *) &CMD_WRITE_DISABLE, 1);
	cs_deselect();
}

uint8_t W25Q64::read_status_register()
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	uint8_t status;
	cs_select();
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f8c1 	bl	8008d74 <_ZN6W25Q649cs_selectEv>
	mySPIPort.transmit((uint8_t *) &CMD_READ_STATUS_REG, 1);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4909      	ldr	r1, [pc, #36]	; (8008c20 <_ZN6W25Q6420read_status_registerEv+0x3c>)
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fd02 	bl	8009604 <_ZN3SPI8transmitEPht>
	mySPIPort.receive(&status, 1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f107 010f 	add.w	r1, r7, #15
 8008c08:	2201      	movs	r2, #1
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fd0e 	bl	800962c <_ZN3SPI7receiveEPht>
	cs_deselect();
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f8c0 	bl	8008d96 <_ZN6W25Q6411cs_deselectEv>
	return status;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	0800ca01 	.word	0x0800ca01

08008c24 <_ZN6W25Q6411block_eraseEm>:
 * @brief Erase a block (64KB) of the W25Q64 flash memory.
 *
 * @param addr The starting address of the block to erase.
 */
void W25Q64::block_erase(uint32_t addr)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
    write_enable();
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff ffc0 	bl	8008bb4 <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f89d 	bl	8008d74 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_BLOCK_ERASE,
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	23d8      	movs	r3, #216	; 0xd8
 8008c40:	733b      	strb	r3, [r7, #12]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	737b      	strb	r3, [r7, #13]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	73bb      	strb	r3, [r7, #14]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	73fb      	strb	r3, [r7, #15]
    mySPIPort.transmit(cmd, 4);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f107 010c 	add.w	r1, r7, #12
 8008c60:	2204      	movs	r2, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fcce 	bl	8009604 <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f894 	bl	8008d96 <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f86d 	bl	8008d4e <_ZN6W25Q6416wait_until_readyEv>
}
 8008c74:	bf00      	nop
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <_ZN6W25Q6412page_programEmPht>:
 * @param addr The starting address of the page to write.
 * @param data A pointer to the buffer containing the data to be written.
 * @param size The size of the data buffer (must be 256 bytes or less).
 */
void W25Q64::page_program(uint32_t addr, uint8_t *data, uint16_t size)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	807b      	strh	r3, [r7, #2]
    if (size > 256) return; // Ensure that the data size is within the page limit
 8008c8a:	887b      	ldrh	r3, [r7, #2]
 8008c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c90:	d82a      	bhi.n	8008ce8 <_ZN6W25Q6412page_programEmPht+0x6c>

    write_enable();
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff ff8e 	bl	8008bb4 <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f86b 	bl	8008d74 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_PAGE_PROGRAM,
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	75bb      	strb	r3, [r7, #22]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	75fb      	strb	r3, [r7, #23]
    mySPIPort.transmit(cmd, 4);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f107 0114 	add.w	r1, r7, #20
 8008cc4:	2204      	movs	r2, #4
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fc9c 	bl	8009604 <_ZN3SPI8transmitEPht>
    mySPIPort.transmit(data, size);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	887a      	ldrh	r2, [r7, #2]
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fc95 	bl	8009604 <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f85b 	bl	8008d96 <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 f834 	bl	8008d4e <_ZN6W25Q6416wait_until_readyEv>
 8008ce6:	e000      	b.n	8008cea <_ZN6W25Q6412page_programEmPht+0x6e>
    if (size > 256) return; // Ensure that the data size is within the page limit
 8008ce8:	bf00      	nop
}
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZN6W25Q649read_dataEmPht>:
 * @param addr The starting address to read from.
 * @param data A pointer to the buffer where the read data will be stored.
 * @param size The number of bytes to read.
 */
void W25Q64::read_data(uint32_t addr, uint8_t *data, uint16_t size)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	807b      	strh	r3, [r7, #2]
    cs_select();
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 f838 	bl	8008d74 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_READ_DATA,
 8008d04:	2300      	movs	r3, #0
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	2303      	movs	r3, #3
 8008d0a:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	75bb      	strb	r3, [r7, #22]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	75fb      	strb	r3, [r7, #23]
 	mySPIPort.transmit(cmd, 4);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f107 0114 	add.w	r1, r7, #20
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 fc69 	bl	8009604 <_ZN3SPI8transmitEPht>
    mySPIPort.receive(data, size);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	887a      	ldrh	r2, [r7, #2]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fc76 	bl	800962c <_ZN3SPI7receiveEPht>
    cs_deselect();
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f828 	bl	8008d96 <_ZN6W25Q6411cs_deselectEv>
}
 8008d46:	bf00      	nop
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <_ZN6W25Q6416wait_until_readyEv>:
 * @brief Wait for the W25Q64 flash memory to become ready for the next operation.
 *
 * This method polls the status register and waits until the busy bit is cleared.
 */
void W25Q64::wait_until_ready()
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
    uint8_t status;
    do
    {
        status = read_status_register();
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ff44 	bl	8008be4 <_ZN6W25Q6420read_status_registerEv>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
    } while (status & STATUS_BUSY_MASK); // Wait until the busy bit (bit 0) is cleared
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d000      	beq.n	8008d6c <_ZN6W25Q6416wait_until_readyEv+0x1e>
    do
 8008d6a:	e7f4      	b.n	8008d56 <_ZN6W25Q6416wait_until_readyEv+0x8>
}
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <_ZN6W25Q649cs_selectEv>:

/* Private methods */
void W25Q64::cs_select()
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	mySPIPort.csLow(this->csPin, this->csGPIOPort);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6898      	ldr	r0, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8899      	ldrh	r1, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f000 fc74 	bl	8009676 <_ZN3SPI5csLowEtP12GPIO_TypeDef>
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <_ZN6W25Q6411cs_deselectEv>:

void W25Q64::cs_deselect()
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
	mySPIPort.csHigh(this->csPin, this->csGPIOPort);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6898      	ldr	r0, [r3, #8]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	8899      	ldrh	r1, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f000 fc52 	bl	8009654 <_ZN3SPI6csHighEtP12GPIO_TypeDef>
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <_ZN10fileSystemC1Ev>:
 *
 * Initializes the file system by mounting the filesystem.
 * If mounting fails, it tries to format the filesystem and mount again.
 * If both operations fail, it calls the errorHandler function.
 */
fileSystem::fileSystem()
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
{
    flash_init();
 8008dc0:	f000 faa0 	bl	8009304 <_Z10flash_initv>
    int res = lfs_mount(&lfs, &w25q64_cfg);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4915      	ldr	r1, [pc, #84]	; (8008e1c <_ZN10fileSystemC1Ev+0x64>)
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff fda9 	bl	8008920 <lfs_mount>
 8008dce:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	da1d      	bge.n	8008e12 <_ZN10fileSystemC1Ev+0x5a>
    {
        // If the mount fails, try formatting the filesystem
        res = lfs_format(&lfs, &w25q64_cfg);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4910      	ldr	r1, [pc, #64]	; (8008e1c <_ZN10fileSystemC1Ev+0x64>)
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fd8a 	bl	80088f4 <lfs_format>
 8008de0:	60f8      	str	r0, [r7, #12]
        if (res < 0)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da05      	bge.n	8008df4 <_ZN10fileSystemC1Ev+0x3c>
        {
            errorHandler(__FILE__, __LINE__, ERROR_FATAL, "unable to format filesystem");
 8008de8:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <_ZN10fileSystemC1Ev+0x68>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	211d      	movs	r1, #29
 8008dee:	480d      	ldr	r0, [pc, #52]	; (8008e24 <_ZN10fileSystemC1Ev+0x6c>)
 8008df0:	f7f7 fbf6 	bl	80005e0 <errorHandler>
        }

        // Try mounting again
        res = lfs_mount(&lfs, &w25q64_cfg);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4909      	ldr	r1, [pc, #36]	; (8008e1c <_ZN10fileSystemC1Ev+0x64>)
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff fd91 	bl	8008920 <lfs_mount>
 8008dfe:	60f8      	str	r0, [r7, #12]
        if (res < 0)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da05      	bge.n	8008e12 <_ZN10fileSystemC1Ev+0x5a>
        {
            errorHandler(__FILE__, __LINE__, ERROR_FATAL, "unable to mount filesystem");
 8008e06:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <_ZN10fileSystemC1Ev+0x70>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2124      	movs	r1, #36	; 0x24
 8008e0c:	4805      	ldr	r0, [pc, #20]	; (8008e24 <_ZN10fileSystemC1Ev+0x6c>)
 8008e0e:	f7f7 fbe7 	bl	80005e0 <errorHandler>
        }
    }
}
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	0800ca04 	.word	0x0800ca04
 8008e20:	0800c6d8 	.word	0x0800c6d8
 8008e24:	0800c6f4 	.word	0x0800c6f4
 8008e28:	0800c714 	.word	0x0800c714

08008e2c <_ZN10fileSystem11getInstanceEv>:
 * @brief Get the singleton instance of the fileSystem class.
 *
 * @return A reference to the fileSystem instance.
 */
fileSystem& fileSystem::getInstance()
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
    static fileSystem instance;
 8008e30:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <_ZN10fileSystem11getInstanceEv+0x48>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f3bf 8f5b 	dmb	ish
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d010      	beq.n	8008e6e <_ZN10fileSystem11getInstanceEv+0x42>
 8008e4c:	4809      	ldr	r0, [pc, #36]	; (8008e74 <_ZN10fileSystem11getInstanceEv+0x48>)
 8008e4e:	f000 fc35 	bl	80096bc <__cxa_guard_acquire>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf14      	ite	ne
 8008e58:	2301      	movne	r3, #1
 8008e5a:	2300      	moveq	r3, #0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <_ZN10fileSystem11getInstanceEv+0x42>
 8008e62:	4805      	ldr	r0, [pc, #20]	; (8008e78 <_ZN10fileSystem11getInstanceEv+0x4c>)
 8008e64:	f7ff ffa8 	bl	8008db8 <_ZN10fileSystemC1Ev>
 8008e68:	4802      	ldr	r0, [pc, #8]	; (8008e74 <_ZN10fileSystem11getInstanceEv+0x48>)
 8008e6a:	f000 fc33 	bl	80096d4 <__cxa_guard_release>
    return instance;
 8008e6e:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <_ZN10fileSystem11getInstanceEv+0x4c>)
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	200001bc 	.word	0x200001bc
 8008e78:	2000013c 	.word	0x2000013c

08008e7c <_ZN10fileSystem5writeEPKcS1_>:
 * @param fileName The name of the file.
 * @param data The data to write to the file.
 * @return The result of the write operation (fileSystemReturnType).
 */
fileSystemReturnType fileSystem::write(const char *fileName, const char *data)
{
 8008e7c:	b590      	push	{r4, r7, lr}
 8008e7e:	b09b      	sub	sp, #108	; 0x6c
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
    if (fileName == nullptr || data == nullptr)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <_ZN10fileSystem5writeEPKcS1_+0x18>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <_ZN10fileSystem5writeEPKcS1_+0x24>
    {
        errorHandler(__FILE__, __LINE__, ERROR_FATAL, "NULL POINTER");
 8008e94:	4b16      	ldr	r3, [pc, #88]	; (8008ef0 <_ZN10fileSystem5writeEPKcS1_+0x74>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	214b      	movs	r1, #75	; 0x4b
 8008e9a:	4816      	ldr	r0, [pc, #88]	; (8008ef4 <_ZN10fileSystem5writeEPKcS1_+0x78>)
 8008e9c:	f7f7 fba0 	bl	80005e0 <errorHandler>
    }

    int res;
    lfs_file_t file;

    res = lfs_file_open(&lfs, &file, fileName, LFS_O_WRONLY | LFS_O_CREAT);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f107 0110 	add.w	r1, r7, #16
 8008ea6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	f7ff fd4e 	bl	800894c <lfs_file_open>
 8008eb0:	6678      	str	r0, [r7, #100]	; 0x64

    if (res < 0)
 8008eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da01      	bge.n	8008ebc <_ZN10fileSystem5writeEPKcS1_+0x40>
    {
        return fileSystemReturnType::errorOpeningFile;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e014      	b.n	8008ee6 <_ZN10fileSystem5writeEPKcS1_+0x6a>
    }

    res = lfs_file_write(&lfs, &file, data, strlen(data));
 8008ebc:	68fc      	ldr	r4, [r7, #12]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7f7 f9f0 	bl	80002a4 <strlen>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f107 0110 	add.w	r1, r7, #16
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7ff fdcd 	bl	8008a6c <lfs_file_write>
 8008ed2:	6678      	str	r0, [r7, #100]	; 0x64

    res = lfs_file_close(&lfs, &file);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f107 0210 	add.w	r2, r7, #16
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fd69 	bl	80089b4 <lfs_file_close>
 8008ee2:	6678      	str	r0, [r7, #100]	; 0x64

    return fileSystemReturnType::noError;
 8008ee4:	2305      	movs	r3, #5
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	376c      	adds	r7, #108	; 0x6c
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	0800c730 	.word	0x0800c730
 8008ef4:	0800c6f4 	.word	0x0800c6f4

08008ef8 <_ZN10fileSystem4readEPKcPcj>:
 * @param buffer The buffer to store the read data.
 * @param sizeToRead The size to read from the file.
 * @return The result of the read operation (fileSystemReturnType).
 */
fileSystemReturnType fileSystem::read(const char *fileName, char *buffer, size_t sizeToRead)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b09a      	sub	sp, #104	; 0x68
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
    if (fileName == nullptr || buffer == nullptr)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <_ZN10fileSystem4readEPKcPcj+0x1a>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <_ZN10fileSystem4readEPKcPcj+0x26>
    {
        errorHandler(__FILE__, __LINE__, ERROR_FATAL, "NULL POINTER");
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <_ZN10fileSystem4readEPKcPcj+0x6c>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	216b      	movs	r1, #107	; 0x6b
 8008f18:	4813      	ldr	r0, [pc, #76]	; (8008f68 <_ZN10fileSystem4readEPKcPcj+0x70>)
 8008f1a:	f7f7 fb61 	bl	80005e0 <errorHandler>
    }

    int res;
    lfs_file_t file;

    res = lfs_file_open(&lfs, &file, fileName, LFS_O_RDONLY);
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f107 0110 	add.w	r1, r7, #16
 8008f24:	2301      	movs	r3, #1
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	f7ff fd10 	bl	800894c <lfs_file_open>
 8008f2c:	6678      	str	r0, [r7, #100]	; 0x64

    if (res < 0)
 8008f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da01      	bge.n	8008f38 <_ZN10fileSystem4readEPKcPcj+0x40>
    {
        return fileSystemReturnType::errorOpeningFile;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e010      	b.n	8008f5a <_ZN10fileSystem4readEPKcPcj+0x62>
    }

    res = lfs_file_read(&lfs, &file, buffer, sizeToRead);
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f107 0110 	add.w	r1, r7, #16
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	f7ff fd63 	bl	8008a0c <lfs_file_read>
 8008f46:	6678      	str	r0, [r7, #100]	; 0x64

    res = lfs_file_close(&lfs, &file);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f107 0210 	add.w	r2, r7, #16
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7ff fd2f 	bl	80089b4 <lfs_file_close>
 8008f56:	6678      	str	r0, [r7, #100]	; 0x64

    return fileSystemReturnType::noError;
 8008f58:	2305      	movs	r3, #5
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3768      	adds	r7, #104	; 0x68
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	0800c730 	.word	0x0800c730
 8008f68:	0800c6f4 	.word	0x0800c6f4

08008f6c <_Z14initGPIOOutputtP12GPIO_TypeDef>:
 *
 * @param pin The pin number to be initialized.
 * @param port The GPIO port to which the pin belongs.
 */
void initGPIOOutput(uint16_t pin, GPIO_TypeDef *port)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08a      	sub	sp, #40	; 0x28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	80fb      	strh	r3, [r7, #6]
    // Assert that port is not NULL
    assert(port != NULL);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d105      	bne.n	8008f8a <_Z14initGPIOOutputtP12GPIO_TypeDef+0x1e>
 8008f7e:	4b29      	ldr	r3, [pc, #164]	; (8009024 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xb8>)
 8008f80:	4a29      	ldr	r2, [pc, #164]	; (8009028 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xbc>)
 8008f82:	2114      	movs	r1, #20
 8008f84:	4829      	ldr	r0, [pc, #164]	; (800902c <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc0>)
 8008f86:	f001 fa21 	bl	800a3cc <__assert_func>

    // Configure CS GPIO
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	605a      	str	r2, [r3, #4]
 8008f94:	609a      	str	r2, [r3, #8]
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	611a      	str	r2, [r3, #16]

    if (port == GPIOF)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	4a24      	ldr	r2, [pc, #144]	; (8009030 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d10e      	bne.n	8008fc0 <_Z14initGPIOOutputtP12GPIO_TypeDef+0x54>
    {
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	4b23      	ldr	r3, [pc, #140]	; (8009034 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc8>)
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	4a22      	ldr	r2, [pc, #136]	; (8009034 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc8>)
 8008fac:	f043 0320 	orr.w	r3, r3, #32
 8008fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fb2:	4b20      	ldr	r3, [pc, #128]	; (8009034 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc8>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	613b      	str	r3, [r7, #16]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	e018      	b.n	8008ff2 <_Z14initGPIOOutputtP12GPIO_TypeDef+0x86>
    }
    else if (port == GPIOE)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xcc>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d10e      	bne.n	8008fe6 <_Z14initGPIOOutputtP12GPIO_TypeDef+0x7a>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	4b19      	ldr	r3, [pc, #100]	; (8009034 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc8>)
 8008fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd0:	4a18      	ldr	r2, [pc, #96]	; (8009034 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc8>)
 8008fd2:	f043 0310 	orr.w	r3, r3, #16
 8008fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd8:	4b16      	ldr	r3, [pc, #88]	; (8009034 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc8>)
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	f003 0310 	and.w	r3, r3, #16
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	e005      	b.n	8008ff2 <_Z14initGPIOOutputtP12GPIO_TypeDef+0x86>
    // Add other cases for different GPIO ports as needed

    else
    {
        // Error: Invalid GPIO port
        assert(0);
 8008fe6:	4b15      	ldr	r3, [pc, #84]	; (800903c <_Z14initGPIOOutputtP12GPIO_TypeDef+0xd0>)
 8008fe8:	4a0f      	ldr	r2, [pc, #60]	; (8009028 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xbc>)
 8008fea:	2126      	movs	r1, #38	; 0x26
 8008fec:	480f      	ldr	r0, [pc, #60]	; (800902c <_Z14initGPIOOutputtP12GPIO_TypeDef+0xc0>)
 8008fee:	f001 f9ed 	bl	800a3cc <__assert_func>
    }

    GPIO_InitStruct.Pin = pin;
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ffe:	2300      	movs	r3, #0
 8009000:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8009002:	f107 0314 	add.w	r3, r7, #20
 8009006:	4619      	mov	r1, r3
 8009008:	6838      	ldr	r0, [r7, #0]
 800900a:	f7f7 fe81 	bl	8000d10 <HAL_GPIO_Init>

    // Set the pin to a default state
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800900e:	88fb      	ldrh	r3, [r7, #6]
 8009010:	2201      	movs	r2, #1
 8009012:	4619      	mov	r1, r3
 8009014:	6838      	ldr	r0, [r7, #0]
 8009016:	f7f8 f827 	bl	8001068 <HAL_GPIO_WritePin>
}
 800901a:	bf00      	nop
 800901c:	3728      	adds	r7, #40	; 0x28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	0800c744 	.word	0x0800c744
 8009028:	0800c754 	.word	0x0800c754
 800902c:	0800c784 	.word	0x0800c784
 8009030:	40021400 	.word	0x40021400
 8009034:	40023800 	.word	0x40023800
 8009038:	40021000 	.word	0x40021000
 800903c:	0800c7a4 	.word	0x0800c7a4

08009040 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
      return std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fcbd 	bl	80099d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8009056:	4603      	mov	r3, r0
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f8a6 	bl	80091aa <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800905e:	4603      	mov	r3, r0
 8009060:	4619      	mov	r1, r3
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fbe9 	bl	800983a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
 800907c:	6879      	ldr	r1, [r7, #4]
 800907e:	68b8      	ldr	r0, [r7, #8]
 8009080:	f000 fcde 	bl	8009a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8009084:	4603      	mov	r3, r0
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f88f 	bl	80091aa <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800908c:	4603      	mov	r3, r0
 800908e:	4619      	mov	r1, r3
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fbd2 	bl	800983a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	2301      	movs	r3, #1
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b08b      	sub	sp, #44	; 0x2c
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 80090c0:	2300      	movs	r3, #0
 80090c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 80090c6:	f107 0314 	add.w	r3, r7, #20
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff ffe7 	bl	800909e <_ZNKSt17integral_constantIbLb1EEcvbEv>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 80090d6:	2301      	movs	r3, #1
 80090d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090dc:	e024      	b.n	8009128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 80090de:	f107 0318 	add.w	r3, r7, #24
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fcc1 	bl	8009a6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 80090ea:	f107 031c 	add.w	r3, r7, #28
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fcbb 	bl	8009a6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 80090f6:	f107 021c 	add.w	r2, r7, #28
 80090fa:	f107 0318 	add.w	r3, r7, #24
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f85d 	bl	80091c0 <_ZSteqRKSaIcES1_>
 8009106:	4603      	mov	r3, r0
 8009108:	461c      	mov	r4, r3
 800910a:	f107 031c 	add.w	r3, r7, #28
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fae4 	bl	80096dc <_ZNSaIcED1Ev>
 8009114:	f107 0318 	add.w	r3, r7, #24
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fadf 	bl	80096dc <_ZNSaIcED1Ev>
 800911e:	2c00      	cmp	r4, #0
 8009120:	d002      	beq.n	8009128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 8009122:	2301      	movs	r3, #1
 8009124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 8009128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02b      	beq.n	8009188 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 8009130:	68b8      	ldr	r0, [r7, #8]
 8009132:	f000 fba2 	bl	800987a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8009136:	4604      	mov	r4, r0
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fb9e 	bl	800987a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800913e:	4603      	mov	r3, r0
 8009140:	4423      	add	r3, r4
 8009142:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 8009144:	68b8      	ldr	r0, [r7, #8]
 8009146:	f000 fb9a 	bl	800987e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800914a:	4602      	mov	r2, r0
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	4293      	cmp	r3, r2
 8009150:	d908      	bls.n	8009164 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fb93 	bl	800987e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8009158:	4602      	mov	r2, r0
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	4293      	cmp	r3, r2
 800915e:	d801      	bhi.n	8009164 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 8009164:	2300      	movs	r3, #0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	2100      	movs	r1, #0
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc24 	bl	80099bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8009174:	4603      	mov	r3, r0
 8009176:	4618      	mov	r0, r3
 8009178:	f000 f817 	bl	80091aa <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800917c:	4603      	mov	r3, r0
 800917e:	4619      	mov	r1, r3
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fb5a 	bl	800983a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009186:	e00c      	b.n	80091a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	68b8      	ldr	r0, [r7, #8]
 800918c:	f000 fc52 	bl	8009a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8009190:	4603      	mov	r3, r0
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f809 	bl	80091aa <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8009198:	4603      	mov	r3, r0
 800919a:	4619      	mov	r1, r3
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fb4c 	bl	800983a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	372c      	adds	r7, #44	; 0x2c
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd90      	pop	{r4, r7, pc}

080091aa <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <_ZSteqRKSaIcES1_>:
	  __allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
      { return true; }
 80091ca:	2301      	movs	r3, #1
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <_Z41__static_initialization_and_destruction_0ii>:
 * @brief
 */
uint8_t serialAvailable()
{
	return 1;
}
 80091d8:	b580      	push	{r7, lr}
 80091da:	b0a2      	sub	sp, #136	; 0x88
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d161      	bne.n	80092ac <_Z41__static_initialization_and_destruction_0ii+0xd4>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d15c      	bne.n	80092ac <_Z41__static_initialization_and_destruction_0ii+0xd4>
std::string EMATCommands = "Ingrese uno de los siguientes comandos:\r\n1)" + std::string(CMD_SET_TIME) + "\r\n2)" + std::string(CMD_PRINT_TIME) + "\r\n";
 80091f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fa6f 	bl	80096da <_ZNSaIcEC1Ev>
 80091fc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009200:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009204:	4931      	ldr	r1, [pc, #196]	; (80092cc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fc56 	bl	8009ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800920c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009210:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009214:	492e      	ldr	r1, [pc, #184]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff ff12 	bl	8009040 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800921c:	f107 0320 	add.w	r3, r7, #32
 8009220:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009224:	4a2b      	ldr	r2, [pc, #172]	; (80092d4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff ff22 	bl	8009070 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800922c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fa52 	bl	80096da <_ZNSaIcEC1Ev>
 8009236:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800923a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800923e:	4926      	ldr	r1, [pc, #152]	; (80092d8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fc39 	bl	8009ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800924e:	f107 0120 	add.w	r1, r7, #32
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff ff2e 	bl	80090b4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8009258:	4820      	ldr	r0, [pc, #128]	; (80092dc <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	4a20      	ldr	r2, [pc, #128]	; (80092e0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8009260:	4619      	mov	r1, r3
 8009262:	f7ff ff05 	bl	8009070 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	4618      	mov	r0, r3
 800926c:	f000 faff 	bl	800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009270:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fafa 	bl	800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800927a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fa2c 	bl	80096dc <_ZNSaIcED1Ev>
 8009284:	f107 0320 	add.w	r3, r7, #32
 8009288:	4618      	mov	r0, r3
 800928a:	f000 faf0 	bl	800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800928e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009292:	4618      	mov	r0, r3
 8009294:	f000 faeb 	bl	800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800929c:	4618      	mov	r0, r3
 800929e:	f000 fae6 	bl	800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fa18 	bl	80096dc <_ZNSaIcED1Ev>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d107      	bne.n	80092c2 <_Z41__static_initialization_and_destruction_0ii+0xea>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d102      	bne.n	80092c2 <_Z41__static_initialization_and_destruction_0ii+0xea>
 80092bc:	4807      	ldr	r0, [pc, #28]	; (80092dc <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80092be:	f000 fad6 	bl	800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80092c2:	bf00      	nop
 80092c4:	3788      	adds	r7, #136	; 0x88
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	0800c7a8 	.word	0x0800c7a8
 80092d0:	0800c7f4 	.word	0x0800c7f4
 80092d4:	0800c820 	.word	0x0800c820
 80092d8:	0800c7c8 	.word	0x0800c7c8
 80092dc:	200001c0 	.word	0x200001c0
 80092e0:	0800c828 	.word	0x0800c828

080092e4 <_GLOBAL__sub_I__Z12EMATCommandsB5cxx11>:
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092ec:	2001      	movs	r0, #1
 80092ee:	f7ff ff73 	bl	80091d8 <_Z41__static_initialization_and_destruction_0ii>
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <_GLOBAL__sub_D__Z12EMATCommandsB5cxx11>:
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092fc:	2000      	movs	r0, #0
 80092fe:	f7ff ff6b 	bl	80091d8 <_Z41__static_initialization_and_destruction_0ii>
 8009302:	bd80      	pop	{r7, pc}

08009304 <_Z10flash_initv>:
#include "error.h"

W25Q64 myFlash(GPIOF, GPIO_PIN_13);

int flash_init()
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
	if (HAL_OK != myFlash.init())
 8009308:	4809      	ldr	r0, [pc, #36]	; (8009330 <_Z10flash_initv+0x2c>)
 800930a:	f7ff fc34 	bl	8008b76 <_ZN6W25Q644initEv>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	bf14      	ite	ne
 8009314:	2301      	movne	r3, #1
 8009316:	2300      	moveq	r3, #0
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d005      	beq.n	800932a <_Z10flash_initv+0x26>
	{
		errorHandler(__FILE__, __LINE__, ERROR_FATAL, "unable to format filesystem");
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <_Z10flash_initv+0x30>)
 8009320:	2200      	movs	r2, #0
 8009322:	2111      	movs	r1, #17
 8009324:	4804      	ldr	r0, [pc, #16]	; (8009338 <_Z10flash_initv+0x34>)
 8009326:	f7f7 f95b 	bl	80005e0 <errorHandler>
	}

	return 1;
 800932a:	2301      	movs	r3, #1
}
 800932c:	4618      	mov	r0, r3
 800932e:	bd80      	pop	{r7, pc}
 8009330:	200001d8 	.word	0x200001d8
 8009334:	0800c82c 	.word	0x0800c82c
 8009338:	0800c848 	.word	0x0800c848

0800933c <_Z11w25q64_readPK10lfs_configmmPvm>:

int w25q64_read(const struct lfs_config *c, lfs_block_t block,
                lfs_off_t off, void *buffer, lfs_size_t size)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	fb02 f303 	mul.w	r3, r2, r3
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	4413      	add	r3, r2
 8009358:	617b      	str	r3, [r7, #20]
    myFlash.read_data(addr, static_cast<uint8_t *>(buffer), size);
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	b29b      	uxth	r3, r3
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6979      	ldr	r1, [r7, #20]
 8009362:	4804      	ldr	r0, [pc, #16]	; (8009374 <_Z11w25q64_readPK10lfs_configmmPvm+0x38>)
 8009364:	f7ff fcc4 	bl	8008cf0 <_ZN6W25Q649read_dataEmPht>
    return 0;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200001d8 	.word	0x200001d8

08009378 <_Z11w25q64_progPK10lfs_configmmPKvm>:

int w25q64_prog(const struct lfs_config *c, lfs_block_t block,
                lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	fb02 f303 	mul.w	r3, r2, r3
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	4413      	add	r3, r2
 8009394:	617b      	str	r3, [r7, #20]
    myFlash.page_program(addr, const_cast<uint8_t *>(static_cast<const uint8_t *>(buffer)), size);
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	b29b      	uxth	r3, r3
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	6979      	ldr	r1, [r7, #20]
 800939e:	4804      	ldr	r0, [pc, #16]	; (80093b0 <_Z11w25q64_progPK10lfs_configmmPKvm+0x38>)
 80093a0:	f7ff fc6c 	bl	8008c7c <_ZN6W25Q6412page_programEmPht>
    return 0;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200001d8 	.word	0x200001d8

080093b4 <_Z12w25q64_erasePK10lfs_configm>:

int w25q64_erase(const struct lfs_config *c, lfs_block_t block)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
    uint32_t addr = block * c->block_size;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	69da      	ldr	r2, [r3, #28]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	fb02 f303 	mul.w	r3, r2, r3
 80093c8:	60fb      	str	r3, [r7, #12]
    myFlash.block_erase(addr);
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	4803      	ldr	r0, [pc, #12]	; (80093dc <_Z12w25q64_erasePK10lfs_configm+0x28>)
 80093ce:	f7ff fc29 	bl	8008c24 <_ZN6W25Q6411block_eraseEm>
    return 0;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	200001d8 	.word	0x200001d8

080093e0 <_Z11w25q64_syncPK10lfs_config>:

int w25q64_sync(const struct lfs_config *c)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
    // Nothing to do since we're not using any caching or buffering
    return 0;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
	...

080093f8 <_Z41__static_initialization_and_destruction_0ii>:
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d10a      	bne.n	800941e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800940e:	4293      	cmp	r3, r2
 8009410:	d105      	bne.n	800941e <_Z41__static_initialization_and_destruction_0ii+0x26>
W25Q64 myFlash(GPIOF, GPIO_PIN_13);
 8009412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009416:	4904      	ldr	r1, [pc, #16]	; (8009428 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8009418:	4804      	ldr	r0, [pc, #16]	; (800942c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800941a:	f7ff fb95 	bl	8008b48 <_ZN6W25Q64C1EP12GPIO_TypeDeft>
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40021400 	.word	0x40021400
 800942c:	200001d8 	.word	0x200001d8

08009430 <_GLOBAL__sub_I_myFlash>:
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
 8009434:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009438:	2001      	movs	r0, #1
 800943a:	f7ff ffdd 	bl	80093f8 <_Z41__static_initialization_and_destruction_0ii>
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	; 0x28
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009448:	f107 0314 	add.w	r3, r7, #20
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a28      	ldr	r2, [pc, #160]	; (8009500 <HAL_SPI_MspInit+0xc0>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d149      	bne.n	80094f6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	4b27      	ldr	r3, [pc, #156]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	4a26      	ldr	r2, [pc, #152]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 800946c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009470:	6453      	str	r3, [r2, #68]	; 0x44
 8009472:	4b24      	ldr	r3, [pc, #144]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 8009474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800947a:	613b      	str	r3, [r7, #16]
 800947c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	4b20      	ldr	r3, [pc, #128]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	6313      	str	r3, [r2, #48]	; 0x30
 800948e:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800949a:	2300      	movs	r3, #0
 800949c:	60bb      	str	r3, [r7, #8]
 800949e:	4b19      	ldr	r3, [pc, #100]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a2:	4a18      	ldr	r2, [pc, #96]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 80094a4:	f043 0302 	orr.w	r3, r3, #2
 80094a8:	6313      	str	r3, [r2, #48]	; 0x30
 80094aa:	4b16      	ldr	r3, [pc, #88]	; (8009504 <HAL_SPI_MspInit+0xc4>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80094b6:	2360      	movs	r3, #96	; 0x60
 80094b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ba:	2302      	movs	r3, #2
 80094bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094c2:	2303      	movs	r3, #3
 80094c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80094c6:	2305      	movs	r3, #5
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ca:	f107 0314 	add.w	r3, r7, #20
 80094ce:	4619      	mov	r1, r3
 80094d0:	480d      	ldr	r0, [pc, #52]	; (8009508 <HAL_SPI_MspInit+0xc8>)
 80094d2:	f7f7 fc1d 	bl	8000d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80094d6:	2320      	movs	r3, #32
 80094d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094da:	2302      	movs	r3, #2
 80094dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e2:	2303      	movs	r3, #3
 80094e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80094e6:	2305      	movs	r3, #5
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094ea:	f107 0314 	add.w	r3, r7, #20
 80094ee:	4619      	mov	r1, r3
 80094f0:	4806      	ldr	r0, [pc, #24]	; (800950c <HAL_SPI_MspInit+0xcc>)
 80094f2:	f7f7 fc0d 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80094f6:	bf00      	nop
 80094f8:	3728      	adds	r7, #40	; 0x28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	40013000 	.word	0x40013000
 8009504:	40023800 	.word	0x40023800
 8009508:	40020000 	.word	0x40020000
 800950c:	40020400 	.word	0x40020400

08009510 <_ZN3SPIC1Ev>:
    Transmitting,
    Receiving,
    Error
};

class SPI {
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a04      	ldr	r2, [pc, #16]	; (800952c <_ZN3SPIC1Ev+0x1c>)
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	200001e4 	.word	0x200001e4

08009530 <_ZN3SPI11getInstanceEv>:

SPI& SPI::getInstance()
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
	static SPI instance;
 8009534:	4b10      	ldr	r3, [pc, #64]	; (8009578 <_ZN3SPI11getInstanceEv+0x48>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f3bf 8f5b 	dmb	ish
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	bf0c      	ite	eq
 8009546:	2301      	moveq	r3, #1
 8009548:	2300      	movne	r3, #0
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	d010      	beq.n	8009572 <_ZN3SPI11getInstanceEv+0x42>
 8009550:	4809      	ldr	r0, [pc, #36]	; (8009578 <_ZN3SPI11getInstanceEv+0x48>)
 8009552:	f000 f8b3 	bl	80096bc <__cxa_guard_acquire>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	bf14      	ite	ne
 800955c:	2301      	movne	r3, #1
 800955e:	2300      	moveq	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d005      	beq.n	8009572 <_ZN3SPI11getInstanceEv+0x42>
 8009566:	4805      	ldr	r0, [pc, #20]	; (800957c <_ZN3SPI11getInstanceEv+0x4c>)
 8009568:	f7ff ffd2 	bl	8009510 <_ZN3SPIC1Ev>
 800956c:	4802      	ldr	r0, [pc, #8]	; (8009578 <_ZN3SPI11getInstanceEv+0x48>)
 800956e:	f000 f8b1 	bl	80096d4 <__cxa_guard_release>

	return instance;
 8009572:	4b02      	ldr	r3, [pc, #8]	; (800957c <_ZN3SPI11getInstanceEv+0x4c>)
}
 8009574:	4618      	mov	r0, r3
 8009576:	bd80      	pop	{r7, pc}
 8009578:	20000244 	.word	0x20000244
 800957c:	2000023c 	.word	0x2000023c

08009580 <_ZN3SPI4initEv>:

// TODO
// Add modularity

HAL_StatusTypeDef SPI::init()
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]

	this->hspi_->Instance = SPI1;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a1c      	ldr	r2, [pc, #112]	; (8009600 <_ZN3SPI4initEv+0x80>)
 800958e:	601a      	str	r2, [r3, #0]
	this->hspi_->Init.Mode = SPI_MODE_MASTER;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009598:	605a      	str	r2, [r3, #4]
	this->hspi_->Init.Direction = SPI_DIRECTION_2LINES;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	609a      	str	r2, [r3, #8]
	this->hspi_->Init.DataSize = SPI_DATASIZE_8BIT;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2200      	movs	r2, #0
 80095a8:	60da      	str	r2, [r3, #12]
	this->hspi_->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2200      	movs	r2, #0
 80095b0:	611a      	str	r2, [r3, #16]
	this->hspi_->Init.CLKPhase = SPI_PHASE_1EDGE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2200      	movs	r2, #0
 80095b8:	615a      	str	r2, [r3, #20]
	this->hspi_->Init.NSS = SPI_NSS_SOFT;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c2:	619a      	str	r2, [r3, #24]
	this->hspi_->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2218      	movs	r2, #24
 80095ca:	61da      	str	r2, [r3, #28]
	this->hspi_->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	621a      	str	r2, [r3, #32]
	this->hspi_->Init.TIMode = SPI_TIMODE_DISABLE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2200      	movs	r2, #0
 80095da:	625a      	str	r2, [r3, #36]	; 0x24
	this->hspi_->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2200      	movs	r2, #0
 80095e2:	629a      	str	r2, [r3, #40]	; 0x28
	this->hspi_->Init.CRCPolynomial = 10;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	220a      	movs	r2, #10
 80095ea:	62da      	str	r2, [r3, #44]	; 0x2c
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
	/* DMA2_Stream3_IRQn interrupt configuration */
	//HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);

	return HAL_SPI_Init(this->hspi_);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f8 f9b7 	bl	8001964 <HAL_SPI_Init>
 80095f6:	4603      	mov	r3, r0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40013000 	.word	0x40013000

08009604 <_ZN3SPI8transmitEPht>:

HAL_StatusTypeDef SPI::transmit(uint8_t *pData, uint16_t size)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	80fb      	strh	r3, [r7, #6]
	return HAL_SPI_Transmit(this->hspi_, pData, size, HAL_MAX_DELAY);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	88fa      	ldrh	r2, [r7, #6]
 8009618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	f7f8 fa2a 	bl	8001a76 <HAL_SPI_Transmit>
 8009622:	4603      	mov	r3, r0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <_ZN3SPI7receiveEPht>:

HAL_StatusTypeDef SPI::receive(uint8_t *pData, uint16_t size)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
	return HAL_SPI_Receive(this->hspi_, pData, size, HAL_MAX_DELAY);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	88fa      	ldrh	r2, [r7, #6]
 8009640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	f7f8 fb52 	bl	8001cee <HAL_SPI_Receive>
 800964a:	4603      	mov	r3, r0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <_ZN3SPI6csHighEtP12GPIO_TypeDef>:
{
	return HAL_SPI_TransmitReceive(this->hspi_, pTxData, pRxData, size, HAL_MAX_DELAY);
}

void SPI::csHigh(uint16_t pin, GPIO_TypeDef *port)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	460b      	mov	r3, r1
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8009662:	897b      	ldrh	r3, [r7, #10]
 8009664:	2201      	movs	r2, #1
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7f7 fcfd 	bl	8001068 <HAL_GPIO_WritePin>
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <_ZN3SPI5csLowEtP12GPIO_TypeDef>:

void SPI::csLow(uint16_t pin, GPIO_TypeDef *port)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	460b      	mov	r3, r1
 8009680:	607a      	str	r2, [r7, #4]
 8009682:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8009684:	897b      	ldrh	r3, [r7, #10]
 8009686:	2200      	movs	r2, #0
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7f7 fcec 	bl	8001068 <HAL_GPIO_WritePin>
}
 8009690:	bf00      	nop
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <main_cpp>:
/* Includes for testing purposes */
#include "filesystem.h"
#include "SD_module.h"

void main_cpp(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800969e:	af00      	add	r7, sp, #0

	fileSystem& fs = fileSystem::getInstance();
 80096a0:	f7ff fbc4 	bl	8008e2c <_ZN10fileSystem11getInstanceEv>
 80096a4:	f8c7 0404 	str.w	r0, [r7, #1028]	; 0x404

	char buff[1024];
	fs.read("errorLog.txt", buff, 50);
 80096a8:	1d3a      	adds	r2, r7, #4
 80096aa:	2332      	movs	r3, #50	; 0x32
 80096ac:	4902      	ldr	r1, [pc, #8]	; (80096b8 <main_cpp+0x20>)
 80096ae:	f8d7 0404 	ldr.w	r0, [r7, #1028]	; 0x404
 80096b2:	f7ff fc21 	bl	8008ef8 <_ZN10fileSystem4readEPKcPcj>

	createTasks();

	initOS();
	*/
	while(1);
 80096b6:	e7fe      	b.n	80096b6 <main_cpp+0x1e>
 80096b8:	0800c870 	.word	0x0800c870

080096bc <__cxa_guard_acquire>:
 80096bc:	6803      	ldr	r3, [r0, #0]
 80096be:	07db      	lsls	r3, r3, #31
 80096c0:	d406      	bmi.n	80096d0 <__cxa_guard_acquire+0x14>
 80096c2:	7843      	ldrb	r3, [r0, #1]
 80096c4:	b103      	cbz	r3, 80096c8 <__cxa_guard_acquire+0xc>
 80096c6:	deff      	udf	#255	; 0xff
 80096c8:	2301      	movs	r3, #1
 80096ca:	7043      	strb	r3, [r0, #1]
 80096cc:	4618      	mov	r0, r3
 80096ce:	4770      	bx	lr
 80096d0:	2000      	movs	r0, #0
 80096d2:	4770      	bx	lr

080096d4 <__cxa_guard_release>:
 80096d4:	2301      	movs	r3, #1
 80096d6:	6003      	str	r3, [r0, #0]
 80096d8:	4770      	bx	lr

080096da <_ZNSaIcEC1Ev>:
 80096da:	4770      	bx	lr

080096dc <_ZNSaIcED1Ev>:
 80096dc:	4770      	bx	lr

080096de <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80096de:	b10a      	cbz	r2, 80096e4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80096e0:	f000 befc 	b.w	800a4dc <memcpy>
 80096e4:	4770      	bx	lr
	...

080096e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80096e8:	b508      	push	{r3, lr}
 80096ea:	680b      	ldr	r3, [r1, #0]
 80096ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f0:	d302      	bcc.n	80096f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80096f2:	480d      	ldr	r0, [pc, #52]	; (8009728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80096f4:	f000 fc8c 	bl	800a010 <_ZSt20__throw_length_errorPKc>
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d90b      	bls.n	8009714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80096fc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009700:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009704:	d206      	bcs.n	8009714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009706:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800970a:	bf2a      	itet	cs
 800970c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009710:	6008      	strcc	r0, [r1, #0]
 8009712:	600b      	strcs	r3, [r1, #0]
 8009714:	6808      	ldr	r0, [r1, #0]
 8009716:	3001      	adds	r0, #1
 8009718:	d501      	bpl.n	800971e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800971a:	f000 fc73 	bl	800a004 <_ZSt17__throw_bad_allocv>
 800971e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009722:	f000 bab9 	b.w	8009c98 <_Znwj>
 8009726:	bf00      	nop
 8009728:	0800ca50 	.word	0x0800ca50

0800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800972c:	f850 3b08 	ldr.w	r3, [r0], #8
 8009730:	4283      	cmp	r3, r0
 8009732:	d002      	beq.n	800973a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009734:	4618      	mov	r0, r3
 8009736:	f000 baab 	b.w	8009c90 <_ZdlPv>
 800973a:	4770      	bx	lr

0800973c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800973c:	b508      	push	{r3, lr}
 800973e:	4603      	mov	r3, r0
 8009740:	4608      	mov	r0, r1
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	4298      	cmp	r0, r3
 8009746:	4611      	mov	r1, r2
 8009748:	d903      	bls.n	8009752 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800974a:	4602      	mov	r2, r0
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800974e:	f000 fc62 	bl	800a016 <_ZSt24__throw_out_of_range_fmtPKcz>
 8009752:	bd08      	pop	{r3, pc}
 8009754:	0800ca68 	.word	0x0800ca68

08009758 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8009758:	6840      	ldr	r0, [r0, #4]
 800975a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800975e:	3901      	subs	r1, #1
 8009760:	1a09      	subs	r1, r1, r0
 8009762:	4291      	cmp	r1, r2
 8009764:	b508      	push	{r3, lr}
 8009766:	d202      	bcs.n	800976e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fc51 	bl	800a010 <_ZSt20__throw_length_errorPKc>
 800976e:	bd08      	pop	{r3, pc}

08009770 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8009770:	6803      	ldr	r3, [r0, #0]
 8009772:	428b      	cmp	r3, r1
 8009774:	d806      	bhi.n	8009784 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8009776:	6840      	ldr	r0, [r0, #4]
 8009778:	4418      	add	r0, r3
 800977a:	4281      	cmp	r1, r0
 800977c:	bf94      	ite	ls
 800977e:	2000      	movls	r0, #0
 8009780:	2001      	movhi	r0, #1
 8009782:	4770      	bx	lr
 8009784:	2001      	movs	r0, #1
 8009786:	4770      	bx	lr

08009788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009788:	2a01      	cmp	r2, #1
 800978a:	b410      	push	{r4}
 800978c:	d104      	bne.n	8009798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800978e:	780a      	ldrb	r2, [r1, #0]
 8009790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009794:	7002      	strb	r2, [r0, #0]
 8009796:	4770      	bx	lr
 8009798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979c:	f7ff bf9f 	b.w	80096de <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80097a0:	2a01      	cmp	r2, #1
 80097a2:	b430      	push	{r4, r5}
 80097a4:	d103      	bne.n	80097ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80097a6:	780b      	ldrb	r3, [r1, #0]
 80097a8:	7003      	strb	r3, [r0, #0]
 80097aa:	bc30      	pop	{r4, r5}
 80097ac:	4770      	bx	lr
 80097ae:	2a00      	cmp	r2, #0
 80097b0:	d0fb      	beq.n	80097aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80097b2:	bc30      	pop	{r4, r5}
 80097b4:	f000 bea0 	b.w	800a4f8 <memmove>

080097b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80097b8:	b508      	push	{r3, lr}
 80097ba:	1a52      	subs	r2, r2, r1
 80097bc:	f7ff ffe4 	bl	8009788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80097c0:	bd08      	pop	{r3, pc}

080097c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80097c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80097c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80097c8:	461f      	mov	r7, r3
 80097ca:	6843      	ldr	r3, [r0, #4]
 80097cc:	eb01 0802 	add.w	r8, r1, r2
 80097d0:	1ab2      	subs	r2, r6, r2
 80097d2:	441a      	add	r2, r3
 80097d4:	eba3 0908 	sub.w	r9, r3, r8
 80097d8:	4603      	mov	r3, r0
 80097da:	9201      	str	r2, [sp, #4]
 80097dc:	f853 2b08 	ldr.w	r2, [r3], #8
 80097e0:	429a      	cmp	r2, r3
 80097e2:	bf18      	it	ne
 80097e4:	6882      	ldrne	r2, [r0, #8]
 80097e6:	460d      	mov	r5, r1
 80097e8:	bf08      	it	eq
 80097ea:	220f      	moveq	r2, #15
 80097ec:	a901      	add	r1, sp, #4
 80097ee:	4604      	mov	r4, r0
 80097f0:	f7ff ff7a 	bl	80096e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80097f4:	4682      	mov	sl, r0
 80097f6:	b11d      	cbz	r5, 8009800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80097f8:	6821      	ldr	r1, [r4, #0]
 80097fa:	462a      	mov	r2, r5
 80097fc:	f7ff ffc4 	bl	8009788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009800:	b137      	cbz	r7, 8009810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009802:	b12e      	cbz	r6, 8009810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009804:	4632      	mov	r2, r6
 8009806:	4639      	mov	r1, r7
 8009808:	eb0a 0005 	add.w	r0, sl, r5
 800980c:	f7ff ffbc 	bl	8009788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009810:	f1b9 0f00 	cmp.w	r9, #0
 8009814:	d007      	beq.n	8009826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8009816:	6821      	ldr	r1, [r4, #0]
 8009818:	4435      	add	r5, r6
 800981a:	464a      	mov	r2, r9
 800981c:	4441      	add	r1, r8
 800981e:	eb0a 0005 	add.w	r0, sl, r5
 8009822:	f7ff ffb1 	bl	8009788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009826:	4620      	mov	r0, r4
 8009828:	f7ff ff80 	bl	800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	f8c4 a000 	str.w	sl, [r4]
 8009832:	60a3      	str	r3, [r4, #8]
 8009834:	b002      	add	sp, #8
 8009836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800983a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800983a:	b570      	push	{r4, r5, r6, lr}
 800983c:	4604      	mov	r4, r0
 800983e:	460e      	mov	r6, r1
 8009840:	3008      	adds	r0, #8
 8009842:	6020      	str	r0, [r4, #0]
 8009844:	f856 3b08 	ldr.w	r3, [r6], #8
 8009848:	429e      	cmp	r6, r3
 800984a:	460d      	mov	r5, r1
 800984c:	d10b      	bne.n	8009866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800984e:	2210      	movs	r2, #16
 8009850:	4631      	mov	r1, r6
 8009852:	f7ff ff44 	bl	80096de <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8009856:	686b      	ldr	r3, [r5, #4]
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	2300      	movs	r3, #0
 800985c:	602e      	str	r6, [r5, #0]
 800985e:	606b      	str	r3, [r5, #4]
 8009860:	722b      	strb	r3, [r5, #8]
 8009862:	4620      	mov	r0, r4
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	688b      	ldr	r3, [r1, #8]
 800986a:	60a3      	str	r3, [r4, #8]
 800986c:	e7f3      	b.n	8009856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800986e:	b510      	push	{r4, lr}
 8009870:	4604      	mov	r4, r0
 8009872:	f7ff ff5b 	bl	800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009876:	4620      	mov	r0, r4
 8009878:	bd10      	pop	{r4, pc}

0800987a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800987a:	6840      	ldr	r0, [r0, #4]
 800987c:	4770      	bx	lr

0800987e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800987e:	4603      	mov	r3, r0
 8009880:	f853 2b08 	ldr.w	r2, [r3], #8
 8009884:	429a      	cmp	r2, r3
 8009886:	bf14      	ite	ne
 8009888:	6880      	ldrne	r0, [r0, #8]
 800988a:	200f      	moveq	r0, #15
 800988c:	4770      	bx	lr
	...

08009890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8009890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009896:	4614      	mov	r4, r2
 8009898:	4680      	mov	r8, r0
 800989a:	462a      	mov	r2, r5
 800989c:	4689      	mov	r9, r1
 800989e:	461f      	mov	r7, r3
 80098a0:	4621      	mov	r1, r4
 80098a2:	4b39      	ldr	r3, [pc, #228]	; (8009988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80098a4:	f7ff ff58 	bl	8009758 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80098a8:	4642      	mov	r2, r8
 80098aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098ae:	f852 6b08 	ldr.w	r6, [r2], #8
 80098b2:	4296      	cmp	r6, r2
 80098b4:	bf18      	it	ne
 80098b6:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80098ba:	eba5 0b04 	sub.w	fp, r5, r4
 80098be:	eb03 0a0b 	add.w	sl, r3, fp
 80098c2:	bf08      	it	eq
 80098c4:	220f      	moveq	r2, #15
 80098c6:	4552      	cmp	r2, sl
 80098c8:	d351      	bcc.n	800996e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80098ca:	444e      	add	r6, r9
 80098cc:	4639      	mov	r1, r7
 80098ce:	44a1      	add	r9, r4
 80098d0:	4640      	mov	r0, r8
 80098d2:	eba3 0909 	sub.w	r9, r3, r9
 80098d6:	f7ff ff4b 	bl	8009770 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80098da:	b180      	cbz	r0, 80098fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	d006      	beq.n	80098f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80098e2:	42ac      	cmp	r4, r5
 80098e4:	d004      	beq.n	80098f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80098e6:	464a      	mov	r2, r9
 80098e8:	1931      	adds	r1, r6, r4
 80098ea:	1970      	adds	r0, r6, r5
 80098ec:	f7ff ff58 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80098f0:	b315      	cbz	r5, 8009938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80098f2:	462a      	mov	r2, r5
 80098f4:	4639      	mov	r1, r7
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ff46 	bl	8009788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80098fc:	e01c      	b.n	8009938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80098fe:	b135      	cbz	r5, 800990e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8009900:	42ac      	cmp	r4, r5
 8009902:	d33c      	bcc.n	800997e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8009904:	462a      	mov	r2, r5
 8009906:	4639      	mov	r1, r7
 8009908:	4630      	mov	r0, r6
 800990a:	f7ff ff49 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800990e:	f1b9 0f00 	cmp.w	r9, #0
 8009912:	d011      	beq.n	8009938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009914:	42ac      	cmp	r4, r5
 8009916:	d00f      	beq.n	8009938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009918:	464a      	mov	r2, r9
 800991a:	1931      	adds	r1, r6, r4
 800991c:	1970      	adds	r0, r6, r5
 800991e:	f7ff ff3f 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009922:	42ac      	cmp	r4, r5
 8009924:	d208      	bcs.n	8009938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009926:	4434      	add	r4, r6
 8009928:	197b      	adds	r3, r7, r5
 800992a:	429c      	cmp	r4, r3
 800992c:	d30f      	bcc.n	800994e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800992e:	462a      	mov	r2, r5
 8009930:	4639      	mov	r1, r7
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff ff34 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009938:	f8d8 3000 	ldr.w	r3, [r8]
 800993c:	f8c8 a004 	str.w	sl, [r8, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	4640      	mov	r0, r8
 8009944:	f803 200a 	strb.w	r2, [r3, sl]
 8009948:	b003      	add	sp, #12
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	42bc      	cmp	r4, r7
 8009950:	d803      	bhi.n	800995a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8009952:	462a      	mov	r2, r5
 8009954:	eb07 010b 	add.w	r1, r7, fp
 8009958:	e7cd      	b.n	80098f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800995a:	1be4      	subs	r4, r4, r7
 800995c:	4622      	mov	r2, r4
 800995e:	4639      	mov	r1, r7
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff ff1d 	bl	80097a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009966:	1b2a      	subs	r2, r5, r4
 8009968:	1971      	adds	r1, r6, r5
 800996a:	1930      	adds	r0, r6, r4
 800996c:	e7c4      	b.n	80098f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800996e:	9500      	str	r5, [sp, #0]
 8009970:	463b      	mov	r3, r7
 8009972:	4622      	mov	r2, r4
 8009974:	4649      	mov	r1, r9
 8009976:	4640      	mov	r0, r8
 8009978:	f7ff ff23 	bl	80097c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800997c:	e7dc      	b.n	8009938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800997e:	f1b9 0f00 	cmp.w	r9, #0
 8009982:	d0d0      	beq.n	8009926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8009984:	e7c8      	b.n	8009918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8009986:	bf00      	nop
 8009988:	0800cab5 	.word	0x0800cab5

0800998c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800998c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800998e:	4604      	mov	r4, r0
 8009990:	4615      	mov	r5, r2
 8009992:	4a09      	ldr	r2, [pc, #36]	; (80099b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8009994:	9303      	str	r3, [sp, #12]
 8009996:	460e      	mov	r6, r1
 8009998:	f7ff fed0 	bl	800973c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800999c:	6862      	ldr	r2, [r4, #4]
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	1b92      	subs	r2, r2, r6
 80099a2:	4601      	mov	r1, r0
 80099a4:	42aa      	cmp	r2, r5
 80099a6:	9808      	ldr	r0, [sp, #32]
 80099a8:	9000      	str	r0, [sp, #0]
 80099aa:	bf28      	it	cs
 80099ac:	462a      	movcs	r2, r5
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff ff6e 	bl	8009890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80099b4:	b004      	add	sp, #16
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	0800ca9f 	.word	0x0800ca9f

080099bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 80099bc:	b507      	push	{r0, r1, r2, lr}
 80099be:	6853      	ldr	r3, [r2, #4]
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	6813      	ldr	r3, [r2, #0]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f7ff ffe1 	bl	800998c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80099ca:	b003      	add	sp, #12
 80099cc:	f85d fb04 	ldr.w	pc, [sp], #4

080099d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80099d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099d2:	4604      	mov	r4, r0
 80099d4:	4610      	mov	r0, r2
 80099d6:	9103      	str	r1, [sp, #12]
 80099d8:	9202      	str	r2, [sp, #8]
 80099da:	f7f6 fc63 	bl	80002a4 <strlen>
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	9000      	str	r0, [sp, #0]
 80099e2:	9903      	ldr	r1, [sp, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	4620      	mov	r0, r4
 80099e8:	f7ff ffd0 	bl	800998c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80099ec:	b004      	add	sp, #16
 80099ee:	bd10      	pop	{r4, pc}

080099f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80099f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099f2:	4604      	mov	r4, r0
 80099f4:	4623      	mov	r3, r4
 80099f6:	6840      	ldr	r0, [r0, #4]
 80099f8:	f853 6b08 	ldr.w	r6, [r3], #8
 80099fc:	429e      	cmp	r6, r3
 80099fe:	bf18      	it	ne
 8009a00:	68a3      	ldrne	r3, [r4, #8]
 8009a02:	eb00 0502 	add.w	r5, r0, r2
 8009a06:	bf08      	it	eq
 8009a08:	230f      	moveq	r3, #15
 8009a0a:	429d      	cmp	r5, r3
 8009a0c:	d80a      	bhi.n	8009a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8009a0e:	b112      	cbz	r2, 8009a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8009a10:	4430      	add	r0, r6
 8009a12:	f7ff feb9 	bl	8009788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	6065      	str	r5, [r4, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	555a      	strb	r2, [r3, r5]
 8009a20:	b002      	add	sp, #8
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	9200      	str	r2, [sp, #0]
 8009a26:	460b      	mov	r3, r1
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f7ff fec8 	bl	80097c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009a32:	e7f0      	b.n	8009a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08009a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8009a34:	b508      	push	{r3, lr}
 8009a36:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009a3a:	f7ff ffd9 	bl	80099f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009a3e:	bd08      	pop	{r3, pc}

08009a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8009a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	460d      	mov	r5, r1
 8009a48:	f7f6 fc2c 	bl	80002a4 <strlen>
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8009a4e:	9001      	str	r0, [sp, #4]
 8009a50:	4602      	mov	r2, r0
 8009a52:	2100      	movs	r1, #0
 8009a54:	4620      	mov	r0, r4
 8009a56:	f7ff fe7f 	bl	8009758 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8009a5a:	9a01      	ldr	r2, [sp, #4]
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f7ff ffc6 	bl	80099f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009a64:	b003      	add	sp, #12
 8009a66:	bd30      	pop	{r4, r5, pc}
 8009a68:	0800cace 	.word	0x0800cace

08009a6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 8009a6c:	4770      	bx	lr
	...

08009a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a72:	4604      	mov	r4, r0
 8009a74:	4616      	mov	r6, r2
 8009a76:	460d      	mov	r5, r1
 8009a78:	b919      	cbnz	r1, 8009a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009a7a:	b112      	cbz	r2, 8009a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009a7c:	480d      	ldr	r0, [pc, #52]	; (8009ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009a7e:	f000 fac4 	bl	800a00a <_ZSt19__throw_logic_errorPKc>
 8009a82:	1b73      	subs	r3, r6, r5
 8009a84:	2b0f      	cmp	r3, #15
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	d907      	bls.n	8009a9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	a901      	add	r1, sp, #4
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7ff fe2a 	bl	80096e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	6020      	str	r0, [r4, #0]
 8009a98:	60a3      	str	r3, [r4, #8]
 8009a9a:	4632      	mov	r2, r6
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	6820      	ldr	r0, [r4, #0]
 8009aa0:	f7ff fe8a 	bl	80097b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009aa4:	9b01      	ldr	r3, [sp, #4]
 8009aa6:	6822      	ldr	r2, [r4, #0]
 8009aa8:	6063      	str	r3, [r4, #4]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	54d1      	strb	r1, [r2, r3]
 8009aae:	b002      	add	sp, #8
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	bf00      	nop
 8009ab4:	0800cae3 	.word	0x0800cae3

08009ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	f100 0308 	add.w	r3, r0, #8
 8009abe:	4604      	mov	r4, r0
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	b159      	cbz	r1, 8009ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	f7f6 fbec 	bl	80002a4 <strlen>
 8009acc:	182a      	adds	r2, r5, r0
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7ff ffcb 	bl	8009a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009ada:	4620      	mov	r0, r4
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	2201      	movs	r2, #1
 8009ae0:	e7f5      	b.n	8009ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08009ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	07d0      	lsls	r0, r2, #31
 8009aea:	bf5c      	itt	pl
 8009aec:	2201      	movpl	r2, #1
 8009aee:	601a      	strpl	r2, [r3, #0]
 8009af0:	4b22      	ldr	r3, [pc, #136]	; (8009b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	07d1      	lsls	r1, r2, #31
 8009af6:	bf5c      	itt	pl
 8009af8:	2201      	movpl	r2, #1
 8009afa:	601a      	strpl	r2, [r3, #0]
 8009afc:	4b20      	ldr	r3, [pc, #128]	; (8009b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	07d2      	lsls	r2, r2, #31
 8009b02:	bf5c      	itt	pl
 8009b04:	2201      	movpl	r2, #1
 8009b06:	601a      	strpl	r2, [r3, #0]
 8009b08:	4b1e      	ldr	r3, [pc, #120]	; (8009b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	07d0      	lsls	r0, r2, #31
 8009b0e:	bf5c      	itt	pl
 8009b10:	2201      	movpl	r2, #1
 8009b12:	601a      	strpl	r2, [r3, #0]
 8009b14:	4b1c      	ldr	r3, [pc, #112]	; (8009b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	07d1      	lsls	r1, r2, #31
 8009b1a:	bf5c      	itt	pl
 8009b1c:	2201      	movpl	r2, #1
 8009b1e:	601a      	strpl	r2, [r3, #0]
 8009b20:	4b1a      	ldr	r3, [pc, #104]	; (8009b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	07d2      	lsls	r2, r2, #31
 8009b26:	bf5c      	itt	pl
 8009b28:	2201      	movpl	r2, #1
 8009b2a:	601a      	strpl	r2, [r3, #0]
 8009b2c:	4b18      	ldr	r3, [pc, #96]	; (8009b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	07d0      	lsls	r0, r2, #31
 8009b32:	bf5c      	itt	pl
 8009b34:	2201      	movpl	r2, #1
 8009b36:	601a      	strpl	r2, [r3, #0]
 8009b38:	4b16      	ldr	r3, [pc, #88]	; (8009b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	07d1      	lsls	r1, r2, #31
 8009b3e:	bf5c      	itt	pl
 8009b40:	2201      	movpl	r2, #1
 8009b42:	601a      	strpl	r2, [r3, #0]
 8009b44:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	07d2      	lsls	r2, r2, #31
 8009b4a:	bf5c      	itt	pl
 8009b4c:	2201      	movpl	r2, #1
 8009b4e:	601a      	strpl	r2, [r3, #0]
 8009b50:	4b12      	ldr	r3, [pc, #72]	; (8009b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	07d0      	lsls	r0, r2, #31
 8009b56:	bf5c      	itt	pl
 8009b58:	2201      	movpl	r2, #1
 8009b5a:	601a      	strpl	r2, [r3, #0]
 8009b5c:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	07d1      	lsls	r1, r2, #31
 8009b62:	bf5c      	itt	pl
 8009b64:	2201      	movpl	r2, #1
 8009b66:	601a      	strpl	r2, [r3, #0]
 8009b68:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	07d2      	lsls	r2, r2, #31
 8009b6e:	bf5c      	itt	pl
 8009b70:	2201      	movpl	r2, #1
 8009b72:	601a      	strpl	r2, [r3, #0]
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000274 	.word	0x20000274
 8009b7c:	20000270 	.word	0x20000270
 8009b80:	2000026c 	.word	0x2000026c
 8009b84:	20000268 	.word	0x20000268
 8009b88:	20000264 	.word	0x20000264
 8009b8c:	20000260 	.word	0x20000260
 8009b90:	2000025c 	.word	0x2000025c
 8009b94:	20000258 	.word	0x20000258
 8009b98:	20000254 	.word	0x20000254
 8009b9c:	20000250 	.word	0x20000250
 8009ba0:	2000024c 	.word	0x2000024c
 8009ba4:	20000248 	.word	0x20000248

08009ba8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8009ba8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009baa:	2400      	movs	r4, #0
 8009bac:	2310      	movs	r3, #16
 8009bae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009bb2:	6803      	ldr	r3, [r0, #0]
 8009bb4:	4615      	mov	r5, r2
 8009bb6:	699e      	ldr	r6, [r3, #24]
 8009bb8:	6812      	ldr	r2, [r2, #0]
 8009bba:	466b      	mov	r3, sp
 8009bbc:	e9cd 4400 	strd	r4, r4, [sp]
 8009bc0:	47b0      	blx	r6
 8009bc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009bc6:	f003 0306 	and.w	r3, r3, #6
 8009bca:	2b06      	cmp	r3, #6
 8009bcc:	bf03      	ittte	eq
 8009bce:	9b00      	ldreq	r3, [sp, #0]
 8009bd0:	602b      	streq	r3, [r5, #0]
 8009bd2:	2001      	moveq	r0, #1
 8009bd4:	4620      	movne	r0, r4
 8009bd6:	b004      	add	sp, #16
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}

08009bda <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8009bda:	9800      	ldr	r0, [sp, #0]
 8009bdc:	4290      	cmp	r0, r2
 8009bde:	bf14      	ite	ne
 8009be0:	2001      	movne	r0, #1
 8009be2:	2006      	moveq	r0, #6
 8009be4:	4770      	bx	lr
	...

08009be8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8009be8:	b510      	push	{r4, lr}
 8009bea:	4b03      	ldr	r3, [pc, #12]	; (8009bf8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8009bec:	6003      	str	r3, [r0, #0]
 8009bee:	4604      	mov	r4, r0
 8009bf0:	f000 f8e3 	bl	8009dba <_ZNSt9type_infoD1Ev>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	bd10      	pop	{r4, pc}
 8009bf8:	0800cb48 	.word	0x0800cb48

08009bfc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	4604      	mov	r4, r0
 8009c00:	f7ff fff2 	bl	8009be8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009c04:	4620      	mov	r0, r4
 8009c06:	2108      	movs	r1, #8
 8009c08:	f000 f844 	bl	8009c94 <_ZdlPvj>
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bd10      	pop	{r4, pc}

08009c10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	461f      	mov	r7, r3
 8009c16:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8009c1a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009c1e:	4598      	cmp	r8, r3
 8009c20:	4606      	mov	r6, r0
 8009c22:	4615      	mov	r5, r2
 8009c24:	d107      	bne.n	8009c36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8009c26:	9907      	ldr	r1, [sp, #28]
 8009c28:	f000 f8ca 	bl	8009dc0 <_ZNKSt9type_infoeqERKS_>
 8009c2c:	b118      	cbz	r0, 8009c36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8009c2e:	7165      	strb	r5, [r4, #5]
 8009c30:	2000      	movs	r0, #0
 8009c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c36:	4639      	mov	r1, r7
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f000 f8c1 	bl	8009dc0 <_ZNKSt9type_infoeqERKS_>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d0f6      	beq.n	8009c30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8009c42:	2301      	movs	r3, #1
 8009c44:	f8c4 8000 	str.w	r8, [r4]
 8009c48:	7125      	strb	r5, [r4, #4]
 8009c4a:	71a3      	strb	r3, [r4, #6]
 8009c4c:	e7f0      	b.n	8009c30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08009c4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8009c4e:	b538      	push	{r3, r4, r5, lr}
 8009c50:	4615      	mov	r5, r2
 8009c52:	461c      	mov	r4, r3
 8009c54:	f000 f8b4 	bl	8009dc0 <_ZNKSt9type_infoeqERKS_>
 8009c58:	b120      	cbz	r0, 8009c64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8009c5a:	2308      	movs	r3, #8
 8009c5c:	60e3      	str	r3, [r4, #12]
 8009c5e:	2306      	movs	r3, #6
 8009c60:	6025      	str	r5, [r4, #0]
 8009c62:	7123      	strb	r3, [r4, #4]
 8009c64:	bd38      	pop	{r3, r4, r5, pc}

08009c66 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8009c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c68:	4605      	mov	r5, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	9201      	str	r2, [sp, #4]
 8009c6e:	461e      	mov	r6, r3
 8009c70:	f000 f8a6 	bl	8009dc0 <_ZNKSt9type_infoeqERKS_>
 8009c74:	b950      	cbnz	r0, 8009c8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8009c76:	2e03      	cmp	r6, #3
 8009c78:	d808      	bhi.n	8009c8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	9a01      	ldr	r2, [sp, #4]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	4629      	mov	r1, r5
 8009c82:	4620      	mov	r0, r4
 8009c84:	b002      	add	sp, #8
 8009c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c8a:	4718      	bx	r3
 8009c8c:	b002      	add	sp, #8
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}

08009c90 <_ZdlPv>:
 8009c90:	f000 bc0c 	b.w	800a4ac <free>

08009c94 <_ZdlPvj>:
 8009c94:	f7ff bffc 	b.w	8009c90 <_ZdlPv>

08009c98 <_Znwj>:
 8009c98:	2801      	cmp	r0, #1
 8009c9a:	bf38      	it	cc
 8009c9c:	2001      	movcc	r0, #1
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f000 fbfa 	bl	800a49c <malloc>
 8009ca8:	b930      	cbnz	r0, 8009cb8 <_Znwj+0x20>
 8009caa:	f000 fac7 	bl	800a23c <_ZSt15get_new_handlerv>
 8009cae:	b908      	cbnz	r0, 8009cb4 <_Znwj+0x1c>
 8009cb0:	f000 fb85 	bl	800a3be <abort>
 8009cb4:	4780      	blx	r0
 8009cb6:	e7f4      	b.n	8009ca2 <_Znwj+0xa>
 8009cb8:	bd10      	pop	{r4, pc}
	...

08009cbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8009cc0:	6003      	str	r3, [r0, #0]
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	f7ff ff90 	bl	8009be8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009cc8:	4620      	mov	r0, r4
 8009cca:	bd10      	pop	{r4, pc}
 8009ccc:	0800cba8 	.word	0x0800cba8

08009cd0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	f7ff fff2 	bl	8009cbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8009cd8:	4620      	mov	r0, r4
 8009cda:	210c      	movs	r1, #12
 8009cdc:	f7ff ffda 	bl	8009c94 <_ZdlPvj>
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	bd10      	pop	{r4, pc}

08009ce4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8009ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ce6:	9f08      	ldr	r7, [sp, #32]
 8009ce8:	4297      	cmp	r7, r2
 8009cea:	4605      	mov	r5, r0
 8009cec:	460e      	mov	r6, r1
 8009cee:	4614      	mov	r4, r2
 8009cf0:	d00a      	beq.n	8009d08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8009cf2:	68a8      	ldr	r0, [r5, #8]
 8009cf4:	6802      	ldr	r2, [r0, #0]
 8009cf6:	9708      	str	r7, [sp, #32]
 8009cf8:	6a15      	ldr	r5, [r2, #32]
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	46ac      	mov	ip, r5
 8009d00:	b003      	add	sp, #12
 8009d02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009d06:	4760      	bx	ip
 8009d08:	4619      	mov	r1, r3
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	f000 f858 	bl	8009dc0 <_ZNKSt9type_infoeqERKS_>
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d0ed      	beq.n	8009cf2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8009d16:	2006      	movs	r0, #6
 8009d18:	b003      	add	sp, #12
 8009d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009d1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d20:	460d      	mov	r5, r1
 8009d22:	4619      	mov	r1, r3
 8009d24:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8009d28:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8009d2c:	4681      	mov	r9, r0
 8009d2e:	4617      	mov	r7, r2
 8009d30:	4698      	mov	r8, r3
 8009d32:	f000 f845 	bl	8009dc0 <_ZNKSt9type_infoeqERKS_>
 8009d36:	b190      	cbz	r0, 8009d5e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	6034      	str	r4, [r6, #0]
 8009d3c:	7137      	strb	r7, [r6, #4]
 8009d3e:	db09      	blt.n	8009d54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8009d40:	1961      	adds	r1, r4, r5
 8009d42:	458a      	cmp	sl, r1
 8009d44:	bf0c      	ite	eq
 8009d46:	2106      	moveq	r1, #6
 8009d48:	2101      	movne	r1, #1
 8009d4a:	71b1      	strb	r1, [r6, #6]
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	b001      	add	sp, #4
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	3502      	adds	r5, #2
 8009d56:	d1f9      	bne.n	8009d4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	71b3      	strb	r3, [r6, #6]
 8009d5c:	e7f6      	b.n	8009d4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009d5e:	4554      	cmp	r4, sl
 8009d60:	d106      	bne.n	8009d70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009d62:	4659      	mov	r1, fp
 8009d64:	4648      	mov	r0, r9
 8009d66:	f000 f82b 	bl	8009dc0 <_ZNKSt9type_infoeqERKS_>
 8009d6a:	b108      	cbz	r0, 8009d70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009d6c:	7177      	strb	r7, [r6, #5]
 8009d6e:	e7ed      	b.n	8009d4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009d70:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8009d74:	6803      	ldr	r3, [r0, #0]
 8009d76:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8009d7a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8009d7e:	69dc      	ldr	r4, [r3, #28]
 8009d80:	463a      	mov	r2, r7
 8009d82:	4643      	mov	r3, r8
 8009d84:	4629      	mov	r1, r5
 8009d86:	46a4      	mov	ip, r4
 8009d88:	b001      	add	sp, #4
 8009d8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8e:	4760      	bx	ip

08009d90 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	4607      	mov	r7, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	4615      	mov	r5, r2
 8009d9a:	461e      	mov	r6, r3
 8009d9c:	f7ff ff57 	bl	8009c4e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8009da0:	b948      	cbnz	r0, 8009db6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8009da2:	68b8      	ldr	r0, [r7, #8]
 8009da4:	6803      	ldr	r3, [r0, #0]
 8009da6:	699f      	ldr	r7, [r3, #24]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4633      	mov	r3, r6
 8009dac:	4621      	mov	r1, r4
 8009dae:	46bc      	mov	ip, r7
 8009db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009db4:	4760      	bx	ip
 8009db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009dba <_ZNSt9type_infoD1Ev>:
 8009dba:	4770      	bx	lr

08009dbc <_ZNKSt9type_info14__is_pointer_pEv>:
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4770      	bx	lr

08009dc0 <_ZNKSt9type_infoeqERKS_>:
 8009dc0:	4281      	cmp	r1, r0
 8009dc2:	b508      	push	{r3, lr}
 8009dc4:	d00e      	beq.n	8009de4 <_ZNKSt9type_infoeqERKS_+0x24>
 8009dc6:	6840      	ldr	r0, [r0, #4]
 8009dc8:	7803      	ldrb	r3, [r0, #0]
 8009dca:	2b2a      	cmp	r3, #42	; 0x2a
 8009dcc:	d00c      	beq.n	8009de8 <_ZNKSt9type_infoeqERKS_+0x28>
 8009dce:	6849      	ldr	r1, [r1, #4]
 8009dd0:	780b      	ldrb	r3, [r1, #0]
 8009dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd4:	bf08      	it	eq
 8009dd6:	3101      	addeq	r1, #1
 8009dd8:	f7f6 fa5a 	bl	8000290 <strcmp>
 8009ddc:	fab0 f080 	clz	r0, r0
 8009de0:	0940      	lsrs	r0, r0, #5
 8009de2:	bd08      	pop	{r3, pc}
 8009de4:	2001      	movs	r0, #1
 8009de6:	e7fc      	b.n	8009de2 <_ZNKSt9type_infoeqERKS_+0x22>
 8009de8:	2000      	movs	r0, #0
 8009dea:	e7fa      	b.n	8009de2 <_ZNKSt9type_infoeqERKS_+0x22>

08009dec <_ZNSs7_M_copyEPcPKcj>:
 8009dec:	2a01      	cmp	r2, #1
 8009dee:	b430      	push	{r4, r5}
 8009df0:	d103      	bne.n	8009dfa <_ZNSs7_M_copyEPcPKcj+0xe>
 8009df2:	780b      	ldrb	r3, [r1, #0]
 8009df4:	7003      	strb	r3, [r0, #0]
 8009df6:	bc30      	pop	{r4, r5}
 8009df8:	4770      	bx	lr
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d0fb      	beq.n	8009df6 <_ZNSs7_M_copyEPcPKcj+0xa>
 8009dfe:	bc30      	pop	{r4, r5}
 8009e00:	f000 bb6c 	b.w	800a4dc <memcpy>

08009e04 <_ZNSs13_S_copy_charsEPcS_S_>:
 8009e04:	b508      	push	{r3, lr}
 8009e06:	1a52      	subs	r2, r2, r1
 8009e08:	f7ff fff0 	bl	8009dec <_ZNSs7_M_copyEPcPKcj>
 8009e0c:	bd08      	pop	{r3, pc}
	...

08009e10 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8009e10:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8009e12:	4298      	cmp	r0, r3
 8009e14:	d004      	beq.n	8009e20 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8009e16:	2300      	movs	r3, #0
 8009e18:	6083      	str	r3, [r0, #8]
 8009e1a:	6001      	str	r1, [r0, #0]
 8009e1c:	4408      	add	r0, r1
 8009e1e:	7303      	strb	r3, [r0, #12]
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000278 	.word	0x20000278

08009e28 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8009e28:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8009e2a:	4298      	cmp	r0, r3
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4604      	mov	r4, r0
 8009e30:	d902      	bls.n	8009e38 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8009e32:	4814      	ldr	r0, [pc, #80]	; (8009e84 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8009e34:	f000 f8ec 	bl	800a010 <_ZSt20__throw_length_errorPKc>
 8009e38:	4288      	cmp	r0, r1
 8009e3a:	d903      	bls.n	8009e44 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8009e3c:	004b      	lsls	r3, r1, #1
 8009e3e:	4298      	cmp	r0, r3
 8009e40:	bf38      	it	cc
 8009e42:	461c      	movcc	r4, r3
 8009e44:	f104 031d 	add.w	r3, r4, #29
 8009e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4c:	f104 000d 	add.w	r0, r4, #13
 8009e50:	d90c      	bls.n	8009e6c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8009e52:	428c      	cmp	r4, r1
 8009e54:	d90a      	bls.n	8009e6c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8009e56:	480a      	ldr	r0, [pc, #40]	; (8009e80 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8009e58:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8009e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e60:	1ae4      	subs	r4, r4, r3
 8009e62:	4284      	cmp	r4, r0
 8009e64:	bf28      	it	cs
 8009e66:	4604      	movcs	r4, r0
 8009e68:	f104 000d 	add.w	r0, r4, #13
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	da01      	bge.n	8009e74 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8009e70:	f000 f8c8 	bl	800a004 <_ZSt17__throw_bad_allocv>
 8009e74:	f7ff ff10 	bl	8009c98 <_Znwj>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	6044      	str	r4, [r0, #4]
 8009e7c:	6082      	str	r2, [r0, #8]
 8009e7e:	bd10      	pop	{r4, pc}
 8009e80:	3ffffffc 	.word	0x3ffffffc
 8009e84:	0800cbe1 	.word	0x0800cbe1

08009e88 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.0>:
 8009e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8c:	eba1 0800 	sub.w	r8, r1, r0
 8009e90:	4605      	mov	r5, r0
 8009e92:	460e      	mov	r6, r1
 8009e94:	4640      	mov	r0, r8
 8009e96:	2100      	movs	r1, #0
 8009e98:	f7ff ffc6 	bl	8009e28 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8009e9c:	f100 070c 	add.w	r7, r0, #12
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	f7ff ffac 	bl	8009e04 <_ZNSs13_S_copy_charsEPcS_S_>
 8009eac:	4620      	mov	r0, r4
 8009eae:	4641      	mov	r1, r8
 8009eb0:	f7ff ffae 	bl	8009e10 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009ebc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8009ebc:	4288      	cmp	r0, r1
 8009ebe:	b508      	push	{r3, lr}
 8009ec0:	d007      	beq.n	8009ed2 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x16>
 8009ec2:	b118      	cbz	r0, 8009ecc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x10>
 8009ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ec8:	f7ff bfde 	b.w	8009e88 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.0>
 8009ecc:	4802      	ldr	r0, [pc, #8]	; (8009ed8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
 8009ece:	f000 f89c 	bl	800a00a <_ZSt19__throw_logic_errorPKc>
 8009ed2:	4802      	ldr	r0, [pc, #8]	; (8009edc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
 8009ed4:	bd08      	pop	{r3, pc}
 8009ed6:	bf00      	nop
 8009ed8:	0800cbf9 	.word	0x0800cbf9
 8009edc:	20000284 	.word	0x20000284

08009ee0 <_ZNSsC1EPKcjRKSaIcE>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	4401      	add	r1, r0
 8009eea:	461a      	mov	r2, r3
 8009eec:	f04f 0300 	mov.w	r3, #0
 8009ef0:	f7ff ffe4 	bl	8009ebc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8009ef4:	6020      	str	r0, [r4, #0]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	bd10      	pop	{r4, pc}
	...

08009efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8009efc:	4b18      	ldr	r3, [pc, #96]	; (8009f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	07d1      	lsls	r1, r2, #31
 8009f02:	bf5c      	itt	pl
 8009f04:	2201      	movpl	r2, #1
 8009f06:	601a      	strpl	r2, [r3, #0]
 8009f08:	4b16      	ldr	r3, [pc, #88]	; (8009f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	07d2      	lsls	r2, r2, #31
 8009f0e:	bf5c      	itt	pl
 8009f10:	2201      	movpl	r2, #1
 8009f12:	601a      	strpl	r2, [r3, #0]
 8009f14:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	07d0      	lsls	r0, r2, #31
 8009f1a:	bf5c      	itt	pl
 8009f1c:	2201      	movpl	r2, #1
 8009f1e:	601a      	strpl	r2, [r3, #0]
 8009f20:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	07d1      	lsls	r1, r2, #31
 8009f26:	bf5c      	itt	pl
 8009f28:	2201      	movpl	r2, #1
 8009f2a:	601a      	strpl	r2, [r3, #0]
 8009f2c:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	07d2      	lsls	r2, r2, #31
 8009f32:	bf5c      	itt	pl
 8009f34:	2201      	movpl	r2, #1
 8009f36:	601a      	strpl	r2, [r3, #0]
 8009f38:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	07d0      	lsls	r0, r2, #31
 8009f3e:	bf5c      	itt	pl
 8009f40:	2201      	movpl	r2, #1
 8009f42:	601a      	strpl	r2, [r3, #0]
 8009f44:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	07d1      	lsls	r1, r2, #31
 8009f4a:	bf5c      	itt	pl
 8009f4c:	2201      	movpl	r2, #1
 8009f4e:	601a      	strpl	r2, [r3, #0]
 8009f50:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	07d2      	lsls	r2, r2, #31
 8009f56:	bf5c      	itt	pl
 8009f58:	2201      	movpl	r2, #1
 8009f5a:	601a      	strpl	r2, [r3, #0]
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	200002a4 	.word	0x200002a4
 8009f64:	200002a0 	.word	0x200002a0
 8009f68:	2000029c 	.word	0x2000029c
 8009f6c:	20000298 	.word	0x20000298
 8009f70:	20000294 	.word	0x20000294
 8009f74:	20000290 	.word	0x20000290
 8009f78:	2000028c 	.word	0x2000028c
 8009f7c:	20000288 	.word	0x20000288

08009f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8009f80:	4b18      	ldr	r3, [pc, #96]	; (8009fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	07d1      	lsls	r1, r2, #31
 8009f86:	bf5c      	itt	pl
 8009f88:	2201      	movpl	r2, #1
 8009f8a:	601a      	strpl	r2, [r3, #0]
 8009f8c:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	07d2      	lsls	r2, r2, #31
 8009f92:	bf5c      	itt	pl
 8009f94:	2201      	movpl	r2, #1
 8009f96:	601a      	strpl	r2, [r3, #0]
 8009f98:	4b14      	ldr	r3, [pc, #80]	; (8009fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	07d0      	lsls	r0, r2, #31
 8009f9e:	bf5c      	itt	pl
 8009fa0:	2201      	movpl	r2, #1
 8009fa2:	601a      	strpl	r2, [r3, #0]
 8009fa4:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	07d1      	lsls	r1, r2, #31
 8009faa:	bf5c      	itt	pl
 8009fac:	2201      	movpl	r2, #1
 8009fae:	601a      	strpl	r2, [r3, #0]
 8009fb0:	4b10      	ldr	r3, [pc, #64]	; (8009ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	07d2      	lsls	r2, r2, #31
 8009fb6:	bf5c      	itt	pl
 8009fb8:	2201      	movpl	r2, #1
 8009fba:	601a      	strpl	r2, [r3, #0]
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	; (8009ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	07d0      	lsls	r0, r2, #31
 8009fc2:	bf5c      	itt	pl
 8009fc4:	2201      	movpl	r2, #1
 8009fc6:	601a      	strpl	r2, [r3, #0]
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	07d1      	lsls	r1, r2, #31
 8009fce:	bf5c      	itt	pl
 8009fd0:	2201      	movpl	r2, #1
 8009fd2:	601a      	strpl	r2, [r3, #0]
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	07d2      	lsls	r2, r2, #31
 8009fda:	bf5c      	itt	pl
 8009fdc:	2201      	movpl	r2, #1
 8009fde:	601a      	strpl	r2, [r3, #0]
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	200002c4 	.word	0x200002c4
 8009fe8:	200002c0 	.word	0x200002c0
 8009fec:	200002bc 	.word	0x200002bc
 8009ff0:	200002b8 	.word	0x200002b8
 8009ff4:	200002b4 	.word	0x200002b4
 8009ff8:	200002b0 	.word	0x200002b0
 8009ffc:	200002ac 	.word	0x200002ac
 800a000:	200002a8 	.word	0x200002a8

0800a004 <_ZSt17__throw_bad_allocv>:
 800a004:	b508      	push	{r3, lr}
 800a006:	f000 f9da 	bl	800a3be <abort>

0800a00a <_ZSt19__throw_logic_errorPKc>:
 800a00a:	b508      	push	{r3, lr}
 800a00c:	f000 f9d7 	bl	800a3be <abort>

0800a010 <_ZSt20__throw_length_errorPKc>:
 800a010:	b508      	push	{r3, lr}
 800a012:	f000 f9d4 	bl	800a3be <abort>

0800a016 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800a016:	b40f      	push	{r0, r1, r2, r3}
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	f107 0418 	add.w	r4, r7, #24
 800a022:	f854 2b04 	ldr.w	r2, [r4], #4
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	4610      	mov	r0, r2
 800a02a:	f7f6 f93b 	bl	80002a4 <strlen>
 800a02e:	f200 2307 	addw	r3, r0, #519	; 0x207
 800a032:	f023 0307 	bic.w	r3, r3, #7
 800a036:	ebad 0d03 	sub.w	sp, sp, r3
 800a03a:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	60fc      	str	r4, [r7, #12]
 800a042:	4623      	mov	r3, r4
 800a044:	4668      	mov	r0, sp
 800a046:	f000 f8b7 	bl	800a1b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800a04a:	f000 f9b8 	bl	800a3be <abort>
	...

0800a050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 800a050:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	07d0      	lsls	r0, r2, #31
 800a056:	bf5c      	itt	pl
 800a058:	2201      	movpl	r2, #1
 800a05a:	601a      	strpl	r2, [r3, #0]
 800a05c:	4b22      	ldr	r3, [pc, #136]	; (800a0e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	07d1      	lsls	r1, r2, #31
 800a062:	bf5c      	itt	pl
 800a064:	2201      	movpl	r2, #1
 800a066:	601a      	strpl	r2, [r3, #0]
 800a068:	4b20      	ldr	r3, [pc, #128]	; (800a0ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	07d2      	lsls	r2, r2, #31
 800a06e:	bf5c      	itt	pl
 800a070:	2201      	movpl	r2, #1
 800a072:	601a      	strpl	r2, [r3, #0]
 800a074:	4b1e      	ldr	r3, [pc, #120]	; (800a0f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	07d0      	lsls	r0, r2, #31
 800a07a:	bf5c      	itt	pl
 800a07c:	2201      	movpl	r2, #1
 800a07e:	601a      	strpl	r2, [r3, #0]
 800a080:	4b1c      	ldr	r3, [pc, #112]	; (800a0f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	07d1      	lsls	r1, r2, #31
 800a086:	bf5c      	itt	pl
 800a088:	2201      	movpl	r2, #1
 800a08a:	601a      	strpl	r2, [r3, #0]
 800a08c:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	07d2      	lsls	r2, r2, #31
 800a092:	bf5c      	itt	pl
 800a094:	2201      	movpl	r2, #1
 800a096:	601a      	strpl	r2, [r3, #0]
 800a098:	4b18      	ldr	r3, [pc, #96]	; (800a0fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	07d0      	lsls	r0, r2, #31
 800a09e:	bf5c      	itt	pl
 800a0a0:	2201      	movpl	r2, #1
 800a0a2:	601a      	strpl	r2, [r3, #0]
 800a0a4:	4b16      	ldr	r3, [pc, #88]	; (800a100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	07d1      	lsls	r1, r2, #31
 800a0aa:	bf5c      	itt	pl
 800a0ac:	2201      	movpl	r2, #1
 800a0ae:	601a      	strpl	r2, [r3, #0]
 800a0b0:	4b14      	ldr	r3, [pc, #80]	; (800a104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	07d2      	lsls	r2, r2, #31
 800a0b6:	bf5c      	itt	pl
 800a0b8:	2201      	movpl	r2, #1
 800a0ba:	601a      	strpl	r2, [r3, #0]
 800a0bc:	4b12      	ldr	r3, [pc, #72]	; (800a108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	07d0      	lsls	r0, r2, #31
 800a0c2:	bf5c      	itt	pl
 800a0c4:	2201      	movpl	r2, #1
 800a0c6:	601a      	strpl	r2, [r3, #0]
 800a0c8:	4b10      	ldr	r3, [pc, #64]	; (800a10c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	07d1      	lsls	r1, r2, #31
 800a0ce:	bf5c      	itt	pl
 800a0d0:	2201      	movpl	r2, #1
 800a0d2:	601a      	strpl	r2, [r3, #0]
 800a0d4:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	07d2      	lsls	r2, r2, #31
 800a0da:	bf5c      	itt	pl
 800a0dc:	2201      	movpl	r2, #1
 800a0de:	601a      	strpl	r2, [r3, #0]
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	200002f4 	.word	0x200002f4
 800a0e8:	200002f0 	.word	0x200002f0
 800a0ec:	200002ec 	.word	0x200002ec
 800a0f0:	200002e8 	.word	0x200002e8
 800a0f4:	200002e4 	.word	0x200002e4
 800a0f8:	200002e0 	.word	0x200002e0
 800a0fc:	200002dc 	.word	0x200002dc
 800a100:	200002d8 	.word	0x200002d8
 800a104:	200002d4 	.word	0x200002d4
 800a108:	200002d0 	.word	0x200002d0
 800a10c:	200002cc 	.word	0x200002cc
 800a110:	200002c8 	.word	0x200002c8

0800a114 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800a114:	b580      	push	{r7, lr}
 800a116:	b09c      	sub	sp, #112	; 0x70
 800a118:	4606      	mov	r6, r0
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	460c      	mov	r4, r1
 800a11e:	1ba4      	subs	r4, r4, r6
 800a120:	490e      	ldr	r1, [pc, #56]	; (800a15c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800a122:	2269      	movs	r2, #105	; 0x69
 800a124:	1d38      	adds	r0, r7, #4
 800a126:	f000 f9d9 	bl	800a4dc <memcpy>
 800a12a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800a12e:	f023 0307 	bic.w	r3, r3, #7
 800a132:	ebad 0d03 	sub.w	sp, sp, r3
 800a136:	466d      	mov	r5, sp
 800a138:	2268      	movs	r2, #104	; 0x68
 800a13a:	1d39      	adds	r1, r7, #4
 800a13c:	4628      	mov	r0, r5
 800a13e:	f000 f9cd 	bl	800a4dc <memcpy>
 800a142:	4622      	mov	r2, r4
 800a144:	4631      	mov	r1, r6
 800a146:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800a14a:	442c      	add	r4, r5
 800a14c:	f000 f9c6 	bl	800a4dc <memcpy>
 800a150:	2300      	movs	r3, #0
 800a152:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800a156:	4628      	mov	r0, r5
 800a158:	f7ff ff57 	bl	800a00a <_ZSt19__throw_logic_errorPKc>
 800a15c:	0800cc23 	.word	0x0800cc23

0800a160 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800a160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a164:	af00      	add	r7, sp, #0
 800a166:	b084      	sub	sp, #16
 800a168:	466d      	mov	r5, sp
 800a16a:	f105 040c 	add.w	r4, r5, #12
 800a16e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800a1b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800a172:	4623      	mov	r3, r4
 800a174:	f04f 0c0a 	mov.w	ip, #10
 800a178:	fbb2 f6fc 	udiv	r6, r2, ip
 800a17c:	fb0c 2e16 	mls	lr, ip, r6, r2
 800a180:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800a184:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800a188:	4696      	mov	lr, r2
 800a18a:	f1be 0f09 	cmp.w	lr, #9
 800a18e:	4632      	mov	r2, r6
 800a190:	d8f2      	bhi.n	800a178 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800a192:	1ae4      	subs	r4, r4, r3
 800a194:	428c      	cmp	r4, r1
 800a196:	d809      	bhi.n	800a1ac <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800a198:	f1c4 030c 	rsb	r3, r4, #12
 800a19c:	4622      	mov	r2, r4
 800a19e:	18e9      	adds	r1, r5, r3
 800a1a0:	f000 f99c 	bl	800a4dc <memcpy>
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1b0:	e7f8      	b.n	800a1a4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800a1b2:	bf00      	nop
 800a1b4:	0800cc8c 	.word	0x0800cc8c

0800a1b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800a1b8:	3901      	subs	r1, #1
 800a1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1be:	4607      	mov	r7, r0
 800a1c0:	4615      	mov	r5, r2
 800a1c2:	eb00 0801 	add.w	r8, r0, r1
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	782a      	ldrb	r2, [r5, #0]
 800a1ca:	b392      	cbz	r2, 800a232 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800a1cc:	4544      	cmp	r4, r8
 800a1ce:	d22a      	bcs.n	800a226 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800a1d0:	2a25      	cmp	r2, #37	; 0x25
 800a1d2:	d107      	bne.n	800a1e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800a1d4:	786a      	ldrb	r2, [r5, #1]
 800a1d6:	2a73      	cmp	r2, #115	; 0x73
 800a1d8:	d009      	beq.n	800a1ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800a1da:	2a7a      	cmp	r2, #122	; 0x7a
 800a1dc:	d012      	beq.n	800a204 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800a1de:	2a25      	cmp	r2, #37	; 0x25
 800a1e0:	d100      	bne.n	800a1e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800a1e2:	3501      	adds	r5, #1
 800a1e4:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a1e8:	f804 2b01 	strb.w	r2, [r4], #1
 800a1ec:	e7ec      	b.n	800a1c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800a1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f2:	3a01      	subs	r2, #1
 800a1f4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a1f8:	b1c9      	cbz	r1, 800a22e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800a1fa:	4544      	cmp	r4, r8
 800a1fc:	d013      	beq.n	800a226 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800a1fe:	f804 1b01 	strb.w	r1, [r4], #1
 800a202:	e7f7      	b.n	800a1f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800a204:	78aa      	ldrb	r2, [r5, #2]
 800a206:	2a75      	cmp	r2, #117	; 0x75
 800a208:	d1ec      	bne.n	800a1e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800a20a:	461e      	mov	r6, r3
 800a20c:	eba8 0104 	sub.w	r1, r8, r4
 800a210:	f856 2b04 	ldr.w	r2, [r6], #4
 800a214:	4620      	mov	r0, r4
 800a216:	f7ff ffa3 	bl	800a160 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	dd03      	ble.n	800a226 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800a21e:	4404      	add	r4, r0
 800a220:	3503      	adds	r5, #3
 800a222:	4633      	mov	r3, r6
 800a224:	e7d0      	b.n	800a1c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800a226:	4621      	mov	r1, r4
 800a228:	4638      	mov	r0, r7
 800a22a:	f7ff ff73 	bl	800a114 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800a22e:	3502      	adds	r5, #2
 800a230:	e7ca      	b.n	800a1c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800a232:	7022      	strb	r2, [r4, #0]
 800a234:	1be0      	subs	r0, r4, r7
 800a236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a23c <_ZSt15get_new_handlerv>:
 800a23c:	4b02      	ldr	r3, [pc, #8]	; (800a248 <_ZSt15get_new_handlerv+0xc>)
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	f3bf 8f5b 	dmb	ish
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	200002f8 	.word	0x200002f8

0800a24c <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 800a24c:	4800      	ldr	r0, [pc, #0]	; (800a250 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 800a24e:	4770      	bx	lr
 800a250:	0800cc97 	.word	0x0800cc97

0800a254 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 800a254:	4800      	ldr	r0, [pc, #0]	; (800a258 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 800a256:	4770      	bx	lr
 800a258:	0800d0c2 	.word	0x0800d0c2

0800a25c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 800a25c:	2a74      	cmp	r2, #116	; 0x74
 800a25e:	dc22      	bgt.n	800a2a6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4a>
 800a260:	2a57      	cmp	r2, #87	; 0x57
 800a262:	dc0b      	bgt.n	800a27c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x20>
 800a264:	2a4d      	cmp	r2, #77	; 0x4d
 800a266:	dc28      	bgt.n	800a2ba <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a268:	2a3b      	cmp	r2, #59	; 0x3b
 800a26a:	dc0d      	bgt.n	800a288 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x2c>
 800a26c:	2a24      	cmp	r2, #36	; 0x24
 800a26e:	dc16      	bgt.n	800a29e <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x42>
 800a270:	2a0f      	cmp	r2, #15
 800a272:	dc10      	bgt.n	800a296 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800a274:	1e53      	subs	r3, r2, #1
 800a276:	2b0d      	cmp	r3, #13
 800a278:	d81f      	bhi.n	800a2ba <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a27a:	e00c      	b.n	800a296 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800a27c:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800a280:	2101      	movs	r1, #1
 800a282:	4099      	lsls	r1, r3
 800a284:	4b0e      	ldr	r3, [pc, #56]	; (800a2c0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x64>)
 800a286:	e015      	b.n	800a2b4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x58>
 800a288:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 800a28c:	2301      	movs	r3, #1
 800a28e:	408b      	lsls	r3, r1
 800a290:	490c      	ldr	r1, [pc, #48]	; (800a2c4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x68>)
 800a292:	420b      	tst	r3, r1
 800a294:	d011      	beq.n	800a2ba <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x6c>)
 800a298:	6002      	str	r2, [r0, #0]
 800a29a:	6043      	str	r3, [r0, #4]
 800a29c:	4770      	bx	lr
 800a29e:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	e7e8      	b.n	800a278 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 800a2a6:	f1a2 0376 	sub.w	r3, r2, #118	; 0x76
 800a2aa:	2b18      	cmp	r3, #24
 800a2ac:	d805      	bhi.n	800a2ba <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	4099      	lsls	r1, r3
 800a2b2:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x70>)
 800a2b4:	400b      	ands	r3, r1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1ed      	bne.n	800a296 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800a2ba:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x74>)
 800a2bc:	6002      	str	r2, [r0, #0]
 800a2be:	e7ec      	b.n	800a29a <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3e>
 800a2c0:	1fbf009d 	.word	0x1fbf009d
 800a2c4:	0002088f 	.word	0x0002088f
 800a2c8:	20000014 	.word	0x20000014
 800a2cc:	01f107bf 	.word	0x01f107bf
 800a2d0:	20000010 	.word	0x20000010

0800a2d4 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 800a2d4:	e9c0 2100 	strd	r2, r1, [r0]
 800a2d8:	4770      	bx	lr

0800a2da <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 800a2da:	b513      	push	{r0, r1, r4, lr}
 800a2dc:	6803      	ldr	r3, [r0, #0]
 800a2de:	4614      	mov	r4, r2
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	460a      	mov	r2, r1
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	4668      	mov	r0, sp
 800a2e8:	4798      	blx	r3
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	9a01      	ldr	r2, [sp, #4]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d106      	bne.n	800a300 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x26>
 800a2f2:	9800      	ldr	r0, [sp, #0]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	1ac3      	subs	r3, r0, r3
 800a2f8:	4258      	negs	r0, r3
 800a2fa:	4158      	adcs	r0, r3
 800a2fc:	b002      	add	sp, #8
 800a2fe:	bd10      	pop	{r4, pc}
 800a300:	2000      	movs	r0, #0
 800a302:	e7fb      	b.n	800a2fc <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x22>

0800a304 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 800a304:	684b      	ldr	r3, [r1, #4]
 800a306:	4283      	cmp	r3, r0
 800a308:	d104      	bne.n	800a314 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0x10>
 800a30a:	6808      	ldr	r0, [r1, #0]
 800a30c:	1a83      	subs	r3, r0, r2
 800a30e:	4258      	negs	r0, r3
 800a310:	4158      	adcs	r0, r3
 800a312:	4770      	bx	lr
 800a314:	2000      	movs	r0, #0
 800a316:	4770      	bx	lr

0800a318 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 800a318:	4770      	bx	lr

0800a31a <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 800a31a:	4770      	bx	lr

0800a31c <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 800a31c:	b510      	push	{r4, lr}
 800a31e:	4604      	mov	r4, r0
 800a320:	f7ff fcb6 	bl	8009c90 <_ZdlPv>
 800a324:	4620      	mov	r0, r4
 800a326:	bd10      	pop	{r4, pc}

0800a328 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	4604      	mov	r4, r0
 800a32c:	f7ff fcb0 	bl	8009c90 <_ZdlPv>
 800a330:	4620      	mov	r0, r4
 800a332:	bd10      	pop	{r4, pc}

0800a334 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 800a334:	b513      	push	{r0, r1, r4, lr}
 800a336:	4604      	mov	r4, r0
 800a338:	4610      	mov	r0, r2
 800a33a:	f000 ffb5 	bl	800b2a8 <strerror>
 800a33e:	aa01      	add	r2, sp, #4
 800a340:	4601      	mov	r1, r0
 800a342:	4620      	mov	r0, r4
 800a344:	f7ff fbb8 	bl	8009ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a348:	4620      	mov	r0, r4
 800a34a:	b002      	add	sp, #8
 800a34c:	bd10      	pop	{r4, pc}

0800a34e <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 800a34e:	b510      	push	{r4, lr}
 800a350:	680b      	ldr	r3, [r1, #0]
 800a352:	b086      	sub	sp, #24
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	4604      	mov	r4, r0
 800a358:	4668      	mov	r0, sp
 800a35a:	4798      	blx	r3
 800a35c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a360:	4620      	mov	r0, r4
 800a362:	f000 f824 	bl	800a3ae <_ZNSt12__cow_stringC1EPKcj>
 800a366:	4668      	mov	r0, sp
 800a368:	f7ff f9e0 	bl	800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a36c:	4620      	mov	r0, r4
 800a36e:	b006      	add	sp, #24
 800a370:	bd10      	pop	{r4, pc}
	...

0800a374 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 800a374:	b508      	push	{r3, lr}
 800a376:	4a06      	ldr	r2, [pc, #24]	; (800a390 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 800a378:	4906      	ldr	r1, [pc, #24]	; (800a394 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 800a37a:	4807      	ldr	r0, [pc, #28]	; (800a398 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 800a37c:	f000 f812 	bl	800a3a4 <__aeabi_atexit>
 800a380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a384:	4a02      	ldr	r2, [pc, #8]	; (800a390 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 800a386:	4905      	ldr	r1, [pc, #20]	; (800a39c <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 800a388:	4805      	ldr	r0, [pc, #20]	; (800a3a0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 800a38a:	f000 b80b 	b.w	800a3a4 <__aeabi_atexit>
 800a38e:	bf00      	nop
 800a390:	20000000 	.word	0x20000000
 800a394:	0800a31b 	.word	0x0800a31b
 800a398:	20000014 	.word	0x20000014
 800a39c:	0800a319 	.word	0x0800a319
 800a3a0:	20000010 	.word	0x20000010

0800a3a4 <__aeabi_atexit>:
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 b82d 	b.w	800a408 <__cxa_atexit>

0800a3ae <_ZNSt12__cow_stringC1EPKcj>:
 800a3ae:	b513      	push	{r0, r1, r4, lr}
 800a3b0:	ab01      	add	r3, sp, #4
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	f7ff fd94 	bl	8009ee0 <_ZNSsC1EPKcjRKSaIcE>
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	b002      	add	sp, #8
 800a3bc:	bd10      	pop	{r4, pc}

0800a3be <abort>:
 800a3be:	b508      	push	{r3, lr}
 800a3c0:	2006      	movs	r0, #6
 800a3c2:	f000 fcd9 	bl	800ad78 <raise>
 800a3c6:	2001      	movs	r0, #1
 800a3c8:	f7f6 fa61 	bl	800088e <_exit>

0800a3cc <__assert_func>:
 800a3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <__assert_func+0x2c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	68d8      	ldr	r0, [r3, #12]
 800a3da:	b14c      	cbz	r4, 800a3f0 <__assert_func+0x24>
 800a3dc:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <__assert_func+0x30>)
 800a3de:	9100      	str	r1, [sp, #0]
 800a3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e4:	4906      	ldr	r1, [pc, #24]	; (800a400 <__assert_func+0x34>)
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	f000 f822 	bl	800a430 <fiprintf>
 800a3ec:	f7ff ffe7 	bl	800a3be <abort>
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <__assert_func+0x38>)
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	e7f3      	b.n	800a3de <__assert_func+0x12>
 800a3f6:	bf00      	nop
 800a3f8:	20000018 	.word	0x20000018
 800a3fc:	0800cd7c 	.word	0x0800cd7c
 800a400:	0800cd89 	.word	0x0800cd89
 800a404:	0800cdb7 	.word	0x0800cdb7

0800a408 <__cxa_atexit>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	4c05      	ldr	r4, [pc, #20]	; (800a420 <__cxa_atexit+0x18>)
 800a40c:	4613      	mov	r3, r2
 800a40e:	b12c      	cbz	r4, 800a41c <__cxa_atexit+0x14>
 800a410:	460a      	mov	r2, r1
 800a412:	4601      	mov	r1, r0
 800a414:	2002      	movs	r0, #2
 800a416:	f3af 8000 	nop.w
 800a41a:	bd10      	pop	{r4, pc}
 800a41c:	4620      	mov	r0, r4
 800a41e:	e7fc      	b.n	800a41a <__cxa_atexit+0x12>
 800a420:	00000000 	.word	0x00000000

0800a424 <__errno>:
 800a424:	4b01      	ldr	r3, [pc, #4]	; (800a42c <__errno+0x8>)
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	20000018 	.word	0x20000018

0800a430 <fiprintf>:
 800a430:	b40e      	push	{r1, r2, r3}
 800a432:	b503      	push	{r0, r1, lr}
 800a434:	4601      	mov	r1, r0
 800a436:	ab03      	add	r3, sp, #12
 800a438:	4805      	ldr	r0, [pc, #20]	; (800a450 <fiprintf+0x20>)
 800a43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	f000 f985 	bl	800a750 <_vfiprintf_r>
 800a446:	b002      	add	sp, #8
 800a448:	f85d eb04 	ldr.w	lr, [sp], #4
 800a44c:	b003      	add	sp, #12
 800a44e:	4770      	bx	lr
 800a450:	20000018 	.word	0x20000018

0800a454 <__libc_init_array>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4d0d      	ldr	r5, [pc, #52]	; (800a48c <__libc_init_array+0x38>)
 800a458:	4c0d      	ldr	r4, [pc, #52]	; (800a490 <__libc_init_array+0x3c>)
 800a45a:	1b64      	subs	r4, r4, r5
 800a45c:	10a4      	asrs	r4, r4, #2
 800a45e:	2600      	movs	r6, #0
 800a460:	42a6      	cmp	r6, r4
 800a462:	d109      	bne.n	800a478 <__libc_init_array+0x24>
 800a464:	4d0b      	ldr	r5, [pc, #44]	; (800a494 <__libc_init_array+0x40>)
 800a466:	4c0c      	ldr	r4, [pc, #48]	; (800a498 <__libc_init_array+0x44>)
 800a468:	f001 fc20 	bl	800bcac <_init>
 800a46c:	1b64      	subs	r4, r4, r5
 800a46e:	10a4      	asrs	r4, r4, #2
 800a470:	2600      	movs	r6, #0
 800a472:	42a6      	cmp	r6, r4
 800a474:	d105      	bne.n	800a482 <__libc_init_array+0x2e>
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47c:	4798      	blx	r3
 800a47e:	3601      	adds	r6, #1
 800a480:	e7ee      	b.n	800a460 <__libc_init_array+0xc>
 800a482:	f855 3b04 	ldr.w	r3, [r5], #4
 800a486:	4798      	blx	r3
 800a488:	3601      	adds	r6, #1
 800a48a:	e7f2      	b.n	800a472 <__libc_init_array+0x1e>
 800a48c:	0800d4f0 	.word	0x0800d4f0
 800a490:	0800d4f0 	.word	0x0800d4f0
 800a494:	0800d4f0 	.word	0x0800d4f0
 800a498:	0800d510 	.word	0x0800d510

0800a49c <malloc>:
 800a49c:	4b02      	ldr	r3, [pc, #8]	; (800a4a8 <malloc+0xc>)
 800a49e:	4601      	mov	r1, r0
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	f000 b8b7 	b.w	800a614 <_malloc_r>
 800a4a6:	bf00      	nop
 800a4a8:	20000018 	.word	0x20000018

0800a4ac <free>:
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <free+0xc>)
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	f000 b843 	b.w	800a53c <_free_r>
 800a4b6:	bf00      	nop
 800a4b8:	20000018 	.word	0x20000018

0800a4bc <memcmp>:
 800a4bc:	b510      	push	{r4, lr}
 800a4be:	3901      	subs	r1, #1
 800a4c0:	4402      	add	r2, r0
 800a4c2:	4290      	cmp	r0, r2
 800a4c4:	d101      	bne.n	800a4ca <memcmp+0xe>
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	e005      	b.n	800a4d6 <memcmp+0x1a>
 800a4ca:	7803      	ldrb	r3, [r0, #0]
 800a4cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	d001      	beq.n	800a4d8 <memcmp+0x1c>
 800a4d4:	1b18      	subs	r0, r3, r4
 800a4d6:	bd10      	pop	{r4, pc}
 800a4d8:	3001      	adds	r0, #1
 800a4da:	e7f2      	b.n	800a4c2 <memcmp+0x6>

0800a4dc <memcpy>:
 800a4dc:	440a      	add	r2, r1
 800a4de:	4291      	cmp	r1, r2
 800a4e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a4e4:	d100      	bne.n	800a4e8 <memcpy+0xc>
 800a4e6:	4770      	bx	lr
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	d1f9      	bne.n	800a4ea <memcpy+0xe>
 800a4f6:	bd10      	pop	{r4, pc}

0800a4f8 <memmove>:
 800a4f8:	4288      	cmp	r0, r1
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	eb01 0402 	add.w	r4, r1, r2
 800a500:	d902      	bls.n	800a508 <memmove+0x10>
 800a502:	4284      	cmp	r4, r0
 800a504:	4623      	mov	r3, r4
 800a506:	d807      	bhi.n	800a518 <memmove+0x20>
 800a508:	1e43      	subs	r3, r0, #1
 800a50a:	42a1      	cmp	r1, r4
 800a50c:	d008      	beq.n	800a520 <memmove+0x28>
 800a50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a516:	e7f8      	b.n	800a50a <memmove+0x12>
 800a518:	4402      	add	r2, r0
 800a51a:	4601      	mov	r1, r0
 800a51c:	428a      	cmp	r2, r1
 800a51e:	d100      	bne.n	800a522 <memmove+0x2a>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a52a:	e7f7      	b.n	800a51c <memmove+0x24>

0800a52c <memset>:
 800a52c:	4402      	add	r2, r0
 800a52e:	4603      	mov	r3, r0
 800a530:	4293      	cmp	r3, r2
 800a532:	d100      	bne.n	800a536 <memset+0xa>
 800a534:	4770      	bx	lr
 800a536:	f803 1b01 	strb.w	r1, [r3], #1
 800a53a:	e7f9      	b.n	800a530 <memset+0x4>

0800a53c <_free_r>:
 800a53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a53e:	2900      	cmp	r1, #0
 800a540:	d044      	beq.n	800a5cc <_free_r+0x90>
 800a542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a546:	9001      	str	r0, [sp, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f1a1 0404 	sub.w	r4, r1, #4
 800a54e:	bfb8      	it	lt
 800a550:	18e4      	addlt	r4, r4, r3
 800a552:	f001 f9d9 	bl	800b908 <__malloc_lock>
 800a556:	4a1e      	ldr	r2, [pc, #120]	; (800a5d0 <_free_r+0x94>)
 800a558:	9801      	ldr	r0, [sp, #4]
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	b933      	cbnz	r3, 800a56c <_free_r+0x30>
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	6014      	str	r4, [r2, #0]
 800a562:	b003      	add	sp, #12
 800a564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a568:	f001 b9d4 	b.w	800b914 <__malloc_unlock>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d908      	bls.n	800a582 <_free_r+0x46>
 800a570:	6825      	ldr	r5, [r4, #0]
 800a572:	1961      	adds	r1, r4, r5
 800a574:	428b      	cmp	r3, r1
 800a576:	bf01      	itttt	eq
 800a578:	6819      	ldreq	r1, [r3, #0]
 800a57a:	685b      	ldreq	r3, [r3, #4]
 800a57c:	1949      	addeq	r1, r1, r5
 800a57e:	6021      	streq	r1, [r4, #0]
 800a580:	e7ed      	b.n	800a55e <_free_r+0x22>
 800a582:	461a      	mov	r2, r3
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	b10b      	cbz	r3, 800a58c <_free_r+0x50>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d9fa      	bls.n	800a582 <_free_r+0x46>
 800a58c:	6811      	ldr	r1, [r2, #0]
 800a58e:	1855      	adds	r5, r2, r1
 800a590:	42a5      	cmp	r5, r4
 800a592:	d10b      	bne.n	800a5ac <_free_r+0x70>
 800a594:	6824      	ldr	r4, [r4, #0]
 800a596:	4421      	add	r1, r4
 800a598:	1854      	adds	r4, r2, r1
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	6011      	str	r1, [r2, #0]
 800a59e:	d1e0      	bne.n	800a562 <_free_r+0x26>
 800a5a0:	681c      	ldr	r4, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	6053      	str	r3, [r2, #4]
 800a5a6:	4421      	add	r1, r4
 800a5a8:	6011      	str	r1, [r2, #0]
 800a5aa:	e7da      	b.n	800a562 <_free_r+0x26>
 800a5ac:	d902      	bls.n	800a5b4 <_free_r+0x78>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	e7d6      	b.n	800a562 <_free_r+0x26>
 800a5b4:	6825      	ldr	r5, [r4, #0]
 800a5b6:	1961      	adds	r1, r4, r5
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	bf04      	itt	eq
 800a5bc:	6819      	ldreq	r1, [r3, #0]
 800a5be:	685b      	ldreq	r3, [r3, #4]
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	bf04      	itt	eq
 800a5c4:	1949      	addeq	r1, r1, r5
 800a5c6:	6021      	streq	r1, [r4, #0]
 800a5c8:	6054      	str	r4, [r2, #4]
 800a5ca:	e7ca      	b.n	800a562 <_free_r+0x26>
 800a5cc:	b003      	add	sp, #12
 800a5ce:	bd30      	pop	{r4, r5, pc}
 800a5d0:	200002fc 	.word	0x200002fc

0800a5d4 <sbrk_aligned>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	4e0e      	ldr	r6, [pc, #56]	; (800a610 <sbrk_aligned+0x3c>)
 800a5d8:	460c      	mov	r4, r1
 800a5da:	6831      	ldr	r1, [r6, #0]
 800a5dc:	4605      	mov	r5, r0
 800a5de:	b911      	cbnz	r1, 800a5e6 <sbrk_aligned+0x12>
 800a5e0:	f000 fb92 	bl	800ad08 <_sbrk_r>
 800a5e4:	6030      	str	r0, [r6, #0]
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f000 fb8d 	bl	800ad08 <_sbrk_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	d00a      	beq.n	800a608 <sbrk_aligned+0x34>
 800a5f2:	1cc4      	adds	r4, r0, #3
 800a5f4:	f024 0403 	bic.w	r4, r4, #3
 800a5f8:	42a0      	cmp	r0, r4
 800a5fa:	d007      	beq.n	800a60c <sbrk_aligned+0x38>
 800a5fc:	1a21      	subs	r1, r4, r0
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 fb82 	bl	800ad08 <_sbrk_r>
 800a604:	3001      	adds	r0, #1
 800a606:	d101      	bne.n	800a60c <sbrk_aligned+0x38>
 800a608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a60c:	4620      	mov	r0, r4
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	20000300 	.word	0x20000300

0800a614 <_malloc_r>:
 800a614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a618:	1ccd      	adds	r5, r1, #3
 800a61a:	f025 0503 	bic.w	r5, r5, #3
 800a61e:	3508      	adds	r5, #8
 800a620:	2d0c      	cmp	r5, #12
 800a622:	bf38      	it	cc
 800a624:	250c      	movcc	r5, #12
 800a626:	2d00      	cmp	r5, #0
 800a628:	4607      	mov	r7, r0
 800a62a:	db01      	blt.n	800a630 <_malloc_r+0x1c>
 800a62c:	42a9      	cmp	r1, r5
 800a62e:	d905      	bls.n	800a63c <_malloc_r+0x28>
 800a630:	230c      	movs	r3, #12
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	2600      	movs	r6, #0
 800a636:	4630      	mov	r0, r6
 800a638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63c:	4e2e      	ldr	r6, [pc, #184]	; (800a6f8 <_malloc_r+0xe4>)
 800a63e:	f001 f963 	bl	800b908 <__malloc_lock>
 800a642:	6833      	ldr	r3, [r6, #0]
 800a644:	461c      	mov	r4, r3
 800a646:	bb34      	cbnz	r4, 800a696 <_malloc_r+0x82>
 800a648:	4629      	mov	r1, r5
 800a64a:	4638      	mov	r0, r7
 800a64c:	f7ff ffc2 	bl	800a5d4 <sbrk_aligned>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	4604      	mov	r4, r0
 800a654:	d14d      	bne.n	800a6f2 <_malloc_r+0xde>
 800a656:	6834      	ldr	r4, [r6, #0]
 800a658:	4626      	mov	r6, r4
 800a65a:	2e00      	cmp	r6, #0
 800a65c:	d140      	bne.n	800a6e0 <_malloc_r+0xcc>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	4631      	mov	r1, r6
 800a662:	4638      	mov	r0, r7
 800a664:	eb04 0803 	add.w	r8, r4, r3
 800a668:	f000 fb4e 	bl	800ad08 <_sbrk_r>
 800a66c:	4580      	cmp	r8, r0
 800a66e:	d13a      	bne.n	800a6e6 <_malloc_r+0xd2>
 800a670:	6821      	ldr	r1, [r4, #0]
 800a672:	3503      	adds	r5, #3
 800a674:	1a6d      	subs	r5, r5, r1
 800a676:	f025 0503 	bic.w	r5, r5, #3
 800a67a:	3508      	adds	r5, #8
 800a67c:	2d0c      	cmp	r5, #12
 800a67e:	bf38      	it	cc
 800a680:	250c      	movcc	r5, #12
 800a682:	4629      	mov	r1, r5
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff ffa5 	bl	800a5d4 <sbrk_aligned>
 800a68a:	3001      	adds	r0, #1
 800a68c:	d02b      	beq.n	800a6e6 <_malloc_r+0xd2>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	442b      	add	r3, r5
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	e00e      	b.n	800a6b4 <_malloc_r+0xa0>
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	1b52      	subs	r2, r2, r5
 800a69a:	d41e      	bmi.n	800a6da <_malloc_r+0xc6>
 800a69c:	2a0b      	cmp	r2, #11
 800a69e:	d916      	bls.n	800a6ce <_malloc_r+0xba>
 800a6a0:	1961      	adds	r1, r4, r5
 800a6a2:	42a3      	cmp	r3, r4
 800a6a4:	6025      	str	r5, [r4, #0]
 800a6a6:	bf18      	it	ne
 800a6a8:	6059      	strne	r1, [r3, #4]
 800a6aa:	6863      	ldr	r3, [r4, #4]
 800a6ac:	bf08      	it	eq
 800a6ae:	6031      	streq	r1, [r6, #0]
 800a6b0:	5162      	str	r2, [r4, r5]
 800a6b2:	604b      	str	r3, [r1, #4]
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f104 060b 	add.w	r6, r4, #11
 800a6ba:	f001 f92b 	bl	800b914 <__malloc_unlock>
 800a6be:	f026 0607 	bic.w	r6, r6, #7
 800a6c2:	1d23      	adds	r3, r4, #4
 800a6c4:	1af2      	subs	r2, r6, r3
 800a6c6:	d0b6      	beq.n	800a636 <_malloc_r+0x22>
 800a6c8:	1b9b      	subs	r3, r3, r6
 800a6ca:	50a3      	str	r3, [r4, r2]
 800a6cc:	e7b3      	b.n	800a636 <_malloc_r+0x22>
 800a6ce:	6862      	ldr	r2, [r4, #4]
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	bf0c      	ite	eq
 800a6d4:	6032      	streq	r2, [r6, #0]
 800a6d6:	605a      	strne	r2, [r3, #4]
 800a6d8:	e7ec      	b.n	800a6b4 <_malloc_r+0xa0>
 800a6da:	4623      	mov	r3, r4
 800a6dc:	6864      	ldr	r4, [r4, #4]
 800a6de:	e7b2      	b.n	800a646 <_malloc_r+0x32>
 800a6e0:	4634      	mov	r4, r6
 800a6e2:	6876      	ldr	r6, [r6, #4]
 800a6e4:	e7b9      	b.n	800a65a <_malloc_r+0x46>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	603b      	str	r3, [r7, #0]
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	f001 f912 	bl	800b914 <__malloc_unlock>
 800a6f0:	e7a1      	b.n	800a636 <_malloc_r+0x22>
 800a6f2:	6025      	str	r5, [r4, #0]
 800a6f4:	e7de      	b.n	800a6b4 <_malloc_r+0xa0>
 800a6f6:	bf00      	nop
 800a6f8:	200002fc 	.word	0x200002fc

0800a6fc <__sfputc_r>:
 800a6fc:	6893      	ldr	r3, [r2, #8]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	b410      	push	{r4}
 800a704:	6093      	str	r3, [r2, #8]
 800a706:	da08      	bge.n	800a71a <__sfputc_r+0x1e>
 800a708:	6994      	ldr	r4, [r2, #24]
 800a70a:	42a3      	cmp	r3, r4
 800a70c:	db01      	blt.n	800a712 <__sfputc_r+0x16>
 800a70e:	290a      	cmp	r1, #10
 800a710:	d103      	bne.n	800a71a <__sfputc_r+0x1e>
 800a712:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a716:	f000 bde3 	b.w	800b2e0 <__swbuf_r>
 800a71a:	6813      	ldr	r3, [r2, #0]
 800a71c:	1c58      	adds	r0, r3, #1
 800a71e:	6010      	str	r0, [r2, #0]
 800a720:	7019      	strb	r1, [r3, #0]
 800a722:	4608      	mov	r0, r1
 800a724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <__sfputs_r>:
 800a72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72c:	4606      	mov	r6, r0
 800a72e:	460f      	mov	r7, r1
 800a730:	4614      	mov	r4, r2
 800a732:	18d5      	adds	r5, r2, r3
 800a734:	42ac      	cmp	r4, r5
 800a736:	d101      	bne.n	800a73c <__sfputs_r+0x12>
 800a738:	2000      	movs	r0, #0
 800a73a:	e007      	b.n	800a74c <__sfputs_r+0x22>
 800a73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a740:	463a      	mov	r2, r7
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ffda 	bl	800a6fc <__sfputc_r>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d1f3      	bne.n	800a734 <__sfputs_r+0xa>
 800a74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a750 <_vfiprintf_r>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	460d      	mov	r5, r1
 800a756:	b09d      	sub	sp, #116	; 0x74
 800a758:	4614      	mov	r4, r2
 800a75a:	4698      	mov	r8, r3
 800a75c:	4606      	mov	r6, r0
 800a75e:	b118      	cbz	r0, 800a768 <_vfiprintf_r+0x18>
 800a760:	6983      	ldr	r3, [r0, #24]
 800a762:	b90b      	cbnz	r3, 800a768 <_vfiprintf_r+0x18>
 800a764:	f000 ffb8 	bl	800b6d8 <__sinit>
 800a768:	4b89      	ldr	r3, [pc, #548]	; (800a990 <_vfiprintf_r+0x240>)
 800a76a:	429d      	cmp	r5, r3
 800a76c:	d11b      	bne.n	800a7a6 <_vfiprintf_r+0x56>
 800a76e:	6875      	ldr	r5, [r6, #4]
 800a770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a772:	07d9      	lsls	r1, r3, #31
 800a774:	d405      	bmi.n	800a782 <_vfiprintf_r+0x32>
 800a776:	89ab      	ldrh	r3, [r5, #12]
 800a778:	059a      	lsls	r2, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_vfiprintf_r+0x32>
 800a77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a77e:	f001 f849 	bl	800b814 <__retarget_lock_acquire_recursive>
 800a782:	89ab      	ldrh	r3, [r5, #12]
 800a784:	071b      	lsls	r3, r3, #28
 800a786:	d501      	bpl.n	800a78c <_vfiprintf_r+0x3c>
 800a788:	692b      	ldr	r3, [r5, #16]
 800a78a:	b9eb      	cbnz	r3, 800a7c8 <_vfiprintf_r+0x78>
 800a78c:	4629      	mov	r1, r5
 800a78e:	4630      	mov	r0, r6
 800a790:	f000 fe0a 	bl	800b3a8 <__swsetup_r>
 800a794:	b1c0      	cbz	r0, 800a7c8 <_vfiprintf_r+0x78>
 800a796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a798:	07dc      	lsls	r4, r3, #31
 800a79a:	d50e      	bpl.n	800a7ba <_vfiprintf_r+0x6a>
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a0:	b01d      	add	sp, #116	; 0x74
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a6:	4b7b      	ldr	r3, [pc, #492]	; (800a994 <_vfiprintf_r+0x244>)
 800a7a8:	429d      	cmp	r5, r3
 800a7aa:	d101      	bne.n	800a7b0 <_vfiprintf_r+0x60>
 800a7ac:	68b5      	ldr	r5, [r6, #8]
 800a7ae:	e7df      	b.n	800a770 <_vfiprintf_r+0x20>
 800a7b0:	4b79      	ldr	r3, [pc, #484]	; (800a998 <_vfiprintf_r+0x248>)
 800a7b2:	429d      	cmp	r5, r3
 800a7b4:	bf08      	it	eq
 800a7b6:	68f5      	ldreq	r5, [r6, #12]
 800a7b8:	e7da      	b.n	800a770 <_vfiprintf_r+0x20>
 800a7ba:	89ab      	ldrh	r3, [r5, #12]
 800a7bc:	0598      	lsls	r0, r3, #22
 800a7be:	d4ed      	bmi.n	800a79c <_vfiprintf_r+0x4c>
 800a7c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7c2:	f001 f828 	bl	800b816 <__retarget_lock_release_recursive>
 800a7c6:	e7e9      	b.n	800a79c <_vfiprintf_r+0x4c>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a7cc:	2320      	movs	r3, #32
 800a7ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7d6:	2330      	movs	r3, #48	; 0x30
 800a7d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a99c <_vfiprintf_r+0x24c>
 800a7dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7e0:	f04f 0901 	mov.w	r9, #1
 800a7e4:	4623      	mov	r3, r4
 800a7e6:	469a      	mov	sl, r3
 800a7e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ec:	b10a      	cbz	r2, 800a7f2 <_vfiprintf_r+0xa2>
 800a7ee:	2a25      	cmp	r2, #37	; 0x25
 800a7f0:	d1f9      	bne.n	800a7e6 <_vfiprintf_r+0x96>
 800a7f2:	ebba 0b04 	subs.w	fp, sl, r4
 800a7f6:	d00b      	beq.n	800a810 <_vfiprintf_r+0xc0>
 800a7f8:	465b      	mov	r3, fp
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7ff ff93 	bl	800a72a <__sfputs_r>
 800a804:	3001      	adds	r0, #1
 800a806:	f000 80aa 	beq.w	800a95e <_vfiprintf_r+0x20e>
 800a80a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a80c:	445a      	add	r2, fp
 800a80e:	9209      	str	r2, [sp, #36]	; 0x24
 800a810:	f89a 3000 	ldrb.w	r3, [sl]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80a2 	beq.w	800a95e <_vfiprintf_r+0x20e>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a824:	f10a 0a01 	add.w	sl, sl, #1
 800a828:	9304      	str	r3, [sp, #16]
 800a82a:	9307      	str	r3, [sp, #28]
 800a82c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a830:	931a      	str	r3, [sp, #104]	; 0x68
 800a832:	4654      	mov	r4, sl
 800a834:	2205      	movs	r2, #5
 800a836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a83a:	4858      	ldr	r0, [pc, #352]	; (800a99c <_vfiprintf_r+0x24c>)
 800a83c:	f7f5 fcd8 	bl	80001f0 <memchr>
 800a840:	9a04      	ldr	r2, [sp, #16]
 800a842:	b9d8      	cbnz	r0, 800a87c <_vfiprintf_r+0x12c>
 800a844:	06d1      	lsls	r1, r2, #27
 800a846:	bf44      	itt	mi
 800a848:	2320      	movmi	r3, #32
 800a84a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a84e:	0713      	lsls	r3, r2, #28
 800a850:	bf44      	itt	mi
 800a852:	232b      	movmi	r3, #43	; 0x2b
 800a854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a858:	f89a 3000 	ldrb.w	r3, [sl]
 800a85c:	2b2a      	cmp	r3, #42	; 0x2a
 800a85e:	d015      	beq.n	800a88c <_vfiprintf_r+0x13c>
 800a860:	9a07      	ldr	r2, [sp, #28]
 800a862:	4654      	mov	r4, sl
 800a864:	2000      	movs	r0, #0
 800a866:	f04f 0c0a 	mov.w	ip, #10
 800a86a:	4621      	mov	r1, r4
 800a86c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a870:	3b30      	subs	r3, #48	; 0x30
 800a872:	2b09      	cmp	r3, #9
 800a874:	d94e      	bls.n	800a914 <_vfiprintf_r+0x1c4>
 800a876:	b1b0      	cbz	r0, 800a8a6 <_vfiprintf_r+0x156>
 800a878:	9207      	str	r2, [sp, #28]
 800a87a:	e014      	b.n	800a8a6 <_vfiprintf_r+0x156>
 800a87c:	eba0 0308 	sub.w	r3, r0, r8
 800a880:	fa09 f303 	lsl.w	r3, r9, r3
 800a884:	4313      	orrs	r3, r2
 800a886:	9304      	str	r3, [sp, #16]
 800a888:	46a2      	mov	sl, r4
 800a88a:	e7d2      	b.n	800a832 <_vfiprintf_r+0xe2>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d19      	adds	r1, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9103      	str	r1, [sp, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfbb      	ittet	lt
 800a898:	425b      	neglt	r3, r3
 800a89a:	f042 0202 	orrlt.w	r2, r2, #2
 800a89e:	9307      	strge	r3, [sp, #28]
 800a8a0:	9307      	strlt	r3, [sp, #28]
 800a8a2:	bfb8      	it	lt
 800a8a4:	9204      	strlt	r2, [sp, #16]
 800a8a6:	7823      	ldrb	r3, [r4, #0]
 800a8a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8aa:	d10c      	bne.n	800a8c6 <_vfiprintf_r+0x176>
 800a8ac:	7863      	ldrb	r3, [r4, #1]
 800a8ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a8b0:	d135      	bne.n	800a91e <_vfiprintf_r+0x1ce>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	1d1a      	adds	r2, r3, #4
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	9203      	str	r2, [sp, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfb8      	it	lt
 800a8be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a8c2:	3402      	adds	r4, #2
 800a8c4:	9305      	str	r3, [sp, #20]
 800a8c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9ac <_vfiprintf_r+0x25c>
 800a8ca:	7821      	ldrb	r1, [r4, #0]
 800a8cc:	2203      	movs	r2, #3
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	f7f5 fc8e 	bl	80001f0 <memchr>
 800a8d4:	b140      	cbz	r0, 800a8e8 <_vfiprintf_r+0x198>
 800a8d6:	2340      	movs	r3, #64	; 0x40
 800a8d8:	eba0 000a 	sub.w	r0, r0, sl
 800a8dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	4303      	orrs	r3, r0
 800a8e4:	3401      	adds	r4, #1
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ec:	482c      	ldr	r0, [pc, #176]	; (800a9a0 <_vfiprintf_r+0x250>)
 800a8ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8f2:	2206      	movs	r2, #6
 800a8f4:	f7f5 fc7c 	bl	80001f0 <memchr>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d03f      	beq.n	800a97c <_vfiprintf_r+0x22c>
 800a8fc:	4b29      	ldr	r3, [pc, #164]	; (800a9a4 <_vfiprintf_r+0x254>)
 800a8fe:	bb1b      	cbnz	r3, 800a948 <_vfiprintf_r+0x1f8>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	3307      	adds	r3, #7
 800a904:	f023 0307 	bic.w	r3, r3, #7
 800a908:	3308      	adds	r3, #8
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90e:	443b      	add	r3, r7
 800a910:	9309      	str	r3, [sp, #36]	; 0x24
 800a912:	e767      	b.n	800a7e4 <_vfiprintf_r+0x94>
 800a914:	fb0c 3202 	mla	r2, ip, r2, r3
 800a918:	460c      	mov	r4, r1
 800a91a:	2001      	movs	r0, #1
 800a91c:	e7a5      	b.n	800a86a <_vfiprintf_r+0x11a>
 800a91e:	2300      	movs	r3, #0
 800a920:	3401      	adds	r4, #1
 800a922:	9305      	str	r3, [sp, #20]
 800a924:	4619      	mov	r1, r3
 800a926:	f04f 0c0a 	mov.w	ip, #10
 800a92a:	4620      	mov	r0, r4
 800a92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a930:	3a30      	subs	r2, #48	; 0x30
 800a932:	2a09      	cmp	r2, #9
 800a934:	d903      	bls.n	800a93e <_vfiprintf_r+0x1ee>
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0c5      	beq.n	800a8c6 <_vfiprintf_r+0x176>
 800a93a:	9105      	str	r1, [sp, #20]
 800a93c:	e7c3      	b.n	800a8c6 <_vfiprintf_r+0x176>
 800a93e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a942:	4604      	mov	r4, r0
 800a944:	2301      	movs	r3, #1
 800a946:	e7f0      	b.n	800a92a <_vfiprintf_r+0x1da>
 800a948:	ab03      	add	r3, sp, #12
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	462a      	mov	r2, r5
 800a94e:	4b16      	ldr	r3, [pc, #88]	; (800a9a8 <_vfiprintf_r+0x258>)
 800a950:	a904      	add	r1, sp, #16
 800a952:	4630      	mov	r0, r6
 800a954:	f3af 8000 	nop.w
 800a958:	4607      	mov	r7, r0
 800a95a:	1c78      	adds	r0, r7, #1
 800a95c:	d1d6      	bne.n	800a90c <_vfiprintf_r+0x1bc>
 800a95e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a960:	07d9      	lsls	r1, r3, #31
 800a962:	d405      	bmi.n	800a970 <_vfiprintf_r+0x220>
 800a964:	89ab      	ldrh	r3, [r5, #12]
 800a966:	059a      	lsls	r2, r3, #22
 800a968:	d402      	bmi.n	800a970 <_vfiprintf_r+0x220>
 800a96a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a96c:	f000 ff53 	bl	800b816 <__retarget_lock_release_recursive>
 800a970:	89ab      	ldrh	r3, [r5, #12]
 800a972:	065b      	lsls	r3, r3, #25
 800a974:	f53f af12 	bmi.w	800a79c <_vfiprintf_r+0x4c>
 800a978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a97a:	e711      	b.n	800a7a0 <_vfiprintf_r+0x50>
 800a97c:	ab03      	add	r3, sp, #12
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	462a      	mov	r2, r5
 800a982:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <_vfiprintf_r+0x258>)
 800a984:	a904      	add	r1, sp, #16
 800a986:	4630      	mov	r0, r6
 800a988:	f000 f880 	bl	800aa8c <_printf_i>
 800a98c:	e7e4      	b.n	800a958 <_vfiprintf_r+0x208>
 800a98e:	bf00      	nop
 800a990:	0800d4a8 	.word	0x0800d4a8
 800a994:	0800d4c8 	.word	0x0800d4c8
 800a998:	0800d488 	.word	0x0800d488
 800a99c:	0800cdbc 	.word	0x0800cdbc
 800a9a0:	0800cdc6 	.word	0x0800cdc6
 800a9a4:	00000000 	.word	0x00000000
 800a9a8:	0800a72b 	.word	0x0800a72b
 800a9ac:	0800cdc2 	.word	0x0800cdc2

0800a9b0 <_printf_common>:
 800a9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b4:	4616      	mov	r6, r2
 800a9b6:	4699      	mov	r9, r3
 800a9b8:	688a      	ldr	r2, [r1, #8]
 800a9ba:	690b      	ldr	r3, [r1, #16]
 800a9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	bfb8      	it	lt
 800a9c4:	4613      	movlt	r3, r2
 800a9c6:	6033      	str	r3, [r6, #0]
 800a9c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9cc:	4607      	mov	r7, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	b10a      	cbz	r2, 800a9d6 <_printf_common+0x26>
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	6033      	str	r3, [r6, #0]
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	0699      	lsls	r1, r3, #26
 800a9da:	bf42      	ittt	mi
 800a9dc:	6833      	ldrmi	r3, [r6, #0]
 800a9de:	3302      	addmi	r3, #2
 800a9e0:	6033      	strmi	r3, [r6, #0]
 800a9e2:	6825      	ldr	r5, [r4, #0]
 800a9e4:	f015 0506 	ands.w	r5, r5, #6
 800a9e8:	d106      	bne.n	800a9f8 <_printf_common+0x48>
 800a9ea:	f104 0a19 	add.w	sl, r4, #25
 800a9ee:	68e3      	ldr	r3, [r4, #12]
 800a9f0:	6832      	ldr	r2, [r6, #0]
 800a9f2:	1a9b      	subs	r3, r3, r2
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	dc26      	bgt.n	800aa46 <_printf_common+0x96>
 800a9f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9fc:	1e13      	subs	r3, r2, #0
 800a9fe:	6822      	ldr	r2, [r4, #0]
 800aa00:	bf18      	it	ne
 800aa02:	2301      	movne	r3, #1
 800aa04:	0692      	lsls	r2, r2, #26
 800aa06:	d42b      	bmi.n	800aa60 <_printf_common+0xb0>
 800aa08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4638      	mov	r0, r7
 800aa10:	47c0      	blx	r8
 800aa12:	3001      	adds	r0, #1
 800aa14:	d01e      	beq.n	800aa54 <_printf_common+0xa4>
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	68e5      	ldr	r5, [r4, #12]
 800aa1a:	6832      	ldr	r2, [r6, #0]
 800aa1c:	f003 0306 	and.w	r3, r3, #6
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	bf08      	it	eq
 800aa24:	1aad      	subeq	r5, r5, r2
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	6922      	ldr	r2, [r4, #16]
 800aa2a:	bf0c      	ite	eq
 800aa2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa30:	2500      	movne	r5, #0
 800aa32:	4293      	cmp	r3, r2
 800aa34:	bfc4      	itt	gt
 800aa36:	1a9b      	subgt	r3, r3, r2
 800aa38:	18ed      	addgt	r5, r5, r3
 800aa3a:	2600      	movs	r6, #0
 800aa3c:	341a      	adds	r4, #26
 800aa3e:	42b5      	cmp	r5, r6
 800aa40:	d11a      	bne.n	800aa78 <_printf_common+0xc8>
 800aa42:	2000      	movs	r0, #0
 800aa44:	e008      	b.n	800aa58 <_printf_common+0xa8>
 800aa46:	2301      	movs	r3, #1
 800aa48:	4652      	mov	r2, sl
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	47c0      	blx	r8
 800aa50:	3001      	adds	r0, #1
 800aa52:	d103      	bne.n	800aa5c <_printf_common+0xac>
 800aa54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5c:	3501      	adds	r5, #1
 800aa5e:	e7c6      	b.n	800a9ee <_printf_common+0x3e>
 800aa60:	18e1      	adds	r1, r4, r3
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	2030      	movs	r0, #48	; 0x30
 800aa66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa6a:	4422      	add	r2, r4
 800aa6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa74:	3302      	adds	r3, #2
 800aa76:	e7c7      	b.n	800aa08 <_printf_common+0x58>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4638      	mov	r0, r7
 800aa80:	47c0      	blx	r8
 800aa82:	3001      	adds	r0, #1
 800aa84:	d0e6      	beq.n	800aa54 <_printf_common+0xa4>
 800aa86:	3601      	adds	r6, #1
 800aa88:	e7d9      	b.n	800aa3e <_printf_common+0x8e>
	...

0800aa8c <_printf_i>:
 800aa8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	7e0f      	ldrb	r7, [r1, #24]
 800aa92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa94:	2f78      	cmp	r7, #120	; 0x78
 800aa96:	4691      	mov	r9, r2
 800aa98:	4680      	mov	r8, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	469a      	mov	sl, r3
 800aa9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaa2:	d807      	bhi.n	800aab4 <_printf_i+0x28>
 800aaa4:	2f62      	cmp	r7, #98	; 0x62
 800aaa6:	d80a      	bhi.n	800aabe <_printf_i+0x32>
 800aaa8:	2f00      	cmp	r7, #0
 800aaaa:	f000 80d8 	beq.w	800ac5e <_printf_i+0x1d2>
 800aaae:	2f58      	cmp	r7, #88	; 0x58
 800aab0:	f000 80a3 	beq.w	800abfa <_printf_i+0x16e>
 800aab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aabc:	e03a      	b.n	800ab34 <_printf_i+0xa8>
 800aabe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aac2:	2b15      	cmp	r3, #21
 800aac4:	d8f6      	bhi.n	800aab4 <_printf_i+0x28>
 800aac6:	a101      	add	r1, pc, #4	; (adr r1, 800aacc <_printf_i+0x40>)
 800aac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aacc:	0800ab25 	.word	0x0800ab25
 800aad0:	0800ab39 	.word	0x0800ab39
 800aad4:	0800aab5 	.word	0x0800aab5
 800aad8:	0800aab5 	.word	0x0800aab5
 800aadc:	0800aab5 	.word	0x0800aab5
 800aae0:	0800aab5 	.word	0x0800aab5
 800aae4:	0800ab39 	.word	0x0800ab39
 800aae8:	0800aab5 	.word	0x0800aab5
 800aaec:	0800aab5 	.word	0x0800aab5
 800aaf0:	0800aab5 	.word	0x0800aab5
 800aaf4:	0800aab5 	.word	0x0800aab5
 800aaf8:	0800ac45 	.word	0x0800ac45
 800aafc:	0800ab69 	.word	0x0800ab69
 800ab00:	0800ac27 	.word	0x0800ac27
 800ab04:	0800aab5 	.word	0x0800aab5
 800ab08:	0800aab5 	.word	0x0800aab5
 800ab0c:	0800ac67 	.word	0x0800ac67
 800ab10:	0800aab5 	.word	0x0800aab5
 800ab14:	0800ab69 	.word	0x0800ab69
 800ab18:	0800aab5 	.word	0x0800aab5
 800ab1c:	0800aab5 	.word	0x0800aab5
 800ab20:	0800ac2f 	.word	0x0800ac2f
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	602a      	str	r2, [r5, #0]
 800ab2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab34:	2301      	movs	r3, #1
 800ab36:	e0a3      	b.n	800ac80 <_printf_i+0x1f4>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	6829      	ldr	r1, [r5, #0]
 800ab3c:	0606      	lsls	r6, r0, #24
 800ab3e:	f101 0304 	add.w	r3, r1, #4
 800ab42:	d50a      	bpl.n	800ab5a <_printf_i+0xce>
 800ab44:	680e      	ldr	r6, [r1, #0]
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	da03      	bge.n	800ab54 <_printf_i+0xc8>
 800ab4c:	232d      	movs	r3, #45	; 0x2d
 800ab4e:	4276      	negs	r6, r6
 800ab50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab54:	485e      	ldr	r0, [pc, #376]	; (800acd0 <_printf_i+0x244>)
 800ab56:	230a      	movs	r3, #10
 800ab58:	e019      	b.n	800ab8e <_printf_i+0x102>
 800ab5a:	680e      	ldr	r6, [r1, #0]
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab62:	bf18      	it	ne
 800ab64:	b236      	sxthne	r6, r6
 800ab66:	e7ef      	b.n	800ab48 <_printf_i+0xbc>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	6820      	ldr	r0, [r4, #0]
 800ab6c:	1d19      	adds	r1, r3, #4
 800ab6e:	6029      	str	r1, [r5, #0]
 800ab70:	0601      	lsls	r1, r0, #24
 800ab72:	d501      	bpl.n	800ab78 <_printf_i+0xec>
 800ab74:	681e      	ldr	r6, [r3, #0]
 800ab76:	e002      	b.n	800ab7e <_printf_i+0xf2>
 800ab78:	0646      	lsls	r6, r0, #25
 800ab7a:	d5fb      	bpl.n	800ab74 <_printf_i+0xe8>
 800ab7c:	881e      	ldrh	r6, [r3, #0]
 800ab7e:	4854      	ldr	r0, [pc, #336]	; (800acd0 <_printf_i+0x244>)
 800ab80:	2f6f      	cmp	r7, #111	; 0x6f
 800ab82:	bf0c      	ite	eq
 800ab84:	2308      	moveq	r3, #8
 800ab86:	230a      	movne	r3, #10
 800ab88:	2100      	movs	r1, #0
 800ab8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab8e:	6865      	ldr	r5, [r4, #4]
 800ab90:	60a5      	str	r5, [r4, #8]
 800ab92:	2d00      	cmp	r5, #0
 800ab94:	bfa2      	ittt	ge
 800ab96:	6821      	ldrge	r1, [r4, #0]
 800ab98:	f021 0104 	bicge.w	r1, r1, #4
 800ab9c:	6021      	strge	r1, [r4, #0]
 800ab9e:	b90e      	cbnz	r6, 800aba4 <_printf_i+0x118>
 800aba0:	2d00      	cmp	r5, #0
 800aba2:	d04d      	beq.n	800ac40 <_printf_i+0x1b4>
 800aba4:	4615      	mov	r5, r2
 800aba6:	fbb6 f1f3 	udiv	r1, r6, r3
 800abaa:	fb03 6711 	mls	r7, r3, r1, r6
 800abae:	5dc7      	ldrb	r7, [r0, r7]
 800abb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abb4:	4637      	mov	r7, r6
 800abb6:	42bb      	cmp	r3, r7
 800abb8:	460e      	mov	r6, r1
 800abba:	d9f4      	bls.n	800aba6 <_printf_i+0x11a>
 800abbc:	2b08      	cmp	r3, #8
 800abbe:	d10b      	bne.n	800abd8 <_printf_i+0x14c>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	07de      	lsls	r6, r3, #31
 800abc4:	d508      	bpl.n	800abd8 <_printf_i+0x14c>
 800abc6:	6923      	ldr	r3, [r4, #16]
 800abc8:	6861      	ldr	r1, [r4, #4]
 800abca:	4299      	cmp	r1, r3
 800abcc:	bfde      	ittt	le
 800abce:	2330      	movle	r3, #48	; 0x30
 800abd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800abd8:	1b52      	subs	r2, r2, r5
 800abda:	6122      	str	r2, [r4, #16]
 800abdc:	f8cd a000 	str.w	sl, [sp]
 800abe0:	464b      	mov	r3, r9
 800abe2:	aa03      	add	r2, sp, #12
 800abe4:	4621      	mov	r1, r4
 800abe6:	4640      	mov	r0, r8
 800abe8:	f7ff fee2 	bl	800a9b0 <_printf_common>
 800abec:	3001      	adds	r0, #1
 800abee:	d14c      	bne.n	800ac8a <_printf_i+0x1fe>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf4:	b004      	add	sp, #16
 800abf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfa:	4835      	ldr	r0, [pc, #212]	; (800acd0 <_printf_i+0x244>)
 800abfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac00:	6829      	ldr	r1, [r5, #0]
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac08:	6029      	str	r1, [r5, #0]
 800ac0a:	061d      	lsls	r5, r3, #24
 800ac0c:	d514      	bpl.n	800ac38 <_printf_i+0x1ac>
 800ac0e:	07df      	lsls	r7, r3, #31
 800ac10:	bf44      	itt	mi
 800ac12:	f043 0320 	orrmi.w	r3, r3, #32
 800ac16:	6023      	strmi	r3, [r4, #0]
 800ac18:	b91e      	cbnz	r6, 800ac22 <_printf_i+0x196>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	f023 0320 	bic.w	r3, r3, #32
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	2310      	movs	r3, #16
 800ac24:	e7b0      	b.n	800ab88 <_printf_i+0xfc>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	f043 0320 	orr.w	r3, r3, #32
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	2378      	movs	r3, #120	; 0x78
 800ac30:	4828      	ldr	r0, [pc, #160]	; (800acd4 <_printf_i+0x248>)
 800ac32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac36:	e7e3      	b.n	800ac00 <_printf_i+0x174>
 800ac38:	0659      	lsls	r1, r3, #25
 800ac3a:	bf48      	it	mi
 800ac3c:	b2b6      	uxthmi	r6, r6
 800ac3e:	e7e6      	b.n	800ac0e <_printf_i+0x182>
 800ac40:	4615      	mov	r5, r2
 800ac42:	e7bb      	b.n	800abbc <_printf_i+0x130>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	6826      	ldr	r6, [r4, #0]
 800ac48:	6961      	ldr	r1, [r4, #20]
 800ac4a:	1d18      	adds	r0, r3, #4
 800ac4c:	6028      	str	r0, [r5, #0]
 800ac4e:	0635      	lsls	r5, r6, #24
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	d501      	bpl.n	800ac58 <_printf_i+0x1cc>
 800ac54:	6019      	str	r1, [r3, #0]
 800ac56:	e002      	b.n	800ac5e <_printf_i+0x1d2>
 800ac58:	0670      	lsls	r0, r6, #25
 800ac5a:	d5fb      	bpl.n	800ac54 <_printf_i+0x1c8>
 800ac5c:	8019      	strh	r1, [r3, #0]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	4615      	mov	r5, r2
 800ac64:	e7ba      	b.n	800abdc <_printf_i+0x150>
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	1d1a      	adds	r2, r3, #4
 800ac6a:	602a      	str	r2, [r5, #0]
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	6862      	ldr	r2, [r4, #4]
 800ac70:	2100      	movs	r1, #0
 800ac72:	4628      	mov	r0, r5
 800ac74:	f7f5 fabc 	bl	80001f0 <memchr>
 800ac78:	b108      	cbz	r0, 800ac7e <_printf_i+0x1f2>
 800ac7a:	1b40      	subs	r0, r0, r5
 800ac7c:	6060      	str	r0, [r4, #4]
 800ac7e:	6863      	ldr	r3, [r4, #4]
 800ac80:	6123      	str	r3, [r4, #16]
 800ac82:	2300      	movs	r3, #0
 800ac84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac88:	e7a8      	b.n	800abdc <_printf_i+0x150>
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	462a      	mov	r2, r5
 800ac8e:	4649      	mov	r1, r9
 800ac90:	4640      	mov	r0, r8
 800ac92:	47d0      	blx	sl
 800ac94:	3001      	adds	r0, #1
 800ac96:	d0ab      	beq.n	800abf0 <_printf_i+0x164>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	079b      	lsls	r3, r3, #30
 800ac9c:	d413      	bmi.n	800acc6 <_printf_i+0x23a>
 800ac9e:	68e0      	ldr	r0, [r4, #12]
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	4298      	cmp	r0, r3
 800aca4:	bfb8      	it	lt
 800aca6:	4618      	movlt	r0, r3
 800aca8:	e7a4      	b.n	800abf4 <_printf_i+0x168>
 800acaa:	2301      	movs	r3, #1
 800acac:	4632      	mov	r2, r6
 800acae:	4649      	mov	r1, r9
 800acb0:	4640      	mov	r0, r8
 800acb2:	47d0      	blx	sl
 800acb4:	3001      	adds	r0, #1
 800acb6:	d09b      	beq.n	800abf0 <_printf_i+0x164>
 800acb8:	3501      	adds	r5, #1
 800acba:	68e3      	ldr	r3, [r4, #12]
 800acbc:	9903      	ldr	r1, [sp, #12]
 800acbe:	1a5b      	subs	r3, r3, r1
 800acc0:	42ab      	cmp	r3, r5
 800acc2:	dcf2      	bgt.n	800acaa <_printf_i+0x21e>
 800acc4:	e7eb      	b.n	800ac9e <_printf_i+0x212>
 800acc6:	2500      	movs	r5, #0
 800acc8:	f104 0619 	add.w	r6, r4, #25
 800accc:	e7f5      	b.n	800acba <_printf_i+0x22e>
 800acce:	bf00      	nop
 800acd0:	0800cdcd 	.word	0x0800cdcd
 800acd4:	0800cdde 	.word	0x0800cdde

0800acd8 <iprintf>:
 800acd8:	b40f      	push	{r0, r1, r2, r3}
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <iprintf+0x2c>)
 800acdc:	b513      	push	{r0, r1, r4, lr}
 800acde:	681c      	ldr	r4, [r3, #0]
 800ace0:	b124      	cbz	r4, 800acec <iprintf+0x14>
 800ace2:	69a3      	ldr	r3, [r4, #24]
 800ace4:	b913      	cbnz	r3, 800acec <iprintf+0x14>
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fcf6 	bl	800b6d8 <__sinit>
 800acec:	ab05      	add	r3, sp, #20
 800acee:	9a04      	ldr	r2, [sp, #16]
 800acf0:	68a1      	ldr	r1, [r4, #8]
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	4620      	mov	r0, r4
 800acf6:	f7ff fd2b 	bl	800a750 <_vfiprintf_r>
 800acfa:	b002      	add	sp, #8
 800acfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad00:	b004      	add	sp, #16
 800ad02:	4770      	bx	lr
 800ad04:	20000018 	.word	0x20000018

0800ad08 <_sbrk_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d06      	ldr	r5, [pc, #24]	; (800ad24 <_sbrk_r+0x1c>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	f7f5 fe32 	bl	800097c <_sbrk>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_sbrk_r+0x1a>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_sbrk_r+0x1a>
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	20000308 	.word	0x20000308

0800ad28 <_raise_r>:
 800ad28:	291f      	cmp	r1, #31
 800ad2a:	b538      	push	{r3, r4, r5, lr}
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	460d      	mov	r5, r1
 800ad30:	d904      	bls.n	800ad3c <_raise_r+0x14>
 800ad32:	2316      	movs	r3, #22
 800ad34:	6003      	str	r3, [r0, #0]
 800ad36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad3e:	b112      	cbz	r2, 800ad46 <_raise_r+0x1e>
 800ad40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad44:	b94b      	cbnz	r3, 800ad5a <_raise_r+0x32>
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 f830 	bl	800adac <_getpid_r>
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	4601      	mov	r1, r0
 800ad50:	4620      	mov	r0, r4
 800ad52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad56:	f000 b817 	b.w	800ad88 <_kill_r>
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d00a      	beq.n	800ad74 <_raise_r+0x4c>
 800ad5e:	1c59      	adds	r1, r3, #1
 800ad60:	d103      	bne.n	800ad6a <_raise_r+0x42>
 800ad62:	2316      	movs	r3, #22
 800ad64:	6003      	str	r3, [r0, #0]
 800ad66:	2001      	movs	r0, #1
 800ad68:	e7e7      	b.n	800ad3a <_raise_r+0x12>
 800ad6a:	2400      	movs	r4, #0
 800ad6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad70:	4628      	mov	r0, r5
 800ad72:	4798      	blx	r3
 800ad74:	2000      	movs	r0, #0
 800ad76:	e7e0      	b.n	800ad3a <_raise_r+0x12>

0800ad78 <raise>:
 800ad78:	4b02      	ldr	r3, [pc, #8]	; (800ad84 <raise+0xc>)
 800ad7a:	4601      	mov	r1, r0
 800ad7c:	6818      	ldr	r0, [r3, #0]
 800ad7e:	f7ff bfd3 	b.w	800ad28 <_raise_r>
 800ad82:	bf00      	nop
 800ad84:	20000018 	.word	0x20000018

0800ad88 <_kill_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d07      	ldr	r5, [pc, #28]	; (800ada8 <_kill_r+0x20>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	4611      	mov	r1, r2
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	f7f5 fd6a 	bl	800086e <_kill>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d102      	bne.n	800ada4 <_kill_r+0x1c>
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	b103      	cbz	r3, 800ada4 <_kill_r+0x1c>
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	bd38      	pop	{r3, r4, r5, pc}
 800ada6:	bf00      	nop
 800ada8:	20000308 	.word	0x20000308

0800adac <_getpid_r>:
 800adac:	f7f5 bd57 	b.w	800085e <_getpid>

0800adb0 <sniprintf>:
 800adb0:	b40c      	push	{r2, r3}
 800adb2:	b530      	push	{r4, r5, lr}
 800adb4:	4b17      	ldr	r3, [pc, #92]	; (800ae14 <sniprintf+0x64>)
 800adb6:	1e0c      	subs	r4, r1, #0
 800adb8:	681d      	ldr	r5, [r3, #0]
 800adba:	b09d      	sub	sp, #116	; 0x74
 800adbc:	da08      	bge.n	800add0 <sniprintf+0x20>
 800adbe:	238b      	movs	r3, #139	; 0x8b
 800adc0:	602b      	str	r3, [r5, #0]
 800adc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adc6:	b01d      	add	sp, #116	; 0x74
 800adc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adcc:	b002      	add	sp, #8
 800adce:	4770      	bx	lr
 800add0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800add4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800add8:	bf14      	ite	ne
 800adda:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800adde:	4623      	moveq	r3, r4
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	9307      	str	r3, [sp, #28]
 800ade4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ade8:	9002      	str	r0, [sp, #8]
 800adea:	9006      	str	r0, [sp, #24]
 800adec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adf2:	ab21      	add	r3, sp, #132	; 0x84
 800adf4:	a902      	add	r1, sp, #8
 800adf6:	4628      	mov	r0, r5
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	f000 fe1b 	bl	800ba34 <_svfiprintf_r>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	bfbc      	itt	lt
 800ae02:	238b      	movlt	r3, #139	; 0x8b
 800ae04:	602b      	strlt	r3, [r5, #0]
 800ae06:	2c00      	cmp	r4, #0
 800ae08:	d0dd      	beq.n	800adc6 <sniprintf+0x16>
 800ae0a:	9b02      	ldr	r3, [sp, #8]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	e7d9      	b.n	800adc6 <sniprintf+0x16>
 800ae12:	bf00      	nop
 800ae14:	20000018 	.word	0x20000018

0800ae18 <__sread>:
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae20:	f000 ff08 	bl	800bc34 <_read_r>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	bfab      	itete	ge
 800ae28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae2c:	181b      	addge	r3, r3, r0
 800ae2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae32:	bfac      	ite	ge
 800ae34:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae36:	81a3      	strhlt	r3, [r4, #12]
 800ae38:	bd10      	pop	{r4, pc}

0800ae3a <__swrite>:
 800ae3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3e:	461f      	mov	r7, r3
 800ae40:	898b      	ldrh	r3, [r1, #12]
 800ae42:	05db      	lsls	r3, r3, #23
 800ae44:	4605      	mov	r5, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	4616      	mov	r6, r2
 800ae4a:	d505      	bpl.n	800ae58 <__swrite+0x1e>
 800ae4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae50:	2302      	movs	r3, #2
 800ae52:	2200      	movs	r2, #0
 800ae54:	f000 fce0 	bl	800b818 <_lseek_r>
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	4632      	mov	r2, r6
 800ae66:	463b      	mov	r3, r7
 800ae68:	4628      	mov	r0, r5
 800ae6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6e:	f000 ba89 	b.w	800b384 <_write_r>

0800ae72 <__sseek>:
 800ae72:	b510      	push	{r4, lr}
 800ae74:	460c      	mov	r4, r1
 800ae76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae7a:	f000 fccd 	bl	800b818 <_lseek_r>
 800ae7e:	1c43      	adds	r3, r0, #1
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	bf15      	itete	ne
 800ae84:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae8e:	81a3      	strheq	r3, [r4, #12]
 800ae90:	bf18      	it	ne
 800ae92:	81a3      	strhne	r3, [r4, #12]
 800ae94:	bd10      	pop	{r4, pc}

0800ae96 <__sclose>:
 800ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9a:	f000 baf3 	b.w	800b484 <_close_r>

0800ae9e <strchr>:
 800ae9e:	b2c9      	uxtb	r1, r1
 800aea0:	4603      	mov	r3, r0
 800aea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea6:	b11a      	cbz	r2, 800aeb0 <strchr+0x12>
 800aea8:	428a      	cmp	r2, r1
 800aeaa:	d1f9      	bne.n	800aea0 <strchr+0x2>
 800aeac:	4618      	mov	r0, r3
 800aeae:	4770      	bx	lr
 800aeb0:	2900      	cmp	r1, #0
 800aeb2:	bf18      	it	ne
 800aeb4:	2300      	movne	r3, #0
 800aeb6:	e7f9      	b.n	800aeac <strchr+0xe>

0800aeb8 <strcspn>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	4603      	mov	r3, r0
 800aebc:	461e      	mov	r6, r3
 800aebe:	f813 4b01 	ldrb.w	r4, [r3], #1
 800aec2:	b144      	cbz	r4, 800aed6 <strcspn+0x1e>
 800aec4:	1e4a      	subs	r2, r1, #1
 800aec6:	e001      	b.n	800aecc <strcspn+0x14>
 800aec8:	42a5      	cmp	r5, r4
 800aeca:	d004      	beq.n	800aed6 <strcspn+0x1e>
 800aecc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	d1f9      	bne.n	800aec8 <strcspn+0x10>
 800aed4:	e7f2      	b.n	800aebc <strcspn+0x4>
 800aed6:	1a30      	subs	r0, r6, r0
 800aed8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aedc <_strerror_r>:
 800aedc:	b510      	push	{r4, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	4611      	mov	r1, r2
 800aee4:	288e      	cmp	r0, #142	; 0x8e
 800aee6:	f200 8130 	bhi.w	800b14a <_strerror_r+0x26e>
 800aeea:	e8df f010 	tbh	[pc, r0, lsl #1]
 800aeee:	0139      	.short	0x0139
 800aef0:	0092008f 	.word	0x0092008f
 800aef4:	00960094 	.word	0x00960094
 800aef8:	009a0098 	.word	0x009a0098
 800aefc:	009e009c 	.word	0x009e009c
 800af00:	00a400a2 	.word	0x00a400a2
 800af04:	00aa00a8 	.word	0x00aa00a8
 800af08:	00ae00ac 	.word	0x00ae00ac
 800af0c:	00b0012e 	.word	0x00b0012e
 800af10:	00b400b2 	.word	0x00b400b2
 800af14:	00b800b6 	.word	0x00b800b6
 800af18:	00c000be 	.word	0x00c000be
 800af1c:	00c800c6 	.word	0x00c800c6
 800af20:	00cc00ca 	.word	0x00cc00ca
 800af24:	00d200ce 	.word	0x00d200ce
 800af28:	00d800d6 	.word	0x00d800d6
 800af2c:	00dc00da 	.word	0x00dc00da
 800af30:	00e000de 	.word	0x00e000de
 800af34:	00e400e2 	.word	0x00e400e2
 800af38:	012e012e 	.word	0x012e012e
 800af3c:	012e012e 	.word	0x012e012e
 800af40:	012e012e 	.word	0x012e012e
 800af44:	012e012e 	.word	0x012e012e
 800af48:	00ec00e8 	.word	0x00ec00e8
 800af4c:	012e012e 	.word	0x012e012e
 800af50:	012e012e 	.word	0x012e012e
 800af54:	012e012e 	.word	0x012e012e
 800af58:	012e012e 	.word	0x012e012e
 800af5c:	012e012e 	.word	0x012e012e
 800af60:	012e012e 	.word	0x012e012e
 800af64:	00ee012e 	.word	0x00ee012e
 800af68:	00f00108 	.word	0x00f00108
 800af6c:	012e00f2 	.word	0x012e00f2
 800af70:	012e012e 	.word	0x012e012e
 800af74:	012e00f4 	.word	0x012e00f4
 800af78:	012e012e 	.word	0x012e012e
 800af7c:	012e00f6 	.word	0x012e00f6
 800af80:	00fa012e 	.word	0x00fa012e
 800af84:	012e012e 	.word	0x012e012e
 800af88:	012e00fc 	.word	0x012e00fc
 800af8c:	012e012e 	.word	0x012e012e
 800af90:	012e012e 	.word	0x012e012e
 800af94:	012e012e 	.word	0x012e012e
 800af98:	012e012e 	.word	0x012e012e
 800af9c:	00fe012e 	.word	0x00fe012e
 800afa0:	0100012e 	.word	0x0100012e
 800afa4:	01040102 	.word	0x01040102
 800afa8:	012e012e 	.word	0x012e012e
 800afac:	012e0126 	.word	0x012e0126
 800afb0:	012e012e 	.word	0x012e012e
 800afb4:	012e012e 	.word	0x012e012e
 800afb8:	012e012e 	.word	0x012e012e
 800afbc:	0114012e 	.word	0x0114012e
 800afc0:	010a0106 	.word	0x010a0106
 800afc4:	010e010c 	.word	0x010e010c
 800afc8:	012e0110 	.word	0x012e0110
 800afcc:	01160112 	.word	0x01160112
 800afd0:	00ea011a 	.word	0x00ea011a
 800afd4:	012c00c2 	.word	0x012c00c2
 800afd8:	00d000ba 	.word	0x00d000ba
 800afdc:	00a000bc 	.word	0x00a000bc
 800afe0:	012a00a6 	.word	0x012a00a6
 800afe4:	012e00f8 	.word	0x012e00f8
 800afe8:	00c40118 	.word	0x00c40118
 800afec:	011c011e 	.word	0x011c011e
 800aff0:	012e012e 	.word	0x012e012e
 800aff4:	012e012e 	.word	0x012e012e
 800aff8:	00d4012e 	.word	0x00d4012e
 800affc:	012e012e 	.word	0x012e012e
 800b000:	00e6012e 	.word	0x00e6012e
 800b004:	01200128 	.word	0x01200128
 800b008:	01240122 	.word	0x01240122
 800b00c:	4b55      	ldr	r3, [pc, #340]	; (800b164 <_strerror_r+0x288>)
 800b00e:	4618      	mov	r0, r3
 800b010:	bd10      	pop	{r4, pc}
 800b012:	4b55      	ldr	r3, [pc, #340]	; (800b168 <_strerror_r+0x28c>)
 800b014:	e7fb      	b.n	800b00e <_strerror_r+0x132>
 800b016:	4b55      	ldr	r3, [pc, #340]	; (800b16c <_strerror_r+0x290>)
 800b018:	e7f9      	b.n	800b00e <_strerror_r+0x132>
 800b01a:	4b55      	ldr	r3, [pc, #340]	; (800b170 <_strerror_r+0x294>)
 800b01c:	e7f7      	b.n	800b00e <_strerror_r+0x132>
 800b01e:	4b55      	ldr	r3, [pc, #340]	; (800b174 <_strerror_r+0x298>)
 800b020:	e7f5      	b.n	800b00e <_strerror_r+0x132>
 800b022:	4b55      	ldr	r3, [pc, #340]	; (800b178 <_strerror_r+0x29c>)
 800b024:	e7f3      	b.n	800b00e <_strerror_r+0x132>
 800b026:	4b55      	ldr	r3, [pc, #340]	; (800b17c <_strerror_r+0x2a0>)
 800b028:	e7f1      	b.n	800b00e <_strerror_r+0x132>
 800b02a:	4b55      	ldr	r3, [pc, #340]	; (800b180 <_strerror_r+0x2a4>)
 800b02c:	e7ef      	b.n	800b00e <_strerror_r+0x132>
 800b02e:	4b55      	ldr	r3, [pc, #340]	; (800b184 <_strerror_r+0x2a8>)
 800b030:	e7ed      	b.n	800b00e <_strerror_r+0x132>
 800b032:	4b55      	ldr	r3, [pc, #340]	; (800b188 <_strerror_r+0x2ac>)
 800b034:	e7eb      	b.n	800b00e <_strerror_r+0x132>
 800b036:	4b55      	ldr	r3, [pc, #340]	; (800b18c <_strerror_r+0x2b0>)
 800b038:	e7e9      	b.n	800b00e <_strerror_r+0x132>
 800b03a:	4b55      	ldr	r3, [pc, #340]	; (800b190 <_strerror_r+0x2b4>)
 800b03c:	e7e7      	b.n	800b00e <_strerror_r+0x132>
 800b03e:	4b55      	ldr	r3, [pc, #340]	; (800b194 <_strerror_r+0x2b8>)
 800b040:	e7e5      	b.n	800b00e <_strerror_r+0x132>
 800b042:	4b55      	ldr	r3, [pc, #340]	; (800b198 <_strerror_r+0x2bc>)
 800b044:	e7e3      	b.n	800b00e <_strerror_r+0x132>
 800b046:	4b55      	ldr	r3, [pc, #340]	; (800b19c <_strerror_r+0x2c0>)
 800b048:	e7e1      	b.n	800b00e <_strerror_r+0x132>
 800b04a:	4b55      	ldr	r3, [pc, #340]	; (800b1a0 <_strerror_r+0x2c4>)
 800b04c:	e7df      	b.n	800b00e <_strerror_r+0x132>
 800b04e:	4b55      	ldr	r3, [pc, #340]	; (800b1a4 <_strerror_r+0x2c8>)
 800b050:	e7dd      	b.n	800b00e <_strerror_r+0x132>
 800b052:	4b55      	ldr	r3, [pc, #340]	; (800b1a8 <_strerror_r+0x2cc>)
 800b054:	e7db      	b.n	800b00e <_strerror_r+0x132>
 800b056:	4b55      	ldr	r3, [pc, #340]	; (800b1ac <_strerror_r+0x2d0>)
 800b058:	e7d9      	b.n	800b00e <_strerror_r+0x132>
 800b05a:	4b55      	ldr	r3, [pc, #340]	; (800b1b0 <_strerror_r+0x2d4>)
 800b05c:	e7d7      	b.n	800b00e <_strerror_r+0x132>
 800b05e:	4b55      	ldr	r3, [pc, #340]	; (800b1b4 <_strerror_r+0x2d8>)
 800b060:	e7d5      	b.n	800b00e <_strerror_r+0x132>
 800b062:	4b55      	ldr	r3, [pc, #340]	; (800b1b8 <_strerror_r+0x2dc>)
 800b064:	e7d3      	b.n	800b00e <_strerror_r+0x132>
 800b066:	4b55      	ldr	r3, [pc, #340]	; (800b1bc <_strerror_r+0x2e0>)
 800b068:	e7d1      	b.n	800b00e <_strerror_r+0x132>
 800b06a:	4b55      	ldr	r3, [pc, #340]	; (800b1c0 <_strerror_r+0x2e4>)
 800b06c:	e7cf      	b.n	800b00e <_strerror_r+0x132>
 800b06e:	4b55      	ldr	r3, [pc, #340]	; (800b1c4 <_strerror_r+0x2e8>)
 800b070:	e7cd      	b.n	800b00e <_strerror_r+0x132>
 800b072:	4b55      	ldr	r3, [pc, #340]	; (800b1c8 <_strerror_r+0x2ec>)
 800b074:	e7cb      	b.n	800b00e <_strerror_r+0x132>
 800b076:	4b55      	ldr	r3, [pc, #340]	; (800b1cc <_strerror_r+0x2f0>)
 800b078:	e7c9      	b.n	800b00e <_strerror_r+0x132>
 800b07a:	4b55      	ldr	r3, [pc, #340]	; (800b1d0 <_strerror_r+0x2f4>)
 800b07c:	e7c7      	b.n	800b00e <_strerror_r+0x132>
 800b07e:	4b55      	ldr	r3, [pc, #340]	; (800b1d4 <_strerror_r+0x2f8>)
 800b080:	e7c5      	b.n	800b00e <_strerror_r+0x132>
 800b082:	4b55      	ldr	r3, [pc, #340]	; (800b1d8 <_strerror_r+0x2fc>)
 800b084:	e7c3      	b.n	800b00e <_strerror_r+0x132>
 800b086:	4b55      	ldr	r3, [pc, #340]	; (800b1dc <_strerror_r+0x300>)
 800b088:	e7c1      	b.n	800b00e <_strerror_r+0x132>
 800b08a:	4b55      	ldr	r3, [pc, #340]	; (800b1e0 <_strerror_r+0x304>)
 800b08c:	e7bf      	b.n	800b00e <_strerror_r+0x132>
 800b08e:	4b55      	ldr	r3, [pc, #340]	; (800b1e4 <_strerror_r+0x308>)
 800b090:	e7bd      	b.n	800b00e <_strerror_r+0x132>
 800b092:	4b55      	ldr	r3, [pc, #340]	; (800b1e8 <_strerror_r+0x30c>)
 800b094:	e7bb      	b.n	800b00e <_strerror_r+0x132>
 800b096:	4b55      	ldr	r3, [pc, #340]	; (800b1ec <_strerror_r+0x310>)
 800b098:	e7b9      	b.n	800b00e <_strerror_r+0x132>
 800b09a:	4b55      	ldr	r3, [pc, #340]	; (800b1f0 <_strerror_r+0x314>)
 800b09c:	e7b7      	b.n	800b00e <_strerror_r+0x132>
 800b09e:	4b55      	ldr	r3, [pc, #340]	; (800b1f4 <_strerror_r+0x318>)
 800b0a0:	e7b5      	b.n	800b00e <_strerror_r+0x132>
 800b0a2:	4b55      	ldr	r3, [pc, #340]	; (800b1f8 <_strerror_r+0x31c>)
 800b0a4:	e7b3      	b.n	800b00e <_strerror_r+0x132>
 800b0a6:	4b55      	ldr	r3, [pc, #340]	; (800b1fc <_strerror_r+0x320>)
 800b0a8:	e7b1      	b.n	800b00e <_strerror_r+0x132>
 800b0aa:	4b55      	ldr	r3, [pc, #340]	; (800b200 <_strerror_r+0x324>)
 800b0ac:	e7af      	b.n	800b00e <_strerror_r+0x132>
 800b0ae:	4b55      	ldr	r3, [pc, #340]	; (800b204 <_strerror_r+0x328>)
 800b0b0:	e7ad      	b.n	800b00e <_strerror_r+0x132>
 800b0b2:	4b55      	ldr	r3, [pc, #340]	; (800b208 <_strerror_r+0x32c>)
 800b0b4:	e7ab      	b.n	800b00e <_strerror_r+0x132>
 800b0b6:	4b55      	ldr	r3, [pc, #340]	; (800b20c <_strerror_r+0x330>)
 800b0b8:	e7a9      	b.n	800b00e <_strerror_r+0x132>
 800b0ba:	4b55      	ldr	r3, [pc, #340]	; (800b210 <_strerror_r+0x334>)
 800b0bc:	e7a7      	b.n	800b00e <_strerror_r+0x132>
 800b0be:	4b55      	ldr	r3, [pc, #340]	; (800b214 <_strerror_r+0x338>)
 800b0c0:	e7a5      	b.n	800b00e <_strerror_r+0x132>
 800b0c2:	4b55      	ldr	r3, [pc, #340]	; (800b218 <_strerror_r+0x33c>)
 800b0c4:	e7a3      	b.n	800b00e <_strerror_r+0x132>
 800b0c6:	4b55      	ldr	r3, [pc, #340]	; (800b21c <_strerror_r+0x340>)
 800b0c8:	e7a1      	b.n	800b00e <_strerror_r+0x132>
 800b0ca:	4b55      	ldr	r3, [pc, #340]	; (800b220 <_strerror_r+0x344>)
 800b0cc:	e79f      	b.n	800b00e <_strerror_r+0x132>
 800b0ce:	4b55      	ldr	r3, [pc, #340]	; (800b224 <_strerror_r+0x348>)
 800b0d0:	e79d      	b.n	800b00e <_strerror_r+0x132>
 800b0d2:	4b55      	ldr	r3, [pc, #340]	; (800b228 <_strerror_r+0x34c>)
 800b0d4:	e79b      	b.n	800b00e <_strerror_r+0x132>
 800b0d6:	4b55      	ldr	r3, [pc, #340]	; (800b22c <_strerror_r+0x350>)
 800b0d8:	e799      	b.n	800b00e <_strerror_r+0x132>
 800b0da:	4b55      	ldr	r3, [pc, #340]	; (800b230 <_strerror_r+0x354>)
 800b0dc:	e797      	b.n	800b00e <_strerror_r+0x132>
 800b0de:	4b55      	ldr	r3, [pc, #340]	; (800b234 <_strerror_r+0x358>)
 800b0e0:	e795      	b.n	800b00e <_strerror_r+0x132>
 800b0e2:	4b55      	ldr	r3, [pc, #340]	; (800b238 <_strerror_r+0x35c>)
 800b0e4:	e793      	b.n	800b00e <_strerror_r+0x132>
 800b0e6:	4b55      	ldr	r3, [pc, #340]	; (800b23c <_strerror_r+0x360>)
 800b0e8:	e791      	b.n	800b00e <_strerror_r+0x132>
 800b0ea:	4b55      	ldr	r3, [pc, #340]	; (800b240 <_strerror_r+0x364>)
 800b0ec:	e78f      	b.n	800b00e <_strerror_r+0x132>
 800b0ee:	4b55      	ldr	r3, [pc, #340]	; (800b244 <_strerror_r+0x368>)
 800b0f0:	e78d      	b.n	800b00e <_strerror_r+0x132>
 800b0f2:	4b55      	ldr	r3, [pc, #340]	; (800b248 <_strerror_r+0x36c>)
 800b0f4:	e78b      	b.n	800b00e <_strerror_r+0x132>
 800b0f6:	4b55      	ldr	r3, [pc, #340]	; (800b24c <_strerror_r+0x370>)
 800b0f8:	e789      	b.n	800b00e <_strerror_r+0x132>
 800b0fa:	4b55      	ldr	r3, [pc, #340]	; (800b250 <_strerror_r+0x374>)
 800b0fc:	e787      	b.n	800b00e <_strerror_r+0x132>
 800b0fe:	4b55      	ldr	r3, [pc, #340]	; (800b254 <_strerror_r+0x378>)
 800b100:	e785      	b.n	800b00e <_strerror_r+0x132>
 800b102:	4b55      	ldr	r3, [pc, #340]	; (800b258 <_strerror_r+0x37c>)
 800b104:	e783      	b.n	800b00e <_strerror_r+0x132>
 800b106:	4b55      	ldr	r3, [pc, #340]	; (800b25c <_strerror_r+0x380>)
 800b108:	e781      	b.n	800b00e <_strerror_r+0x132>
 800b10a:	4b55      	ldr	r3, [pc, #340]	; (800b260 <_strerror_r+0x384>)
 800b10c:	e77f      	b.n	800b00e <_strerror_r+0x132>
 800b10e:	4b55      	ldr	r3, [pc, #340]	; (800b264 <_strerror_r+0x388>)
 800b110:	e77d      	b.n	800b00e <_strerror_r+0x132>
 800b112:	4b55      	ldr	r3, [pc, #340]	; (800b268 <_strerror_r+0x38c>)
 800b114:	e77b      	b.n	800b00e <_strerror_r+0x132>
 800b116:	4b55      	ldr	r3, [pc, #340]	; (800b26c <_strerror_r+0x390>)
 800b118:	e779      	b.n	800b00e <_strerror_r+0x132>
 800b11a:	4b55      	ldr	r3, [pc, #340]	; (800b270 <_strerror_r+0x394>)
 800b11c:	e777      	b.n	800b00e <_strerror_r+0x132>
 800b11e:	4b55      	ldr	r3, [pc, #340]	; (800b274 <_strerror_r+0x398>)
 800b120:	e775      	b.n	800b00e <_strerror_r+0x132>
 800b122:	4b55      	ldr	r3, [pc, #340]	; (800b278 <_strerror_r+0x39c>)
 800b124:	e773      	b.n	800b00e <_strerror_r+0x132>
 800b126:	4b55      	ldr	r3, [pc, #340]	; (800b27c <_strerror_r+0x3a0>)
 800b128:	e771      	b.n	800b00e <_strerror_r+0x132>
 800b12a:	4b55      	ldr	r3, [pc, #340]	; (800b280 <_strerror_r+0x3a4>)
 800b12c:	e76f      	b.n	800b00e <_strerror_r+0x132>
 800b12e:	4b55      	ldr	r3, [pc, #340]	; (800b284 <_strerror_r+0x3a8>)
 800b130:	e76d      	b.n	800b00e <_strerror_r+0x132>
 800b132:	4b55      	ldr	r3, [pc, #340]	; (800b288 <_strerror_r+0x3ac>)
 800b134:	e76b      	b.n	800b00e <_strerror_r+0x132>
 800b136:	4b55      	ldr	r3, [pc, #340]	; (800b28c <_strerror_r+0x3b0>)
 800b138:	e769      	b.n	800b00e <_strerror_r+0x132>
 800b13a:	4b55      	ldr	r3, [pc, #340]	; (800b290 <_strerror_r+0x3b4>)
 800b13c:	e767      	b.n	800b00e <_strerror_r+0x132>
 800b13e:	4b55      	ldr	r3, [pc, #340]	; (800b294 <_strerror_r+0x3b8>)
 800b140:	e765      	b.n	800b00e <_strerror_r+0x132>
 800b142:	4b55      	ldr	r3, [pc, #340]	; (800b298 <_strerror_r+0x3bc>)
 800b144:	e763      	b.n	800b00e <_strerror_r+0x132>
 800b146:	4b55      	ldr	r3, [pc, #340]	; (800b29c <_strerror_r+0x3c0>)
 800b148:	e761      	b.n	800b00e <_strerror_r+0x132>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	bf14      	ite	ne
 800b14e:	461a      	movne	r2, r3
 800b150:	4622      	moveq	r2, r4
 800b152:	f000 f8c3 	bl	800b2dc <_user_strerror>
 800b156:	4b52      	ldr	r3, [pc, #328]	; (800b2a0 <_strerror_r+0x3c4>)
 800b158:	2800      	cmp	r0, #0
 800b15a:	bf18      	it	ne
 800b15c:	4603      	movne	r3, r0
 800b15e:	e756      	b.n	800b00e <_strerror_r+0x132>
 800b160:	4b50      	ldr	r3, [pc, #320]	; (800b2a4 <_strerror_r+0x3c8>)
 800b162:	e754      	b.n	800b00e <_strerror_r+0x132>
 800b164:	0800cdef 	.word	0x0800cdef
 800b168:	0800cdf9 	.word	0x0800cdf9
 800b16c:	0800ce13 	.word	0x0800ce13
 800b170:	0800ce23 	.word	0x0800ce23
 800b174:	0800ce3b 	.word	0x0800ce3b
 800b178:	0800ce45 	.word	0x0800ce45
 800b17c:	0800ce5f 	.word	0x0800ce5f
 800b180:	0800ce71 	.word	0x0800ce71
 800b184:	0800ce83 	.word	0x0800ce83
 800b188:	0800ce9c 	.word	0x0800ce9c
 800b18c:	0800ceac 	.word	0x0800ceac
 800b190:	0800ceb8 	.word	0x0800ceb8
 800b194:	0800ced5 	.word	0x0800ced5
 800b198:	0800cee7 	.word	0x0800cee7
 800b19c:	0800cef8 	.word	0x0800cef8
 800b1a0:	0800cf0a 	.word	0x0800cf0a
 800b1a4:	0800cf16 	.word	0x0800cf16
 800b1a8:	0800cf2e 	.word	0x0800cf2e
 800b1ac:	0800cf3a 	.word	0x0800cf3a
 800b1b0:	0800cf4c 	.word	0x0800cf4c
 800b1b4:	0800cf5b 	.word	0x0800cf5b
 800b1b8:	0800cf6b 	.word	0x0800cf6b
 800b1bc:	0800cf78 	.word	0x0800cf78
 800b1c0:	0800cf97 	.word	0x0800cf97
 800b1c4:	0800cfa6 	.word	0x0800cfa6
 800b1c8:	0800cfb7 	.word	0x0800cfb7
 800b1cc:	0800cfdb 	.word	0x0800cfdb
 800b1d0:	0800cff9 	.word	0x0800cff9
 800b1d4:	0800d017 	.word	0x0800d017
 800b1d8:	0800d037 	.word	0x0800d037
 800b1dc:	0800d04e 	.word	0x0800d04e
 800b1e0:	0800d05d 	.word	0x0800d05d
 800b1e4:	0800d06c 	.word	0x0800d06c
 800b1e8:	0800d080 	.word	0x0800d080
 800b1ec:	0800d098 	.word	0x0800d098
 800b1f0:	0800d0a6 	.word	0x0800d0a6
 800b1f4:	0800d0b3 	.word	0x0800d0b3
 800b1f8:	0800d0c9 	.word	0x0800d0c9
 800b1fc:	0800d0d8 	.word	0x0800d0d8
 800b200:	0800d0e4 	.word	0x0800d0e4
 800b204:	0800d113 	.word	0x0800d113
 800b208:	0800d124 	.word	0x0800d124
 800b20c:	0800d13f 	.word	0x0800d13f
 800b210:	0800d152 	.word	0x0800d152
 800b214:	0800d168 	.word	0x0800d168
 800b218:	0800d171 	.word	0x0800d171
 800b21c:	0800d188 	.word	0x0800d188
 800b220:	0800d190 	.word	0x0800d190
 800b224:	0800d19d 	.word	0x0800d19d
 800b228:	0800d1b2 	.word	0x0800d1b2
 800b22c:	0800d1c6 	.word	0x0800d1c6
 800b230:	0800d1de 	.word	0x0800d1de
 800b234:	0800d1ed 	.word	0x0800d1ed
 800b238:	0800d1fe 	.word	0x0800d1fe
 800b23c:	0800d211 	.word	0x0800d211
 800b240:	0800d21d 	.word	0x0800d21d
 800b244:	0800d236 	.word	0x0800d236
 800b248:	0800d24a 	.word	0x0800d24a
 800b24c:	0800d265 	.word	0x0800d265
 800b250:	0800d27d 	.word	0x0800d27d
 800b254:	0800d297 	.word	0x0800d297
 800b258:	0800d29f 	.word	0x0800d29f
 800b25c:	0800d2cf 	.word	0x0800d2cf
 800b260:	0800d2ee 	.word	0x0800d2ee
 800b264:	0800d30d 	.word	0x0800d30d
 800b268:	0800d324 	.word	0x0800d324
 800b26c:	0800d337 	.word	0x0800d337
 800b270:	0800d350 	.word	0x0800d350
 800b274:	0800d367 	.word	0x0800d367
 800b278:	0800d37d 	.word	0x0800d37d
 800b27c:	0800d39e 	.word	0x0800d39e
 800b280:	0800d3b6 	.word	0x0800d3b6
 800b284:	0800d3d2 	.word	0x0800d3d2
 800b288:	0800d3e5 	.word	0x0800d3e5
 800b28c:	0800d3fb 	.word	0x0800d3fb
 800b290:	0800d40f 	.word	0x0800d40f
 800b294:	0800d431 	.word	0x0800d431
 800b298:	0800d457 	.word	0x0800d457
 800b29c:	0800d468 	.word	0x0800d468
 800b2a0:	0800cdb7 	.word	0x0800cdb7
 800b2a4:	0800d47d 	.word	0x0800d47d

0800b2a8 <strerror>:
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	4803      	ldr	r0, [pc, #12]	; (800b2b8 <strerror+0x10>)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	6800      	ldr	r0, [r0, #0]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	f7ff be13 	b.w	800aedc <_strerror_r>
 800b2b6:	bf00      	nop
 800b2b8:	20000018 	.word	0x20000018

0800b2bc <strspn>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	4603      	mov	r3, r0
 800b2c0:	461e      	mov	r6, r3
 800b2c2:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b2c6:	b13c      	cbz	r4, 800b2d8 <strspn+0x1c>
 800b2c8:	1e4a      	subs	r2, r1, #1
 800b2ca:	e001      	b.n	800b2d0 <strspn+0x14>
 800b2cc:	42a5      	cmp	r5, r4
 800b2ce:	d0f7      	beq.n	800b2c0 <strspn+0x4>
 800b2d0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	d1f9      	bne.n	800b2cc <strspn+0x10>
 800b2d8:	1a30      	subs	r0, r6, r0
 800b2da:	bd70      	pop	{r4, r5, r6, pc}

0800b2dc <_user_strerror>:
 800b2dc:	2000      	movs	r0, #0
 800b2de:	4770      	bx	lr

0800b2e0 <__swbuf_r>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	460e      	mov	r6, r1
 800b2e4:	4614      	mov	r4, r2
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	b118      	cbz	r0, 800b2f2 <__swbuf_r+0x12>
 800b2ea:	6983      	ldr	r3, [r0, #24]
 800b2ec:	b90b      	cbnz	r3, 800b2f2 <__swbuf_r+0x12>
 800b2ee:	f000 f9f3 	bl	800b6d8 <__sinit>
 800b2f2:	4b21      	ldr	r3, [pc, #132]	; (800b378 <__swbuf_r+0x98>)
 800b2f4:	429c      	cmp	r4, r3
 800b2f6:	d12b      	bne.n	800b350 <__swbuf_r+0x70>
 800b2f8:	686c      	ldr	r4, [r5, #4]
 800b2fa:	69a3      	ldr	r3, [r4, #24]
 800b2fc:	60a3      	str	r3, [r4, #8]
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	071a      	lsls	r2, r3, #28
 800b302:	d52f      	bpl.n	800b364 <__swbuf_r+0x84>
 800b304:	6923      	ldr	r3, [r4, #16]
 800b306:	b36b      	cbz	r3, 800b364 <__swbuf_r+0x84>
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	6820      	ldr	r0, [r4, #0]
 800b30c:	1ac0      	subs	r0, r0, r3
 800b30e:	6963      	ldr	r3, [r4, #20]
 800b310:	b2f6      	uxtb	r6, r6
 800b312:	4283      	cmp	r3, r0
 800b314:	4637      	mov	r7, r6
 800b316:	dc04      	bgt.n	800b322 <__swbuf_r+0x42>
 800b318:	4621      	mov	r1, r4
 800b31a:	4628      	mov	r0, r5
 800b31c:	f000 f948 	bl	800b5b0 <_fflush_r>
 800b320:	bb30      	cbnz	r0, 800b370 <__swbuf_r+0x90>
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	3b01      	subs	r3, #1
 800b326:	60a3      	str	r3, [r4, #8]
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	6022      	str	r2, [r4, #0]
 800b32e:	701e      	strb	r6, [r3, #0]
 800b330:	6963      	ldr	r3, [r4, #20]
 800b332:	3001      	adds	r0, #1
 800b334:	4283      	cmp	r3, r0
 800b336:	d004      	beq.n	800b342 <__swbuf_r+0x62>
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	07db      	lsls	r3, r3, #31
 800b33c:	d506      	bpl.n	800b34c <__swbuf_r+0x6c>
 800b33e:	2e0a      	cmp	r6, #10
 800b340:	d104      	bne.n	800b34c <__swbuf_r+0x6c>
 800b342:	4621      	mov	r1, r4
 800b344:	4628      	mov	r0, r5
 800b346:	f000 f933 	bl	800b5b0 <_fflush_r>
 800b34a:	b988      	cbnz	r0, 800b370 <__swbuf_r+0x90>
 800b34c:	4638      	mov	r0, r7
 800b34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b350:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <__swbuf_r+0x9c>)
 800b352:	429c      	cmp	r4, r3
 800b354:	d101      	bne.n	800b35a <__swbuf_r+0x7a>
 800b356:	68ac      	ldr	r4, [r5, #8]
 800b358:	e7cf      	b.n	800b2fa <__swbuf_r+0x1a>
 800b35a:	4b09      	ldr	r3, [pc, #36]	; (800b380 <__swbuf_r+0xa0>)
 800b35c:	429c      	cmp	r4, r3
 800b35e:	bf08      	it	eq
 800b360:	68ec      	ldreq	r4, [r5, #12]
 800b362:	e7ca      	b.n	800b2fa <__swbuf_r+0x1a>
 800b364:	4621      	mov	r1, r4
 800b366:	4628      	mov	r0, r5
 800b368:	f000 f81e 	bl	800b3a8 <__swsetup_r>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d0cb      	beq.n	800b308 <__swbuf_r+0x28>
 800b370:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b374:	e7ea      	b.n	800b34c <__swbuf_r+0x6c>
 800b376:	bf00      	nop
 800b378:	0800d4a8 	.word	0x0800d4a8
 800b37c:	0800d4c8 	.word	0x0800d4c8
 800b380:	0800d488 	.word	0x0800d488

0800b384 <_write_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4d07      	ldr	r5, [pc, #28]	; (800b3a4 <_write_r+0x20>)
 800b388:	4604      	mov	r4, r0
 800b38a:	4608      	mov	r0, r1
 800b38c:	4611      	mov	r1, r2
 800b38e:	2200      	movs	r2, #0
 800b390:	602a      	str	r2, [r5, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	f7f5 faa2 	bl	80008dc <_write>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_write_r+0x1e>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_write_r+0x1e>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20000308 	.word	0x20000308

0800b3a8 <__swsetup_r>:
 800b3a8:	4b32      	ldr	r3, [pc, #200]	; (800b474 <__swsetup_r+0xcc>)
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	681d      	ldr	r5, [r3, #0]
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	b125      	cbz	r5, 800b3be <__swsetup_r+0x16>
 800b3b4:	69ab      	ldr	r3, [r5, #24]
 800b3b6:	b913      	cbnz	r3, 800b3be <__swsetup_r+0x16>
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f000 f98d 	bl	800b6d8 <__sinit>
 800b3be:	4b2e      	ldr	r3, [pc, #184]	; (800b478 <__swsetup_r+0xd0>)
 800b3c0:	429c      	cmp	r4, r3
 800b3c2:	d10f      	bne.n	800b3e4 <__swsetup_r+0x3c>
 800b3c4:	686c      	ldr	r4, [r5, #4]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3cc:	0719      	lsls	r1, r3, #28
 800b3ce:	d42c      	bmi.n	800b42a <__swsetup_r+0x82>
 800b3d0:	06dd      	lsls	r5, r3, #27
 800b3d2:	d411      	bmi.n	800b3f8 <__swsetup_r+0x50>
 800b3d4:	2309      	movs	r3, #9
 800b3d6:	6033      	str	r3, [r6, #0]
 800b3d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3e2:	e03e      	b.n	800b462 <__swsetup_r+0xba>
 800b3e4:	4b25      	ldr	r3, [pc, #148]	; (800b47c <__swsetup_r+0xd4>)
 800b3e6:	429c      	cmp	r4, r3
 800b3e8:	d101      	bne.n	800b3ee <__swsetup_r+0x46>
 800b3ea:	68ac      	ldr	r4, [r5, #8]
 800b3ec:	e7eb      	b.n	800b3c6 <__swsetup_r+0x1e>
 800b3ee:	4b24      	ldr	r3, [pc, #144]	; (800b480 <__swsetup_r+0xd8>)
 800b3f0:	429c      	cmp	r4, r3
 800b3f2:	bf08      	it	eq
 800b3f4:	68ec      	ldreq	r4, [r5, #12]
 800b3f6:	e7e6      	b.n	800b3c6 <__swsetup_r+0x1e>
 800b3f8:	0758      	lsls	r0, r3, #29
 800b3fa:	d512      	bpl.n	800b422 <__swsetup_r+0x7a>
 800b3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3fe:	b141      	cbz	r1, 800b412 <__swsetup_r+0x6a>
 800b400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b404:	4299      	cmp	r1, r3
 800b406:	d002      	beq.n	800b40e <__swsetup_r+0x66>
 800b408:	4630      	mov	r0, r6
 800b40a:	f7ff f897 	bl	800a53c <_free_r>
 800b40e:	2300      	movs	r3, #0
 800b410:	6363      	str	r3, [r4, #52]	; 0x34
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b418:	81a3      	strh	r3, [r4, #12]
 800b41a:	2300      	movs	r3, #0
 800b41c:	6063      	str	r3, [r4, #4]
 800b41e:	6923      	ldr	r3, [r4, #16]
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	f043 0308 	orr.w	r3, r3, #8
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	6923      	ldr	r3, [r4, #16]
 800b42c:	b94b      	cbnz	r3, 800b442 <__swsetup_r+0x9a>
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b438:	d003      	beq.n	800b442 <__swsetup_r+0x9a>
 800b43a:	4621      	mov	r1, r4
 800b43c:	4630      	mov	r0, r6
 800b43e:	f000 fa23 	bl	800b888 <__smakebuf_r>
 800b442:	89a0      	ldrh	r0, [r4, #12]
 800b444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b448:	f010 0301 	ands.w	r3, r0, #1
 800b44c:	d00a      	beq.n	800b464 <__swsetup_r+0xbc>
 800b44e:	2300      	movs	r3, #0
 800b450:	60a3      	str	r3, [r4, #8]
 800b452:	6963      	ldr	r3, [r4, #20]
 800b454:	425b      	negs	r3, r3
 800b456:	61a3      	str	r3, [r4, #24]
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	b943      	cbnz	r3, 800b46e <__swsetup_r+0xc6>
 800b45c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b460:	d1ba      	bne.n	800b3d8 <__swsetup_r+0x30>
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	0781      	lsls	r1, r0, #30
 800b466:	bf58      	it	pl
 800b468:	6963      	ldrpl	r3, [r4, #20]
 800b46a:	60a3      	str	r3, [r4, #8]
 800b46c:	e7f4      	b.n	800b458 <__swsetup_r+0xb0>
 800b46e:	2000      	movs	r0, #0
 800b470:	e7f7      	b.n	800b462 <__swsetup_r+0xba>
 800b472:	bf00      	nop
 800b474:	20000018 	.word	0x20000018
 800b478:	0800d4a8 	.word	0x0800d4a8
 800b47c:	0800d4c8 	.word	0x0800d4c8
 800b480:	0800d488 	.word	0x0800d488

0800b484 <_close_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4d06      	ldr	r5, [pc, #24]	; (800b4a0 <_close_r+0x1c>)
 800b488:	2300      	movs	r3, #0
 800b48a:	4604      	mov	r4, r0
 800b48c:	4608      	mov	r0, r1
 800b48e:	602b      	str	r3, [r5, #0]
 800b490:	f7f5 fa40 	bl	8000914 <_close>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	d102      	bne.n	800b49e <_close_r+0x1a>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	b103      	cbz	r3, 800b49e <_close_r+0x1a>
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	bd38      	pop	{r3, r4, r5, pc}
 800b4a0:	20000308 	.word	0x20000308

0800b4a4 <__sflush_r>:
 800b4a4:	898a      	ldrh	r2, [r1, #12]
 800b4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	0710      	lsls	r0, r2, #28
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	d458      	bmi.n	800b564 <__sflush_r+0xc0>
 800b4b2:	684b      	ldr	r3, [r1, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dc05      	bgt.n	800b4c4 <__sflush_r+0x20>
 800b4b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	dc02      	bgt.n	800b4c4 <__sflush_r+0x20>
 800b4be:	2000      	movs	r0, #0
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	d0f9      	beq.n	800b4be <__sflush_r+0x1a>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4d0:	682f      	ldr	r7, [r5, #0]
 800b4d2:	602b      	str	r3, [r5, #0]
 800b4d4:	d032      	beq.n	800b53c <__sflush_r+0x98>
 800b4d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	075a      	lsls	r2, r3, #29
 800b4dc:	d505      	bpl.n	800b4ea <__sflush_r+0x46>
 800b4de:	6863      	ldr	r3, [r4, #4]
 800b4e0:	1ac0      	subs	r0, r0, r3
 800b4e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4e4:	b10b      	cbz	r3, 800b4ea <__sflush_r+0x46>
 800b4e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4e8:	1ac0      	subs	r0, r0, r3
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4f0:	6a21      	ldr	r1, [r4, #32]
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b0      	blx	r6
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	d106      	bne.n	800b50a <__sflush_r+0x66>
 800b4fc:	6829      	ldr	r1, [r5, #0]
 800b4fe:	291d      	cmp	r1, #29
 800b500:	d82c      	bhi.n	800b55c <__sflush_r+0xb8>
 800b502:	4a2a      	ldr	r2, [pc, #168]	; (800b5ac <__sflush_r+0x108>)
 800b504:	40ca      	lsrs	r2, r1
 800b506:	07d6      	lsls	r6, r2, #31
 800b508:	d528      	bpl.n	800b55c <__sflush_r+0xb8>
 800b50a:	2200      	movs	r2, #0
 800b50c:	6062      	str	r2, [r4, #4]
 800b50e:	04d9      	lsls	r1, r3, #19
 800b510:	6922      	ldr	r2, [r4, #16]
 800b512:	6022      	str	r2, [r4, #0]
 800b514:	d504      	bpl.n	800b520 <__sflush_r+0x7c>
 800b516:	1c42      	adds	r2, r0, #1
 800b518:	d101      	bne.n	800b51e <__sflush_r+0x7a>
 800b51a:	682b      	ldr	r3, [r5, #0]
 800b51c:	b903      	cbnz	r3, 800b520 <__sflush_r+0x7c>
 800b51e:	6560      	str	r0, [r4, #84]	; 0x54
 800b520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b522:	602f      	str	r7, [r5, #0]
 800b524:	2900      	cmp	r1, #0
 800b526:	d0ca      	beq.n	800b4be <__sflush_r+0x1a>
 800b528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b52c:	4299      	cmp	r1, r3
 800b52e:	d002      	beq.n	800b536 <__sflush_r+0x92>
 800b530:	4628      	mov	r0, r5
 800b532:	f7ff f803 	bl	800a53c <_free_r>
 800b536:	2000      	movs	r0, #0
 800b538:	6360      	str	r0, [r4, #52]	; 0x34
 800b53a:	e7c1      	b.n	800b4c0 <__sflush_r+0x1c>
 800b53c:	6a21      	ldr	r1, [r4, #32]
 800b53e:	2301      	movs	r3, #1
 800b540:	4628      	mov	r0, r5
 800b542:	47b0      	blx	r6
 800b544:	1c41      	adds	r1, r0, #1
 800b546:	d1c7      	bne.n	800b4d8 <__sflush_r+0x34>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0c4      	beq.n	800b4d8 <__sflush_r+0x34>
 800b54e:	2b1d      	cmp	r3, #29
 800b550:	d001      	beq.n	800b556 <__sflush_r+0xb2>
 800b552:	2b16      	cmp	r3, #22
 800b554:	d101      	bne.n	800b55a <__sflush_r+0xb6>
 800b556:	602f      	str	r7, [r5, #0]
 800b558:	e7b1      	b.n	800b4be <__sflush_r+0x1a>
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	e7ad      	b.n	800b4c0 <__sflush_r+0x1c>
 800b564:	690f      	ldr	r7, [r1, #16]
 800b566:	2f00      	cmp	r7, #0
 800b568:	d0a9      	beq.n	800b4be <__sflush_r+0x1a>
 800b56a:	0793      	lsls	r3, r2, #30
 800b56c:	680e      	ldr	r6, [r1, #0]
 800b56e:	bf08      	it	eq
 800b570:	694b      	ldreq	r3, [r1, #20]
 800b572:	600f      	str	r7, [r1, #0]
 800b574:	bf18      	it	ne
 800b576:	2300      	movne	r3, #0
 800b578:	eba6 0807 	sub.w	r8, r6, r7
 800b57c:	608b      	str	r3, [r1, #8]
 800b57e:	f1b8 0f00 	cmp.w	r8, #0
 800b582:	dd9c      	ble.n	800b4be <__sflush_r+0x1a>
 800b584:	6a21      	ldr	r1, [r4, #32]
 800b586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b588:	4643      	mov	r3, r8
 800b58a:	463a      	mov	r2, r7
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b0      	blx	r6
 800b590:	2800      	cmp	r0, #0
 800b592:	dc06      	bgt.n	800b5a2 <__sflush_r+0xfe>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5a0:	e78e      	b.n	800b4c0 <__sflush_r+0x1c>
 800b5a2:	4407      	add	r7, r0
 800b5a4:	eba8 0800 	sub.w	r8, r8, r0
 800b5a8:	e7e9      	b.n	800b57e <__sflush_r+0xda>
 800b5aa:	bf00      	nop
 800b5ac:	20400001 	.word	0x20400001

0800b5b0 <_fflush_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	690b      	ldr	r3, [r1, #16]
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	b913      	cbnz	r3, 800b5c0 <_fflush_r+0x10>
 800b5ba:	2500      	movs	r5, #0
 800b5bc:	4628      	mov	r0, r5
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	b118      	cbz	r0, 800b5ca <_fflush_r+0x1a>
 800b5c2:	6983      	ldr	r3, [r0, #24]
 800b5c4:	b90b      	cbnz	r3, 800b5ca <_fflush_r+0x1a>
 800b5c6:	f000 f887 	bl	800b6d8 <__sinit>
 800b5ca:	4b14      	ldr	r3, [pc, #80]	; (800b61c <_fflush_r+0x6c>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	d11b      	bne.n	800b608 <_fflush_r+0x58>
 800b5d0:	686c      	ldr	r4, [r5, #4]
 800b5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0ef      	beq.n	800b5ba <_fflush_r+0xa>
 800b5da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5dc:	07d0      	lsls	r0, r2, #31
 800b5de:	d404      	bmi.n	800b5ea <_fflush_r+0x3a>
 800b5e0:	0599      	lsls	r1, r3, #22
 800b5e2:	d402      	bmi.n	800b5ea <_fflush_r+0x3a>
 800b5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e6:	f000 f915 	bl	800b814 <__retarget_lock_acquire_recursive>
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	f7ff ff59 	bl	800b4a4 <__sflush_r>
 800b5f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f4:	07da      	lsls	r2, r3, #31
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	d4e0      	bmi.n	800b5bc <_fflush_r+0xc>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	059b      	lsls	r3, r3, #22
 800b5fe:	d4dd      	bmi.n	800b5bc <_fflush_r+0xc>
 800b600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b602:	f000 f908 	bl	800b816 <__retarget_lock_release_recursive>
 800b606:	e7d9      	b.n	800b5bc <_fflush_r+0xc>
 800b608:	4b05      	ldr	r3, [pc, #20]	; (800b620 <_fflush_r+0x70>)
 800b60a:	429c      	cmp	r4, r3
 800b60c:	d101      	bne.n	800b612 <_fflush_r+0x62>
 800b60e:	68ac      	ldr	r4, [r5, #8]
 800b610:	e7df      	b.n	800b5d2 <_fflush_r+0x22>
 800b612:	4b04      	ldr	r3, [pc, #16]	; (800b624 <_fflush_r+0x74>)
 800b614:	429c      	cmp	r4, r3
 800b616:	bf08      	it	eq
 800b618:	68ec      	ldreq	r4, [r5, #12]
 800b61a:	e7da      	b.n	800b5d2 <_fflush_r+0x22>
 800b61c:	0800d4a8 	.word	0x0800d4a8
 800b620:	0800d4c8 	.word	0x0800d4c8
 800b624:	0800d488 	.word	0x0800d488

0800b628 <std>:
 800b628:	2300      	movs	r3, #0
 800b62a:	b510      	push	{r4, lr}
 800b62c:	4604      	mov	r4, r0
 800b62e:	e9c0 3300 	strd	r3, r3, [r0]
 800b632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b636:	6083      	str	r3, [r0, #8]
 800b638:	8181      	strh	r1, [r0, #12]
 800b63a:	6643      	str	r3, [r0, #100]	; 0x64
 800b63c:	81c2      	strh	r2, [r0, #14]
 800b63e:	6183      	str	r3, [r0, #24]
 800b640:	4619      	mov	r1, r3
 800b642:	2208      	movs	r2, #8
 800b644:	305c      	adds	r0, #92	; 0x5c
 800b646:	f7fe ff71 	bl	800a52c <memset>
 800b64a:	4b05      	ldr	r3, [pc, #20]	; (800b660 <std+0x38>)
 800b64c:	6263      	str	r3, [r4, #36]	; 0x24
 800b64e:	4b05      	ldr	r3, [pc, #20]	; (800b664 <std+0x3c>)
 800b650:	62a3      	str	r3, [r4, #40]	; 0x28
 800b652:	4b05      	ldr	r3, [pc, #20]	; (800b668 <std+0x40>)
 800b654:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b656:	4b05      	ldr	r3, [pc, #20]	; (800b66c <std+0x44>)
 800b658:	6224      	str	r4, [r4, #32]
 800b65a:	6323      	str	r3, [r4, #48]	; 0x30
 800b65c:	bd10      	pop	{r4, pc}
 800b65e:	bf00      	nop
 800b660:	0800ae19 	.word	0x0800ae19
 800b664:	0800ae3b 	.word	0x0800ae3b
 800b668:	0800ae73 	.word	0x0800ae73
 800b66c:	0800ae97 	.word	0x0800ae97

0800b670 <_cleanup_r>:
 800b670:	4901      	ldr	r1, [pc, #4]	; (800b678 <_cleanup_r+0x8>)
 800b672:	f000 b8af 	b.w	800b7d4 <_fwalk_reent>
 800b676:	bf00      	nop
 800b678:	0800b5b1 	.word	0x0800b5b1

0800b67c <__sfmoreglue>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	2268      	movs	r2, #104	; 0x68
 800b680:	1e4d      	subs	r5, r1, #1
 800b682:	4355      	muls	r5, r2
 800b684:	460e      	mov	r6, r1
 800b686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b68a:	f7fe ffc3 	bl	800a614 <_malloc_r>
 800b68e:	4604      	mov	r4, r0
 800b690:	b140      	cbz	r0, 800b6a4 <__sfmoreglue+0x28>
 800b692:	2100      	movs	r1, #0
 800b694:	e9c0 1600 	strd	r1, r6, [r0]
 800b698:	300c      	adds	r0, #12
 800b69a:	60a0      	str	r0, [r4, #8]
 800b69c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6a0:	f7fe ff44 	bl	800a52c <memset>
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}

0800b6a8 <__sfp_lock_acquire>:
 800b6a8:	4801      	ldr	r0, [pc, #4]	; (800b6b0 <__sfp_lock_acquire+0x8>)
 800b6aa:	f000 b8b3 	b.w	800b814 <__retarget_lock_acquire_recursive>
 800b6ae:	bf00      	nop
 800b6b0:	20000305 	.word	0x20000305

0800b6b4 <__sfp_lock_release>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <__sfp_lock_release+0x8>)
 800b6b6:	f000 b8ae 	b.w	800b816 <__retarget_lock_release_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	20000305 	.word	0x20000305

0800b6c0 <__sinit_lock_acquire>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	; (800b6c8 <__sinit_lock_acquire+0x8>)
 800b6c2:	f000 b8a7 	b.w	800b814 <__retarget_lock_acquire_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	20000306 	.word	0x20000306

0800b6cc <__sinit_lock_release>:
 800b6cc:	4801      	ldr	r0, [pc, #4]	; (800b6d4 <__sinit_lock_release+0x8>)
 800b6ce:	f000 b8a2 	b.w	800b816 <__retarget_lock_release_recursive>
 800b6d2:	bf00      	nop
 800b6d4:	20000306 	.word	0x20000306

0800b6d8 <__sinit>:
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	4604      	mov	r4, r0
 800b6dc:	f7ff fff0 	bl	800b6c0 <__sinit_lock_acquire>
 800b6e0:	69a3      	ldr	r3, [r4, #24]
 800b6e2:	b11b      	cbz	r3, 800b6ec <__sinit+0x14>
 800b6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e8:	f7ff bff0 	b.w	800b6cc <__sinit_lock_release>
 800b6ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6f0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6f2:	4b13      	ldr	r3, [pc, #76]	; (800b740 <__sinit+0x68>)
 800b6f4:	4a13      	ldr	r2, [pc, #76]	; (800b744 <__sinit+0x6c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6fa:	42a3      	cmp	r3, r4
 800b6fc:	bf04      	itt	eq
 800b6fe:	2301      	moveq	r3, #1
 800b700:	61a3      	streq	r3, [r4, #24]
 800b702:	4620      	mov	r0, r4
 800b704:	f000 f820 	bl	800b748 <__sfp>
 800b708:	6060      	str	r0, [r4, #4]
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 f81c 	bl	800b748 <__sfp>
 800b710:	60a0      	str	r0, [r4, #8]
 800b712:	4620      	mov	r0, r4
 800b714:	f000 f818 	bl	800b748 <__sfp>
 800b718:	2200      	movs	r2, #0
 800b71a:	60e0      	str	r0, [r4, #12]
 800b71c:	2104      	movs	r1, #4
 800b71e:	6860      	ldr	r0, [r4, #4]
 800b720:	f7ff ff82 	bl	800b628 <std>
 800b724:	68a0      	ldr	r0, [r4, #8]
 800b726:	2201      	movs	r2, #1
 800b728:	2109      	movs	r1, #9
 800b72a:	f7ff ff7d 	bl	800b628 <std>
 800b72e:	68e0      	ldr	r0, [r4, #12]
 800b730:	2202      	movs	r2, #2
 800b732:	2112      	movs	r1, #18
 800b734:	f7ff ff78 	bl	800b628 <std>
 800b738:	2301      	movs	r3, #1
 800b73a:	61a3      	str	r3, [r4, #24]
 800b73c:	e7d2      	b.n	800b6e4 <__sinit+0xc>
 800b73e:	bf00      	nop
 800b740:	0800cdb8 	.word	0x0800cdb8
 800b744:	0800b671 	.word	0x0800b671

0800b748 <__sfp>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	4607      	mov	r7, r0
 800b74c:	f7ff ffac 	bl	800b6a8 <__sfp_lock_acquire>
 800b750:	4b1e      	ldr	r3, [pc, #120]	; (800b7cc <__sfp+0x84>)
 800b752:	681e      	ldr	r6, [r3, #0]
 800b754:	69b3      	ldr	r3, [r6, #24]
 800b756:	b913      	cbnz	r3, 800b75e <__sfp+0x16>
 800b758:	4630      	mov	r0, r6
 800b75a:	f7ff ffbd 	bl	800b6d8 <__sinit>
 800b75e:	3648      	adds	r6, #72	; 0x48
 800b760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b764:	3b01      	subs	r3, #1
 800b766:	d503      	bpl.n	800b770 <__sfp+0x28>
 800b768:	6833      	ldr	r3, [r6, #0]
 800b76a:	b30b      	cbz	r3, 800b7b0 <__sfp+0x68>
 800b76c:	6836      	ldr	r6, [r6, #0]
 800b76e:	e7f7      	b.n	800b760 <__sfp+0x18>
 800b770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b774:	b9d5      	cbnz	r5, 800b7ac <__sfp+0x64>
 800b776:	4b16      	ldr	r3, [pc, #88]	; (800b7d0 <__sfp+0x88>)
 800b778:	60e3      	str	r3, [r4, #12]
 800b77a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b77e:	6665      	str	r5, [r4, #100]	; 0x64
 800b780:	f000 f847 	bl	800b812 <__retarget_lock_init_recursive>
 800b784:	f7ff ff96 	bl	800b6b4 <__sfp_lock_release>
 800b788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b78c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b790:	6025      	str	r5, [r4, #0]
 800b792:	61a5      	str	r5, [r4, #24]
 800b794:	2208      	movs	r2, #8
 800b796:	4629      	mov	r1, r5
 800b798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b79c:	f7fe fec6 	bl	800a52c <memset>
 800b7a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ac:	3468      	adds	r4, #104	; 0x68
 800b7ae:	e7d9      	b.n	800b764 <__sfp+0x1c>
 800b7b0:	2104      	movs	r1, #4
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	f7ff ff62 	bl	800b67c <__sfmoreglue>
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	6030      	str	r0, [r6, #0]
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d1d5      	bne.n	800b76c <__sfp+0x24>
 800b7c0:	f7ff ff78 	bl	800b6b4 <__sfp_lock_release>
 800b7c4:	230c      	movs	r3, #12
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	e7ee      	b.n	800b7a8 <__sfp+0x60>
 800b7ca:	bf00      	nop
 800b7cc:	0800cdb8 	.word	0x0800cdb8
 800b7d0:	ffff0001 	.word	0xffff0001

0800b7d4 <_fwalk_reent>:
 800b7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	4606      	mov	r6, r0
 800b7da:	4688      	mov	r8, r1
 800b7dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7e0:	2700      	movs	r7, #0
 800b7e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7e6:	f1b9 0901 	subs.w	r9, r9, #1
 800b7ea:	d505      	bpl.n	800b7f8 <_fwalk_reent+0x24>
 800b7ec:	6824      	ldr	r4, [r4, #0]
 800b7ee:	2c00      	cmp	r4, #0
 800b7f0:	d1f7      	bne.n	800b7e2 <_fwalk_reent+0xe>
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f8:	89ab      	ldrh	r3, [r5, #12]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d907      	bls.n	800b80e <_fwalk_reent+0x3a>
 800b7fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b802:	3301      	adds	r3, #1
 800b804:	d003      	beq.n	800b80e <_fwalk_reent+0x3a>
 800b806:	4629      	mov	r1, r5
 800b808:	4630      	mov	r0, r6
 800b80a:	47c0      	blx	r8
 800b80c:	4307      	orrs	r7, r0
 800b80e:	3568      	adds	r5, #104	; 0x68
 800b810:	e7e9      	b.n	800b7e6 <_fwalk_reent+0x12>

0800b812 <__retarget_lock_init_recursive>:
 800b812:	4770      	bx	lr

0800b814 <__retarget_lock_acquire_recursive>:
 800b814:	4770      	bx	lr

0800b816 <__retarget_lock_release_recursive>:
 800b816:	4770      	bx	lr

0800b818 <_lseek_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d07      	ldr	r5, [pc, #28]	; (800b838 <_lseek_r+0x20>)
 800b81c:	4604      	mov	r4, r0
 800b81e:	4608      	mov	r0, r1
 800b820:	4611      	mov	r1, r2
 800b822:	2200      	movs	r2, #0
 800b824:	602a      	str	r2, [r5, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	f7f5 f89b 	bl	8000962 <_lseek>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_lseek_r+0x1e>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_lseek_r+0x1e>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	20000308 	.word	0x20000308

0800b83c <__swhatbuf_r>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	460e      	mov	r6, r1
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	2900      	cmp	r1, #0
 800b846:	b096      	sub	sp, #88	; 0x58
 800b848:	4614      	mov	r4, r2
 800b84a:	461d      	mov	r5, r3
 800b84c:	da08      	bge.n	800b860 <__swhatbuf_r+0x24>
 800b84e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	602a      	str	r2, [r5, #0]
 800b856:	061a      	lsls	r2, r3, #24
 800b858:	d410      	bmi.n	800b87c <__swhatbuf_r+0x40>
 800b85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b85e:	e00e      	b.n	800b87e <__swhatbuf_r+0x42>
 800b860:	466a      	mov	r2, sp
 800b862:	f000 f9f9 	bl	800bc58 <_fstat_r>
 800b866:	2800      	cmp	r0, #0
 800b868:	dbf1      	blt.n	800b84e <__swhatbuf_r+0x12>
 800b86a:	9a01      	ldr	r2, [sp, #4]
 800b86c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b874:	425a      	negs	r2, r3
 800b876:	415a      	adcs	r2, r3
 800b878:	602a      	str	r2, [r5, #0]
 800b87a:	e7ee      	b.n	800b85a <__swhatbuf_r+0x1e>
 800b87c:	2340      	movs	r3, #64	; 0x40
 800b87e:	2000      	movs	r0, #0
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	b016      	add	sp, #88	; 0x58
 800b884:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b888 <__smakebuf_r>:
 800b888:	898b      	ldrh	r3, [r1, #12]
 800b88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b88c:	079d      	lsls	r5, r3, #30
 800b88e:	4606      	mov	r6, r0
 800b890:	460c      	mov	r4, r1
 800b892:	d507      	bpl.n	800b8a4 <__smakebuf_r+0x1c>
 800b894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	6123      	str	r3, [r4, #16]
 800b89c:	2301      	movs	r3, #1
 800b89e:	6163      	str	r3, [r4, #20]
 800b8a0:	b002      	add	sp, #8
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	ab01      	add	r3, sp, #4
 800b8a6:	466a      	mov	r2, sp
 800b8a8:	f7ff ffc8 	bl	800b83c <__swhatbuf_r>
 800b8ac:	9900      	ldr	r1, [sp, #0]
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f7fe feaf 	bl	800a614 <_malloc_r>
 800b8b6:	b948      	cbnz	r0, 800b8cc <__smakebuf_r+0x44>
 800b8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8bc:	059a      	lsls	r2, r3, #22
 800b8be:	d4ef      	bmi.n	800b8a0 <__smakebuf_r+0x18>
 800b8c0:	f023 0303 	bic.w	r3, r3, #3
 800b8c4:	f043 0302 	orr.w	r3, r3, #2
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	e7e3      	b.n	800b894 <__smakebuf_r+0xc>
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <__smakebuf_r+0x7c>)
 800b8ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8d0:	89a3      	ldrh	r3, [r4, #12]
 800b8d2:	6020      	str	r0, [r4, #0]
 800b8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d8:	81a3      	strh	r3, [r4, #12]
 800b8da:	9b00      	ldr	r3, [sp, #0]
 800b8dc:	6163      	str	r3, [r4, #20]
 800b8de:	9b01      	ldr	r3, [sp, #4]
 800b8e0:	6120      	str	r0, [r4, #16]
 800b8e2:	b15b      	cbz	r3, 800b8fc <__smakebuf_r+0x74>
 800b8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f000 f9c7 	bl	800bc7c <_isatty_r>
 800b8ee:	b128      	cbz	r0, 800b8fc <__smakebuf_r+0x74>
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	f023 0303 	bic.w	r3, r3, #3
 800b8f6:	f043 0301 	orr.w	r3, r3, #1
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	89a0      	ldrh	r0, [r4, #12]
 800b8fe:	4305      	orrs	r5, r0
 800b900:	81a5      	strh	r5, [r4, #12]
 800b902:	e7cd      	b.n	800b8a0 <__smakebuf_r+0x18>
 800b904:	0800b671 	.word	0x0800b671

0800b908 <__malloc_lock>:
 800b908:	4801      	ldr	r0, [pc, #4]	; (800b910 <__malloc_lock+0x8>)
 800b90a:	f7ff bf83 	b.w	800b814 <__retarget_lock_acquire_recursive>
 800b90e:	bf00      	nop
 800b910:	20000304 	.word	0x20000304

0800b914 <__malloc_unlock>:
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <__malloc_unlock+0x8>)
 800b916:	f7ff bf7e 	b.w	800b816 <__retarget_lock_release_recursive>
 800b91a:	bf00      	nop
 800b91c:	20000304 	.word	0x20000304

0800b920 <_realloc_r>:
 800b920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b924:	4680      	mov	r8, r0
 800b926:	4614      	mov	r4, r2
 800b928:	460e      	mov	r6, r1
 800b92a:	b921      	cbnz	r1, 800b936 <_realloc_r+0x16>
 800b92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b930:	4611      	mov	r1, r2
 800b932:	f7fe be6f 	b.w	800a614 <_malloc_r>
 800b936:	b92a      	cbnz	r2, 800b944 <_realloc_r+0x24>
 800b938:	f7fe fe00 	bl	800a53c <_free_r>
 800b93c:	4625      	mov	r5, r4
 800b93e:	4628      	mov	r0, r5
 800b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b944:	f000 f9aa 	bl	800bc9c <_malloc_usable_size_r>
 800b948:	4284      	cmp	r4, r0
 800b94a:	4607      	mov	r7, r0
 800b94c:	d802      	bhi.n	800b954 <_realloc_r+0x34>
 800b94e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b952:	d812      	bhi.n	800b97a <_realloc_r+0x5a>
 800b954:	4621      	mov	r1, r4
 800b956:	4640      	mov	r0, r8
 800b958:	f7fe fe5c 	bl	800a614 <_malloc_r>
 800b95c:	4605      	mov	r5, r0
 800b95e:	2800      	cmp	r0, #0
 800b960:	d0ed      	beq.n	800b93e <_realloc_r+0x1e>
 800b962:	42bc      	cmp	r4, r7
 800b964:	4622      	mov	r2, r4
 800b966:	4631      	mov	r1, r6
 800b968:	bf28      	it	cs
 800b96a:	463a      	movcs	r2, r7
 800b96c:	f7fe fdb6 	bl	800a4dc <memcpy>
 800b970:	4631      	mov	r1, r6
 800b972:	4640      	mov	r0, r8
 800b974:	f7fe fde2 	bl	800a53c <_free_r>
 800b978:	e7e1      	b.n	800b93e <_realloc_r+0x1e>
 800b97a:	4635      	mov	r5, r6
 800b97c:	e7df      	b.n	800b93e <_realloc_r+0x1e>

0800b97e <__ssputs_r>:
 800b97e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b982:	688e      	ldr	r6, [r1, #8]
 800b984:	429e      	cmp	r6, r3
 800b986:	4682      	mov	sl, r0
 800b988:	460c      	mov	r4, r1
 800b98a:	4690      	mov	r8, r2
 800b98c:	461f      	mov	r7, r3
 800b98e:	d838      	bhi.n	800ba02 <__ssputs_r+0x84>
 800b990:	898a      	ldrh	r2, [r1, #12]
 800b992:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b996:	d032      	beq.n	800b9fe <__ssputs_r+0x80>
 800b998:	6825      	ldr	r5, [r4, #0]
 800b99a:	6909      	ldr	r1, [r1, #16]
 800b99c:	eba5 0901 	sub.w	r9, r5, r1
 800b9a0:	6965      	ldr	r5, [r4, #20]
 800b9a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	444b      	add	r3, r9
 800b9ae:	106d      	asrs	r5, r5, #1
 800b9b0:	429d      	cmp	r5, r3
 800b9b2:	bf38      	it	cc
 800b9b4:	461d      	movcc	r5, r3
 800b9b6:	0553      	lsls	r3, r2, #21
 800b9b8:	d531      	bpl.n	800ba1e <__ssputs_r+0xa0>
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f7fe fe2a 	bl	800a614 <_malloc_r>
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	b950      	cbnz	r0, 800b9da <__ssputs_r+0x5c>
 800b9c4:	230c      	movs	r3, #12
 800b9c6:	f8ca 3000 	str.w	r3, [sl]
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d0:	81a3      	strh	r3, [r4, #12]
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9da:	6921      	ldr	r1, [r4, #16]
 800b9dc:	464a      	mov	r2, r9
 800b9de:	f7fe fd7d 	bl	800a4dc <memcpy>
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	6126      	str	r6, [r4, #16]
 800b9f0:	6165      	str	r5, [r4, #20]
 800b9f2:	444e      	add	r6, r9
 800b9f4:	eba5 0509 	sub.w	r5, r5, r9
 800b9f8:	6026      	str	r6, [r4, #0]
 800b9fa:	60a5      	str	r5, [r4, #8]
 800b9fc:	463e      	mov	r6, r7
 800b9fe:	42be      	cmp	r6, r7
 800ba00:	d900      	bls.n	800ba04 <__ssputs_r+0x86>
 800ba02:	463e      	mov	r6, r7
 800ba04:	6820      	ldr	r0, [r4, #0]
 800ba06:	4632      	mov	r2, r6
 800ba08:	4641      	mov	r1, r8
 800ba0a:	f7fe fd75 	bl	800a4f8 <memmove>
 800ba0e:	68a3      	ldr	r3, [r4, #8]
 800ba10:	1b9b      	subs	r3, r3, r6
 800ba12:	60a3      	str	r3, [r4, #8]
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	4433      	add	r3, r6
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	e7db      	b.n	800b9d6 <__ssputs_r+0x58>
 800ba1e:	462a      	mov	r2, r5
 800ba20:	f7ff ff7e 	bl	800b920 <_realloc_r>
 800ba24:	4606      	mov	r6, r0
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d1e1      	bne.n	800b9ee <__ssputs_r+0x70>
 800ba2a:	6921      	ldr	r1, [r4, #16]
 800ba2c:	4650      	mov	r0, sl
 800ba2e:	f7fe fd85 	bl	800a53c <_free_r>
 800ba32:	e7c7      	b.n	800b9c4 <__ssputs_r+0x46>

0800ba34 <_svfiprintf_r>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	4698      	mov	r8, r3
 800ba3a:	898b      	ldrh	r3, [r1, #12]
 800ba3c:	061b      	lsls	r3, r3, #24
 800ba3e:	b09d      	sub	sp, #116	; 0x74
 800ba40:	4607      	mov	r7, r0
 800ba42:	460d      	mov	r5, r1
 800ba44:	4614      	mov	r4, r2
 800ba46:	d50e      	bpl.n	800ba66 <_svfiprintf_r+0x32>
 800ba48:	690b      	ldr	r3, [r1, #16]
 800ba4a:	b963      	cbnz	r3, 800ba66 <_svfiprintf_r+0x32>
 800ba4c:	2140      	movs	r1, #64	; 0x40
 800ba4e:	f7fe fde1 	bl	800a614 <_malloc_r>
 800ba52:	6028      	str	r0, [r5, #0]
 800ba54:	6128      	str	r0, [r5, #16]
 800ba56:	b920      	cbnz	r0, 800ba62 <_svfiprintf_r+0x2e>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba60:	e0d1      	b.n	800bc06 <_svfiprintf_r+0x1d2>
 800ba62:	2340      	movs	r3, #64	; 0x40
 800ba64:	616b      	str	r3, [r5, #20]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6a:	2320      	movs	r3, #32
 800ba6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba74:	2330      	movs	r3, #48	; 0x30
 800ba76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc20 <_svfiprintf_r+0x1ec>
 800ba7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba7e:	f04f 0901 	mov.w	r9, #1
 800ba82:	4623      	mov	r3, r4
 800ba84:	469a      	mov	sl, r3
 800ba86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8a:	b10a      	cbz	r2, 800ba90 <_svfiprintf_r+0x5c>
 800ba8c:	2a25      	cmp	r2, #37	; 0x25
 800ba8e:	d1f9      	bne.n	800ba84 <_svfiprintf_r+0x50>
 800ba90:	ebba 0b04 	subs.w	fp, sl, r4
 800ba94:	d00b      	beq.n	800baae <_svfiprintf_r+0x7a>
 800ba96:	465b      	mov	r3, fp
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f7ff ff6e 	bl	800b97e <__ssputs_r>
 800baa2:	3001      	adds	r0, #1
 800baa4:	f000 80aa 	beq.w	800bbfc <_svfiprintf_r+0x1c8>
 800baa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baaa:	445a      	add	r2, fp
 800baac:	9209      	str	r2, [sp, #36]	; 0x24
 800baae:	f89a 3000 	ldrb.w	r3, [sl]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 80a2 	beq.w	800bbfc <_svfiprintf_r+0x1c8>
 800bab8:	2300      	movs	r3, #0
 800baba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800babe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bac2:	f10a 0a01 	add.w	sl, sl, #1
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bace:	931a      	str	r3, [sp, #104]	; 0x68
 800bad0:	4654      	mov	r4, sl
 800bad2:	2205      	movs	r2, #5
 800bad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad8:	4851      	ldr	r0, [pc, #324]	; (800bc20 <_svfiprintf_r+0x1ec>)
 800bada:	f7f4 fb89 	bl	80001f0 <memchr>
 800bade:	9a04      	ldr	r2, [sp, #16]
 800bae0:	b9d8      	cbnz	r0, 800bb1a <_svfiprintf_r+0xe6>
 800bae2:	06d0      	lsls	r0, r2, #27
 800bae4:	bf44      	itt	mi
 800bae6:	2320      	movmi	r3, #32
 800bae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baec:	0711      	lsls	r1, r2, #28
 800baee:	bf44      	itt	mi
 800baf0:	232b      	movmi	r3, #43	; 0x2b
 800baf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bafa:	2b2a      	cmp	r3, #42	; 0x2a
 800bafc:	d015      	beq.n	800bb2a <_svfiprintf_r+0xf6>
 800bafe:	9a07      	ldr	r2, [sp, #28]
 800bb00:	4654      	mov	r4, sl
 800bb02:	2000      	movs	r0, #0
 800bb04:	f04f 0c0a 	mov.w	ip, #10
 800bb08:	4621      	mov	r1, r4
 800bb0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb0e:	3b30      	subs	r3, #48	; 0x30
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d94e      	bls.n	800bbb2 <_svfiprintf_r+0x17e>
 800bb14:	b1b0      	cbz	r0, 800bb44 <_svfiprintf_r+0x110>
 800bb16:	9207      	str	r2, [sp, #28]
 800bb18:	e014      	b.n	800bb44 <_svfiprintf_r+0x110>
 800bb1a:	eba0 0308 	sub.w	r3, r0, r8
 800bb1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb22:	4313      	orrs	r3, r2
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	46a2      	mov	sl, r4
 800bb28:	e7d2      	b.n	800bad0 <_svfiprintf_r+0x9c>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	1d19      	adds	r1, r3, #4
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	9103      	str	r1, [sp, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfbb      	ittet	lt
 800bb36:	425b      	neglt	r3, r3
 800bb38:	f042 0202 	orrlt.w	r2, r2, #2
 800bb3c:	9307      	strge	r3, [sp, #28]
 800bb3e:	9307      	strlt	r3, [sp, #28]
 800bb40:	bfb8      	it	lt
 800bb42:	9204      	strlt	r2, [sp, #16]
 800bb44:	7823      	ldrb	r3, [r4, #0]
 800bb46:	2b2e      	cmp	r3, #46	; 0x2e
 800bb48:	d10c      	bne.n	800bb64 <_svfiprintf_r+0x130>
 800bb4a:	7863      	ldrb	r3, [r4, #1]
 800bb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb4e:	d135      	bne.n	800bbbc <_svfiprintf_r+0x188>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	9203      	str	r2, [sp, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bfb8      	it	lt
 800bb5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb60:	3402      	adds	r4, #2
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc30 <_svfiprintf_r+0x1fc>
 800bb68:	7821      	ldrb	r1, [r4, #0]
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	f7f4 fb3f 	bl	80001f0 <memchr>
 800bb72:	b140      	cbz	r0, 800bb86 <_svfiprintf_r+0x152>
 800bb74:	2340      	movs	r3, #64	; 0x40
 800bb76:	eba0 000a 	sub.w	r0, r0, sl
 800bb7a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	4303      	orrs	r3, r0
 800bb82:	3401      	adds	r4, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8a:	4826      	ldr	r0, [pc, #152]	; (800bc24 <_svfiprintf_r+0x1f0>)
 800bb8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb90:	2206      	movs	r2, #6
 800bb92:	f7f4 fb2d 	bl	80001f0 <memchr>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d038      	beq.n	800bc0c <_svfiprintf_r+0x1d8>
 800bb9a:	4b23      	ldr	r3, [pc, #140]	; (800bc28 <_svfiprintf_r+0x1f4>)
 800bb9c:	bb1b      	cbnz	r3, 800bbe6 <_svfiprintf_r+0x1b2>
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	3307      	adds	r3, #7
 800bba2:	f023 0307 	bic.w	r3, r3, #7
 800bba6:	3308      	adds	r3, #8
 800bba8:	9303      	str	r3, [sp, #12]
 800bbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbac:	4433      	add	r3, r6
 800bbae:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb0:	e767      	b.n	800ba82 <_svfiprintf_r+0x4e>
 800bbb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	2001      	movs	r0, #1
 800bbba:	e7a5      	b.n	800bb08 <_svfiprintf_r+0xd4>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	9305      	str	r3, [sp, #20]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	f04f 0c0a 	mov.w	ip, #10
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbce:	3a30      	subs	r2, #48	; 0x30
 800bbd0:	2a09      	cmp	r2, #9
 800bbd2:	d903      	bls.n	800bbdc <_svfiprintf_r+0x1a8>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0c5      	beq.n	800bb64 <_svfiprintf_r+0x130>
 800bbd8:	9105      	str	r1, [sp, #20]
 800bbda:	e7c3      	b.n	800bb64 <_svfiprintf_r+0x130>
 800bbdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e7f0      	b.n	800bbc8 <_svfiprintf_r+0x194>
 800bbe6:	ab03      	add	r3, sp, #12
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	462a      	mov	r2, r5
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <_svfiprintf_r+0x1f8>)
 800bbee:	a904      	add	r1, sp, #16
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	f3af 8000 	nop.w
 800bbf6:	1c42      	adds	r2, r0, #1
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	d1d6      	bne.n	800bbaa <_svfiprintf_r+0x176>
 800bbfc:	89ab      	ldrh	r3, [r5, #12]
 800bbfe:	065b      	lsls	r3, r3, #25
 800bc00:	f53f af2c 	bmi.w	800ba5c <_svfiprintf_r+0x28>
 800bc04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc06:	b01d      	add	sp, #116	; 0x74
 800bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0c:	ab03      	add	r3, sp, #12
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	462a      	mov	r2, r5
 800bc12:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <_svfiprintf_r+0x1f8>)
 800bc14:	a904      	add	r1, sp, #16
 800bc16:	4638      	mov	r0, r7
 800bc18:	f7fe ff38 	bl	800aa8c <_printf_i>
 800bc1c:	e7eb      	b.n	800bbf6 <_svfiprintf_r+0x1c2>
 800bc1e:	bf00      	nop
 800bc20:	0800cdbc 	.word	0x0800cdbc
 800bc24:	0800cdc6 	.word	0x0800cdc6
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	0800b97f 	.word	0x0800b97f
 800bc30:	0800cdc2 	.word	0x0800cdc2

0800bc34 <_read_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d07      	ldr	r5, [pc, #28]	; (800bc54 <_read_r+0x20>)
 800bc38:	4604      	mov	r4, r0
 800bc3a:	4608      	mov	r0, r1
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	2200      	movs	r2, #0
 800bc40:	602a      	str	r2, [r5, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	f7f4 fe2d 	bl	80008a2 <_read>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_read_r+0x1e>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_read_r+0x1e>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	20000308 	.word	0x20000308

0800bc58 <_fstat_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d07      	ldr	r5, [pc, #28]	; (800bc78 <_fstat_r+0x20>)
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	4608      	mov	r0, r1
 800bc62:	4611      	mov	r1, r2
 800bc64:	602b      	str	r3, [r5, #0]
 800bc66:	f7f4 fe61 	bl	800092c <_fstat>
 800bc6a:	1c43      	adds	r3, r0, #1
 800bc6c:	d102      	bne.n	800bc74 <_fstat_r+0x1c>
 800bc6e:	682b      	ldr	r3, [r5, #0]
 800bc70:	b103      	cbz	r3, 800bc74 <_fstat_r+0x1c>
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	bd38      	pop	{r3, r4, r5, pc}
 800bc76:	bf00      	nop
 800bc78:	20000308 	.word	0x20000308

0800bc7c <_isatty_r>:
 800bc7c:	b538      	push	{r3, r4, r5, lr}
 800bc7e:	4d06      	ldr	r5, [pc, #24]	; (800bc98 <_isatty_r+0x1c>)
 800bc80:	2300      	movs	r3, #0
 800bc82:	4604      	mov	r4, r0
 800bc84:	4608      	mov	r0, r1
 800bc86:	602b      	str	r3, [r5, #0]
 800bc88:	f7f4 fe60 	bl	800094c <_isatty>
 800bc8c:	1c43      	adds	r3, r0, #1
 800bc8e:	d102      	bne.n	800bc96 <_isatty_r+0x1a>
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	b103      	cbz	r3, 800bc96 <_isatty_r+0x1a>
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	bd38      	pop	{r3, r4, r5, pc}
 800bc98:	20000308 	.word	0x20000308

0800bc9c <_malloc_usable_size_r>:
 800bc9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca0:	1f18      	subs	r0, r3, #4
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bfbc      	itt	lt
 800bca6:	580b      	ldrlt	r3, [r1, r0]
 800bca8:	18c0      	addlt	r0, r0, r3
 800bcaa:	4770      	bx	lr

0800bcac <_init>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	bf00      	nop
 800bcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb2:	bc08      	pop	{r3}
 800bcb4:	469e      	mov	lr, r3
 800bcb6:	4770      	bx	lr

0800bcb8 <_fini>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	bf00      	nop
 800bcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcbe:	bc08      	pop	{r3}
 800bcc0:	469e      	mov	lr, r3
 800bcc2:	4770      	bx	lr
