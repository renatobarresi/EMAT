
EMAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001768  0800bde8  0800bde8  0001bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d550  0800d550  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800d550  0800d550  0001d550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d558  0800d558  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0800d558  0800d558  0001d558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d57c  0800d57c  0001d57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800d584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000002d8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026096  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000449d  00000000  00000000  0004614e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  0004a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  0004b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002972f  00000000  00000000  0004c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153c3  00000000  00000000  0007607f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed7c3  00000000  00000000  0008b442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00178c05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f110  00000000  00000000  00178c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bdd0 	.word	0x0800bdd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800bdd0 	.word	0x0800bdd0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c8:	f000 b988 	b.w	80005dc <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f81a 	bl	800030c <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__popcountsi2>:
 80002e4:	0843      	lsrs	r3, r0, #1
 80002e6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	0883      	lsrs	r3, r0, #2
 80002ee:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002f2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002f6:	4418      	add	r0, r3
 80002f8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002fc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000300:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000304:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000308:	0e00      	lsrs	r0, r0, #24
 800030a:	4770      	bx	lr

0800030c <__udivmoddi4>:
 800030c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000310:	9d08      	ldr	r5, [sp, #32]
 8000312:	4604      	mov	r4, r0
 8000314:	468e      	mov	lr, r1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d14d      	bne.n	80003b6 <__udivmoddi4+0xaa>
 800031a:	428a      	cmp	r2, r1
 800031c:	4694      	mov	ip, r2
 800031e:	d969      	bls.n	80003f4 <__udivmoddi4+0xe8>
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	b152      	cbz	r2, 800033c <__udivmoddi4+0x30>
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	f1c2 0120 	rsb	r1, r2, #32
 800032e:	fa20 f101 	lsr.w	r1, r0, r1
 8000332:	fa0c fc02 	lsl.w	ip, ip, r2
 8000336:	ea41 0e03 	orr.w	lr, r1, r3
 800033a:	4094      	lsls	r4, r2
 800033c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000340:	0c21      	lsrs	r1, r4, #16
 8000342:	fbbe f6f8 	udiv	r6, lr, r8
 8000346:	fa1f f78c 	uxth.w	r7, ip
 800034a:	fb08 e316 	mls	r3, r8, r6, lr
 800034e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000352:	fb06 f107 	mul.w	r1, r6, r7
 8000356:	4299      	cmp	r1, r3
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x64>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 811f 	bcs.w	80005a4 <__udivmoddi4+0x298>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 811c 	bls.w	80005a4 <__udivmoddi4+0x298>
 800036c:	3e02      	subs	r6, #2
 800036e:	4463      	add	r3, ip
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 f707 	mul.w	r7, r0, r7
 8000384:	42a7      	cmp	r7, r4
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x92>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	f080 810a 	bcs.w	80005a8 <__udivmoddi4+0x29c>
 8000394:	42a7      	cmp	r7, r4
 8000396:	f240 8107 	bls.w	80005a8 <__udivmoddi4+0x29c>
 800039a:	4464      	add	r4, ip
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	1be4      	subs	r4, r4, r7
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa4>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xc2>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80ef 	beq.w	800059e <__udivmoddi4+0x292>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x160>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd4>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80f9 	bhi.w	80005d2 <__udivmoddi4+0x2c6>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	469e      	mov	lr, r3
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa4>
 80003ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa4>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xec>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 8092 	bne.w	8000526 <__udivmoddi4+0x21a>
 8000402:	eba1 010c 	sub.w	r1, r1, ip
 8000406:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040a:	fa1f fe8c 	uxth.w	lr, ip
 800040e:	2601      	movs	r6, #1
 8000410:	0c20      	lsrs	r0, r4, #16
 8000412:	fbb1 f3f7 	udiv	r3, r1, r7
 8000416:	fb07 1113 	mls	r1, r7, r3, r1
 800041a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041e:	fb0e f003 	mul.w	r0, lr, r3
 8000422:	4288      	cmp	r0, r1
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x12c>
 8000426:	eb1c 0101 	adds.w	r1, ip, r1
 800042a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x12a>
 8000430:	4288      	cmp	r0, r1
 8000432:	f200 80cb 	bhi.w	80005cc <__udivmoddi4+0x2c0>
 8000436:	4643      	mov	r3, r8
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1110 	mls	r1, r7, r0, r1
 8000444:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000448:	fb0e fe00 	mul.w	lr, lr, r0
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x156>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d202      	bcs.n	8000460 <__udivmoddi4+0x154>
 800045a:	45a6      	cmp	lr, r4
 800045c:	f200 80bb 	bhi.w	80005d6 <__udivmoddi4+0x2ca>
 8000460:	4608      	mov	r0, r1
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046a:	e79c      	b.n	80003a6 <__udivmoddi4+0x9a>
 800046c:	f1c6 0720 	rsb	r7, r6, #32
 8000470:	40b3      	lsls	r3, r6
 8000472:	fa22 fc07 	lsr.w	ip, r2, r7
 8000476:	ea4c 0c03 	orr.w	ip, ip, r3
 800047a:	fa20 f407 	lsr.w	r4, r0, r7
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	431c      	orrs	r4, r3
 8000484:	40f9      	lsrs	r1, r7
 8000486:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048a:	fa00 f306 	lsl.w	r3, r0, r6
 800048e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000492:	0c20      	lsrs	r0, r4, #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fb09 1118 	mls	r1, r9, r8, r1
 800049c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a0:	fb08 f00e 	mul.w	r0, r8, lr
 80004a4:	4288      	cmp	r0, r1
 80004a6:	fa02 f206 	lsl.w	r2, r2, r6
 80004aa:	d90b      	bls.n	80004c4 <__udivmoddi4+0x1b8>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b4:	f080 8088 	bcs.w	80005c8 <__udivmoddi4+0x2bc>
 80004b8:	4288      	cmp	r0, r1
 80004ba:	f240 8085 	bls.w	80005c8 <__udivmoddi4+0x2bc>
 80004be:	f1a8 0802 	sub.w	r8, r8, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	1a09      	subs	r1, r1, r0
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004cc:	fb09 1110 	mls	r1, r9, r0, r1
 80004d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d8:	458e      	cmp	lr, r1
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1e2>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e4:	d26c      	bcs.n	80005c0 <__udivmoddi4+0x2b4>
 80004e6:	458e      	cmp	lr, r1
 80004e8:	d96a      	bls.n	80005c0 <__udivmoddi4+0x2b4>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4461      	add	r1, ip
 80004ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f2:	fba0 9402 	umull	r9, r4, r0, r2
 80004f6:	eba1 010e 	sub.w	r1, r1, lr
 80004fa:	42a1      	cmp	r1, r4
 80004fc:	46c8      	mov	r8, r9
 80004fe:	46a6      	mov	lr, r4
 8000500:	d356      	bcc.n	80005b0 <__udivmoddi4+0x2a4>
 8000502:	d053      	beq.n	80005ac <__udivmoddi4+0x2a0>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x212>
 8000506:	ebb3 0208 	subs.w	r2, r3, r8
 800050a:	eb61 010e 	sbc.w	r1, r1, lr
 800050e:	fa01 f707 	lsl.w	r7, r1, r7
 8000512:	fa22 f306 	lsr.w	r3, r2, r6
 8000516:	40f1      	lsrs	r1, r6
 8000518:	431f      	orrs	r7, r3
 800051a:	e9c5 7100 	strd	r7, r1, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	40d8      	lsrs	r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa21 f303 	lsr.w	r3, r1, r3
 8000534:	4091      	lsls	r1, r2
 8000536:	4301      	orrs	r1, r0
 8000538:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fbb3 f0f7 	udiv	r0, r3, r7
 8000544:	fb07 3610 	mls	r6, r7, r0, r3
 8000548:	0c0b      	lsrs	r3, r1, #16
 800054a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054e:	fb00 f60e 	mul.w	r6, r0, lr
 8000552:	429e      	cmp	r6, r3
 8000554:	fa04 f402 	lsl.w	r4, r4, r2
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x260>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000562:	d22f      	bcs.n	80005c4 <__udivmoddi4+0x2b8>
 8000564:	429e      	cmp	r6, r3
 8000566:	d92d      	bls.n	80005c4 <__udivmoddi4+0x2b8>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1b9b      	subs	r3, r3, r6
 800056e:	b289      	uxth	r1, r1
 8000570:	fbb3 f6f7 	udiv	r6, r3, r7
 8000574:	fb07 3316 	mls	r3, r7, r6, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb06 f30e 	mul.w	r3, r6, lr
 8000580:	428b      	cmp	r3, r1
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x28a>
 8000584:	eb1c 0101 	adds.w	r1, ip, r1
 8000588:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800058c:	d216      	bcs.n	80005bc <__udivmoddi4+0x2b0>
 800058e:	428b      	cmp	r3, r1
 8000590:	d914      	bls.n	80005bc <__udivmoddi4+0x2b0>
 8000592:	3e02      	subs	r6, #2
 8000594:	4461      	add	r1, ip
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800059c:	e738      	b.n	8000410 <__udivmoddi4+0x104>
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e705      	b.n	80003b0 <__udivmoddi4+0xa4>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e3      	b.n	8000370 <__udivmoddi4+0x64>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6f8      	b.n	800039e <__udivmoddi4+0x92>
 80005ac:	454b      	cmp	r3, r9
 80005ae:	d2a9      	bcs.n	8000504 <__udivmoddi4+0x1f8>
 80005b0:	ebb9 0802 	subs.w	r8, r9, r2
 80005b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7a3      	b.n	8000504 <__udivmoddi4+0x1f8>
 80005bc:	4646      	mov	r6, r8
 80005be:	e7ea      	b.n	8000596 <__udivmoddi4+0x28a>
 80005c0:	4620      	mov	r0, r4
 80005c2:	e794      	b.n	80004ee <__udivmoddi4+0x1e2>
 80005c4:	4640      	mov	r0, r8
 80005c6:	e7d1      	b.n	800056c <__udivmoddi4+0x260>
 80005c8:	46d0      	mov	r8, sl
 80005ca:	e77b      	b.n	80004c4 <__udivmoddi4+0x1b8>
 80005cc:	3b02      	subs	r3, #2
 80005ce:	4461      	add	r1, ip
 80005d0:	e732      	b.n	8000438 <__udivmoddi4+0x12c>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e709      	b.n	80003ea <__udivmoddi4+0xde>
 80005d6:	4464      	add	r4, ip
 80005d8:	3802      	subs	r0, #2
 80005da:	e742      	b.n	8000462 <__udivmoddi4+0x156>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <errorHandler>:
	while(1);
#endif
}

void errorHandler(const char* fileName, int lineNum, errorSeverity errorType, const char* errorName)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b0cb      	sub	sp, #300	; 0x12c
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80005ea:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 80005ee:	6020      	str	r0, [r4, #0]
 80005f0:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80005f4:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80005f8:	6001      	str	r1, [r0, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000600:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800060a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800060e:	460a      	mov	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    switch (errorType)
 8000612:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000616:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d12c      	bne.n	800067a <errorHandler+0x9a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
    {
        case ERROR_FATAL:
            __disable_irq();

            fileSystem& fs = fileSystem::getInstance();
 8000624:	f008 fcbc 	bl	8008fa0 <_ZN10fileSystem11getInstanceEv>
 8000628:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

            char buffer[BUFFER_SIZE];
            snprintf(buffer, BUFFER_SIZE, "File: %s\nLine: %d\nType: %d\nName: %s\n",
 800062c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000630:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800063a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800063e:	f107 0014 	add.w	r0, r7, #20
 8000642:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000646:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 800064a:	6809      	ldr	r1, [r1, #0]
 800064c:	9102      	str	r1, [sp, #8]
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000654:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <errorHandler+0xa4>)
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	f00a fc36 	bl	800aed4 <sniprintf>
                     fileName, lineNum, errorType, errorName);

            fs.write(errorLogFileName, buffer);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	461a      	mov	r2, r3
 800066e:	4906      	ldr	r1, [pc, #24]	; (8000688 <errorHandler+0xa8>)
 8000670:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000674:	f008 fcbc 	bl	8008ff0 <_ZN10fileSystem5writeEPKcS1_>

            while (1);
 8000678:	e7fe      	b.n	8000678 <errorHandler+0x98>
    }
    /* USER CODE END Error_Handler_Debug */
}
 800067a:	bf00      	nop
 800067c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	0800bdf8 	.word	0x0800bdf8
 8000688:	0800bde8 	.word	0x0800bde8

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 f9e8 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f804 	bl	80006a0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  main_cpp();
 8000698:	f009 f84e 	bl	8009738 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x10>
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f009 ffce 	bl	800a650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xc8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a26      	ldr	r2, [pc, #152]	; (8000768 <SystemClock_Config+0xc8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <SystemClock_Config+0xc8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ec:	4a1f      	ldr	r2, [pc, #124]	; (800076c <SystemClock_Config+0xcc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fcc3 	bl	80010a0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d005      	beq.n	800072c <SystemClock_Config+0x8c>
  {
	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "Osciator init error");
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <SystemClock_Config+0xd0>)
 8000722:	2200      	movs	r2, #0
 8000724:	217c      	movs	r1, #124	; 0x7c
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <SystemClock_Config+0xd4>)
 8000728:	f7ff ff5a 	bl	80005e0 <errorHandler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f000 ff22 	bl	8001590 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d005      	beq.n	800075e <SystemClock_Config+0xbe>
  {
	errorHandler(__FILE__, __LINE__, ERROR_FATAL, "Error init CPU, AHB and APB");
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <SystemClock_Config+0xd8>)
 8000754:	2200      	movs	r2, #0
 8000756:	218a      	movs	r1, #138	; 0x8a
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <SystemClock_Config+0xd4>)
 800075a:	f7ff ff41 	bl	80005e0 <errorHandler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000
 8000770:	0800be20 	.word	0x0800be20
 8000774:	0800be34 	.word	0x0800be34
 8000778:	0800be48 	.word	0x0800be48

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>
	...

080007d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "HardFault error");
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HardFault_Handler+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	2158      	movs	r1, #88	; 0x58
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <HardFault_Handler+0x18>)
 80007e0:	f7ff fefe 	bl	80005e0 <errorHandler>
  /* USER CODE END HardFault_IRQn 0 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	0800be64 	.word	0x0800be64
 80007ec:	0800be74 	.word	0x0800be74

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "MemManage error");
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <MemManage_Handler+0x14>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	2163      	movs	r1, #99	; 0x63
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <MemManage_Handler+0x18>)
 80007fc:	f7ff fef0 	bl	80005e0 <errorHandler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x10>
 8000802:	bf00      	nop
 8000804:	0800be90 	.word	0x0800be90
 8000808:	0800be74 	.word	0x0800be74

0800080c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "BusFault error");
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <BusFault_Handler+0x14>)
 8000812:	2200      	movs	r2, #0
 8000814:	2172      	movs	r1, #114	; 0x72
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <BusFault_Handler+0x18>)
 8000818:	f7ff fee2 	bl	80005e0 <errorHandler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <BusFault_Handler+0x10>
 800081e:	bf00      	nop
 8000820:	0800bea0 	.word	0x0800bea0
 8000824:	0800be74 	.word	0x0800be74

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  errorHandler(__FILE__, __LINE__, ERROR_FATAL, "UsageFault error");
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <UsageFault_Handler+0x14>)
 800082e:	2200      	movs	r2, #0
 8000830:	2181      	movs	r1, #129	; 0x81
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <UsageFault_Handler+0x18>)
 8000834:	f7ff fed4 	bl	80005e0 <errorHandler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x10>
 800083a:	bf00      	nop
 800083c:	0800beb0 	.word	0x0800beb0
 8000840:	0800be74 	.word	0x0800be74

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f957 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800085a:	f001 ffe5 	bl	8002828 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}

08000862 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
	return 1;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <_kill>:

int _kill(int pid, int sig)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800087c:	f009 fe64 	bl	800a548 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	2216      	movs	r2, #22
 8000884:	601a      	str	r2, [r3, #0]
	return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_exit>:

void _exit (int status)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800089a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ffe7 	bl	8000872 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008a4:	e7fe      	b.n	80008a4 <_exit+0x12>

080008a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e00a      	b.n	80008ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008b8:	f3af 8000 	nop.w
 80008bc:	4601      	mov	r1, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	60ba      	str	r2, [r7, #8]
 80008c4:	b2ca      	uxtb	r2, r1
 80008c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbf0      	blt.n	80008b8 <_read+0x12>
	}

return len;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e009      	b.n	8000906 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	60ba      	str	r2, [r7, #8]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	429a      	cmp	r2, r3
 800090c:	dbf1      	blt.n	80008f2 <_write+0x12>
	}
	return len;
 800090e:	687b      	ldr	r3, [r7, #4]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_close>:

int _close(int file)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	return -1;
 8000920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000940:	605a      	str	r2, [r3, #4]
	return 0;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_isatty>:

int _isatty(int file)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	return 1;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
	return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f009 fdca 	bl	800a548 <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20030000 	.word	0x20030000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	200000a4 	.word	0x200000a4
 80009e8:	20000360 	.word	0x20000360

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3a:	f7ff ffd7 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f009 fd9b 	bl	800a578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fe23 	bl	800068c <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000a54:	0800d584 	.word	0x0800d584
  ldr r2, =_sbss
 8000a58:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000a5c:	20000360 	.word	0x20000360

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_Init+0x40>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_Init+0x40>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x40>)
 8000a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f90d 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fe70 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f917 	bl	8000cfa <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae4:	f000 f8ed 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000004 	.word	0x20000004
 8000b00:	2000000c 	.word	0x2000000c
 8000b04:	20000008 	.word	0x20000008

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	200000a8 	.word	0x200000a8

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200000a8 	.word	0x200000a8

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff47 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff5c 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffb0 	bl	8000c68 <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e177      	b.n	8001020 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f040 8166 	bne.w	800101a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d005      	beq.n	8000d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d130      	bne.n	8000dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	f003 0201 	and.w	r2, r3, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d017      	beq.n	8000e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d123      	bne.n	8000e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	69b9      	ldr	r1, [r7, #24]
 8000e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0203 	and.w	r2, r3, #3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80c0 	beq.w	800101a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b66      	ldr	r3, [pc, #408]	; (8001038 <HAL_GPIO_Init+0x324>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a65      	ldr	r2, [pc, #404]	; (8001038 <HAL_GPIO_Init+0x324>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b63      	ldr	r3, [pc, #396]	; (8001038 <HAL_GPIO_Init+0x324>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb6:	4a61      	ldr	r2, [pc, #388]	; (800103c <HAL_GPIO_Init+0x328>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a58      	ldr	r2, [pc, #352]	; (8001040 <HAL_GPIO_Init+0x32c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d037      	beq.n	8000f52 <HAL_GPIO_Init+0x23e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d031      	beq.n	8000f4e <HAL_GPIO_Init+0x23a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_GPIO_Init+0x334>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x236>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a55      	ldr	r2, [pc, #340]	; (800104c <HAL_GPIO_Init+0x338>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x232>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a54      	ldr	r2, [pc, #336]	; (8001050 <HAL_GPIO_Init+0x33c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x22e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a53      	ldr	r2, [pc, #332]	; (8001054 <HAL_GPIO_Init+0x340>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x22a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a52      	ldr	r2, [pc, #328]	; (8001058 <HAL_GPIO_Init+0x344>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x226>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a51      	ldr	r2, [pc, #324]	; (800105c <HAL_GPIO_Init+0x348>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x222>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a50      	ldr	r2, [pc, #320]	; (8001060 <HAL_GPIO_Init+0x34c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x21e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x21a>
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	e012      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f2e:	230a      	movs	r3, #10
 8000f30:	e010      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f32:	2308      	movs	r3, #8
 8000f34:	e00e      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f52:	2300      	movs	r3, #0
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	4935      	ldr	r1, [pc, #212]	; (800103c <HAL_GPIO_Init+0x328>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b3d      	ldr	r3, [pc, #244]	; (8001068 <HAL_GPIO_Init+0x354>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a34      	ldr	r2, [pc, #208]	; (8001068 <HAL_GPIO_Init+0x354>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b32      	ldr	r3, [pc, #200]	; (8001068 <HAL_GPIO_Init+0x354>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a29      	ldr	r2, [pc, #164]	; (8001068 <HAL_GPIO_Init+0x354>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc6:	4b28      	ldr	r3, [pc, #160]	; (8001068 <HAL_GPIO_Init+0x354>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fea:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <HAL_GPIO_Init+0x354>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_GPIO_Init+0x354>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_GPIO_Init+0x354>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f67f ae84 	bls.w	8000d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40021400 	.word	0x40021400
 8001058:	40021800 	.word	0x40021800
 800105c:	40021c00 	.word	0x40021c00
 8001060:	40022000 	.word	0x40022000
 8001064:	40022400 	.word	0x40022400
 8001068:	40013c00 	.word	0x40013c00

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e267      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d075      	beq.n	80011aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010be:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d00c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	4b85      	ldr	r3, [pc, #532]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	4b82      	ldr	r3, [pc, #520]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010e2:	d10b      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	4b7e      	ldr	r3, [pc, #504]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d05b      	beq.n	80011a8 <HAL_RCC_OscConfig+0x108>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d157      	bne.n	80011a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e242      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d106      	bne.n	8001114 <HAL_RCC_OscConfig+0x74>
 8001106:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a75      	ldr	r2, [pc, #468]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6f      	ldr	r2, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6c      	ldr	r2, [pc, #432]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001138:	4b69      	ldr	r3, [pc, #420]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a68      	ldr	r2, [pc, #416]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b66      	ldr	r3, [pc, #408]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a65      	ldr	r2, [pc, #404]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fcea 	bl	8000b30 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fce6 	bl	8000b30 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e207      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xc0>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fcd6 	bl	8000b30 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fcd2 	bl	8000b30 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1f3      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0xe8>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b6:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d11c      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e1c7      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4937      	ldr	r1, [pc, #220]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	e03a      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001210:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <HAL_RCC_OscConfig+0x244>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff fc8b 	bl	8000b30 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fc87 	bl	8000b30 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1a8      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4925      	ldr	r1, [pc, #148]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x244>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fc6a 	bl	8000b30 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc66 	bl	8000b30 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e187      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d036      	beq.n	80012f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d016      	beq.n	80012c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_RCC_OscConfig+0x248>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fc4a 	bl	8000b30 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc46 	bl	8000b30 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e167      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x200>
 80012be:	e01b      	b.n	80012f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_OscConfig+0x248>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fc33 	bl	8000b30 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	e00e      	b.n	80012ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc2f 	bl	8000b30 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d907      	bls.n	80012ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e150      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
 80012e0:	40023800 	.word	0x40023800
 80012e4:	42470000 	.word	0x42470000
 80012e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ea      	bne.n	80012ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8097 	beq.w	8001434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130a:	4b81      	ldr	r3, [pc, #516]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a7c      	ldr	r2, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001342:	4b74      	ldr	r3, [pc, #464]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a73      	ldr	r2, [pc, #460]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134e:	f7ff fbef 	bl	8000b30 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001356:	f7ff fbeb 	bl	8000b30 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e10c      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x2ea>
 800137c:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a63      	ldr	r2, [pc, #396]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	e01c      	b.n	80013c4 <HAL_RCC_OscConfig+0x324>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x30c>
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a5e      	ldr	r2, [pc, #376]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
 800139e:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x324>
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	4a57      	ldr	r2, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6713      	str	r3, [r2, #112]	; 0x70
 80013b8:	4b55      	ldr	r3, [pc, #340]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	4a54      	ldr	r2, [pc, #336]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 0304 	bic.w	r3, r3, #4
 80013c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d015      	beq.n	80013f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fbb0 	bl	8000b30 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f7ff fbac 	bl	8000b30 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0cb      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ea:	4b49      	ldr	r3, [pc, #292]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0ee      	beq.n	80013d4 <HAL_RCC_OscConfig+0x334>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb9a 	bl	8000b30 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fb96 	bl	8000b30 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	; 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e0b5      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ee      	bne.n	8001400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a38      	ldr	r2, [pc, #224]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800142e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a1 	beq.w	8001580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b08      	cmp	r3, #8
 8001448:	d05c      	beq.n	8001504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d141      	bne.n	80014d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x478>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fb6a 	bl	8000b30 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fb66 	bl	8000b30 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e087      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	3b01      	subs	r3, #1
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	061b      	lsls	r3, r3, #24
 80014a2:	491b      	ldr	r1, [pc, #108]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x478>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb3f 	bl	8000b30 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fb3b 	bl	8000b30 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e05c      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x416>
 80014d4:	e054      	b.n	8001580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb28 	bl	8000b30 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fb24 	bl	8000b30 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e045      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x444>
 8001502:	e03d      	b.n	8001580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d107      	bne.n	800151c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e038      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000
 8001518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x4ec>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d028      	beq.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d121      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d11a      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800154c:	4013      	ands	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001554:	4293      	cmp	r3, r2
 8001556:	d111      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	3b01      	subs	r3, #1
 8001566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0cc      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 030f 	and.w	r3, r3, #15
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d90c      	bls.n	80015cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a58      	ldr	r2, [pc, #352]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	494d      	ldr	r1, [pc, #308]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d044      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d119      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e07f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d003      	beq.n	800164e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	2b03      	cmp	r3, #3
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e067      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4934      	ldr	r1, [pc, #208]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fa56 	bl	8000b30 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff fa52 	bl	8000b30 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e04f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 020c 	and.w	r2, r3, #12
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1eb      	bne.n	8001688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d20c      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e032      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4916      	ldr	r1, [pc, #88]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001716:	f000 f821 	bl	800175c <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490a      	ldr	r1, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f9b6 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40023800 	.word	0x40023800
 8001750:	0800c8ec 	.word	0x0800c8ec
 8001754:	20000004 	.word	0x20000004
 8001758:	20000008 	.word	0x20000008

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001760:	b094      	sub	sp, #80	; 0x50
 8001762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	647b      	str	r3, [r7, #68]	; 0x44
 8001768:	2300      	movs	r3, #0
 800176a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800176c:	2300      	movs	r3, #0
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001774:	4b79      	ldr	r3, [pc, #484]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d00d      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x40>
 8001780:	2b08      	cmp	r3, #8
 8001782:	f200 80e1 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x34>
 800178a:	2b04      	cmp	r3, #4
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x3a>
 800178e:	e0db      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_GetSysClockFreq+0x204>)
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001794:	e0db      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001796:	4b73      	ldr	r3, [pc, #460]	; (8001964 <HAL_RCC_GetSysClockFreq+0x208>)
 8001798:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800179a:	e0d8      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179c:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a6:	4b6d      	ldr	r3, [pc, #436]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d063      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b2:	4b6a      	ldr	r3, [pc, #424]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	099b      	lsrs	r3, r3, #6
 80017b8:	2200      	movs	r2, #0
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80017bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017ce:	4622      	mov	r2, r4
 80017d0:	462b      	mov	r3, r5
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	0159      	lsls	r1, r3, #5
 80017dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e0:	0150      	lsls	r0, r2, #5
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4621      	mov	r1, r4
 80017e8:	1a51      	subs	r1, r2, r1
 80017ea:	6139      	str	r1, [r7, #16]
 80017ec:	4629      	mov	r1, r5
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001800:	4659      	mov	r1, fp
 8001802:	018b      	lsls	r3, r1, #6
 8001804:	4651      	mov	r1, sl
 8001806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180a:	4651      	mov	r1, sl
 800180c:	018a      	lsls	r2, r1, #6
 800180e:	4651      	mov	r1, sl
 8001810:	ebb2 0801 	subs.w	r8, r2, r1
 8001814:	4659      	mov	r1, fp
 8001816:	eb63 0901 	sbc.w	r9, r3, r1
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182e:	4690      	mov	r8, r2
 8001830:	4699      	mov	r9, r3
 8001832:	4623      	mov	r3, r4
 8001834:	eb18 0303 	adds.w	r3, r8, r3
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	462b      	mov	r3, r5
 800183c:	eb49 0303 	adc.w	r3, r9, r3
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800184e:	4629      	mov	r1, r5
 8001850:	024b      	lsls	r3, r1, #9
 8001852:	4621      	mov	r1, r4
 8001854:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001858:	4621      	mov	r1, r4
 800185a:	024a      	lsls	r2, r1, #9
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001862:	2200      	movs	r2, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
 8001866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800186c:	f7fe fd22 	bl	80002b4 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001878:	e058      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	2200      	movs	r2, #0
 8001882:	4618      	mov	r0, r3
 8001884:	4611      	mov	r1, r2
 8001886:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001894:	4642      	mov	r2, r8
 8001896:	464b      	mov	r3, r9
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	0159      	lsls	r1, r3, #5
 80018a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a6:	0150      	lsls	r0, r2, #5
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4641      	mov	r1, r8
 80018ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b2:	4649      	mov	r1, r9
 80018b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018cc:	ebb2 040a 	subs.w	r4, r2, sl
 80018d0:	eb63 050b 	sbc.w	r5, r3, fp
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	00eb      	lsls	r3, r5, #3
 80018de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e2:	00e2      	lsls	r2, r4, #3
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	4643      	mov	r3, r8
 80018ea:	18e3      	adds	r3, r4, r3
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	464b      	mov	r3, r9
 80018f0:	eb45 0303 	adc.w	r3, r5, r3
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001902:	4629      	mov	r1, r5
 8001904:	028b      	lsls	r3, r1, #10
 8001906:	4621      	mov	r1, r4
 8001908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800190c:	4621      	mov	r1, r4
 800190e:	028a      	lsls	r2, r1, #10
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001916:	2200      	movs	r2, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	61fa      	str	r2, [r7, #28]
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	f7fe fcc8 	bl	80002b4 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	3301      	adds	r3, #1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800193c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800193e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001946:	e002      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetSysClockFreq+0x204>)
 800194a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001950:	4618      	mov	r0, r3
 8001952:	3750      	adds	r7, #80	; 0x50
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200

08001968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07b      	b.n	8001a72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	2b00      	cmp	r3, #0
 8001980:	d108      	bne.n	8001994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800198a:	d009      	beq.n	80019a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
 8001992:	e005      	b.n	80019a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f007 fd76 	bl	80094ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a24:	ea42 0103 	orr.w	r1, r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f003 0104 	and.w	r1, r3, #4
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f003 0210 	and.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b088      	sub	sp, #32
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_SPI_Transmit+0x22>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e126      	b.n	8001cea <HAL_SPI_Transmit+0x270>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aa4:	f7ff f844 	bl	8000b30 <HAL_GetTick>
 8001aa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d002      	beq.n	8001ac0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001aba:	2302      	movs	r3, #2
 8001abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001abe:	e10b      	b.n	8001cd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_SPI_Transmit+0x52>
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ad0:	e102      	b.n	8001cd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b18:	d10f      	bne.n	8001b3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b44:	2b40      	cmp	r3, #64	; 0x40
 8001b46:	d007      	beq.n	8001b58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b60:	d14b      	bne.n	8001bfa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_SPI_Transmit+0xf6>
 8001b6a:	8afb      	ldrh	r3, [r7, #22]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d13e      	bne.n	8001bee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	881a      	ldrh	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	1c9a      	adds	r2, r3, #2
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b94:	e02b      	b.n	8001bee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d112      	bne.n	8001bca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	1c9a      	adds	r2, r3, #2
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bc8:	e011      	b.n	8001bee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bca:	f7fe ffb1 	bl	8000b30 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d803      	bhi.n	8001be2 <HAL_SPI_Transmit+0x168>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be0:	d102      	bne.n	8001be8 <HAL_SPI_Transmit+0x16e>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bec:	e074      	b.n	8001cd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ce      	bne.n	8001b96 <HAL_SPI_Transmit+0x11c>
 8001bf8:	e04c      	b.n	8001c94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_SPI_Transmit+0x18e>
 8001c02:	8afb      	ldrh	r3, [r7, #22]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d140      	bne.n	8001c8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	330c      	adds	r3, #12
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c2e:	e02c      	b.n	8001c8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d113      	bne.n	8001c66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c64:	e011      	b.n	8001c8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c66:	f7fe ff63 	bl	8000b30 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d803      	bhi.n	8001c7e <HAL_SPI_Transmit+0x204>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c7c:	d102      	bne.n	8001c84 <HAL_SPI_Transmit+0x20a>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c88:	e026      	b.n	8001cd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1cd      	bne.n	8001c30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 fbcb 	bl	8002434 <SPI_EndRxTxTransaction>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
 8001cd4:	e000      	b.n	8001cd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001cd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b088      	sub	sp, #32
 8001cf6:	af02      	add	r7, sp, #8
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d0e:	d112      	bne.n	8001d36 <HAL_SPI_Receive+0x44>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10e      	bne.n	8001d36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	4613      	mov	r3, r2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f8f1 	bl	8001f14 <HAL_SPI_TransmitReceive>
 8001d32:	4603      	mov	r3, r0
 8001d34:	e0ea      	b.n	8001f0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_SPI_Receive+0x52>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e0e3      	b.n	8001f0c <HAL_SPI_Receive+0x21a>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d4c:	f7fe fef0 	bl	8000b30 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d62:	e0ca      	b.n	8001efa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_SPI_Receive+0x7e>
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d74:	e0c1      	b.n	8001efa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dbc:	d10f      	bne.n	8001dde <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d007      	beq.n	8001dfc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d162      	bne.n	8001eca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e04:	e02e      	b.n	8001e64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d115      	bne.n	8001e40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f103 020c 	add.w	r2, r3, #12
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e3e:	e011      	b.n	8001e64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e40:	f7fe fe76 	bl	8000b30 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d803      	bhi.n	8001e58 <HAL_SPI_Receive+0x166>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e56:	d102      	bne.n	8001e5e <HAL_SPI_Receive+0x16c>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e62:	e04a      	b.n	8001efa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1cb      	bne.n	8001e06 <HAL_SPI_Receive+0x114>
 8001e6e:	e031      	b.n	8001ed4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d113      	bne.n	8001ea6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	1c9a      	adds	r2, r3, #2
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ea4:	e011      	b.n	8001eca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea6:	f7fe fe43 	bl	8000b30 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d803      	bhi.n	8001ebe <HAL_SPI_Receive+0x1cc>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ebc:	d102      	bne.n	8001ec4 <HAL_SPI_Receive+0x1d2>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ec8:	e017      	b.n	8001efa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1cd      	bne.n	8001e70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa45 	bl	8002368 <SPI_EndRxTransaction>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
 8001ef6:	e000      	b.n	8001efa <HAL_SPI_Receive+0x208>
  }

error :
 8001ef8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f22:	2301      	movs	r3, #1
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_SPI_TransmitReceive+0x26>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e18a      	b.n	8002250 <HAL_SPI_TransmitReceive+0x33c>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f42:	f7fe fdf5 	bl	8000b30 <HAL_GetTick>
 8001f46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d00f      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x70>
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f6a:	d107      	bne.n	8001f7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d103      	bne.n	8001f7c <HAL_SPI_TransmitReceive+0x68>
 8001f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d003      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f82:	e15b      	b.n	800223c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_SPI_TransmitReceive+0x82>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_SPI_TransmitReceive+0x82>
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d103      	bne.n	8001f9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f9c:	e14e      	b.n	800223c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d003      	beq.n	8001fb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2205      	movs	r2, #5
 8001fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	887a      	ldrh	r2, [r7, #2]
 8001fda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d007      	beq.n	8002006 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800200e:	d178      	bne.n	8002102 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_SPI_TransmitReceive+0x10a>
 8002018:	8b7b      	ldrh	r3, [r7, #26]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d166      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	881a      	ldrh	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	1c9a      	adds	r2, r3, #2
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002042:	e053      	b.n	80020ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d11b      	bne.n	800208a <HAL_SPI_TransmitReceive+0x176>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d016      	beq.n	800208a <HAL_SPI_TransmitReceive+0x176>
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d113      	bne.n	800208a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	881a      	ldrh	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	1c9a      	adds	r2, r3, #2
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d119      	bne.n	80020cc <HAL_SPI_TransmitReceive+0x1b8>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d014      	beq.n	80020cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	b292      	uxth	r2, r2
 80020ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	1c9a      	adds	r2, r3, #2
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020cc:	f7fe fd30 	bl	8000b30 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020d8:	429a      	cmp	r2, r3
 80020da:	d807      	bhi.n	80020ec <HAL_SPI_TransmitReceive+0x1d8>
 80020dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e2:	d003      	beq.n	80020ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020ea:	e0a7      	b.n	800223c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1a6      	bne.n	8002044 <HAL_SPI_TransmitReceive+0x130>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1a1      	bne.n	8002044 <HAL_SPI_TransmitReceive+0x130>
 8002100:	e07c      	b.n	80021fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_SPI_TransmitReceive+0x1fc>
 800210a:	8b7b      	ldrh	r3, [r7, #26]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d16b      	bne.n	80021e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	330c      	adds	r3, #12
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002136:	e057      	b.n	80021e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d11c      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x26c>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <HAL_SPI_TransmitReceive+0x26c>
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	2b01      	cmp	r3, #1
 8002154:	d114      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	330c      	adds	r3, #12
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d119      	bne.n	80021c2 <HAL_SPI_TransmitReceive+0x2ae>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d014      	beq.n	80021c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021be:	2301      	movs	r3, #1
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021c2:	f7fe fcb5 	bl	8000b30 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d803      	bhi.n	80021da <HAL_SPI_TransmitReceive+0x2c6>
 80021d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d8:	d102      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x2cc>
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021e6:	e029      	b.n	800223c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1a2      	bne.n	8002138 <HAL_SPI_TransmitReceive+0x224>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d19d      	bne.n	8002138 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f917 	bl	8002434 <SPI_EndRxTxTransaction>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002218:	e010      	b.n	800223c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	e000      	b.n	800223c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800223a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800224c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002250:	4618      	mov	r0, r3
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002268:	f7fe fc62 	bl	8000b30 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4413      	add	r3, r2
 8002276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002278:	f7fe fc5a 	bl	8000b30 <HAL_GetTick>
 800227c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	0d1b      	lsrs	r3, r3, #20
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800228e:	e054      	b.n	800233a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002296:	d050      	beq.n	800233a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002298:	f7fe fc4a 	bl	8000b30 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d902      	bls.n	80022ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d13d      	bne.n	800232a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c6:	d111      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d0:	d004      	beq.n	80022dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d107      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f4:	d10f      	bne.n	8002316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e017      	b.n	800235a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3b01      	subs	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4013      	ands	r3, r2
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	429a      	cmp	r2, r3
 8002356:	d19b      	bne.n	8002290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000004 	.word	0x20000004

08002368 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237c:	d111      	bne.n	80023a2 <SPI_EndRxTransaction+0x3a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002386:	d004      	beq.n	8002392 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002390:	d107      	bne.n	80023a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023aa:	d12a      	bne.n	8002402 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b4:	d012      	beq.n	80023dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff ff49 	bl	8002258 <SPI_WaitFlagStateUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02d      	beq.n	8002428 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e026      	b.n	800242a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2101      	movs	r1, #1
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f7ff ff36 	bl	8002258 <SPI_WaitFlagStateUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01a      	beq.n	8002428 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e013      	b.n	800242a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2200      	movs	r2, #0
 800240a:	2101      	movs	r1, #1
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff ff23 	bl	8002258 <SPI_WaitFlagStateUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e000      	b.n	800242a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <SPI_EndRxTxTransaction+0x7c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <SPI_EndRxTxTransaction+0x80>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0d5b      	lsrs	r3, r3, #21
 800244c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245e:	d112      	bne.n	8002486 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7ff fef4 	bl	8002258 <SPI_WaitFlagStateUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e00f      	b.n	80024a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3b01      	subs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d0f2      	beq.n	8002486 <SPI_EndRxTxTransaction+0x52>
 80024a0:	e000      	b.n	80024a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80024a2:	bf00      	nop
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000004 	.word	0x20000004
 80024b4:	165e9f81 	.word	0x165e9f81

080024b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024c2:	4b6e      	ldr	r3, [pc, #440]	; (800267c <xTaskIncrementTick+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80cd 	bne.w	8002666 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80024cc:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <xTaskIncrementTick+0x1c8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <xTaskIncrementTick+0x1c8>)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d120      	bne.n	8002522 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <xTaskIncrementTick+0x1cc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <xTaskIncrementTick+0x46>
 8002500:	4b60      	ldr	r3, [pc, #384]	; (8002684 <xTaskIncrementTick+0x1cc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	4b60      	ldr	r3, [pc, #384]	; (8002688 <xTaskIncrementTick+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5e      	ldr	r2, [pc, #376]	; (8002684 <xTaskIncrementTick+0x1cc>)
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4a5e      	ldr	r2, [pc, #376]	; (8002688 <xTaskIncrementTick+0x1d0>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b5d      	ldr	r3, [pc, #372]	; (800268c <xTaskIncrementTick+0x1d4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	4a5c      	ldr	r2, [pc, #368]	; (800268c <xTaskIncrementTick+0x1d4>)
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	f000 f91b 	bl	8002758 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <xTaskIncrementTick+0x1d8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	429a      	cmp	r2, r3
 800252a:	f0c0 80a1 	bcc.w	8002670 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800252e:	4b55      	ldr	r3, [pc, #340]	; (8002684 <xTaskIncrementTick+0x1cc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002538:	4b55      	ldr	r3, [pc, #340]	; (8002690 <xTaskIncrementTick+0x1d8>)
 800253a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800253e:	601a      	str	r2, [r3, #0]
                    break;
 8002540:	e096      	b.n	8002670 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002542:	4b50      	ldr	r3, [pc, #320]	; (8002684 <xTaskIncrementTick+0x1cc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d203      	bcs.n	8002562 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800255a:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <xTaskIncrementTick+0x1d8>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002560:	e086      	b.n	8002670 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	68d2      	ldr	r2, [r2, #12]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	3304      	adds	r3, #4
 8002584:	429a      	cmp	r2, r3
 8002586:	d103      	bne.n	8002590 <xTaskIncrementTick+0xd8>
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01e      	beq.n	80025e6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	6a12      	ldr	r2, [r2, #32]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	69d2      	ldr	r2, [r2, #28]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	3318      	adds	r3, #24
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d103      	bne.n	80025d6 <xTaskIncrementTick+0x11e>
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2200      	movs	r2, #0
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	2201      	movs	r2, #1
 80025ec:	409a      	lsls	r2, r3
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <xTaskIncrementTick+0x1dc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	4a27      	ldr	r2, [pc, #156]	; (8002694 <xTaskIncrementTick+0x1dc>)
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fc:	4926      	ldr	r1, [pc, #152]	; (8002698 <xTaskIncrementTick+0x1e0>)
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3304      	adds	r3, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	3204      	adds	r2, #4
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1d1a      	adds	r2, r3, #4
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <xTaskIncrementTick+0x1e0>)
 800263c:	441a      	add	r2, r3
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002646:	4914      	ldr	r1, [pc, #80]	; (8002698 <xTaskIncrementTick+0x1e0>)
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	1c59      	adds	r1, r3, #1
 8002656:	4810      	ldr	r0, [pc, #64]	; (8002698 <xTaskIncrementTick+0x1e0>)
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4403      	add	r3, r0
 8002662:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002664:	e763      	b.n	800252e <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <xTaskIncrementTick+0x1e4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a0b      	ldr	r2, [pc, #44]	; (800269c <xTaskIncrementTick+0x1e4>)
 800266e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002672:	4618      	mov	r0, r3
 8002674:	3728      	adds	r7, #40	; 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000015c 	.word	0x2000015c
 8002680:	20000144 	.word	0x20000144
 8002684:	2000013c 	.word	0x2000013c
 8002688:	20000140 	.word	0x20000140
 800268c:	20000154 	.word	0x20000154
 8002690:	20000158 	.word	0x20000158
 8002694:	20000148 	.word	0x20000148
 8002698:	200000b0 	.word	0x200000b0
 800269c:	2000014c 	.word	0x2000014c

080026a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <vTaskSwitchContext+0xa4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <vTaskSwitchContext+0xa8>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80026b4:	e03f      	b.n	8002736 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <vTaskSwitchContext+0xa8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <vTaskSwitchContext+0xac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	f1c3 031f 	rsb	r3, r3, #31
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	491f      	ldr	r1, [pc, #124]	; (8002750 <vTaskSwitchContext+0xb0>)
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <vTaskSwitchContext+0x5c>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	607b      	str	r3, [r7, #4]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <vTaskSwitchContext+0x5a>
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <vTaskSwitchContext+0xb0>)
 8002708:	4413      	add	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	3308      	adds	r3, #8
 800271e:	429a      	cmp	r2, r3
 8002720:	d104      	bne.n	800272c <vTaskSwitchContext+0x8c>
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <vTaskSwitchContext+0xb4>)
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000015c 	.word	0x2000015c
 8002748:	20000150 	.word	0x20000150
 800274c:	20000148 	.word	0x20000148
 8002750:	200000b0 	.word	0x200000b0
 8002754:	200000ac 	.word	0x200000ac

08002758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <prvResetNextTaskUnblockTime+0x30>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <prvResetNextTaskUnblockTime+0x34>)
 8002768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800276c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800276e:	e005      	b.n	800277c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <prvResetNextTaskUnblockTime+0x30>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <prvResetNextTaskUnblockTime+0x34>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2000013c 	.word	0x2000013c
 800278c:	20000158 	.word	0x20000158

08002790 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <pxCurrentTCBConst2>)
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	6808      	ldr	r0, [r1, #0]
 8002796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279a:	f380 8809 	msr	PSP, r0
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f380 8811 	msr	BASEPRI, r0
 80027aa:	4770      	bx	lr
 80027ac:	f3af 8000 	nop.w

080027b0 <pxCurrentTCBConst2>:
 80027b0:	200000ac 	.word	0x200000ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
	...

080027c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80027c0:	f3ef 8009 	mrs	r0, PSP
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <pxCurrentTCBConst>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f01e 0f10 	tst.w	lr, #16
 80027d0:	bf08      	it	eq
 80027d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027da:	6010      	str	r0, [r2, #0]
 80027dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027e4:	f380 8811 	msr	BASEPRI, r0
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f7ff ff56 	bl	80026a0 <vTaskSwitchContext>
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f380 8811 	msr	BASEPRI, r0
 80027fc:	bc09      	pop	{r0, r3}
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	6808      	ldr	r0, [r1, #0]
 8002802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002806:	f01e 0f10 	tst.w	lr, #16
 800280a:	bf08      	it	eq
 800280c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002810:	f380 8809 	msr	PSP, r0
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	f3af 8000 	nop.w

08002820 <pxCurrentTCBConst>:
 8002820:	200000ac 	.word	0x200000ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop

08002828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
        __asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	607b      	str	r3, [r7, #4]
    }
 8002840:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002842:	f7ff fe39 	bl	80024b8 <xTaskIncrementTick>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <xPortSysTickHandler+0x40>)
 800284e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	2300      	movs	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800285e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	e000ed04 	.word	0xe000ed04

0800286c <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4293      	cmp	r3, r2
 800287c:	bf38      	it	cc
 800287e:	4613      	movcc	r3, r2
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4293      	cmp	r3, r2
 800289c:	bf28      	it	cs
 800289e:	4613      	movcs	r3, r2
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	fb01 f202 	mul.w	r2, r1, r2
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	1ad3      	subs	r3, r2, r3
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ffde 	bl	80028ac <lfs_aligndown>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3b01      	subs	r3, #1
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fd fccf 	bl	80002e4 <__popcountsi2>
 8002946:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1ad3      	subs	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8002974:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffee 	bl	800296c <lfs_fromle32>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffed 	bl	800299a <lfs_frombe32>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f007 fdf4 	bl	800a5c0 <malloc>
 80029d8:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f007 fdf0 	bl	800a5d0 <free>
#else
    (void)p;
#endif
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68d8      	ldr	r0, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	21ff      	movs	r1, #255	; 0xff
 8002a2e:	f007 fe0f 	bl	800a650 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d208      	bcs.n	8002a74 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8002a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a66:	441a      	add	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6c:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	f240 811b 	bls.w	8002caa <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8002a74:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002a78:	e11c      	b.n	8002cb4 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03f      	beq.n	8002b04 <lfs_bd_read+0xc0>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d13a      	bne.n	8002b04 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8002a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d232      	bcs.n	8002b04 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d324      	bcc.n	8002af2 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	1acb      	subs	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	69b8      	ldr	r0, [r7, #24]
 8002aba:	f7ff fee7 	bl	800288c <lfs_min>
 8002abe:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	69f8      	ldr	r0, [r7, #28]
 8002ad4:	f007 fd94 	bl	800a600 <memcpy>

                data += diff;
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002af0:	e0db      	b.n	8002caa <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	4619      	mov	r1, r3
 8002afc:	69b8      	ldr	r0, [r7, #24]
 8002afe:	f7ff fec5 	bl	800288c <lfs_min>
 8002b02:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d13a      	bne.n	8002b84 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4413      	add	r3, r2
        if (block == rcache->block &&
 8002b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d232      	bcs.n	8002b84 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d324      	bcc.n	8002b72 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	1acb      	subs	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	69b8      	ldr	r0, [r7, #24]
 8002b3a:	f7ff fea7 	bl	800288c <lfs_min>
 8002b3e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b4a:	1acb      	subs	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4619      	mov	r1, r3
 8002b52:	69f8      	ldr	r0, [r7, #28]
 8002b54:	f007 fd54 	bl	800a600 <memcpy>

                data += diff;
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4413      	add	r3, r2
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002b70:	e09b      	b.n	8002caa <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	69b8      	ldr	r0, [r7, #24]
 8002b7e:	f7ff fe85 	bl	800288c <lfs_min>
 8002b82:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d336      	bcc.n	8002bfa <lfs_bd_read+0x1b6>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b98:	fb01 f202 	mul.w	r2, r1, r2
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d12b      	bne.n	8002bfa <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba6:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d325      	bcc.n	8002bfa <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	69b8      	ldr	r0, [r7, #24]
 8002bb8:	f7ff fe78 	bl	80028ac <lfs_aligndown>
 8002bbc:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc2:	685c      	ldr	r4, [r3, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd2:	47a0      	blx	r4
 8002bd4:	6178      	str	r0, [r7, #20]
            if (err) {
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <lfs_bd_read+0x19c>
                return err;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	e069      	b.n	8002cb4 <lfs_bd_read+0x270>
            }

            data += diff;
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4413      	add	r3, r2
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8002bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8002bf8:	e057      	b.n	8002caa <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d305      	bcc.n	8002c12 <lfs_bd_read+0x1ce>
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <lfs_bd_read+0x278>)
 8002c08:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <lfs_bd_read+0x27c>)
 8002c0a:	216b      	movs	r1, #107	; 0x6b
 8002c0c:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <lfs_bd_read+0x280>)
 8002c0e:	f007 fc6f 	bl	800a4f0 <__assert_func>
        rcache->block = block;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c16:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c22:	f7ff fe43 	bl	80028ac <lfs_aligndown>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8002c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7ff fe4b 	bl	80028d6 <lfs_alignup>
 8002c40:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f7ff fe1e 	bl	800288c <lfs_min>
 8002c50:	4602      	mov	r2, r0
                - rcache->off,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8002c56:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f7ff fe13 	bl	800288c <lfs_min>
 8002c66:	4602      	mov	r2, r0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c70:	685c      	ldr	r4, [r3, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	462b      	mov	r3, r5
 8002c8a:	47a0      	blx	r4
 8002c8c:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dd05      	ble.n	8002ca0 <lfs_bd_read+0x25c>
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <lfs_bd_read+0x284>)
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <lfs_bd_read+0x27c>)
 8002c98:	2176      	movs	r1, #118	; 0x76
 8002c9a:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <lfs_bd_read+0x280>)
 8002c9c:	f007 fc28 	bl	800a4f0 <__assert_func>
        if (err) {
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <lfs_bd_read+0x266>
            return err;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	e004      	b.n	8002cb4 <lfs_bd_read+0x270>
    while (size > 0) {
 8002caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f aee4 	bne.w	8002a7a <lfs_bd_read+0x36>
        }
    }

    return 0;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bdb0      	pop	{r4, r5, r7, pc}
 8002cbc:	0800bec4 	.word	0x0800bec4
 8002cc0:	0800c8fc 	.word	0x0800c8fc
 8002cc4:	0800bee4 	.word	0x0800bee4
 8002cc8:	0800bf08 	.word	0x0800bf08

08002ccc <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	e039      	b.n	8002d5c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8002ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2108      	movs	r1, #8
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fdcb 	bl	800288c <lfs_min>
 8002cf6:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	1ad1      	subs	r1, r2, r3
 8002cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	4413      	add	r3, r2
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	9203      	str	r2, [sp, #12]
 8002d08:	f107 0210 	add.w	r2, r7, #16
 8002d0c:	9202      	str	r2, [sp, #8]
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff fe92 	bl	8002a44 <lfs_bd_read>
 8002d20:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <lfs_bd_cmp+0x60>
            return res;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	e01c      	b.n	8002d66 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	18d1      	adds	r1, r2, r3
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f007 fc51 	bl	800a5e0 <memcmp>
 8002d3e:	61b8      	str	r0, [r7, #24]
        if (res) {
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da01      	bge.n	8002d50 <lfs_bd_cmp+0x84>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e00a      	b.n	8002d66 <lfs_bd_cmp+0x9a>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e008      	b.n	8002d66 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d3c1      	bcc.n	8002ce8 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3728      	adds	r7, #40	; 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b08c      	sub	sp, #48	; 0x30
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d86:	d061      	beq.n	8002e4c <lfs_bd_flush+0xdc>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f113 0f02 	cmn.w	r3, #2
 8002d90:	d05c      	beq.n	8002e4c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d305      	bcc.n	8002dac <lfs_bd_flush+0x3c>
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <lfs_bd_flush+0xe8>)
 8002da2:	4a2e      	ldr	r2, [pc, #184]	; (8002e5c <lfs_bd_flush+0xec>)
 8002da4:	219e      	movs	r1, #158	; 0x9e
 8002da6:	482e      	ldr	r0, [pc, #184]	; (8002e60 <lfs_bd_flush+0xf0>)
 8002da8:	f007 fba2 	bl	800a4f0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7ff fd8c 	bl	80028d6 <lfs_alignup>
 8002dbe:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc4:	689c      	ldr	r4, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	462b      	mov	r3, r5
 8002ddc:	47a0      	blx	r4
 8002dde:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dd05      	ble.n	8002df2 <lfs_bd_flush+0x82>
 8002de6:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <lfs_bd_flush+0xf4>)
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <lfs_bd_flush+0xec>)
 8002dea:	21a2      	movs	r1, #162	; 0xa2
 8002dec:	481c      	ldr	r0, [pc, #112]	; (8002e60 <lfs_bd_flush+0xf0>)
 8002dee:	f007 fb7f 	bl	800a4f0 <__assert_func>
        if (err) {
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <lfs_bd_flush+0x8c>
            return err;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	e028      	b.n	8002e4e <lfs_bd_flush+0xde>
        }

        if (validate) {
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d020      	beq.n	8002e44 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f7ff fdf7 	bl	80029f8 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8002e16:	69f8      	ldr	r0, [r7, #28]
 8002e18:	9003      	str	r0, [sp, #12]
 8002e1a:	9102      	str	r1, [sp, #8]
 8002e1c:	9201      	str	r2, [sp, #4]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	2100      	movs	r1, #0
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ff50 	bl	8002ccc <lfs_bd_cmp>
 8002e2c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da01      	bge.n	8002e38 <lfs_bd_flush+0xc8>
                return res;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	e00a      	b.n	8002e4e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8002e3e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002e42:	e004      	b.n	8002e4e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fde5 	bl	8002a16 <lfs_cache_zero>
    }

    return 0;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bdb0      	pop	{r4, r5, r7, pc}
 8002e56:	bf00      	nop
 8002e58:	0800bf14 	.word	0x0800bf14
 8002e5c:	0800c908 	.word	0x0800c908
 8002e60:	0800bee4 	.word	0x0800bee4
 8002e64:	0800bf08 	.word	0x0800bf08

08002e68 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff fdbd 	bl	80029f8 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff ff73 	bl	8002d70 <lfs_bd_flush>
 8002e8a:	6178      	str	r0, [r7, #20]
    if (err) {
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <lfs_bd_sync+0x2e>
        return err;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	e011      	b.n	8002eba <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4798      	blx	r3
 8002ea4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	dd05      	ble.n	8002eb8 <lfs_bd_sync+0x50>
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <lfs_bd_sync+0x5c>)
 8002eae:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <lfs_bd_sync+0x60>)
 8002eb0:	21c8      	movs	r1, #200	; 0xc8
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <lfs_bd_sync+0x64>)
 8002eb4:	f007 fb1c 	bl	800a4f0 <__assert_func>
    return err;
 8002eb8:	697b      	ldr	r3, [r7, #20]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	0800bf08 	.word	0x0800bf08
 8002ec8:	0800c918 	.word	0x0800c918
 8002ecc:	0800bee4 	.word	0x0800bee4

08002ed0 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	f113 0f02 	cmn.w	r3, #2
 8002ee8:	d00b      	beq.n	8002f02 <lfs_bd_prog+0x32>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d305      	bcc.n	8002f02 <lfs_bd_prog+0x32>
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <lfs_bd_prog+0x144>)
 8002ef8:	4a47      	ldr	r2, [pc, #284]	; (8003018 <lfs_bd_prog+0x148>)
 8002efa:	21d3      	movs	r1, #211	; 0xd3
 8002efc:	4847      	ldr	r0, [pc, #284]	; (800301c <lfs_bd_prog+0x14c>)
 8002efe:	f007 faf7 	bl	800a4f0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8002f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	441a      	add	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d977      	bls.n	8003002 <lfs_bd_prog+0x132>
 8002f12:	4b43      	ldr	r3, [pc, #268]	; (8003020 <lfs_bd_prog+0x150>)
 8002f14:	4a40      	ldr	r2, [pc, #256]	; (8003018 <lfs_bd_prog+0x148>)
 8002f16:	21d4      	movs	r1, #212	; 0xd4
 8002f18:	4840      	ldr	r0, [pc, #256]	; (800301c <lfs_bd_prog+0x14c>)
 8002f1a:	f007 fae9 	bl	800a4f0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d151      	bne.n	8002fcc <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8002f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d34c      	bcc.n	8002fcc <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	4413      	add	r3, r2
                off >= pcache->off &&
 8002f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d243      	bcs.n	8002fcc <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8002f52:	4413      	add	r3, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f58:	f7ff fc98 	bl	800288c <lfs_min>
 8002f5c:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f68:	1acb      	subs	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	69f9      	ldr	r1, [r7, #28]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f007 fb45 	bl	800a600 <memcpy>

            data += diff;
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4413      	add	r3, r2
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8002f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6898      	ldr	r0, [r3, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f7ff fc66 	bl	800286c <lfs_max>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d126      	bne.n	8003002 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff fed8 	bl	8002d70 <lfs_bd_flush>
 8002fc0:	6178      	str	r0, [r7, #20]
                if (err) {
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01c      	beq.n	8003002 <lfs_bd_prog+0x132>
                    return err;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	e01e      	b.n	800300a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd4:	d005      	beq.n	8002fe2 <lfs_bd_prog+0x112>
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <lfs_bd_prog+0x154>)
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <lfs_bd_prog+0x148>)
 8002fda:	21f1      	movs	r1, #241	; 0xf1
 8002fdc:	480f      	ldr	r0, [pc, #60]	; (800301c <lfs_bd_prog+0x14c>)
 8002fde:	f007 fa87 	bl	800a4f0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe6:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ff2:	f7ff fc5b 	bl	80028ac <lfs_aligndown>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003004:	2b00      	cmp	r3, #0
 8003006:	d18a      	bne.n	8002f1e <lfs_bd_prog+0x4e>
    }

    return 0;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	0800bf3c 	.word	0x0800bf3c
 8003018:	0800c924 	.word	0x0800c924
 800301c:	0800bee4 	.word	0x0800bee4
 8003020:	0800bf78 	.word	0x0800bf78
 8003024:	0800bf9c 	.word	0x0800bf9c

08003028 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d305      	bcc.n	800304a <lfs_bd_erase+0x22>
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <lfs_bd_erase+0x54>)
 8003040:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <lfs_bd_erase+0x58>)
 8003042:	21ff      	movs	r1, #255	; 0xff
 8003044:	480f      	ldr	r0, [pc, #60]	; (8003084 <lfs_bd_erase+0x5c>)
 8003046:	f007 fa53 	bl	800a4f0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	4610      	mov	r0, r2
 8003058:	4798      	blx	r3
 800305a:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	dd06      	ble.n	8003070 <lfs_bd_erase+0x48>
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <lfs_bd_erase+0x60>)
 8003064:	4a06      	ldr	r2, [pc, #24]	; (8003080 <lfs_bd_erase+0x58>)
 8003066:	f240 1101 	movw	r1, #257	; 0x101
 800306a:	4806      	ldr	r0, [pc, #24]	; (8003084 <lfs_bd_erase+0x5c>)
 800306c:	f007 fa40 	bl	800a4f0 <__assert_func>
    return err;
 8003070:	68fb      	ldr	r3, [r7, #12]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	0800bec4 	.word	0x0800bec4
 8003080:	0800c930 	.word	0x0800c930
 8003084:	0800bee4 	.word	0x0800bee4
 8003088:	0800bf08 	.word	0x0800bf08

0800308c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c6:	d005      	beq.n	80030d4 <lfs_pair_isnull+0x1e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d2:	d101      	bne.n	80030d8 <lfs_pair_isnull+0x22>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <lfs_pair_isnull+0x24>
 80030d8:	2300      	movs	r3, #0
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d017      	beq.n	8003132 <lfs_pair_cmp+0x46>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	3304      	adds	r3, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d00f      	beq.n	8003132 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	3304      	adds	r3, #4
 800311a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d008      	beq.n	8003132 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d001      	beq.n	8003132 <lfs_pair_cmp+0x46>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <lfs_pair_cmp+0x48>
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d107      	bne.n	8003166 <lfs_pair_sync+0x26>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	3304      	adds	r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d00d      	beq.n	8003182 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	3304      	adds	r3, #4
 800316e:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d108      	bne.n	8003186 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d101      	bne.n	8003186 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <lfs_pair_sync+0x48>
 8003186:	2300      	movs	r3, #0
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800319a:	b590      	push	{r4, r7, lr}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fbe0 	bl	800296c <lfs_fromle32>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1d1c      	adds	r4, r3, #4
 80031bc:	4610      	mov	r0, r2
 80031be:	f7ff fbd5 	bl	800296c <lfs_fromle32>
 80031c2:	4603      	mov	r3, r0
 80031c4:	6023      	str	r3, [r4, #0]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd90      	pop	{r4, r7, pc}

080031ce <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80031ce:	b590      	push	{r4, r7, lr}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fbd1 	bl	8002982 <lfs_tole32>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1d1c      	adds	r4, r3, #4
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7ff fbc6 	bl	8002982 <lfs_tole32>
 80031f6:	4603      	mov	r3, r0
 80031f8:	6023      	str	r3, [r4, #0]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	43db      	mvns	r3, r3
 800320e:	0fdb      	lsrs	r3, r3, #31
 8003210:	b2db      	uxtb	r3, r3
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	059b      	lsls	r3, r3, #22
 800322a:	159b      	asrs	r3, r3, #22
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0d1b      	lsrs	r3, r3, #20
 8003250:	b29b      	uxth	r3, r3
 8003252:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003256:	b29b      	uxth	r3, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	0d1b      	lsrs	r3, r3, #20
 8003270:	b29b      	uxth	r3, r3
 8003272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003276:	b29b      	uxth	r3, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0d1b      	lsrs	r3, r3, #20
 8003290:	b2db      	uxtb	r3, r3
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffec 	bl	8003284 <lfs_tag_chunk>
 80032ac:	4603      	mov	r3, r0
 80032ae:	b25b      	sxtb	r3, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0a9b      	lsrs	r3, r3, #10
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ca:	b29b      	uxth	r3, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff8f 	bl	800321e <lfs_tag_isdelete>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffe5 	bl	80032d8 <lfs_tag_size>
 800330e:	4603      	mov	r3, r0
 8003310:	3304      	adds	r3, #4
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e012      	b.n	8003350 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	4413      	add	r3, r2
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4403      	add	r3, r0
 8003346:	404a      	eors	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b02      	cmp	r3, #2
 8003354:	dde9      	ble.n	800332a <lfs_gstate_xor+0x10>
    }
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00b      	b.n	800338a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <lfs_gstate_iszero+0x20>
            return false;
 8003380:	2300      	movs	r3, #0
 8003382:	e006      	b.n	8003392 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	ddf0      	ble.n	8003372 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8003390:	2301      	movs	r3, #1
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff94 	bl	80032d8 <lfs_tag_size>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff81 	bl	80032d8 <lfs_tag_size>
 80033d6:	4603      	mov	r3, r0
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff28 	bl	8003244 <lfs_tag_type1>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ff14 	bl	8003244 <lfs_tag_type1>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <lfs_gstate_hasmovehere+0x30>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fe5f 	bl	80030ec <lfs_pair_cmp>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <lfs_gstate_hasmovehere+0x30>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <lfs_gstate_hasmovehere+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fa89 	bl	800296c <lfs_fromle32>
 800345a:	4602      	mov	r2, r0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fa81 	bl	800296c <lfs_fromle32>
 800346a:	4602      	mov	r2, r0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fa79 	bl	800296c <lfs_fromle32>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fa74 	bl	8002982 <lfs_tole32>
 800349a:	4602      	mov	r2, r0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fa6c 	bl	8002982 <lfs_tole32>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fa64 	bl	8002982 <lfs_tole32>
 80034ba:	4602      	mov	r2, r0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	609a      	str	r2, [r3, #8]
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fa49 	bl	800296c <lfs_fromle32>
 80034da:	4602      	mov	r2, r0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fa41 	bl	800296c <lfs_fromle32>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	605a      	str	r2, [r3, #4]
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fa3c 	bl	8002982 <lfs_tole32>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fa34 	bl	8002982 <lfs_tole32>
 800351a:	4602      	mov	r2, r0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	605a      	str	r2, [r3, #4]
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fa19 	bl	800296c <lfs_fromle32>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fa11 	bl	800296c <lfs_fromle32>
 800354a:	4602      	mov	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fa09 	bl	800296c <lfs_fromle32>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fa01 	bl	800296c <lfs_fromle32>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff f9f9 	bl	800296c <lfs_fromle32>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f9f1 	bl	800296c <lfs_fromle32>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	615a      	str	r2, [r3, #20]
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff f9ec 	bl	8002982 <lfs_tole32>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff f9e4 	bl	8002982 <lfs_tole32>
 80035ba:	4602      	mov	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff f9dc 	bl	8002982 <lfs_tole32>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff f9d4 	bl	8002982 <lfs_tole32>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff f9cc 	bl	8002982 <lfs_tole32>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f9c4 	bl	8002982 <lfs_tole32>
 80035fa:	4602      	mov	r2, r0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	615a      	str	r2, [r3, #20]
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e009      	b.n	800362c <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d101      	bne.n	8003626 <lfs_mlist_isopen+0x1e>
            return true;
 8003622:	2301      	movs	r3, #1
 8003624:	e007      	b.n	8003636 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f1      	bne.n	8003618 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3328      	adds	r3, #40	; 0x28
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e00d      	b.n	8003670 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d105      	bne.n	800366a <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]
            break;
 8003668:	e007      	b.n	800367a <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ed      	bne.n	8003654 <lfs_mlist_remove+0x12>
        }
    }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4413      	add	r3, r2
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036cc:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80036ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80036d2:	fb01 f202 	mul.w	r2, r1, r2
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d212      	bcs.n	800370a <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	009a      	lsls	r2, r3, #2
 80036ee:	440a      	add	r2, r1
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f002 021f 	and.w	r2, r2, #31
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4403      	add	r3, r0
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	661a      	str	r2, [r3, #96]	; 0x60
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ffe4 	bl	8003718 <lfs_alloc_ack>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af02      	add	r7, sp, #8
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8003762:	e04f      	b.n	8003804 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d132      	bne.n	8003804 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037aa:	6a12      	ldr	r2, [r2, #32]
 80037ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b0:	fb01 f202 	mul.w	r2, r1, r2
 80037b4:	1a9a      	subs	r2, r3, r2
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80037ba:	e009      	b.n	80037d0 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ca:	1e5a      	subs	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	429a      	cmp	r2, r3
 80037da:	d011      	beq.n	8003800 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1dd      	bne.n	80037bc <lfs_alloc+0x64>
                }

                return 0;
 8003800:	2300      	movs	r3, #0
 8003802:	e050      	b.n	80038a6 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	429a      	cmp	r2, r3
 800380e:	d1a9      	bne.n	8003764 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	4413      	add	r3, r2
 8003822:	4a23      	ldr	r2, [pc, #140]	; (80038b0 <lfs_alloc+0x158>)
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	f240 2247 	movw	r2, #583	; 0x247
 800382a:	4922      	ldr	r1, [pc, #136]	; (80038b4 <lfs_alloc+0x15c>)
 800382c:	4822      	ldr	r0, [pc, #136]	; (80038b8 <lfs_alloc+0x160>)
 800382e:	f007 fae5 	bl	800adfc <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8003832:	f06f 031b 	mvn.w	r3, #27
 8003836:	e036      	b.n	80038a6 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003846:	6a12      	ldr	r2, [r2, #32]
 8003848:	fbb3 f1f2 	udiv	r1, r3, r2
 800384c:	fb01 f202 	mul.w	r2, r1, r2
 8003850:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	00da      	lsls	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7ff f811 	bl	800288c <lfs_min>
 800386a:	4602      	mov	r2, r0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	461a      	mov	r2, r3
 8003882:	2100      	movs	r1, #0
 8003884:	f006 fee4 	bl	800a650 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8003888:	2301      	movs	r3, #1
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	490b      	ldr	r1, [pc, #44]	; (80038bc <lfs_alloc+0x164>)
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f004 fc60 	bl	8008154 <lfs_fs_rawtraverse>
 8003894:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f43f af62 	beq.w	8003762 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ff49 	bl	8003736 <lfs_alloc_drop>
            return err;
 80038a4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	0800bfe8 	.word	0x0800bfe8
 80038b4:	0800bee4 	.word	0x0800bee4
 80038b8:	0800bfc0 	.word	0x0800bfc0
 80038bc:	080036ab 	.word	0x080036ab

080038c0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b08f      	sub	sp, #60	; 0x3c
 80038c4:	af04      	add	r7, sp, #16
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	333c      	adds	r3, #60	; 0x3c
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fd8e 	bl	8003408 <lfs_gstate_hasmovehere>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80b9 	beq.w	8003a66 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fcdf 	bl	80032b8 <lfs_tag_id>
 80038fa:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80b2 	beq.w	8003a66 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fcd6 	bl	80032b8 <lfs_tag_id>
 800390c:	4603      	mov	r3, r0
 800390e:	461c      	mov	r4, r3
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	f7ff fcd1 	bl	80032b8 <lfs_tag_id>
 8003916:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8003918:	429c      	cmp	r4, r3
 800391a:	f200 80a4 	bhi.w	8003a66 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003924:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8003926:	e09e      	b.n	8003a66 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fce1 	bl	80032f2 <lfs_tag_dsize>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800393c:	68f9      	ldr	r1, [r7, #12]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2204      	movs	r2, #4
 8003944:	9203      	str	r2, [sp, #12]
 8003946:	f107 0210 	add.w	r2, r7, #16
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	9201      	str	r2, [sp, #4]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2304      	movs	r3, #4
 8003954:	460a      	mov	r2, r1
 8003956:	2100      	movs	r1, #0
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff f873 	bl	8002a44 <lfs_bd_read>
 800395e:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <lfs_dir_getslice+0xaa>
            return err;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	e089      	b.n	8003a7e <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f814 	bl	800299a <lfs_frombe32>
 8003972:	4602      	mov	r2, r0
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4053      	eors	r3, r2
 8003978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800397c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fc9a 	bl	80032b8 <lfs_tag_id>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d02b      	beq.n	80039e2 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800398a:	69f8      	ldr	r0, [r7, #28]
 800398c:	f7ff fc5a 	bl	8003244 <lfs_tag_type1>
 8003990:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d124      	bne.n	80039e2 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8003998:	69f8      	ldr	r0, [r7, #28]
 800399a:	f7ff fc8d 	bl	80032b8 <lfs_tag_id>
 800399e:	4603      	mov	r3, r0
 80039a0:	461c      	mov	r4, r3
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fc85 	bl	80032b8 <lfs_tag_id>
 80039ae:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80039b0:	429c      	cmp	r4, r3
 80039b2:	d816      	bhi.n	80039e2 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <lfs_dir_getslice+0x1c8>)
 80039bc:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80039be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d102      	bne.n	80039d2 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80039cc:	f06f 0301 	mvn.w	r3, #1
 80039d0:	e055      	b.n	8003a7e <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80039d2:	69f8      	ldr	r0, [r7, #28]
 80039d4:	f7ff fc63 	bl	800329e <lfs_tag_splice>
 80039d8:	4603      	mov	r3, r0
 80039da:	029a      	lsls	r2, r3, #10
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	4413      	add	r3, r2
 80039e0:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	405a      	eors	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d138      	bne.n	8003a66 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 80039f4:	69f8      	ldr	r0, [r7, #28]
 80039f6:	f7ff fc12 	bl	800321e <lfs_tag_isdelete>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8003a00:	f06f 0301 	mvn.w	r3, #1
 8003a04:	e03b      	b.n	8003a7e <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8003a06:	69f8      	ldr	r0, [r7, #28]
 8003a08:	f7ff fc66 	bl	80032d8 <lfs_tag_size>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe ff3b 	bl	800288c <lfs_min>
 8003a16:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8003a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a22:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8003a24:	3204      	adds	r2, #4
 8003a26:	6979      	ldr	r1, [r7, #20]
 8003a28:	9103      	str	r1, [sp, #12]
 8003a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a2c:	9102      	str	r1, [sp, #8]
 8003a2e:	9201      	str	r2, [sp, #4]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4602      	mov	r2, r0
 8003a36:	2100      	movs	r1, #0
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff f803 	bl	8002a44 <lfs_bd_read>
 8003a3e:	61b8      	str	r0, [r7, #24]
            if (err) {
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <lfs_dir_getslice+0x18a>
                return err;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	e019      	b.n	8003a7e <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8003a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	18d0      	adds	r0, r2, r3
 8003a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f006 fdf9 	bl	800a650 <memset>

            return tag + gdiff;
 8003a5e:	6a3a      	ldr	r2, [r7, #32]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	e00b      	b.n	8003a7e <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fc42 	bl	80032f2 <lfs_tag_dsize>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	3304      	adds	r3, #4
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f4bf af57 	bcs.w	8003928 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8003a7a:	f06f 0301 	mvn.w	r3, #1
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	372c      	adds	r7, #44	; 0x2c
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}
 8003a86:	bf00      	nop
 8003a88:	000ffc00 	.word	0x000ffc00

08003a8c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8003a9a:	6838      	ldr	r0, [r7, #0]
 8003a9c:	f7ff fc1c 	bl	80032d8 <lfs_tag_size>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	9302      	str	r3, [sp, #8]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff ff04 	bl	80038c0 <lfs_dir_getslice>
 8003ab8:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b08c      	sub	sp, #48	; 0x30
 8003ac6:	af04      	add	r7, sp, #16
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8003ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	f240 80c0 	bls.w	8003c66 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8003ae6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003aea:	e0c1      	b.n	8003c70 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aee:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03f      	beq.n	8003b76 <lfs_dir_getread+0xb4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f113 0f02 	cmn.w	r3, #2
 8003afe:	d13a      	bne.n	8003b76 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d232      	bcs.n	8003b76 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d324      	bcc.n	8003b64 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b24:	1acb      	subs	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	69b8      	ldr	r0, [r7, #24]
 8003b2c:	f7fe feae 	bl	800288c <lfs_min>
 8003b30:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b3c:	1acb      	subs	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4619      	mov	r1, r3
 8003b44:	69f8      	ldr	r0, [r7, #28]
 8003b46:	f006 fd5b 	bl	800a600 <memcpy>

                data += diff;
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4413      	add	r3, r2
 8003b50:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4413      	add	r3, r2
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003b62:	e080      	b.n	8003c66 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	69b8      	ldr	r0, [r7, #24]
 8003b70:	f7fe fe8c 	bl	800288c <lfs_min>
 8003b74:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f113 0f02 	cmn.w	r3, #2
 8003b7e:	d13a      	bne.n	8003bf6 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d232      	bcs.n	8003bf6 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d324      	bcc.n	8003be4 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba4:	1acb      	subs	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	69b8      	ldr	r0, [r7, #24]
 8003bac:	f7fe fe6e 	bl	800288c <lfs_min>
 8003bb0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bbc:	1acb      	subs	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	69f8      	ldr	r0, [r7, #28]
 8003bc6:	f006 fd1b 	bl	800a600 <memcpy>

                data += diff;
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	4413      	add	r3, r2
 8003bd0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003be2:	e040      	b.n	8003c66 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	4619      	mov	r1, r3
 8003bee:	69b8      	ldr	r0, [r7, #24]
 8003bf0:	f7fe fe4c 	bl	800288c <lfs_min>
 8003bf4:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f06f 0201 	mvn.w	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4619      	mov	r1, r3
 8003c06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c08:	f7fe fe50 	bl	80028ac <lfs_aligndown>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	441a      	add	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7fe fe58 	bl	80028d6 <lfs_alignup>
 8003c26:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7fe fe2b 	bl	800288c <lfs_min>
 8003c36:	4602      	mov	r2, r0
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	6889      	ldr	r1, [r1, #8]
 8003c48:	9102      	str	r1, [sp, #8]
 8003c4a:	9201      	str	r2, [sp, #4]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fe33 	bl	80038c0 <lfs_dir_getslice>
 8003c5a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da01      	bge.n	8003c66 <lfs_dir_getread+0x1a4>
            return err;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	e004      	b.n	8003c70 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f af3f 	bne.w	8003aec <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <lfs_dir_traverse_filter+0x1e>
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <lfs_dir_traverse_filter+0xac>)
 8003c94:	e000      	b.n	8003c98 <lfs_dir_traverse_filter+0x20>
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003c98:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	405a      	eors	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d014      	beq.n	8003cd4 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fab5 	bl	800321e <lfs_tag_isdelete>
 8003cb4:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <lfs_dir_traverse_filter+0xac>)
 8003cbe:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <lfs_dir_traverse_filter+0xb4>)
 8003cc6:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003cc8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003ccc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d104      	bne.n	8003cde <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
        return true;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e01e      	b.n	8003d1c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003cde:	68b8      	ldr	r0, [r7, #8]
 8003ce0:	f7ff fab0 	bl	8003244 <lfs_tag_type1>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d116      	bne.n	8003d1a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8003cec:	68b8      	ldr	r0, [r7, #8]
 8003cee:	f7ff fae3 	bl	80032b8 <lfs_tag_id>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461c      	mov	r4, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fadc 	bl	80032b8 <lfs_tag_id>
 8003d00:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003d02:	429c      	cmp	r4, r3
 8003d04:	d809      	bhi.n	8003d1a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003d06:	68b8      	ldr	r0, [r7, #8]
 8003d08:	f7ff fac9 	bl	800329e <lfs_tag_splice>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	029a      	lsls	r2, r3, #10
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	441a      	add	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	601a      	str	r2, [r3, #0]
    }

    return false;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd90      	pop	{r4, r7, pc}
 8003d24:	7ffffc00 	.word	0x7ffffc00
 8003d28:	700ffc00 	.word	0x700ffc00
 8003d2c:	000ffc00 	.word	0x000ffc00

08003d30 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b0c1      	sub	sp, #260	; 0x104
 8003d34:	af04      	add	r7, sp, #16
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8003d44:	6838      	ldr	r0, [r7, #0]
 8003d46:	f7ff fad4 	bl	80032f2 <lfs_tag_dsize>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	441a      	add	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d237      	bcs.n	8003dc8 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8003d58:	6838      	ldr	r0, [r7, #0]
 8003d5a:	f7ff faca 	bl	80032f2 <lfs_tag_dsize>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	9203      	str	r2, [sp, #12]
 8003d70:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003d74:	9202      	str	r2, [sp, #8]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	9201      	str	r2, [sp, #4]
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	460a      	mov	r2, r1
 8003d80:	2100      	movs	r1, #0
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7fe fe5e 	bl	8002a44 <lfs_bd_read>
 8003d88:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8003d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <lfs_dir_traverse+0x6a>
                    return err;
 8003d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d98:	e3a6      	b.n	80044e8 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fdfc 	bl	800299a <lfs_frombe32>
 8003da2:	4602      	mov	r2, r0
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4053      	eors	r3, r2
 8003da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dac:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8003dba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	e01b      	b.n	8003e00 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8003dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dd13      	ble.n	8003df8 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8003dd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8003dd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8003de2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003de6:	3308      	adds	r3, #8
 8003de8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8003dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df0:	3b01      	subs	r3, #1
 8003df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003df6:	e003      	b.n	8003e00 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8003dfe:	e2a2      	b.n	8004346 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8003e00:	4b7e      	ldr	r3, [pc, #504]	; (8003ffc <lfs_dir_traverse+0x2cc>)
 8003e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0c:	405a      	eors	r2, r3
 8003e0e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003e12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e16:	400b      	ands	r3, r1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 8285 	bne.w	800432a <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8003e20:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003e24:	f7ff fa48 	bl	80032b8 <lfs_tag_id>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80f0 	beq.w	8004010 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8003e30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d906      	bls.n	8003e46 <lfs_dir_traverse+0x116>
 8003e38:	4b71      	ldr	r3, [pc, #452]	; (8004000 <lfs_dir_traverse+0x2d0>)
 8003e3a:	4a72      	ldr	r2, [pc, #456]	; (8004004 <lfs_dir_traverse+0x2d4>)
 8003e3c:	f240 314e 	movw	r1, #846	; 0x34e
 8003e40:	4871      	ldr	r0, [pc, #452]	; (8004008 <lfs_dir_traverse+0x2d8>)
 8003e42:	f006 fb55 	bl	800a4f0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8003e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e48:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	33f0      	adds	r3, #240	; 0xf0
 8003e56:	443b      	add	r3, r7
 8003e58:	3b98      	subs	r3, #152	; 0x98
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	33f0      	adds	r3, #240	; 0xf0
 8003e6c:	443b      	add	r3, r7
 8003e6e:	3b94      	subs	r3, #148	; 0x94
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	33f0      	adds	r3, #240	; 0xf0
 8003e82:	443b      	add	r3, r7
 8003e84:	3b90      	subs	r3, #144	; 0x90
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	33f0      	adds	r3, #240	; 0xf0
 8003e98:	443b      	add	r3, r7
 8003e9a:	3b8c      	subs	r3, #140	; 0x8c
 8003e9c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	33f0      	adds	r3, #240	; 0xf0
 8003eb0:	443b      	add	r3, r7
 8003eb2:	3b88      	subs	r3, #136	; 0x88
 8003eb4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	33f0      	adds	r3, #240	; 0xf0
 8003ec8:	443b      	add	r3, r7
 8003eca:	3b84      	subs	r3, #132	; 0x84
 8003ecc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	33f0      	adds	r3, #240	; 0xf0
 8003ee0:	443b      	add	r3, r7
 8003ee2:	3b80      	subs	r3, #128	; 0x80
 8003ee4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	33f0      	adds	r3, #240	; 0xf0
 8003ef8:	443b      	add	r3, r7
 8003efa:	3b7c      	subs	r3, #124	; 0x7c
 8003efc:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	33f0      	adds	r3, #240	; 0xf0
 8003f10:	443b      	add	r3, r7
 8003f12:	3b7a      	subs	r3, #122	; 0x7a
 8003f14:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	33f0      	adds	r3, #240	; 0xf0
 8003f28:	443b      	add	r3, r7
 8003f2a:	3b78      	subs	r3, #120	; 0x78
 8003f2c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	33f0      	adds	r3, #240	; 0xf0
 8003f40:	443b      	add	r3, r7
 8003f42:	3b74      	subs	r3, #116	; 0x74
 8003f44:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	33f0      	adds	r3, #240	; 0xf0
 8003f58:	443b      	add	r3, r7
 8003f5a:	3b70      	subs	r3, #112	; 0x70
 8003f5c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	33f0      	adds	r3, #240	; 0xf0
 8003f70:	443b      	add	r3, r7
 8003f72:	3b6c      	subs	r3, #108	; 0x6c
 8003f74:	6019      	str	r1, [r3, #0]
 8003f76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	33f0      	adds	r3, #240	; 0xf0
 8003f84:	443b      	add	r3, r7
 8003f86:	3b68      	subs	r3, #104	; 0x68
 8003f88:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	33f0      	adds	r3, #240	; 0xf0
 8003f9c:	443b      	add	r3, r7
 8003f9e:	3b68      	subs	r3, #104	; 0x68
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003faa:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8003fae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <lfs_dir_traverse+0x2dc>)
 8003fd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8003fdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	3328      	adds	r3, #40	; 0x28
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ff8:	e6a4      	b.n	8003d44 <lfs_dir_traverse+0x14>
 8003ffa:	bf00      	nop
 8003ffc:	7ff00000 	.word	0x7ff00000
 8004000:	0800bfec 	.word	0x0800bfec
 8004004:	0800c940 	.word	0x0800c940
 8004008:	0800bee4 	.word	0x0800bee4
 800400c:	08003c79 	.word	0x08003c79
                continue;
            }
        }

popped:
 8004010:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8004012:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8004016:	f7ff f94f 	bl	80032b8 <lfs_tag_id>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8004020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff f948 	bl	80032b8 <lfs_tag_id>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800402c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8004030:	4293      	cmp	r3, r2
 8004032:	f200 817c 	bhi.w	800432e <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8004036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff f93d 	bl	80032b8 <lfs_tag_id>
 800403e:	4603      	mov	r3, r0
 8004040:	461a      	mov	r2, r3
 8004042:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8004046:	4293      	cmp	r3, r2
 8004048:	f240 8171 	bls.w	800432e <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f908 	bl	8003264 <lfs_tag_type3>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	f43f ae74 	beq.w	8003d44 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff f900 	bl	8003264 <lfs_tag_type3>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	f240 1301 	movw	r3, #257	; 0x101
 800406c:	429a      	cmp	r2, r3
 800406e:	f040 80e0 	bne.w	8004232 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8004072:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004076:	4ab1      	ldr	r2, [pc, #708]	; (800433c <lfs_dir_traverse+0x60c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	f000 815a 	beq.w	8004332 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800407e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	33f0      	adds	r3, #240	; 0xf0
 800408c:	443b      	add	r3, r7
 800408e:	3b98      	subs	r3, #152	; 0x98
 8004090:	4618      	mov	r0, r3
 8004092:	233c      	movs	r3, #60	; 0x3c
 8004094:	461a      	mov	r2, r3
 8004096:	2100      	movs	r1, #0
 8004098:	f006 fada 	bl	800a650 <memset>
 800409c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	33f0      	adds	r3, #240	; 0xf0
 80040aa:	443b      	add	r3, r7
 80040ac:	3b98      	subs	r3, #152	; 0x98
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	33f0      	adds	r3, #240	; 0xf0
 80040c0:	443b      	add	r3, r7
 80040c2:	3b94      	subs	r3, #148	; 0x94
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	33f0      	adds	r3, #240	; 0xf0
 80040d6:	443b      	add	r3, r7
 80040d8:	3b90      	subs	r3, #144	; 0x90
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	33f0      	adds	r3, #240	; 0xf0
 80040ec:	443b      	add	r3, r7
 80040ee:	3b8c      	subs	r3, #140	; 0x8c
 80040f0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	33f0      	adds	r3, #240	; 0xf0
 8004104:	443b      	add	r3, r7
 8004106:	3b88      	subs	r3, #136	; 0x88
 8004108:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	33f0      	adds	r3, #240	; 0xf0
 800411c:	443b      	add	r3, r7
 800411e:	3b84      	subs	r3, #132	; 0x84
 8004120:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	33f0      	adds	r3, #240	; 0xf0
 8004134:	443b      	add	r3, r7
 8004136:	3b80      	subs	r3, #128	; 0x80
 8004138:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	33f0      	adds	r3, #240	; 0xf0
 800414c:	443b      	add	r3, r7
 800414e:	3b7c      	subs	r3, #124	; 0x7c
 8004150:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	33f0      	adds	r3, #240	; 0xf0
 8004164:	443b      	add	r3, r7
 8004166:	3b7a      	subs	r3, #122	; 0x7a
 8004168:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	33f0      	adds	r3, #240	; 0xf0
 800417c:	443b      	add	r3, r7
 800417e:	3b78      	subs	r3, #120	; 0x78
 8004180:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	33f0      	adds	r3, #240	; 0xf0
 8004194:	443b      	add	r3, r7
 8004196:	3b74      	subs	r3, #116	; 0x74
 8004198:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	33f0      	adds	r3, #240	; 0xf0
 80041ac:	443b      	add	r3, r7
 80041ae:	3b70      	subs	r3, #112	; 0x70
 80041b0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80041b4:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80041b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041ba:	3301      	adds	r3, #1
 80041bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80041c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f888 	bl	80032d8 <lfs_tag_size>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80041ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff f871 	bl	80032b8 <lfs_tag_id>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	60bb      	str	r3, [r7, #8]
            off = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ea:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80041f8:	4b51      	ldr	r3, [pc, #324]	; (8004340 <lfs_dir_traverse+0x610>)
 80041fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80041fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004202:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8004206:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800420a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 800420e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8004212:	3301      	adds	r3, #1
 8004214:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8004218:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800421c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	b29a      	uxth	r2, r3
 8004224:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004228:	4413      	add	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8004230:	e588      	b.n	8003d44 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8004232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff f815 	bl	8003264 <lfs_tag_type3>
 800423a:	4603      	mov	r3, r0
 800423c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004240:	d159      	bne.n	80042f6 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004248:	e04b      	b.n	80042e2 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004264:	4413      	add	r3, r2
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800426c:	051c      	lsls	r4, r3, #20
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff f821 	bl	80032b8 <lfs_tag_id>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800427e:	4413      	add	r3, r2
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	ea44 0103 	orr.w	r1, r4, r3
 8004286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	461a      	mov	r2, r3
 8004294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004298:	4413      	add	r3, r2
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800429e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	461a      	mov	r2, r3
 80042ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042b0:	4413      	add	r3, r2
 80042b2:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80042b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042b8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80042bc:	4798      	blx	r3
 80042be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80042c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da02      	bge.n	80042d0 <lfs_dir_traverse+0x5a0>
                    return res;
 80042ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042ce:	e10b      	b.n	80044e8 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80042d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d12e      	bne.n	8004336 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	3301      	adds	r3, #1
 80042de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fff7 	bl	80032d8 <lfs_tag_size>
 80042ea:	4602      	mov	r2, r0
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d3aa      	bcc.n	800424a <lfs_dir_traverse+0x51a>
 80042f4:	e526      	b.n	8003d44 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80042f6:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80042fa:	029a      	lsls	r2, r3, #10
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	18d1      	adds	r1, r2, r3
 8004300:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004304:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004308:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800430c:	4798      	blx	r3
 800430e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8004312:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004316:	2b00      	cmp	r3, #0
 8004318:	da02      	bge.n	8004320 <lfs_dir_traverse+0x5f0>
                return res;
 800431a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800431e:	e0e3      	b.n	80044e8 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8004320:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10d      	bne.n	8004344 <lfs_dir_traverse+0x614>
 8004328:	e50c      	b.n	8003d44 <lfs_dir_traverse+0x14>
                continue;
 800432a:	bf00      	nop
 800432c:	e50a      	b.n	8003d44 <lfs_dir_traverse+0x14>
            continue;
 800432e:	bf00      	nop
 8004330:	e508      	b.n	8003d44 <lfs_dir_traverse+0x14>
                continue;
 8004332:	bf00      	nop
 8004334:	e506      	b.n	8003d44 <lfs_dir_traverse+0x14>
                    break;
 8004336:	bf00      	nop
        {
 8004338:	e504      	b.n	8003d44 <lfs_dir_traverse+0x14>
 800433a:	bf00      	nop
 800433c:	08003c79 	.word	0x08003c79
 8004340:	600ffc00 	.word	0x600ffc00
                break;
 8004344:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8004346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80ca 	beq.w	80044e4 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8004350:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	33f0      	adds	r3, #240	; 0xf0
 8004360:	443b      	add	r3, r7
 8004362:	3b98      	subs	r3, #152	; 0x98
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8004368:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	33f0      	adds	r3, #240	; 0xf0
 8004378:	443b      	add	r3, r7
 800437a:	3b94      	subs	r3, #148	; 0x94
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8004380:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	33f0      	adds	r3, #240	; 0xf0
 8004390:	443b      	add	r3, r7
 8004392:	3b90      	subs	r3, #144	; 0x90
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8004398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800439c:	1e5a      	subs	r2, r3, #1
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	33f0      	adds	r3, #240	; 0xf0
 80043a8:	443b      	add	r3, r7
 80043aa:	3b8c      	subs	r3, #140	; 0x8c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80043b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	33f0      	adds	r3, #240	; 0xf0
 80043c2:	443b      	add	r3, r7
 80043c4:	3b88      	subs	r3, #136	; 0x88
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80043cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043d0:	1e5a      	subs	r2, r3, #1
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	33f0      	adds	r3, #240	; 0xf0
 80043dc:	443b      	add	r3, r7
 80043de:	3b84      	subs	r3, #132	; 0x84
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80043e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043ea:	1e5a      	subs	r2, r3, #1
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	33f0      	adds	r3, #240	; 0xf0
 80043f6:	443b      	add	r3, r7
 80043f8:	3b80      	subs	r3, #128	; 0x80
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8004400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	33f0      	adds	r3, #240	; 0xf0
 8004410:	443b      	add	r3, r7
 8004412:	3b7c      	subs	r3, #124	; 0x7c
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800441a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800441e:	1e5a      	subs	r2, r3, #1
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	33f0      	adds	r3, #240	; 0xf0
 800442a:	443b      	add	r3, r7
 800442c:	3b7a      	subs	r3, #122	; 0x7a
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8004434:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	33f0      	adds	r3, #240	; 0xf0
 8004444:	443b      	add	r3, r7
 8004446:	3b78      	subs	r3, #120	; 0x78
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 800444e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	33f0      	adds	r3, #240	; 0xf0
 800445e:	443b      	add	r3, r7
 8004460:	3b74      	subs	r3, #116	; 0x74
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8004468:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800446c:	1e5a      	subs	r2, r3, #1
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	33f0      	adds	r3, #240	; 0xf0
 8004478:	443b      	add	r3, r7
 800447a:	3b70      	subs	r3, #112	; 0x70
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8004482:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004486:	1e5a      	subs	r2, r3, #1
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	33f0      	adds	r3, #240	; 0xf0
 8004492:	443b      	add	r3, r7
 8004494:	3b6c      	subs	r3, #108	; 0x6c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 800449a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800449e:	1e5a      	subs	r2, r3, #1
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	33f0      	adds	r3, #240	; 0xf0
 80044aa:	443b      	add	r3, r7
 80044ac:	3b68      	subs	r3, #104	; 0x68
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80044b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	33f0      	adds	r3, #240	; 0xf0
 80044c4:	443b      	add	r3, r7
 80044c6:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80044ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044ce:	3204      	adds	r2, #4
 80044d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044d4:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80044d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044dc:	3b01      	subs	r3, #1
 80044de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80044e2:	e596      	b.n	8004012 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80044e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	37f4      	adds	r7, #244	; 0xf4
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b09f      	sub	sp, #124	; 0x7c
 80044f4:	af04      	add	r7, sp, #16
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004502:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	429a      	cmp	r2, r3
 8004510:	d207      	bcs.n	8004522 <lfs_dir_fetchmatch+0x32>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8004522:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004526:	e342      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8004528:	2300      	movs	r3, #0
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
 800452c:	2300      	movs	r3, #0
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8004534:	2300      	movs	r3, #0
 8004536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004538:	e052      	b.n	80045e0 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800453a:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800453c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8004544:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8004546:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800454a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800454c:	0092      	lsls	r2, r2, #2
 800454e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8004550:	2104      	movs	r1, #4
 8004552:	9103      	str	r1, [sp, #12]
 8004554:	9202      	str	r2, [sp, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	9201      	str	r2, [sp, #4]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2304      	movs	r3, #4
 800455e:	4602      	mov	r2, r0
 8004560:	2100      	movs	r1, #0
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fe fa6e 	bl	8002a44 <lfs_bd_read>
 8004568:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800456a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	3368      	adds	r3, #104	; 0x68
 8004570:	443b      	add	r3, r7
 8004572:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9f8 	bl	800296c <lfs_fromle32>
 800457c:	4602      	mov	r2, r0
 800457e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	3368      	adds	r3, #104	; 0x68
 8004584:	443b      	add	r3, r7
 8004586:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <lfs_dir_fetchmatch+0xac>
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004596:	d001      	beq.n	800459c <lfs_dir_fetchmatch+0xac>
            return err;
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	e308      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80045a2:	d01a      	beq.n	80045da <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80045a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	3368      	adds	r3, #104	; 0x68
 80045aa:	443b      	add	r3, r7
 80045ac:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80045b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b2:	3301      	adds	r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	bfb8      	it	lt
 80045bc:	425b      	neglt	r3, r3
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	3368      	adds	r3, #104	; 0x68
 80045c2:	443b      	add	r3, r7
 80045c4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe f9c0 	bl	8002950 <lfs_scmp>
 80045d0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	dd01      	ble.n	80045da <lfs_dir_fetchmatch+0xea>
            r = i;
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80045da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045dc:	3301      	adds	r3, #1
 80045de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	dda9      	ble.n	800453a <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80045e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	bfb8      	it	lt
 80045f0:	425b      	neglt	r3, r3
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80045fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004600:	3301      	adds	r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	bfb8      	it	lt
 800460a:	425b      	neglt	r3, r3
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8004618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800461a:	2b00      	cmp	r3, #0
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	bfb8      	it	lt
 8004622:	425b      	neglt	r3, r3
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3368      	adds	r3, #104	; 0x68
 8004628:	443b      	add	r3, r7
 800462a:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8004638:	2300      	movs	r3, #0
 800463a:	65bb      	str	r3, [r7, #88]	; 0x58
 800463c:	e2a3      	b.n	8004b86 <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004646:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800464e:	4a96      	ldr	r2, [pc, #600]	; (80048a8 <lfs_dir_fetchmatch+0x3b8>)
 8004650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004658:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800465c:	2300      	movs	r3, #0
 800465e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8004662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe f989 	bl	8002982 <lfs_tole32>
 8004670:	4602      	mov	r2, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	3308      	adds	r3, #8
 800467a:	2204      	movs	r2, #4
 800467c:	4619      	mov	r1, r3
 800467e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004682:	f004 faef 	bl	8008c64 <lfs_crc>
 8004686:	4603      	mov	r3, r0
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe f96c 	bl	800296c <lfs_fromle32>
 8004694:	4602      	mov	r2, r0
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800469a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800469c:	f7fe fe29 	bl	80032f2 <lfs_tag_dsize>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a4:	4413      	add	r3, r2
 80046a6:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80046a8:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80046ae:	69d8      	ldr	r0, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2204      	movs	r2, #4
 80046b6:	9203      	str	r2, [sp, #12]
 80046b8:	f107 0220 	add.w	r2, r7, #32
 80046bc:	9202      	str	r2, [sp, #8]
 80046be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046c0:	9201      	str	r2, [sp, #4]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4603      	mov	r3, r0
 80046c6:	460a      	mov	r2, r1
 80046c8:	2100      	movs	r1, #0
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7fe f9ba 	bl	8002a44 <lfs_bd_read>
 80046d0:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80046d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80046de:	d103      	bne.n	80046e8 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2200      	movs	r2, #0
 80046e4:	759a      	strb	r2, [r3, #22]
                    break;
 80046e6:	e1d6      	b.n	8004a96 <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	e260      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f107 0120 	add.w	r1, r7, #32
 80046f2:	2204      	movs	r2, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f004 fab5 	bl	8008c64 <lfs_crc>
 80046fa:	4603      	mov	r3, r0
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe f94a 	bl	800299a <lfs_frombe32>
 8004706:	4602      	mov	r2, r0
 8004708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470a:	4053      	eors	r3, r2
 800470c:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe fd76 	bl	8003202 <lfs_tag_isvalid>
 8004716:	4603      	mov	r3, r0
 8004718:	f083 0301 	eor.w	r3, r3, #1
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01b      	beq.n	800475a <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8004722:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004724:	f7fe fd8e 	bl	8003244 <lfs_tag_type1>
 8004728:	4603      	mov	r3, r0
 800472a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800472e:	d10d      	bne.n	800474c <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004738:	6992      	ldr	r2, [r2, #24]
 800473a:	fbb3 f1f2 	udiv	r1, r3, r2
 800473e:	fb01 f202 	mul.w	r2, r1, r2
 8004742:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <lfs_dir_fetchmatch+0x25c>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <lfs_dir_fetchmatch+0x25e>
 800474c:	2300      	movs	r3, #0
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	b2da      	uxtb	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	759a      	strb	r2, [r3, #22]
                break;
 8004758:	e19d      	b.n	8004a96 <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fdc8 	bl	80032f2 <lfs_tag_dsize>
 8004762:	4602      	mov	r2, r0
 8004764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	429a      	cmp	r2, r3
 8004770:	d903      	bls.n	800477a <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2200      	movs	r2, #0
 8004776:	759a      	strb	r2, [r3, #22]
                break;
 8004778:	e18d      	b.n	8004a96 <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe fd5f 	bl	8003244 <lfs_tag_type1>
 8004786:	4603      	mov	r3, r0
 8004788:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800478c:	d164      	bne.n	8004858 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800478e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004794:	69dc      	ldr	r4, [r3, #28]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800479c:	3204      	adds	r2, #4
 800479e:	2104      	movs	r1, #4
 80047a0:	9103      	str	r1, [sp, #12]
 80047a2:	f107 011c 	add.w	r1, r7, #28
 80047a6:	9102      	str	r1, [sp, #8]
 80047a8:	9201      	str	r2, [sp, #4]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	4623      	mov	r3, r4
 80047ae:	4602      	mov	r2, r0
 80047b0:	2100      	movs	r1, #0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7fe f946 	bl	8002a44 <lfs_bd_read>
 80047b8:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80047ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d009      	beq.n	80047d4 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80047c6:	d103      	bne.n	80047d0 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	759a      	strb	r2, [r3, #22]
                        break;
 80047ce:	e162      	b.n	8004a96 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80047d2:	e1ec      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f8c8 	bl	800296c <lfs_fromle32>
 80047dc:	4603      	mov	r3, r0
 80047de:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80047e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d003      	beq.n	80047f0 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2200      	movs	r2, #0
 80047ec:	759a      	strb	r2, [r3, #22]
                    break;
 80047ee:	e152      	b.n	8004a96 <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fd46 	bl	8003284 <lfs_tag_chunk>
 80047f8:	4603      	mov	r3, r0
 80047fa:	07db      	lsls	r3, r3, #31
 80047fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047fe:	4053      	eors	r3, r2
 8004800:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800480a:	2204      	movs	r2, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f004 fa29 	bl	8008c64 <lfs_crc>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fd67 	bl	80032f2 <lfs_tag_dsize>
 8004824:	4602      	mov	r2, r0
 8004826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004828:	441a      	add	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004832:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800483a:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800483c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8004842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800484e:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	e720      	b.n	800469a <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8004858:	2304      	movs	r3, #4
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
 800485c:	e032      	b.n	80048c4 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800485e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004864:	69dc      	ldr	r4, [r3, #28]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800486c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800486e:	440a      	add	r2, r1
 8004870:	2101      	movs	r1, #1
 8004872:	9103      	str	r1, [sp, #12]
 8004874:	f107 011b 	add.w	r1, r7, #27
 8004878:	9102      	str	r1, [sp, #8]
 800487a:	9201      	str	r2, [sp, #4]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	4623      	mov	r3, r4
 8004880:	4602      	mov	r2, r0
 8004882:	2100      	movs	r1, #0
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7fe f8dd 	bl	8002a44 <lfs_bd_read>
 800488a:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800488c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 8004892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004894:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004898:	d103      	bne.n	80048a2 <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2200      	movs	r2, #0
 800489e:	759a      	strb	r2, [r3, #22]
 80048a0:	e018      	b.n	80048d4 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 80048a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80048a4:	e183      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
 80048a6:	bf00      	nop
 80048a8:	0800c02c 	.word	0x0800c02c
                }

                crc = lfs_crc(crc, &dat, 1);
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	f107 011b 	add.w	r1, r7, #27
 80048b2:	2201      	movs	r2, #1
 80048b4:	4618      	mov	r0, r3
 80048b6:	f004 f9d5 	bl	8008c64 <lfs_crc>
 80048ba:	4603      	mov	r3, r0
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	3301      	adds	r3, #1
 80048c2:	647b      	str	r3, [r7, #68]	; 0x44
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fd13 	bl	80032f2 <lfs_tag_dsize>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d3c4      	bcc.n	800485e <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fcb4 	bl	8003244 <lfs_tag_type1>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d113      	bne.n	800490a <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe fce7 	bl	80032b8 <lfs_tag_id>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f200 8083 	bhi.w	80049fe <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fcdc 	bl	80032b8 <lfs_tag_id>
 8004900:	4603      	mov	r3, r0
 8004902:	3301      	adds	r3, #1
 8004904:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004908:	e079      	b.n	80049fe <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fc99 	bl	8003244 <lfs_tag_type1>
 8004912:	4603      	mov	r3, r0
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004918:	d134      	bne.n	8004984 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fcbe 	bl	800329e <lfs_tag_splice>
 8004922:	4603      	mov	r3, r0
 8004924:	b29a      	uxth	r2, r3
 8004926:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800492a:	4413      	add	r3, r2
 800492c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8004930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004932:	4ba1      	ldr	r3, [pc, #644]	; (8004bb8 <lfs_dir_fetchmatch+0x6c8>)
 8004934:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8004936:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800493a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800493e:	6a3a      	ldr	r2, [r7, #32]
 8004940:	4293      	cmp	r3, r2
 8004942:	d104      	bne.n	800494e <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 8004944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800494a:	64bb      	str	r3, [r7, #72]	; 0x48
 800494c:	e057      	b.n	80049fe <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 800494e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004954:	d053      	beq.n	80049fe <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fcad 	bl	80032b8 <lfs_tag_id>
 800495e:	4603      	mov	r3, r0
 8004960:	461c      	mov	r4, r3
 8004962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fca7 	bl	80032b8 <lfs_tag_id>
 800496a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800496c:	429c      	cmp	r4, r3
 800496e:	d846      	bhi.n	80049fe <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fc93 	bl	800329e <lfs_tag_splice>
 8004978:	4603      	mov	r3, r0
 800497a:	029a      	lsls	r2, r3, #10
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	4413      	add	r3, r2
 8004980:	64bb      	str	r3, [r7, #72]	; 0x48
 8004982:	e03c      	b.n	80049fe <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fc5c 	bl	8003244 <lfs_tag_type1>
 800498c:	4603      	mov	r3, r0
 800498e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004992:	d134      	bne.n	80049fe <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fc74 	bl	8003284 <lfs_tag_chunk>
 800499c:	4603      	mov	r3, r0
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80049ae:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80049b4:	69dc      	ldr	r4, [r3, #28]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049bc:	3204      	adds	r2, #4
 80049be:	2108      	movs	r1, #8
 80049c0:	9103      	str	r1, [sp, #12]
 80049c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80049c6:	9102      	str	r1, [sp, #8]
 80049c8:	9201      	str	r2, [sp, #4]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	4623      	mov	r3, r4
 80049ce:	4602      	mov	r2, r0
 80049d0:	2100      	movs	r1, #0
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7fe f836 	bl	8002a44 <lfs_bd_read>
 80049d8:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80049da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 80049e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80049e6:	d103      	bne.n	80049f0 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2200      	movs	r2, #0
 80049ec:	759a      	strb	r2, [r3, #22]
                        break;
 80049ee:	e052      	b.n	8004a96 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80049f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f2:	e0dc      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 80049f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fbce 	bl	800319a <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a02:	405a      	eors	r2, r3
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f47f ae46 	bne.w	800469a <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004a0e:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004a14:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8004a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a18:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	f107 0210 	add.w	r2, r7, #16
 8004a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a24:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004a28:	4798      	blx	r3
 8004a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da09      	bge.n	8004a46 <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004a38:	d103      	bne.n	8004a42 <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	759a      	strb	r2, [r3, #22]
 8004a40:	e029      	b.n	8004a96 <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8004a44:	e0b3      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a50:	e623      	b.n	800469a <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a56:	405a      	eors	r2, r3
 8004a58:	4b58      	ldr	r3, [pc, #352]	; (8004bbc <lfs_dir_fetchmatch+0x6cc>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a66:	e618      	b.n	800469a <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8004a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	f47f ae15 	bne.w	800469a <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fc20 	bl	80032b8 <lfs_tag_id>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fc1a 	bl	80032b8 <lfs_tag_id>
 8004a84:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8004a86:	429c      	cmp	r4, r3
 8004a88:	f63f ae07 	bhi.w	800469a <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a94:	e601      	b.n	800469a <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d100      	bne.n	8004aa0 <lfs_dir_fetchmatch+0x5b0>
 8004a9e:	e05d      	b.n	8004b5c <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	333c      	adds	r3, #60	; 0x3c
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe fcad 	bl	8003408 <lfs_gstate_hasmovehere>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d028      	beq.n	8004b06 <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fbfd 	bl	80032b8 <lfs_tag_id>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461c      	mov	r4, r3
 8004ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe fbf7 	bl	80032b8 <lfs_tag_id>
 8004aca:	4603      	mov	r3, r0
 8004acc:	429c      	cmp	r4, r3
 8004ace:	d104      	bne.n	8004ada <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8004ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad8:	e015      	b.n	8004b06 <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8004ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae0:	d011      	beq.n	8004b06 <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fbe6 	bl	80032b8 <lfs_tag_id>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461c      	mov	r4, r3
 8004af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fbe0 	bl	80032b8 <lfs_tag_id>
 8004af8:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d203      	bcs.n	8004b06 <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8004afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b00:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004b04:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8004b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00f      	beq.n	8004b2c <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8004b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe fbd2 	bl	80032b8 <lfs_tag_id>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	8a9b      	ldrh	r3, [r3, #20]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fd feb4 	bl	800288c <lfs_min>
 8004b24:	4603      	mov	r3, r0
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b2a:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8004b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fb67 	bl	8003202 <lfs_tag_isvalid>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8004b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3c:	e037      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8004b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fbb9 	bl	80032b8 <lfs_tag_id>
 8004b46:	4603      	mov	r3, r0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	8a9b      	ldrh	r3, [r3, #20]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d202      	bcs.n	8004b58 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8004b52:	f06f 0301 	mvn.w	r3, #1
 8004b56:	e02a      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e028      	b.n	8004bae <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fa94 	bl	800308c <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8004b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b66:	3301      	adds	r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	bfb8      	it	lt
 8004b70:	425b      	neglt	r3, r3
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	3368      	adds	r3, #104	; 0x68
 8004b76:	443b      	add	r3, r7
 8004b78:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8004b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b82:	3301      	adds	r3, #1
 8004b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	f77f ad58 	ble.w	800463e <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	490a      	ldr	r1, [pc, #40]	; (8004bc0 <lfs_dir_fetchmatch+0x6d0>)
 8004b98:	9101      	str	r1, [sp, #4]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8004ba2:	4908      	ldr	r1, [pc, #32]	; (8004bc4 <lfs_dir_fetchmatch+0x6d4>)
 8004ba4:	4808      	ldr	r0, [pc, #32]	; (8004bc8 <lfs_dir_fetchmatch+0x6d8>)
 8004ba6:	f006 f929 	bl	800adfc <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8004baa:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	376c      	adds	r7, #108	; 0x6c
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	000ffc00 	.word	0x000ffc00
 8004bbc:	7ffffc00 	.word	0x7ffffc00
 8004bc0:	0800bfe8 	.word	0x0800bfe8
 8004bc4:	0800bee4 	.word	0x0800bee4
 8004bc8:	0800bff4 	.word	0x0800bff4

08004bcc <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9303      	str	r3, [sp, #12]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	2300      	movs	r3, #0
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff fc7c 	bl	80044f0 <lfs_dir_fetchmatch>
 8004bf8:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8004c10:	f107 0310 	add.w	r3, r7, #16
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <lfs_dir_getgstate+0x5c>)
 8004c18:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <lfs_dir_getgstate+0x60>)
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7fe ff35 	bl	8003a8c <lfs_dir_get>
 8004c22:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da05      	bge.n	8004c36 <lfs_dir_getgstate+0x32>
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f113 0f02 	cmn.w	r3, #2
 8004c30:	d001      	beq.n	8004c36 <lfs_dir_getgstate+0x32>
        return res;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	e00f      	b.n	8004c56 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f113 0f02 	cmn.w	r3, #2
 8004c3c:	d00a      	beq.n	8004c54 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8004c3e:	f107 0310 	add.w	r3, r7, #16
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fc00 	bl	8003448 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fe fb63 	bl	800331a <lfs_gstate_xor>
    }

    return 0;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	7ff0000c 	.word	0x7ff0000c
 8004c64:	7ff00000 	.word	0x7ff00000

08004c68 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b08f      	sub	sp, #60	; 0x3c
 8004c6c:	af04      	add	r7, sp, #16
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	689c      	ldr	r4, [r3, #8]
 8004c86:	68b8      	ldr	r0, [r7, #8]
 8004c88:	f7fe fb26 	bl	80032d8 <lfs_tag_size>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7fd fdfb 	bl	800288c <lfs_min>
 8004c96:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8004c98:	6a3c      	ldr	r4, [r7, #32]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	6852      	ldr	r2, [r2, #4]
 8004ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ca4:	6849      	ldr	r1, [r1, #4]
 8004ca6:	69b8      	ldr	r0, [r7, #24]
 8004ca8:	9003      	str	r0, [sp, #12]
 8004caa:	9102      	str	r1, [sp, #8]
 8004cac:	9201      	str	r2, [sp, #4]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	6a38      	ldr	r0, [r7, #32]
 8004cb8:	f7fe f808 	bl	8002ccc <lfs_bd_cmp>
 8004cbc:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <lfs_dir_find_match+0x60>
        return res;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	e014      	b.n	8004cf2 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	689c      	ldr	r4, [r3, #8]
 8004ccc:	68b8      	ldr	r0, [r7, #8]
 8004cce:	f7fe fb03 	bl	80032d8 <lfs_tag_size>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	d00b      	beq.n	8004cf0 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	689c      	ldr	r4, [r3, #8]
 8004cdc:	68b8      	ldr	r0, [r7, #8]
 8004cde:	f7fe fafb 	bl	80032d8 <lfs_tag_size>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	d201      	bcs.n	8004cec <lfs_dir_find_match+0x84>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e002      	b.n	8004cf2 <lfs_dir_find_match+0x8a>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e000      	b.n	8004cf2 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	372c      	adds	r7, #44	; 0x2c
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd90      	pop	{r4, r7, pc}
	...

08004cfc <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b093      	sub	sp, #76	; 0x4c
 8004d00:	af04      	add	r7, sp, #16
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <lfs_dir_find+0x22>
        *id = 0x3ff;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004d1c:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8004d1e:	4b6e      	ldr	r3, [pc, #440]	; (8004ed8 <lfs_dir_find+0x1dc>)
 8004d20:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1a      	ldr	r2, [r3, #32]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8004d32:	496a      	ldr	r1, [pc, #424]	; (8004edc <lfs_dir_find+0x1e0>)
 8004d34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d36:	f006 fb53 	bl	800b3e0 <strspn>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	4413      	add	r3, r2
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8004d42:	4966      	ldr	r1, [pc, #408]	; (8004edc <lfs_dir_find+0x1e0>)
 8004d44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d46:	f006 f949 	bl	800afdc <strcspn>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <lfs_dir_find+0x62>
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	4b62      	ldr	r3, [pc, #392]	; (8004ee0 <lfs_dir_find+0x1e4>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d00a      	beq.n	8004d74 <lfs_dir_find+0x78>
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d10c      	bne.n	8004d7e <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8004d64:	2202      	movs	r2, #2
 8004d66:	495f      	ldr	r1, [pc, #380]	; (8004ee4 <lfs_dir_find+0x1e8>)
 8004d68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d6a:	f005 fc39 	bl	800a5e0 <memcmp>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <lfs_dir_find+0x82>
            name += namelen;
 8004d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	4413      	add	r3, r2
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8004d7c:	e7d9      	b.n	8004d32 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8004d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	4413      	add	r3, r2
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8004d86:	2301      	movs	r3, #1
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8004d8a:	4954      	ldr	r1, [pc, #336]	; (8004edc <lfs_dir_find+0x1e0>)
 8004d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d8e:	f006 fb27 	bl	800b3e0 <strspn>
 8004d92:	4602      	mov	r2, r0
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	4413      	add	r3, r2
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8004d9a:	4950      	ldr	r1, [pc, #320]	; (8004edc <lfs_dir_find+0x1e0>)
 8004d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d9e:	f006 f91d 	bl	800afdc <strcspn>
 8004da2:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01d      	beq.n	8004de6 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d112      	bne.n	8004dd6 <lfs_dir_find+0xda>
 8004db0:	2202      	movs	r2, #2
 8004db2:	494c      	ldr	r1, [pc, #304]	; (8004ee4 <lfs_dir_find+0x1e8>)
 8004db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004db6:	f005 fc13 	bl	800a5e0 <memcmp>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <lfs_dir_find+0xda>
                depth -= 1;
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d107      	bne.n	8004ddc <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8004dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8004dd4:	e7ad      	b.n	8004d32 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	3301      	adds	r3, #1
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8004ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	4413      	add	r3, r2
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8004de4:	e7d1      	b.n	8004d8a <lfs_dir_find+0x8e>
                break;
 8004de6:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <lfs_dir_find+0xf8>
            return tag;
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	e06c      	b.n	8004ece <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df8:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe fa31 	bl	8003264 <lfs_tag_type3>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d002      	beq.n	8004e0e <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8004e08:	f06f 0313 	mvn.w	r3, #19
 8004e0c:	e05f      	b.n	8004ece <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fa51 	bl	80032b8 <lfs_tag_id>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d01c      	beq.n	8004e5c <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fe fa47 	bl	80032b8 <lfs_tag_id>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e32:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004e3a:	9200      	str	r2, [sp, #0]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <lfs_dir_find+0x1ec>)
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7fe fe23 	bl	8003a8c <lfs_dir_get>
 8004e46:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	da01      	bge.n	8004e52 <lfs_dir_find+0x156>
                return res;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	e03d      	b.n	8004ece <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	3318      	adds	r3, #24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe f99f 	bl	800319a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8004e62:	212f      	movs	r1, #47	; 0x2f
 8004e64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e66:	f006 f8ac 	bl	800afc2 <strchr>
 8004e6a:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <lfs_dir_find+0x178>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	e000      	b.n	8004e76 <lfs_dir_find+0x17a>
 8004e74:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	613a      	str	r2, [r7, #16]
 8004e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e7c:	617a      	str	r2, [r7, #20]
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004e82:	f107 0210 	add.w	r2, r7, #16
 8004e86:	9203      	str	r2, [sp, #12]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <lfs_dir_find+0x1f0>)
 8004e8a:	9202      	str	r2, [sp, #8]
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8004e96:	4622      	mov	r2, r4
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff fb28 	bl	80044f0 <lfs_dir_fetchmatch>
 8004ea0:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	da01      	bge.n	8004eac <lfs_dir_find+0x1b0>
                return tag;
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	e010      	b.n	8004ece <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	4413      	add	r3, r2
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8004eba:	e73a      	b.n	8004d32 <lfs_dir_find+0x36>
            if (!dir->split) {
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	7ddb      	ldrb	r3, [r3, #23]
 8004ec0:	f083 0301 	eor.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0c8      	beq.n	8004e5c <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8004eca:	f06f 0301 	mvn.w	r3, #1
    }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	373c      	adds	r7, #60	; 0x3c
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	002ffc00 	.word	0x002ffc00
 8004edc:	0800c034 	.word	0x0800c034
 8004ee0:	0800c038 	.word	0x0800c038
 8004ee4:	0800c03c 	.word	0x0800c03c
 8004ee8:	700ffc00 	.word	0x700ffc00
 8004eec:	08004c69 	.word	0x08004c69

08004ef0 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b08b      	sub	sp, #44	; 0x2c
 8004ef4:	af04      	add	r7, sp, #16
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f103 0010 	add.w	r0, r3, #16
 8004f04:	68fc      	ldr	r4, [r7, #12]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	6852      	ldr	r2, [r2, #4]
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	9103      	str	r1, [sp, #12]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	9102      	str	r1, [sp, #8]
 8004f16:	9201      	str	r2, [sp, #4]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	4601      	mov	r1, r0
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7fd ffd5 	bl	8002ed0 <lfs_bd_prog>
 8004f26:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <lfs_dir_commitprog+0x42>
        return err;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e010      	b.n	8004f54 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f003 fe92 	bl	8008c64 <lfs_crc>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	605a      	str	r2, [r3, #4]
    return 0;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd90      	pop	{r4, r7, pc}

08004f5c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b08f      	sub	sp, #60	; 0x3c
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fe f9c1 	bl	80032f2 <lfs_tag_dsize>
 8004f70:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	441a      	add	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d902      	bls.n	8004f88 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8004f82:	f06f 031b 	mvn.w	r3, #27
 8004f86:	e065      	b.n	8005054 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4053      	eors	r3, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fd fd0c 	bl	80029b2 <lfs_tobe32>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8004f9e:	f107 0214 	add.w	r2, r7, #20
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff ffa2 	bl	8004ef0 <lfs_dir_commitprog>
 8004fac:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <lfs_dir_commitattr+0x5c>
        return err;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	e04d      	b.n	8005054 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db0c      	blt.n	8004fd8 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	3b04      	subs	r3, #4
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7ff ff92 	bl	8004ef0 <lfs_dir_commitprog>
 8004fcc:	61f8      	str	r0, [r7, #28]
        if (err) {
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d039      	beq.n	8005048 <lfs_dir_commitattr+0xec>
            return err;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	e03d      	b.n	8005054 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004fdc:	2300      	movs	r3, #0
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	e02d      	b.n	800503e <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004fe2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8004fea:	1f1c      	subs	r4, r3, #4
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	440a      	add	r2, r1
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	9103      	str	r1, [sp, #12]
 8004ffc:	f107 0113 	add.w	r1, r7, #19
 8005000:	9102      	str	r1, [sp, #8]
 8005002:	9201      	str	r2, [sp, #4]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	4623      	mov	r3, r4
 8005008:	4602      	mov	r2, r0
 800500a:	2100      	movs	r1, #0
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7fd fd19 	bl	8002a44 <lfs_bd_read>
 8005012:	61f8      	str	r0, [r7, #28]
            if (err) {
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <lfs_dir_commitattr+0xc2>
                return err;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	e01a      	b.n	8005054 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800501e:	f107 0213 	add.w	r2, r7, #19
 8005022:	2301      	movs	r3, #1
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff ff62 	bl	8004ef0 <lfs_dir_commitprog>
 800502c:	61f8      	str	r0, [r7, #28]
            if (err) {
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <lfs_dir_commitattr+0xdc>
                return err;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	e00d      	b.n	8005054 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	3301      	adds	r3, #1
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	3b04      	subs	r3, #4
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	429a      	cmp	r2, r3
 8005046:	d3cc      	bcc.n	8004fe2 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	609a      	str	r2, [r3, #8]
    return 0;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	372c      	adds	r7, #44	; 0x2c
 8005058:	46bd      	mov	sp, r7
 800505a:	bd90      	pop	{r4, r7, pc}

0800505c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b097      	sub	sp, #92	; 0x5c
 8005060:	af04      	add	r7, sp, #16
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fd fc2d 	bl	80028d6 <lfs_alignup>
 800507c:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8005086:	e0a6      	b.n	80051d6 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8005090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd fbf6 	bl	800288c <lfs_min>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	4413      	add	r3, r2
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 80050a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d206      	bcs.n	80050be <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	3b08      	subs	r3, #8
 80050b4:	4619      	mov	r1, r3
 80050b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80050b8:	f7fd fbe8 	bl	800288c <lfs_min>
 80050bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c2:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2204      	movs	r2, #4
 80050cc:	9203      	str	r2, [sp, #12]
 80050ce:	f107 0214 	add.w	r2, r7, #20
 80050d2:	9202      	str	r2, [sp, #8]
 80050d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050d6:	9201      	str	r2, [sp, #4]
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2304      	movs	r3, #4
 80050dc:	460a      	mov	r2, r1
 80050de:	2100      	movs	r1, #0
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fd fcaf 	bl	8002a44 <lfs_bd_read>
 80050e6:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <lfs_dir_commitcrc+0x9e>
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80050f4:	d001      	beq.n	80050fa <lfs_dir_commitcrc+0x9e>
            return err;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	e0e8      	b.n	80052cc <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fd fc4c 	bl	800299a <lfs_frombe32>
 8005102:	4603      	mov	r3, r0
 8005104:	43db      	mvns	r3, r3
 8005106:	0fdb      	lsrs	r3, r3, #31
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8005112:	7efb      	ldrb	r3, [r7, #27]
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	051a      	lsls	r2, r3, #20
 800511a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	1acb      	subs	r3, r1, r3
 8005120:	4313      	orrs	r3, r2
 8005122:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8005126:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800512a:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4053      	eors	r3, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f7fd fc3c 	bl	80029b2 <lfs_tobe32>
 800513a:	4603      	mov	r3, r0
 800513c:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f107 010c 	add.w	r1, r7, #12
 8005146:	2204      	movs	r2, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f003 fd8b 	bl	8008c64 <lfs_crc>
 800514e:	4602      	mov	r2, r0
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4618      	mov	r0, r3
 800515a:	f7fd fc12 	bl	8002982 <lfs_tole32>
 800515e:	4603      	mov	r3, r0
 8005160:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f103 0010 	add.w	r0, r3, #16
 8005168:	687c      	ldr	r4, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	6852      	ldr	r2, [r2, #4]
 8005172:	2108      	movs	r1, #8
 8005174:	9103      	str	r1, [sp, #12]
 8005176:	f107 010c 	add.w	r1, r7, #12
 800517a:	9102      	str	r1, [sp, #8]
 800517c:	9201      	str	r2, [sp, #4]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	4622      	mov	r2, r4
 8005184:	4601      	mov	r1, r0
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd fea2 	bl	8002ed0 <lfs_bd_prog>
 800518c:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <lfs_dir_commitcrc+0x13c>
            return err;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	e099      	b.n	80052cc <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8005198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe f892 	bl	80032d8 <lfs_tag_size>
 80051b4:	4603      	mov	r3, r0
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	441a      	add	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80051c2:	7efb      	ldrb	r3, [r7, #27]
 80051c4:	07da      	lsls	r2, r3, #31
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	405a      	eors	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d4:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051dc:	429a      	cmp	r2, r3
 80051de:	f63f af53 	bhi.w	8005088 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f103 0110 	add.w	r1, r3, #16
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	2300      	movs	r3, #0
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fd fe3b 	bl	8002e68 <lfs_bd_sync>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <lfs_dir_commitcrc+0x1a2>
        return err;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	e066      	b.n	80052cc <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8005208:	e05b      	b.n	80052c2 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800520a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800520e:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005214:	e030      	b.n	8005278 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8005216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521a:	429a      	cmp	r2, r3
 800521c:	d106      	bne.n	800522c <lfs_dir_commitcrc+0x1d0>
 800521e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005222:	429a      	cmp	r2, r3
 8005224:	d002      	beq.n	800522c <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8005226:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800522a:	e04f      	b.n	80052cc <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800522c:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800522e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8005234:	1d18      	adds	r0, r3, #4
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2201      	movs	r2, #1
 800523c:	9203      	str	r2, [sp, #12]
 800523e:	f107 020b 	add.w	r2, r7, #11
 8005242:	9202      	str	r2, [sp, #8]
 8005244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005246:	9201      	str	r2, [sp, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	4603      	mov	r3, r0
 800524c:	460a      	mov	r2, r1
 800524e:	2100      	movs	r1, #0
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fd fbf7 	bl	8002a44 <lfs_bd_read>
 8005256:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <lfs_dir_commitcrc+0x206>
                return err;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	e034      	b.n	80052cc <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8005262:	f107 030b 	add.w	r3, r7, #11
 8005266:	2201      	movs	r2, #1
 8005268:	4619      	mov	r1, r3
 800526a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800526c:	f003 fcfa 	bl	8008c64 <lfs_crc>
 8005270:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	3301      	adds	r3, #1
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	3304      	adds	r3, #4
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	429a      	cmp	r2, r3
 8005280:	d3c9      	bcc.n	8005216 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8005288:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800528c:	e01e      	b.n	80052cc <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800528e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005298:	4618      	mov	r0, r3
 800529a:	f7fd faf7 	bl	800288c <lfs_min>
 800529e:	4602      	mov	r2, r0
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	4413      	add	r3, r2
 80052a4:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 80052a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d206      	bcs.n	80052bc <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	3b08      	subs	r3, #8
 80052b2:	4619      	mov	r1, r3
 80052b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052b6:	f7fd fae9 	bl	800288c <lfs_min>
 80052ba:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	3304      	adds	r3, #4
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80052c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d39f      	bcc.n	800520a <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	374c      	adds	r7, #76	; 0x4c
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd90      	pop	{r4, r7, pc}

080052d4 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af04      	add	r7, sp, #16
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	e016      	b.n	8005312 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3301      	adds	r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	bfb8      	it	lt
 80052f0:	425b      	neglt	r3, r3
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	4413      	add	r3, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe fa2c 	bl	8003758 <lfs_alloc>
 8005300:	60f8      	str	r0, [r7, #12]
        if (err) {
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <lfs_dir_alloc+0x38>
            return err;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	e058      	b.n	80053be <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3301      	adds	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b01      	cmp	r3, #1
 8005316:	dde5      	ble.n	80052e4 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8005328:	2004      	movs	r0, #4
 800532a:	9003      	str	r0, [sp, #12]
 800532c:	9202      	str	r2, [sp, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	9201      	str	r2, [sp, #4]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2304      	movs	r3, #4
 8005336:	460a      	mov	r2, r1
 8005338:	2100      	movs	r1, #0
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fd fb82 	bl	8002a44 <lfs_bd_read>
 8005340:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	4618      	mov	r0, r3
 8005348:	f7fd fb10 	bl	800296c <lfs_fromle32>
 800534c:	4602      	mov	r2, r0
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <lfs_dir_alloc+0x90>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800535e:	d001      	beq.n	8005364 <lfs_dir_alloc+0x90>
        return err;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	e02c      	b.n	80053be <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	dd0e      	ble.n	800538c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	3301      	adds	r3, #1
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f7fd faa8 	bl	80028d6 <lfs_alignup>
 8005386:	4602      	mov	r2, r0
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2204      	movs	r2, #4
 8005390:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005398:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2200      	movs	r2, #0
 800539e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053a6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ae:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2200      	movs	r2, #0
 80053ba:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b092      	sub	sp, #72	; 0x48
 80053ca:	af04      	add	r7, sp, #16
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80053d4:	f107 0310 	add.w	r3, r7, #16
 80053d8:	4619      	mov	r1, r3
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff ff7a 	bl	80052d4 <lfs_dir_alloc>
 80053e0:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <lfs_dir_split+0x26>
        return err;
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	e03c      	b.n	8005466 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	7ddb      	ldrb	r3, [r3, #23]
 80053f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8005400:	f107 0110 	add.w	r1, r7, #16
 8005404:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005408:	9302      	str	r3, [sp, #8]
 800540a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f879 	bl	8005510 <lfs_dir_compact>
 800541e:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	da01      	bge.n	800542a <lfs_dir_split+0x64>
        return res;
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	e01d      	b.n	8005466 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2201      	movs	r2, #1
 800543a:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3320      	adds	r3, #32
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7fd fe51 	bl	80030ec <lfs_pair_cmp>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <lfs_dir_split+0x9e>
 8005450:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3738      	adds	r7, #56	; 0x38
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800547e:	68b8      	ldr	r0, [r7, #8]
 8005480:	f7fd ff37 	bl	80032f2 <lfs_tag_dsize>
 8005484:	4602      	mov	r2, r0
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	441a      	add	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	601a      	str	r2, [r3, #0]
    return 0;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	f7ff fd51 	bl	8004f5c <lfs_dir_commitattr>
 80054ba:	4603      	mov	r3, r0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	dd11      	ble.n	80054fc <lfs_dir_needsrelocation+0x38>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	3301      	adds	r3, #1
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054e4:	3201      	adds	r2, #1
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80054ee:	fb01 f202 	mul.w	r2, r1, r2
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <lfs_dir_needsrelocation+0x38>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <lfs_dir_needsrelocation+0x3a>
 80054fc:	2300      	movs	r3, #0
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b0a4      	sub	sp, #144	; 0x90
 8005514:	af0a      	add	r7, sp, #40	; 0x28
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800551e:	2300      	movs	r3, #0
 8005520:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ffcc 	bl	80054c4 <lfs_dir_needsrelocation>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800553c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <lfs_dir_compact+0x52>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	657a      	str	r2, [r7, #84]	; 0x54
 800554a:	2201      	movs	r2, #1
 800554c:	65ba      	str	r2, [r7, #88]	; 0x58
 800554e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f7fd fdc9 	bl	80030ec <lfs_pair_cmp>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 8155 	bne.w	800580c <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005568:	2300      	movs	r3, #0
 800556a:	643b      	str	r3, [r7, #64]	; 0x40
 800556c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005570:	647b      	str	r3, [r7, #68]	; 0x44
 8005572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005576:	64bb      	str	r3, [r7, #72]	; 0x48
 8005578:	2300      	movs	r3, #0
 800557a:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <lfs_dir_compact+0x80>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800558a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558c:	3b08      	subs	r3, #8
 800558e:	e003      	b.n	8005598 <lfs_dir_compact+0x88>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8005598:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7fd fd41 	bl	8003028 <lfs_bd_erase>
 80055a6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80055a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d006      	beq.n	80055bc <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 80055ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80055b4:	f000 812c 	beq.w	8005810 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80055b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ba:	e187      	b.n	80058cc <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fd f9de 	bl	8002982 <lfs_tole32>
 80055c6:	4602      	mov	r2, r0
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80055d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80055d6:	2304      	movs	r3, #4
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff fc89 	bl	8004ef0 <lfs_dir_commitprog>
 80055de:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fd f9c1 	bl	800296c <lfs_fromle32>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]
            if (err) {
 80055f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80055f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80055fc:	f000 810a 	beq.w	8005814 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8005600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005602:	e163      	b.n	80058cc <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8005604:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005608:	425b      	negs	r3, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	637a      	str	r2, [r7, #52]	; 0x34
 8005612:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005616:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8005618:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800561c:	9208      	str	r2, [sp, #32]
 800561e:	4aad      	ldr	r2, [pc, #692]	; (80058d4 <lfs_dir_compact+0x3c4>)
 8005620:	9207      	str	r2, [sp, #28]
 8005622:	9306      	str	r3, [sp, #24]
 8005624:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8005628:	9305      	str	r3, [sp, #20]
 800562a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	2300      	movs	r3, #0
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	4ba8      	ldr	r3, [pc, #672]	; (80058d8 <lfs_dir_compact+0x3c8>)
 8005636:	9302      	str	r3, [sp, #8]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005644:	2200      	movs	r2, #0
 8005646:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7fe fb71 	bl	8003d30 <lfs_dir_traverse>
 800564e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8005650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8005656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005658:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800565c:	f000 80dc 	beq.w	8005818 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8005660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005662:	e133      	b.n	80058cc <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	3318      	adds	r3, #24
 8005668:	4618      	mov	r0, r3
 800566a:	f7fd fd24 	bl	80030b6 <lfs_pair_isnull>
 800566e:	4603      	mov	r3, r0
 8005670:	f083 0301 	eor.w	r3, r3, #1
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d022      	beq.n	80056c0 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	3318      	adds	r3, #24
 800567e:	4618      	mov	r0, r3
 8005680:	f7fd fda5 	bl	80031ce <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	7ddb      	ldrb	r3, [r3, #23]
 8005688:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800568c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800568e:	4a93      	ldr	r2, [pc, #588]	; (80058dc <lfs_dir_compact+0x3cc>)
 8005690:	431a      	orrs	r2, r3
                        dir->tail);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8005696:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff fc5e 	bl	8004f5c <lfs_dir_commitattr>
 80056a0:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3318      	adds	r3, #24
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd fd77 	bl	800319a <lfs_pair_fromle32>
                if (err) {
 80056ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d006      	beq.n	80056c0 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80056b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80056b8:	f000 80b0 	beq.w	800581c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80056bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056be:	e105      	b.n	80058cc <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80056c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80056cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056d0:	f083 0301 	eor.w	r3, r3, #1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d011      	beq.n	80056fe <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80056e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd fe17 	bl	800331a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056f6:	4611      	mov	r1, r2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fd fe0e 	bl	800331a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd fe05 	bl	800331a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800571c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005720:	461a      	mov	r2, r3
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fa6d 	bl	8004c04 <lfs_dir_getgstate>
 800572a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800572c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <lfs_dir_compact+0x226>
                return err;
 8005732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005734:	e0ca      	b.n	80058cc <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8005736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fe12 	bl	8003364 <lfs_gstate_iszero>
 8005740:	4603      	mov	r3, r0
 8005742:	f083 0301 	eor.w	r3, r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800574c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005750:	4618      	mov	r0, r3
 8005752:	f7fd fe99 	bl	8003488 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8005756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800575e:	4a60      	ldr	r2, [pc, #384]	; (80058e0 <lfs_dir_compact+0x3d0>)
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff fbfb 	bl	8004f5c <lfs_dir_commitattr>
 8005766:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8005768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800576e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005770:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005774:	d054      	beq.n	8005820 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8005776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005778:	e0a8      	b.n	80058cc <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800577a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800577e:	4619      	mov	r1, r3
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fc6b 	bl	800505c <lfs_dir_commitcrc>
 8005786:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800578e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005790:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005794:	d046      	beq.n	8005824 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8005796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005798:	e098      	b.n	80058cc <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800579a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057a0:	6992      	ldr	r2, [r2, #24]
 80057a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80057a6:	fb01 f202 	mul.w	r2, r1, r2
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <lfs_dir_compact+0x2ae>
 80057b0:	4b4c      	ldr	r3, [pc, #304]	; (80058e4 <lfs_dir_compact+0x3d4>)
 80057b2:	4a4d      	ldr	r2, [pc, #308]	; (80058e8 <lfs_dir_compact+0x3d8>)
 80057b4:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 80057b8:	484c      	ldr	r0, [pc, #304]	; (80058ec <lfs_dir_compact+0x3dc>)
 80057ba:	f004 fe99 	bl	800a4f0 <__assert_func>
            lfs_pair_swap(dir->pair);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fd fc63 	bl	800308c <lfs_pair_swap>
            dir->count = end - begin;
 80057c6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80057ca:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80057d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80057dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3348      	adds	r3, #72	; 0x48
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80057ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057f2:	f083 0301 	eor.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d064      	beq.n	80058c6 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	333c      	adds	r3, #60	; 0x3c
 8005802:	3230      	adds	r2, #48	; 0x30
 8005804:	ca07      	ldmia	r2, {r0, r1, r2}
 8005806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800580a:	e05c      	b.n	80058c6 <lfs_dir_compact+0x3b6>
        goto relocate;
 800580c:	bf00      	nop
 800580e:	e00a      	b.n	8005826 <lfs_dir_compact+0x316>
                    goto relocate;
 8005810:	bf00      	nop
 8005812:	e008      	b.n	8005826 <lfs_dir_compact+0x316>
                    goto relocate;
 8005814:	bf00      	nop
 8005816:	e006      	b.n	8005826 <lfs_dir_compact+0x316>
                    goto relocate;
 8005818:	bf00      	nop
 800581a:	e004      	b.n	8005826 <lfs_dir_compact+0x316>
                        goto relocate;
 800581c:	bf00      	nop
 800581e:	e002      	b.n	8005826 <lfs_dir_compact+0x316>
                        goto relocate;
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <lfs_dir_compact+0x316>
                    goto relocate;
 8005824:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3310      	adds	r3, #16
 8005830:	4619      	mov	r1, r3
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7fd f8e0 	bl	80029f8 <lfs_cache_drop>
        if (!tired) {
 8005838:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800583c:	f083 0301 	eor.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <lfs_dir_compact+0x3e0>)
 800584c:	9200      	str	r2, [sp, #0]
 800584e:	f240 725a 	movw	r2, #1882	; 0x75a
 8005852:	4926      	ldr	r1, [pc, #152]	; (80058ec <lfs_dir_compact+0x3dc>)
 8005854:	4827      	ldr	r0, [pc, #156]	; (80058f4 <lfs_dir_compact+0x3e4>)
 8005856:	f005 fad1 	bl	800adfc <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	617a      	str	r2, [r7, #20]
 8005860:	2201      	movs	r2, #1
 8005862:	61ba      	str	r2, [r7, #24]
 8005864:	f107 0214 	add.w	r2, r7, #20
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f7fd fc3e 	bl	80030ec <lfs_pair_cmp>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10c      	bne.n	8005890 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <lfs_dir_compact+0x3e0>)
 800587c:	9200      	str	r2, [sp, #0]
 800587e:	f240 725f 	movw	r2, #1887	; 0x75f
 8005882:	491a      	ldr	r1, [pc, #104]	; (80058ec <lfs_dir_compact+0x3dc>)
 8005884:	481c      	ldr	r0, [pc, #112]	; (80058f8 <lfs_dir_compact+0x3e8>)
 8005886:	f005 fab9 	bl	800adfc <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800588a:	f06f 031b 	mvn.w	r3, #27
 800588e:	e01d      	b.n	80058cc <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7fd ff5e 	bl	8003758 <lfs_alloc>
 800589c:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800589e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <lfs_dir_compact+0x3ae>
 80058a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a6:	f113 0f1c 	cmn.w	r3, #28
 80058aa:	d106      	bne.n	80058ba <lfs_dir_compact+0x3aa>
 80058ac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80058b0:	f083 0301 	eor.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <lfs_dir_compact+0x3ae>
            return err;
 80058ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058bc:	e006      	b.n	80058cc <lfs_dir_compact+0x3bc>
        }

        tired = false;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 80058c4:	e64d      	b.n	8005562 <lfs_dir_compact+0x52>
        break;
 80058c6:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80058c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3768      	adds	r7, #104	; 0x68
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	0800549b 	.word	0x0800549b
 80058d8:	400ffc00 	.word	0x400ffc00
 80058dc:	000ffc08 	.word	0x000ffc08
 80058e0:	7ffffc0c 	.word	0x7ffffc0c
 80058e4:	0800c040 	.word	0x0800c040
 80058e8:	0800c954 	.word	0x0800c954
 80058ec:	0800bee4 	.word	0x0800bee4
 80058f0:	0800bfe8 	.word	0x0800bfe8
 80058f4:	0800c068 	.word	0x0800c068
 80058f8:	0800c08c 	.word	0x0800c08c

080058fc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b097      	sub	sp, #92	; 0x5c
 8005900:	af0a      	add	r7, sp, #40	; 0x28
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800590a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8005910:	e058      	b.n	80059c4 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	b29b      	uxth	r3, r3
 800591a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591c:	b292      	uxth	r2, r2
 800591e:	4252      	negs	r2, r2
 8005920:	b292      	uxth	r2, r2
 8005922:	b212      	sxth	r2, r2
 8005924:	f107 0118 	add.w	r1, r7, #24
 8005928:	9108      	str	r1, [sp, #32]
 800592a:	4979      	ldr	r1, [pc, #484]	; (8005b10 <lfs_dir_splittingcompact+0x214>)
 800592c:	9107      	str	r1, [sp, #28]
 800592e:	9206      	str	r2, [sp, #24]
 8005930:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005934:	9205      	str	r2, [sp, #20]
 8005936:	9304      	str	r3, [sp, #16]
 8005938:	2300      	movs	r3, #0
 800593a:	9303      	str	r3, [sp, #12]
 800593c:	4b75      	ldr	r3, [pc, #468]	; (8005b14 <lfs_dir_splittingcompact+0x218>)
 800593e:	9302      	str	r3, [sp, #8]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800594c:	2200      	movs	r2, #0
 800594e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7fe f9ed 	bl	8003d30 <lfs_dir_traverse>
 8005956:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <lfs_dir_splittingcompact+0x66>
                return err;
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	e0d1      	b.n	8005b06 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8005962:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2bfe      	cmp	r3, #254	; 0xfe
 800596c:	d822      	bhi.n	80059b4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	e003      	b.n	8005994 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005990:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005992:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005998:	6992      	ldr	r2, [r2, #24]
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f7fc ff9a 	bl	80028d6 <lfs_alignup>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4619      	mov	r1, r3
 80059a6:	4620      	mov	r0, r4
 80059a8:	f7fc ff70 	bl	800288c <lfs_min>
 80059ac:	4602      	mov	r2, r0
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d20e      	bcs.n	80059d2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80059b4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c0:	4413      	add	r3, r2
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80059c4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d8a0      	bhi.n	8005912 <lfs_dir_splittingcompact+0x16>
 80059d0:	e000      	b.n	80059d4 <lfs_dir_splittingcompact+0xd8>
                break;
 80059d2:	bf00      	nop
        }

        if (split == begin) {
 80059d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059da:	429a      	cmp	r2, r3
 80059dc:	d02d      	beq.n	8005a3a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059e6:	9202      	str	r2, [sp, #8]
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff fce6 	bl	80053c6 <lfs_dir_split>
 80059fa:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <lfs_dir_splittingcompact+0x112>
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f113 0f1c 	cmn.w	r3, #28
 8005a08:	d001      	beq.n	8005a0e <lfs_dir_splittingcompact+0x112>
            return err;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	e07b      	b.n	8005b06 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00e      	beq.n	8005a32 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	493e      	ldr	r1, [pc, #248]	; (8005b18 <lfs_dir_splittingcompact+0x21c>)
 8005a1e:	9101      	str	r1, [sp, #4]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8005a28:	493c      	ldr	r1, [pc, #240]	; (8005b1c <lfs_dir_splittingcompact+0x220>)
 8005a2a:	483d      	ldr	r0, [pc, #244]	; (8005b20 <lfs_dir_splittingcompact+0x224>)
 8005a2c:	f005 f9e6 	bl	800adfc <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8005a30:	e004      	b.n	8005a3c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8005a38:	e767      	b.n	800590a <lfs_dir_splittingcompact+0xe>
            break;
 8005a3a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff fd40 	bl	80054c4 <lfs_dir_needsrelocation>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04e      	beq.n	8005ae8 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	613a      	str	r2, [r7, #16]
 8005a50:	2201      	movs	r2, #1
 8005a52:	617a      	str	r2, [r7, #20]
 8005a54:	f107 0210 	add.w	r2, r7, #16
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd fb46 	bl	80030ec <lfs_pair_cmp>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d140      	bne.n	8005ae8 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f003 f826 	bl	8008ab8 <lfs_fs_rawsize>
 8005a6c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da01      	bge.n	8005a78 <lfs_dir_splittingcompact+0x17c>
            return size;
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	e046      	b.n	8005b06 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	085a      	lsrs	r2, r3, #1
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d930      	bls.n	8005ae8 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <lfs_dir_splittingcompact+0x21c>)
 8005a8c:	9200      	str	r2, [sp, #0]
 8005a8e:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005a92:	4922      	ldr	r1, [pc, #136]	; (8005b1c <lfs_dir_splittingcompact+0x220>)
 8005a94:	4823      	ldr	r0, [pc, #140]	; (8005b24 <lfs_dir_splittingcompact+0x228>)
 8005a96:	f005 f9b1 	bl	800adfc <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005a9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a9e:	9302      	str	r3, [sp, #8]
 8005aa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fc88 	bl	80053c6 <lfs_dir_split>
 8005ab6:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <lfs_dir_splittingcompact+0x1ce>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f113 0f1c 	cmn.w	r3, #28
 8005ac4:	d001      	beq.n	8005aca <lfs_dir_splittingcompact+0x1ce>
                return err;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	e01d      	b.n	8005b06 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <lfs_dir_splittingcompact+0x21c>)
 8005ad2:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8005ad6:	4911      	ldr	r1, [pc, #68]	; (8005b1c <lfs_dir_splittingcompact+0x220>)
 8005ad8:	4813      	ldr	r0, [pc, #76]	; (8005b28 <lfs_dir_splittingcompact+0x22c>)
 8005ada:	f005 f98f 	bl	800adfc <iprintf>
 8005ade:	e003      	b.n	8005ae8 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8005ae0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ae4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8005ae8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fd06 	bl	8005510 <lfs_dir_compact>
 8005b04:	4603      	mov	r3, r0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3734      	adds	r7, #52	; 0x34
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd90      	pop	{r4, r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	0800546f 	.word	0x0800546f
 8005b14:	400ffc00 	.word	0x400ffc00
 8005b18:	0800bfe8 	.word	0x0800bfe8
 8005b1c:	0800bee4 	.word	0x0800bee4
 8005b20:	0800c0c4 	.word	0x0800c0c4
 8005b24:	0800c0f4 	.word	0x0800c0f4
 8005b28:	0800c124 	.word	0x0800c124

08005b2c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8005b2c:	b5b0      	push	{r4, r5, r7, lr}
 8005b2e:	b0a6      	sub	sp, #152	; 0x98
 8005b30:	af0a      	add	r7, sp, #40	; 0x28
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
    int state = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8005b44:	2300      	movs	r3, #0
 8005b46:	667b      	str	r3, [r7, #100]	; 0x64
 8005b48:	e06d      	b.n	8005c26 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8005b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	4413      	add	r3, r2
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fd fb85 	bl	8003264 <lfs_tag_type3>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f240 4301 	movw	r3, #1025	; 0x401
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d106      	bne.n	8005b74 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	8a9b      	ldrh	r3, [r3, #20]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	829a      	strh	r2, [r3, #20]
 8005b72:	e055      	b.n	8005c20 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fb70 	bl	8003264 <lfs_tag_type3>
 8005b84:	4603      	mov	r3, r0
 8005b86:	461a      	mov	r2, r3
 8005b88:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d114      	bne.n	8005bba <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	8a9b      	ldrh	r3, [r3, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <lfs_dir_relocatingcommit+0x7a>
 8005b98:	4ba4      	ldr	r3, [pc, #656]	; (8005e2c <lfs_dir_relocatingcommit+0x300>)
 8005b9a:	4aa5      	ldr	r2, [pc, #660]	; (8005e30 <lfs_dir_relocatingcommit+0x304>)
 8005b9c:	f240 71df 	movw	r1, #2015	; 0x7df
 8005ba0:	48a4      	ldr	r0, [pc, #656]	; (8005e34 <lfs_dir_relocatingcommit+0x308>)
 8005ba2:	f004 fca5 	bl	800a4f0 <__assert_func>
            dir->count -= 1;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	8a9b      	ldrh	r3, [r3, #20]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005bb8:	e032      	b.n	8005c20 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8005bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fd fb3d 	bl	8003244 <lfs_tag_type1>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bd0:	d126      	bne.n	8005c20 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	4413      	add	r3, r2
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8005be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fd fb41 	bl	8003284 <lfs_tag_chunk>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3318      	adds	r3, #24
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fd fabd 	bl	800319a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8005c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c22:	3301      	adds	r3, #1
 8005c24:	667b      	str	r3, [r7, #100]	; 0x64
 8005c26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	db8c      	blt.n	8005b4a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8005c30:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d02b      	beq.n	8005c90 <lfs_dir_relocatingcommit+0x164>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	8a9b      	ldrh	r3, [r3, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d127      	bne.n	8005c90 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8005c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <lfs_dir_relocatingcommit+0x12a>
 8005c48:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <lfs_dir_relocatingcommit+0x30c>)
 8005c4a:	4a79      	ldr	r2, [pc, #484]	; (8005e30 <lfs_dir_relocatingcommit+0x304>)
 8005c4c:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8005c50:	4878      	ldr	r0, [pc, #480]	; (8005e34 <lfs_dir_relocatingcommit+0x308>)
 8005c52:	f004 fc4d 	bl	800a4f0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f002 fb9e 	bl	80083a0 <lfs_fs_pred>
 8005c64:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8005c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <lfs_dir_relocatingcommit+0x14c>
 8005c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c6e:	f113 0f02 	cmn.w	r3, #2
 8005c72:	d001      	beq.n	8005c78 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8005c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c76:	e203      	b.n	8006080 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8005c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c7a:	f113 0f02 	cmn.w	r3, #2
 8005c7e:	d007      	beq.n	8005c90 <lfs_dir_relocatingcommit+0x164>
 8005c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c84:	7ddb      	ldrb	r3, [r3, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8005c8e:	e121      	b.n	8005ed4 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	7d9b      	ldrb	r3, [r3, #22]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80fb 	beq.w	8005e90 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8005caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005cb6:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <lfs_dir_relocatingcommit+0x1a0>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc8:	3b08      	subs	r3, #8
 8005cca:	e003      	b.n	8005cd4 <lfs_dir_relocatingcommit+0x1a8>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005cd4:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fd fa77 	bl	80031ce <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8005cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cf6:	9308      	str	r3, [sp, #32]
 8005cf8:	4b50      	ldr	r3, [pc, #320]	; (8005e3c <lfs_dir_relocatingcommit+0x310>)
 8005cfa:	9307      	str	r3, [sp, #28]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9306      	str	r3, [sp, #24]
 8005d00:	2300      	movs	r3, #0
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	2300      	movs	r3, #0
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9303      	str	r3, [sp, #12]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9302      	str	r3, [sp, #8]
 8005d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7fe f806 	bl	8003d30 <lfs_dir_traverse>
 8005d24:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	3318      	adds	r3, #24
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd fa35 	bl	800319a <lfs_pair_fromle32>
        if (err) {
 8005d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d38:	f113 0f1c 	cmn.w	r3, #28
 8005d3c:	f000 80aa 	beq.w	8005e94 <lfs_dir_relocatingcommit+0x368>
 8005d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d42:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005d46:	f000 80a5 	beq.w	8005e94 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8005d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4c:	e198      	b.n	8006080 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8005d4e:	f107 031c 	add.w	r3, r7, #28
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	605a      	str	r2, [r3, #4]
 8005d58:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d60:	f107 031c 	add.w	r3, r7, #28
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fad7 	bl	800331a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005d72:	f107 031c 	add.w	r3, r7, #28
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fd face 	bl	800331a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005d84:	f107 031c 	add.w	r3, r7, #28
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fd fac5 	bl	800331a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005d9c:	f107 031c 	add.w	r3, r7, #28
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fd fadf 	bl	8003364 <lfs_gstate_iszero>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f083 0301 	eor.w	r3, r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d027      	beq.n	8005e02 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005db2:	f107 031c 	add.w	r3, r7, #28
 8005db6:	461a      	mov	r2, r3
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7fe ff22 	bl	8004c04 <lfs_dir_getgstate>
 8005dc0:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dca:	e159      	b.n	8006080 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8005dcc:	f107 031c 	add.w	r3, r7, #28
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fd fb59 	bl	8003488 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8005dd6:	f107 031c 	add.w	r3, r7, #28
 8005dda:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005dde:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <lfs_dir_relocatingcommit+0x314>)
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff f8bb 	bl	8004f5c <lfs_dir_commitattr>
 8005de6:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df0:	f113 0f1c 	cmn.w	r3, #28
 8005df4:	d050      	beq.n	8005e98 <lfs_dir_relocatingcommit+0x36c>
 8005df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005dfc:	d04c      	beq.n	8005e98 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e00:	e13e      	b.n	8006080 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8005e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e06:	4619      	mov	r1, r3
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff f927 	bl	800505c <lfs_dir_commitcrc>
 8005e0e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8005e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d016      	beq.n	8005e44 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e18:	f113 0f1c 	cmn.w	r3, #28
 8005e1c:	d03e      	beq.n	8005e9c <lfs_dir_relocatingcommit+0x370>
 8005e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e20:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005e24:	d03a      	beq.n	8005e9c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8005e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e28:	e12a      	b.n	8006080 <lfs_dir_relocatingcommit+0x554>
 8005e2a:	bf00      	nop
 8005e2c:	0800c150 	.word	0x0800c150
 8005e30:	0800c964 	.word	0x0800c964
 8005e34:	0800bee4 	.word	0x0800bee4
 8005e38:	0800c160 	.word	0x0800c160
 8005e3c:	0800549b 	.word	0x0800549b
 8005e40:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e4a:	6992      	ldr	r2, [r2, #24]
 8005e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e50:	fb01 f202 	mul.w	r2, r1, r2
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <lfs_dir_relocatingcommit+0x33c>
 8005e5a:	4b8b      	ldr	r3, [pc, #556]	; (8006088 <lfs_dir_relocatingcommit+0x55c>)
 8005e5c:	4a8b      	ldr	r2, [pc, #556]	; (800608c <lfs_dir_relocatingcommit+0x560>)
 8005e5e:	f640 0136 	movw	r1, #2102	; 0x836
 8005e62:	488b      	ldr	r0, [pc, #556]	; (8006090 <lfs_dir_relocatingcommit+0x564>)
 8005e64:	f004 fb44 	bl	800a4f0 <__assert_func>
        dir->off = commit.off;
 8005e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8005e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	333c      	adds	r3, #60	; 0x3c
 8005e7a:	3230      	adds	r2, #48	; 0x30
 8005e7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3348      	adds	r3, #72	; 0x48
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	605a      	str	r2, [r3, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
 8005e8e:	e021      	b.n	8005ed4 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8005e90:	bf00      	nop
 8005e92:	e004      	b.n	8005e9e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005e94:	bf00      	nop
 8005e96:	e002      	b.n	8005e9e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005e98:	bf00      	nop
 8005e9a:	e000      	b.n	8005e9e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005e9c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7fc fda7 	bl	80029f8 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	8a9b      	ldrh	r3, [r3, #20]
 8005eae:	9302      	str	r3, [sp, #8]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff fd1b 	bl	80058fc <lfs_dir_splittingcompact>
 8005ec6:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da01      	bge.n	8005ed2 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed0:	e0d6      	b.n	8006080 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8005ed2:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee6:	e0c6      	b.n	8006076 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eea:	3308      	adds	r3, #8
 8005eec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fd f8fa 	bl	80030ec <lfs_pair_cmp>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 80b8 	bne.w	8006070 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8005f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	f103 0408 	add.w	r4, r3, #8
 8005f08:	4615      	mov	r5, r2
 8005f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f18:	3308      	adds	r3, #8
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	f000 809d 	beq.w	800605c <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8005f22:	2300      	movs	r3, #0
 8005f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f26:	e07b      	b.n	8006020 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	4413      	add	r3, r2
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fd f996 	bl	8003264 <lfs_tag_type3>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d115      	bne.n	8005f70 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8005f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f46:	889c      	ldrh	r4, [r3, #4]
 8005f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	4413      	add	r3, r2
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fd f9b0 	bl	80032b8 <lfs_tag_id>
 8005f58:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005f5a:	429c      	cmp	r4, r3
 8005f5c:	d108      	bne.n	8005f70 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f64:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8005f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	e054      	b.n	800601a <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	4413      	add	r3, r2
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fd f972 	bl	8003264 <lfs_tag_type3>
 8005f80:	4603      	mov	r3, r0
 8005f82:	461a      	mov	r2, r3
 8005f84:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d11c      	bne.n	8005fc6 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f8e:	889c      	ldrh	r4, [r3, #4]
 8005f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	4413      	add	r3, r2
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fd f98c 	bl	80032b8 <lfs_tag_id>
 8005fa0:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	d90f      	bls.n	8005fc6 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8005fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa8:	889b      	ldrh	r3, [r3, #4]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb0:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb4:	799b      	ldrb	r3, [r3, #6]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d12f      	bne.n	800601a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	1e5a      	subs	r2, r3, #1
 8005fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fc2:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8005fc4:	e029      	b.n	800601a <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	4413      	add	r3, r2
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fd f947 	bl	8003264 <lfs_tag_type3>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f240 4301 	movw	r3, #1025	; 0x401
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d11b      	bne.n	800601a <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fe4:	889c      	ldrh	r4, [r3, #4]
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	4413      	add	r3, r2
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd f961 	bl	80032b8 <lfs_tag_id>
 8005ff6:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	d30e      	bcc.n	800601a <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8005ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ffe:	889b      	ldrh	r3, [r3, #4]
 8006000:	3301      	adds	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006006:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8006008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800600a:	799b      	ldrb	r3, [r3, #6]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d104      	bne.n	800601a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8006010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006018:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 800601a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601c:	3301      	adds	r3, #1
 800601e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006022:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006026:	429a      	cmp	r2, r3
 8006028:	f6ff af7e 	blt.w	8005f28 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800602c:	e016      	b.n	800605c <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 800602e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006030:	889a      	ldrh	r2, [r3, #4]
 8006032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006034:	8b9b      	ldrh	r3, [r3, #28]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	b29a      	uxth	r2, r3
 800603a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800603c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800603e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006040:	f103 0108 	add.w	r1, r3, #8
 8006044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006046:	3320      	adds	r3, #32
 8006048:	461a      	mov	r2, r3
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7fe fdbe 	bl	8004bcc <lfs_dir_fetch>
 8006050:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8006052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <lfs_dir_relocatingcommit+0x530>
                    return err;
 8006058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605a:	e011      	b.n	8006080 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 800605c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800605e:	889a      	ldrh	r2, [r3, #4]
 8006060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006062:	8b9b      	ldrh	r3, [r3, #28]
 8006064:	429a      	cmp	r2, r3
 8006066:	d303      	bcc.n	8006070 <lfs_dir_relocatingcommit+0x544>
 8006068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606a:	7fdb      	ldrb	r3, [r3, #31]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1de      	bne.n	800602e <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	663b      	str	r3, [r7, #96]	; 0x60
 8006076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006078:	2b00      	cmp	r3, #0
 800607a:	f47f af35 	bne.w	8005ee8 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800607e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8006080:	4618      	mov	r0, r3
 8006082:	3770      	adds	r7, #112	; 0x70
 8006084:	46bd      	mov	sp, r7
 8006086:	bdb0      	pop	{r4, r5, r7, pc}
 8006088:	0800c040 	.word	0x0800c040
 800608c:	0800c964 	.word	0x0800c964
 8006090:	0800bee4 	.word	0x0800bee4

08006094 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8006094:	b5b0      	push	{r4, r5, r7, lr}
 8006096:	b0bc      	sub	sp, #240	; 0xf0
 8006098:	af04      	add	r7, sp, #16
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060aa:	e045      	b.n	8006138 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80060ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b0:	3308      	adds	r3, #8
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d03a      	beq.n	800612e <lfs_dir_orphaningcommit+0x9a>
 80060b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060bc:	3308      	adds	r3, #8
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fd f812 	bl	80030ec <lfs_pair_cmp>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d12f      	bne.n	800612e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80060ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d12a      	bne.n	800612e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d023      	beq.n	800612e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80060e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d91b      	bls.n	800612e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80060f6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fff0 	bl	80070e0 <lfs_file_outline>
 8006100:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8006104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800610c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006110:	e2ad      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8006112:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f001 f804 	bl	8007124 <lfs_file_flush>
 800611c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8006120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8006128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800612c:	e29f      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800612e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1b5      	bne.n	80060ac <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006156:	461d      	mov	r5, r3
 8006158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800615a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800615c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800616a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff fcd8 	bl	8005b2c <lfs_dir_relocatingcommit>
 800617c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8006180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006184:	2b00      	cmp	r3, #0
 8006186:	da02      	bge.n	800618e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8006188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800618c:	e26f      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f7fc ffa8 	bl	80030ec <lfs_pair_cmp>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	461d      	mov	r5, r3
 80061a6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80061aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80061b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80061b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d14a      	bne.n	8006254 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3348      	adds	r3, #72	; 0x48
 80061c2:	461a      	mov	r2, r3
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7fe fd1c 	bl	8004c04 <lfs_dir_getgstate>
 80061cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80061d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <lfs_dir_orphaningcommit+0x14a>
            return err;
 80061d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061dc:	e247      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80061e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3318      	adds	r3, #24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fc ffed 	bl	80031ce <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	7ddb      	ldrb	r3, [r3, #23]
 80061f8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80061fc:	051a      	lsls	r2, r3, #20
 80061fe:	4bc2      	ldr	r3, [pc, #776]	; (8006508 <lfs_dir_orphaningcommit+0x474>)
 8006200:	4313      	orrs	r3, r2
 8006202:	667b      	str	r3, [r7, #100]	; 0x64
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	3318      	adds	r3, #24
 8006208:	66bb      	str	r3, [r7, #104]	; 0x68
 800620a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800620e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006212:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006216:	2000      	movs	r0, #0
 8006218:	9001      	str	r0, [sp, #4]
 800621a:	2001      	movs	r0, #1
 800621c:	9000      	str	r0, [sp, #0]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff fc84 	bl	8005b2c <lfs_dir_relocatingcommit>
 8006224:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3318      	adds	r3, #24
 800622c:	4618      	mov	r0, r3
 800622e:	f7fc ffb4 	bl	800319a <lfs_pair_fromle32>
        if (state < 0) {
 8006232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006236:	2b00      	cmp	r3, #0
 8006238:	da02      	bge.n	8006240 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800623a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623e:	e216      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8006240:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006244:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8006254:	2300      	movs	r3, #0
 8006256:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 800625a:	e1fc      	b.n	8006656 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800625c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006264:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006268:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800626c:	4ca7      	ldr	r4, [pc, #668]	; (800650c <lfs_dir_orphaningcommit+0x478>)
 800626e:	9403      	str	r4, [sp, #12]
 8006270:	9102      	str	r1, [sp, #8]
 8006272:	9201      	str	r2, [sp, #4]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4603      	mov	r3, r0
 8006278:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 800627c:	49a4      	ldr	r1, [pc, #656]	; (8006510 <lfs_dir_orphaningcommit+0x47c>)
 800627e:	48a5      	ldr	r0, [pc, #660]	; (8006514 <lfs_dir_orphaningcommit+0x480>)
 8006280:	f004 fdbc 	bl	800adfc <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f103 0220 	add.w	r2, r3, #32
 8006290:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f7fc ff28 	bl	80030ec <lfs_pair_cmp>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 80062a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80062aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062ba:	e037      	b.n	800632c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80062bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062c0:	f103 0208 	add.w	r2, r3, #8
 80062c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fc ff0e 	bl	80030ec <lfs_pair_cmp>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80062d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80062da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062de:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80062e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80062e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062e8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80062ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062ee:	799b      	ldrb	r3, [r3, #6]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d116      	bne.n	8006322 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80062f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062f8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80062fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7fc fef2 	bl	80030ec <lfs_pair_cmp>
 8006308:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800630e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006312:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8006318:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800631c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006322:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800632c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1c3      	bne.n	80062bc <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8006334:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006338:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800633c:	4619      	mov	r1, r3
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f002 f8b6 	bl	80084b0 <lfs_fs_parent>
 8006344:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800634c:	2b00      	cmp	r3, #0
 800634e:	da07      	bge.n	8006360 <lfs_dir_orphaningcommit+0x2cc>
 8006350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006354:	f113 0f02 	cmn.w	r3, #2
 8006358:	d002      	beq.n	8006360 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800635a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800635e:	e186      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8006360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006364:	f113 0f02 	cmn.w	r3, #2
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8006372:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006376:	f113 0f02 	cmn.w	r3, #2
 800637a:	f000 809e 	beq.w	80064ba <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800637e:	2101      	movs	r1, #1
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f002 f8eb 	bl	800855c <lfs_fs_preporphans>
 8006386:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800638a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <lfs_dir_orphaningcommit+0x304>
                return err;
 8006392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006396:	e16a      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8006398:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800639c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3330      	adds	r3, #48	; 0x30
 80063a4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fd f82c 	bl	8003408 <lfs_gstate_hasmovehere>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d02d      	beq.n	8006412 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fc ff7c 	bl	80032b8 <lfs_tag_id>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80063c6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80063c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ca:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80063ce:	484f      	ldr	r0, [pc, #316]	; (800650c <lfs_dir_orphaningcommit+0x478>)
 80063d0:	9002      	str	r0, [sp, #8]
 80063d2:	9201      	str	r2, [sp, #4]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	460b      	mov	r3, r1
 80063d8:	f640 02ed 	movw	r2, #2285	; 0x8ed
 80063dc:	494c      	ldr	r1, [pc, #304]	; (8006510 <lfs_dir_orphaningcommit+0x47c>)
 80063de:	484e      	ldr	r0, [pc, #312]	; (8006518 <lfs_dir_orphaningcommit+0x484>)
 80063e0:	f004 fd0c 	bl	800adfc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80063e4:	2200      	movs	r2, #0
 80063e6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f002 f8f0 	bl	80085d0 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80063f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fc ff5f 	bl	80032b8 <lfs_tag_id>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006402:	4293      	cmp	r3, r2
 8006404:	d205      	bcs.n	8006412 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8006406:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800640a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800640e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8006412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006414:	657b      	str	r3, [r7, #84]	; 0x54
 8006416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006418:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 800641a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800641e:	4618      	mov	r0, r3
 8006420:	f7fc fed5 	bl	80031ce <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8006424:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006428:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800642c:	4293      	cmp	r3, r2
 800642e:	d007      	beq.n	8006440 <lfs_dir_orphaningcommit+0x3ac>
 8006430:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800643a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800643e:	e000      	b.n	8006442 <lfs_dir_orphaningcommit+0x3ae>
 8006440:	2300      	movs	r3, #0
 8006442:	647b      	str	r3, [r7, #68]	; 0x44
 8006444:	2300      	movs	r3, #0
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800644c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800644e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006452:	653b      	str	r3, [r7, #80]	; 0x50
 8006454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006458:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800645c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006460:	2000      	movs	r0, #0
 8006462:	9001      	str	r0, [sp, #4]
 8006464:	2002      	movs	r0, #2
 8006466:	9000      	str	r0, [sp, #0]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fb5f 	bl	8005b2c <lfs_dir_relocatingcommit>
 800646e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8006472:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006476:	4618      	mov	r0, r3
 8006478:	f7fc fe8f 	bl	800319a <lfs_pair_fromle32>
            if (state < 0) {
 800647c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006480:	2b00      	cmp	r3, #0
 8006482:	da02      	bge.n	800648a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8006484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006488:	e0f1      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800648a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648e:	2b01      	cmp	r3, #1
 8006490:	d113      	bne.n	80064ba <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8006492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8006498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800649a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800649e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80064a2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80064a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80064ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80064b8:	e0cd      	b.n	8006656 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80064ba:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80064be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80064c2:	4619      	mov	r1, r3
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 ff6b 	bl	80083a0 <lfs_fs_pred>
 80064ca:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80064ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <lfs_dir_orphaningcommit+0x452>
 80064d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064da:	f113 0f02 	cmn.w	r3, #2
 80064de:	d002      	beq.n	80064e6 <lfs_dir_orphaningcommit+0x452>
            return err;
 80064e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e4:	e0c3      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80064e6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01a      	beq.n	8006524 <lfs_dir_orphaningcommit+0x490>
 80064ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064f2:	f113 0f02 	cmn.w	r3, #2
 80064f6:	d115      	bne.n	8006524 <lfs_dir_orphaningcommit+0x490>
 80064f8:	4b08      	ldr	r3, [pc, #32]	; (800651c <lfs_dir_orphaningcommit+0x488>)
 80064fa:	4a09      	ldr	r2, [pc, #36]	; (8006520 <lfs_dir_orphaningcommit+0x48c>)
 80064fc:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8006500:	4803      	ldr	r0, [pc, #12]	; (8006510 <lfs_dir_orphaningcommit+0x47c>)
 8006502:	f003 fff5 	bl	800a4f0 <__assert_func>
 8006506:	bf00      	nop
 8006508:	000ffc08 	.word	0x000ffc08
 800650c:	0800bfe8 	.word	0x0800bfe8
 8006510:	0800bee4 	.word	0x0800bee4
 8006514:	0800c168 	.word	0x0800c168
 8006518:	0800c1a4 	.word	0x0800c1a4
 800651c:	0800c1e8 	.word	0x0800c1e8
 8006520:	0800c980 	.word	0x0800c980

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8006524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006528:	f113 0f02 	cmn.w	r3, #2
 800652c:	f000 8093 	beq.w	8006656 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3330      	adds	r3, #48	; 0x30
 8006534:	4618      	mov	r0, r3
 8006536:	f7fc ff32 	bl	800339e <lfs_gstate_hasorphans>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8006540:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8006544:	425b      	negs	r3, r3
 8006546:	b2db      	uxtb	r3, r3
 8006548:	b25b      	sxtb	r3, r3
 800654a:	4619      	mov	r1, r3
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f002 f805 	bl	800855c <lfs_fs_preporphans>
 8006552:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8006556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800655e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006562:	e084      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8006564:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006568:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3330      	adds	r3, #48	; 0x30
 8006570:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f7fc ff46 	bl	8003408 <lfs_gstate_hasmovehere>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d01c      	beq.n	80065bc <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc fe96 	bl	80032b8 <lfs_tag_id>
 800658c:	4603      	mov	r3, r0
 800658e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8006592:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006596:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800659a:	4837      	ldr	r0, [pc, #220]	; (8006678 <lfs_dir_orphaningcommit+0x5e4>)
 800659c:	9002      	str	r0, [sp, #8]
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	460b      	mov	r3, r1
 80065a4:	f640 1221 	movw	r2, #2337	; 0x921
 80065a8:	4934      	ldr	r1, [pc, #208]	; (800667c <lfs_dir_orphaningcommit+0x5e8>)
 80065aa:	4835      	ldr	r0, [pc, #212]	; (8006680 <lfs_dir_orphaningcommit+0x5ec>)
 80065ac:	f004 fc26 	bl	800adfc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80065b0:	2200      	movs	r2, #0
 80065b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f002 f80a 	bl	80085d0 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80065bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 80065c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80065c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fc fdfe 	bl	80031ce <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80065d2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80065d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <lfs_dir_orphaningcommit+0x55a>
 80065de:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80065e8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80065ec:	e000      	b.n	80065f0 <lfs_dir_orphaningcommit+0x55c>
 80065ee:	2300      	movs	r3, #0
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	2300      	movs	r3, #0
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80065fa:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80065fe:	051a      	lsls	r2, r3, #20
 8006600:	4b20      	ldr	r3, [pc, #128]	; (8006684 <lfs_dir_orphaningcommit+0x5f0>)
 8006602:	4313      	orrs	r3, r2
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006606:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
 800660c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006610:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006614:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006618:	2000      	movs	r0, #0
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	2002      	movs	r0, #2
 800661e:	9000      	str	r0, [sp, #0]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff fa83 	bl	8005b2c <lfs_dir_relocatingcommit>
 8006626:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800662a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800662e:	4618      	mov	r0, r3
 8006630:	f7fc fdb3 	bl	800319a <lfs_pair_fromle32>
            if (state < 0) {
 8006634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006638:	2b00      	cmp	r3, #0
 800663a:	da02      	bge.n	8006642 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 800663c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006640:	e015      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8006642:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006646:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800664a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800664c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800664e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8006656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800665a:	2b01      	cmp	r3, #1
 800665c:	f43f adfe 	beq.w	800625c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8006660:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <lfs_dir_orphaningcommit+0x5d8>
 8006668:	2303      	movs	r3, #3
 800666a:	e000      	b.n	800666e <lfs_dir_orphaningcommit+0x5da>
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	37e0      	adds	r7, #224	; 0xe0
 8006672:	46bd      	mov	sp, r7
 8006674:	bdb0      	pop	{r4, r5, r7, pc}
 8006676:	bf00      	nop
 8006678:	0800bfe8 	.word	0x0800bfe8
 800667c:	0800bee4 	.word	0x0800bee4
 8006680:	0800c1a4 	.word	0x0800c1a4
 8006684:	000ffc08 	.word	0x000ffc08

08006688 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fcf9 	bl	8006094 <lfs_dir_orphaningcommit>
 80066a2:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da01      	bge.n	80066ae <lfs_dir_commit+0x26>
        return orphans;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	e00d      	b.n	80066ca <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80066b4:	2100      	movs	r1, #0
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f002 f82a 	bl	8008710 <lfs_fs_deorphan>
 80066bc:	6138      	str	r0, [r7, #16]
        if (err) {
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <lfs_dir_commit+0x40>
            return err;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	e000      	b.n	80066ca <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80066d2:	b590      	push	{r4, r7, lr}
 80066d4:	b087      	sub	sp, #28
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	3b08      	subs	r3, #8
 80066ea:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <lfs_ctz_index+0x2e>
        return 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e01c      	b.n	800673a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b01      	subs	r3, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f7fc f917 	bl	8002938 <lfs_popc>
 800670a:	4603      	mov	r3, r0
 800670c:	3302      	adds	r3, #2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	1ad2      	subs	r2, r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	1ad4      	subs	r4, r2, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7fc f905 	bl	8002938 <lfs_popc>
 800672e:	4603      	mov	r3, r0
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	1ae2      	subs	r2, r4, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	601a      	str	r2, [r3, #0]
    return i;
 8006738:	68fb      	ldr	r3, [r7, #12]
}
 800673a:	4618      	mov	r0, r3
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	bd90      	pop	{r4, r7, pc}

08006742 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8006742:	b590      	push	{r4, r7, lr}
 8006744:	b08f      	sub	sp, #60	; 0x3c
 8006746:	af04      	add	r7, sp, #16
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	2b00      	cmp	r3, #0
 8006754:	d108      	bne.n	8006768 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8006756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800675c:	601a      	str	r2, [r3, #0]
        *off = 0;
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
        return 0;
 8006764:	2300      	movs	r3, #0
 8006766:	e053      	b.n	8006810 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	3b01      	subs	r3, #1
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	f107 0314 	add.w	r3, r7, #20
 8006772:	4619      	mov	r1, r3
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff ffac 	bl	80066d2 <lfs_ctz_index>
 800677a:	4603      	mov	r3, r0
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800677e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006782:	4619      	mov	r1, r3
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ffa4 	bl	80066d2 <lfs_ctz_index>
 800678a:	4603      	mov	r3, r0
 800678c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800678e:	e034      	b.n	80067fa <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8006790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	3301      	adds	r3, #1
 8006798:	4618      	mov	r0, r3
 800679a:	f7fc f8ae 	bl	80028fa <lfs_npw2>
 800679e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80067a0:	1e5c      	subs	r4, r3, #1
 80067a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067a4:	f7fc f8b9 	bl	800291a <lfs_ctz>
 80067a8:	4603      	mov	r3, r0
 80067aa:	4619      	mov	r1, r3
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7fc f86d 	bl	800288c <lfs_min>
 80067b2:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	0092      	lsls	r2, r2, #2
 80067ba:	2104      	movs	r1, #4
 80067bc:	9103      	str	r1, [sp, #12]
 80067be:	4639      	mov	r1, r7
 80067c0:	9102      	str	r1, [sp, #8]
 80067c2:	9201      	str	r2, [sp, #4]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	2304      	movs	r3, #4
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7fc f939 	bl	8002a44 <lfs_bd_read>
 80067d2:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fc f8c8 	bl	800296c <lfs_fromle32>
 80067dc:	4603      	mov	r3, r0
 80067de:	603b      	str	r3, [r7, #0]
        if (err) {
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <lfs_ctz_find+0xa8>
            return err;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	e012      	b.n	8006810 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80067ea:	2201      	movs	r2, #1
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 80067fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d8c6      	bhi.n	8006790 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006806:	601a      	str	r2, [r3, #0]
    *off = pos;
 8006808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800680a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800680c:	601a      	str	r2, [r3, #0]
    return 0;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	372c      	adds	r7, #44	; 0x2c
 8006814:	46bd      	mov	sp, r7
 8006816:	bd90      	pop	{r4, r7, pc}

08006818 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b092      	sub	sp, #72	; 0x48
 800681c:	af04      	add	r7, sp, #16
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8006826:	f107 0320 	add.w	r3, r7, #32
 800682a:	4619      	mov	r1, r3
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7fc ff93 	bl	8003758 <lfs_alloc>
 8006832:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <lfs_ctz_extend+0x26>
            return err;
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	e0e9      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	4619      	mov	r1, r3
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7fc fbf0 	bl	8003028 <lfs_bd_erase>
 8006848:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d006      	beq.n	800685e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006856:	f000 80cb 	beq.w	80069f0 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	e0d9      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800685e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d107      	bne.n	8006874 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006868:	601a      	str	r2, [r3, #0]
                *off = 0;
 800686a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
                return 0;
 8006870:	2300      	movs	r3, #0
 8006872:	e0ce      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8006874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006876:	3b01      	subs	r3, #1
 8006878:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800687a:	f107 031c 	add.w	r3, r7, #28
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff ff26 	bl	80066d2 <lfs_ctz_index>
 8006886:	4603      	mov	r3, r0
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3301      	adds	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	429a      	cmp	r2, r3
 800689a:	d044      	beq.n	8006926 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800689c:	2300      	movs	r3, #0
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
 80068a0:	e035      	b.n	800690e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	1ad2      	subs	r2, r2, r3
 80068a8:	2301      	movs	r3, #1
 80068aa:	9303      	str	r3, [sp, #12]
 80068ac:	f107 0317 	add.w	r3, r7, #23
 80068b0:	9302      	str	r3, [sp, #8]
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	2100      	movs	r1, #0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7fc f8bf 	bl	8002a44 <lfs_bd_read>
 80068c6:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <lfs_ctz_extend+0xba>
                        return err;
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	e09f      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2201      	movs	r2, #1
 80068d6:	9203      	str	r2, [sp, #12]
 80068d8:	f107 0217 	add.w	r2, r7, #23
 80068dc:	9202      	str	r2, [sp, #8]
 80068de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068e0:	9201      	str	r2, [sp, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2301      	movs	r3, #1
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7fc faf0 	bl	8002ed0 <lfs_bd_prog>
 80068f0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80068fe:	d101      	bne.n	8006904 <lfs_ctz_extend+0xec>
                            goto relocate;
 8006900:	bf00      	nop
                    goto relocate;
 8006902:	e075      	b.n	80069f0 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8006906:	e084      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	3301      	adds	r3, #1
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006912:	429a      	cmp	r2, r3
 8006914:	d3c5      	bcc.n	80068a2 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8006916:	6a3a      	ldr	r2, [r7, #32]
 8006918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691a:	601a      	str	r2, [r3, #0]
                *off = noff;
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006920:	601a      	str	r2, [r3, #0]
                return 0;
 8006922:	2300      	movs	r3, #0
 8006924:	e075      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	3301      	adds	r3, #1
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800692c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692e:	f7fb fff4 	bl	800291a <lfs_ctz>
 8006932:	4603      	mov	r3, r0
 8006934:	3301      	adds	r3, #1
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800693c:	2300      	movs	r3, #0
 800693e:	633b      	str	r3, [r7, #48]	; 0x30
 8006940:	e049      	b.n	80069d6 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fc f81c 	bl	8002982 <lfs_tole32>
 800694a:	4603      	mov	r3, r0
 800694c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	0092      	lsls	r2, r2, #2
 8006954:	2104      	movs	r1, #4
 8006956:	9103      	str	r1, [sp, #12]
 8006958:	f107 0118 	add.w	r1, r7, #24
 800695c:	9102      	str	r1, [sp, #8]
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	2301      	movs	r3, #1
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7fc fab1 	bl	8002ed0 <lfs_bd_prog>
 800696e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	4618      	mov	r0, r3
 8006974:	f7fb fffa 	bl	800296c <lfs_fromle32>
 8006978:	4603      	mov	r3, r0
 800697a:	61bb      	str	r3, [r7, #24]
                if (err) {
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006988:	d034      	beq.n	80069f4 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	e041      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	3b01      	subs	r3, #1
 8006992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006994:	429a      	cmp	r2, r3
 8006996:	d01b      	beq.n	80069d0 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	2104      	movs	r1, #4
 80069a0:	9103      	str	r1, [sp, #12]
 80069a2:	f107 0118 	add.w	r1, r7, #24
 80069a6:	9102      	str	r1, [sp, #8]
 80069a8:	9201      	str	r2, [sp, #4]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	2304      	movs	r3, #4
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	2100      	movs	r1, #0
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7fc f846 	bl	8002a44 <lfs_bd_read>
 80069b8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fb ffd5 	bl	800296c <lfs_fromle32>
 80069c2:	4603      	mov	r3, r0
 80069c4:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <lfs_ctz_extend+0x1b8>
                        return err;
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	e020      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	3301      	adds	r3, #1
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30
 80069d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	429a      	cmp	r2, r3
 80069dc:	d3b1      	bcc.n	8006942 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e2:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	009a      	lsls	r2, r3, #2
 80069e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ea:	601a      	str	r2, [r3, #0]
            return 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e010      	b.n	8006a12 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80069f0:	bf00      	nop
 80069f2:	e000      	b.n	80069f6 <lfs_ctz_extend+0x1de>
                        goto relocate;
 80069f4:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	4a08      	ldr	r2, [pc, #32]	; (8006a1c <lfs_ctz_extend+0x204>)
 80069fa:	9200      	str	r2, [sp, #0]
 80069fc:	f640 22da 	movw	r2, #2778	; 0xada
 8006a00:	4907      	ldr	r1, [pc, #28]	; (8006a20 <lfs_ctz_extend+0x208>)
 8006a02:	4808      	ldr	r0, [pc, #32]	; (8006a24 <lfs_ctz_extend+0x20c>)
 8006a04:	f004 f9fa 	bl	800adfc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7fb fff4 	bl	80029f8 <lfs_cache_drop>
    while (true) {
 8006a10:	e709      	b.n	8006826 <lfs_ctz_extend+0xe>
    }
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3738      	adds	r7, #56	; 0x38
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	0800bfe8 	.word	0x0800bfe8
 8006a20:	0800bee4 	.word	0x0800bee4
 8006a24:	0800c068 	.word	0x0800c068

08006a28 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b090      	sub	sp, #64	; 0x40
 8006a2c:	af04      	add	r7, sp, #16
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <lfs_ctz_traverse+0x18>
        return 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e06b      	b.n	8006b18 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	3b01      	subs	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	f107 031c 	add.w	r3, r7, #28
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff fe40 	bl	80066d2 <lfs_ctz_index>
 8006a52:	4603      	mov	r3, r0
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006a5c:	4798      	blx	r3
 8006a5e:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <lfs_ctz_traverse+0x42>
            return err;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	e056      	b.n	8006b18 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <lfs_ctz_traverse+0x4c>
            return 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	e051      	b.n	8006b18 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	f1c3 0302 	rsb	r3, r3, #2
 8006a7e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8006a80:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8006a82:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8006a84:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8006a86:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8006a88:	9303      	str	r3, [sp, #12]
 8006a8a:	f107 0314 	add.w	r3, r7, #20
 8006a8e:	9302      	str	r3, [sp, #8]
 8006a90:	2300      	movs	r3, #0
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7fb ffd0 	bl	8002a44 <lfs_bd_read>
 8006aa4:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fb ff5f 	bl	800296c <lfs_fromle32>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fb ff59 	bl	800296c <lfs_fromle32>
 8006aba:	4603      	mov	r3, r0
 8006abc:	61bb      	str	r3, [r7, #24]
        if (err) {
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <lfs_ctz_traverse+0xa0>
            return err;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	e027      	b.n	8006b18 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8006ac8:	2300      	movs	r3, #0
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006acc:	e012      	b.n	8006af4 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	3330      	adds	r3, #48	; 0x30
 8006ad4:	443b      	add	r3, r7
 8006ad6:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8006ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006adc:	4611      	mov	r1, r2
 8006ade:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006ae0:	4798      	blx	r3
 8006ae2:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <lfs_ctz_traverse+0xc6>
                return err;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	e014      	b.n	8006b18 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	3301      	adds	r3, #1
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afa:	429a      	cmp	r2, r3
 8006afc:	dbe7      	blt.n	8006ace <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	3330      	adds	r3, #48	; 0x30
 8006b06:	443b      	add	r3, r7
 8006b08:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006b0c:	603b      	str	r3, [r7, #0]
        index -= count;
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8006b16:	e79e      	b.n	8006a56 <lfs_ctz_traverse+0x2e>
    }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3730      	adds	r7, #48	; 0x30
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8006b20:	b5b0      	push	{r4, r5, r7, lr}
 8006b22:	b09a      	sub	sp, #104	; 0x68
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f001 ff8d 	bl	8008a58 <lfs_fs_forceconsistency>
 8006b3e:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8006b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <lfs_file_rawopencfg+0x2a>
            return err;
 8006b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b48:	e1b0      	b.n	8006eac <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b4e:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f103 0108 	add.w	r1, r3, #8
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	3304      	adds	r3, #4
 8006b72:	1d3a      	adds	r2, r7, #4
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7fe f8c1 	bl	8004cfc <lfs_dir_find>
 8006b7a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8006b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da0c      	bge.n	8006b9c <lfs_file_rawopencfg+0x7c>
 8006b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b84:	f113 0f02 	cmn.w	r3, #2
 8006b88:	d105      	bne.n	8006b96 <lfs_file_rawopencfg+0x76>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	889b      	ldrh	r3, [r3, #4]
 8006b8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d102      	bne.n	8006b9c <lfs_file_rawopencfg+0x7c>
        err = tag;
 8006b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b98:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006b9a:	e17c      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7fc fd6e 	bl	8003686 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8006baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bac:	f113 0f02 	cmn.w	r3, #2
 8006bb0:	d14e      	bne.n	8006c50 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8006bbc:	f06f 0301 	mvn.w	r3, #1
 8006bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006bc2:	e168      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7f9 fb6c 	bl	80002a4 <strlen>
 8006bcc:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d903      	bls.n	8006be0 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8006bd8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006bde:	e15a      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f103 0108 	add.w	r1, r3, #8
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	889b      	ldrh	r3, [r3, #4]
 8006bea:	029b      	lsls	r3, r3, #10
 8006bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	889b      	ldrh	r3, [r3, #4]
 8006bfe:	029a      	lsls	r2, r3, #10
 8006c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	889b      	ldrh	r3, [r3, #4]
 8006c12:	029b      	lsls	r3, r3, #10
 8006c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1e:	2300      	movs	r3, #0
 8006c20:	643b      	str	r3, [r7, #64]	; 0x40
 8006c22:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006c26:	2303      	movs	r3, #3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff fd2d 	bl	8006688 <lfs_dir_commit>
 8006c2e:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8006c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c32:	f113 0f1c 	cmn.w	r3, #28
 8006c36:	d001      	beq.n	8006c3c <lfs_file_rawopencfg+0x11c>
 8006c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c3a:	e001      	b.n	8006c40 <lfs_file_rawopencfg+0x120>
 8006c3c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006c40:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8006c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 8125 	bne.w	8006e94 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8006c4a:	4b9a      	ldr	r3, [pc, #616]	; (8006eb4 <lfs_file_rawopencfg+0x394>)
 8006c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c4e:	e044      	b.n	8006cda <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8006c5a:	f06f 0310 	mvn.w	r3, #16
 8006c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006c60:	e119      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8006c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fc fafd 	bl	8003264 <lfs_tag_type3>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d003      	beq.n	8006c78 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8006c70:	f06f 0314 	mvn.w	r3, #20
 8006c74:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006c76:	e10e      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00e      	beq.n	8006ca0 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	889b      	ldrh	r3, [r3, #4]
 8006c86:	029b      	lsls	r3, r3, #10
 8006c88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c90:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c9e:	e01c      	b.n	8006cda <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	889b      	ldrh	r3, [r3, #4]
 8006caa:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cb0:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006cb8:	9200      	str	r2, [sp, #0]
 8006cba:	4a7f      	ldr	r2, [pc, #508]	; (8006eb8 <lfs_file_rawopencfg+0x398>)
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7fc fee5 	bl	8003a8c <lfs_dir_get>
 8006cc2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8006cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da02      	bge.n	8006cd0 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8006cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006cce:	e0e2      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	3328      	adds	r3, #40	; 0x28
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fc fbf7 	bl	80034c8 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006cda:	2300      	movs	r3, #0
 8006cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8006cde:	e063      	b.n	8006da8 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d03c      	beq.n	8006d66 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf6:	6859      	ldr	r1, [r3, #4]
 8006cf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006d0a:	051a      	lsls	r2, r3, #20
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	889b      	ldrh	r3, [r3, #4]
 8006d10:	029b      	lsls	r3, r3, #10
 8006d12:	ea42 0103 	orr.w	r1, r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1a:	6858      	ldr	r0, [r3, #4]
 8006d1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d1e:	4613      	mov	r3, r2
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4403      	add	r3, r0
 8006d28:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d2a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	6859      	ldr	r1, [r3, #4]
 8006d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4603      	mov	r3, r0
 8006d46:	4a5d      	ldr	r2, [pc, #372]	; (8006ebc <lfs_file_rawopencfg+0x39c>)
 8006d48:	4621      	mov	r1, r4
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7fc fe9e 	bl	8003a8c <lfs_dir_get>
 8006d50:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8006d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da06      	bge.n	8006d66 <lfs_file_rawopencfg+0x246>
 8006d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5a:	f113 0f02 	cmn.w	r3, #2
 8006d5e:	d002      	beq.n	8006d66 <lfs_file_rawopencfg+0x246>
                err = res;
 8006d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d62:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006d64:	e097      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d017      	beq.n	8006da2 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d76:	6859      	ldr	r1, [r3, #4]
 8006d78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d903      	bls.n	8006d96 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8006d8e:	f06f 031b 	mvn.w	r3, #27
 8006d92:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006d94:	e07f      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da4:	3301      	adds	r3, #1
 8006da6:	657b      	str	r3, [r7, #84]	; 0x54
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d395      	bcc.n	8006ce0 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8006dc8:	e010      	b.n	8006dec <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fb fdfa 	bl	80029ca <lfs_malloc>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8006de4:	f06f 030b 	mvn.w	r3, #11
 8006de8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006dea:	e054      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	3340      	adds	r3, #64	; 0x40
 8006df0:	4619      	mov	r1, r3
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7fb fe0f 	bl	8002a16 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fc fa32 	bl	8003264 <lfs_tag_type3>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	f240 2301 	movw	r3, #513	; 0x201
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d141      	bne.n	8006e90 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f06f 0201 	mvn.w	r2, #1
 8006e12:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fc fa5e 	bl	80032d8 <lfs_tag_size>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d020      	beq.n	8006e90 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	889b      	ldrh	r3, [r3, #4]
 8006e58:	029c      	lsls	r4, r3, #10
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fb fd12 	bl	800288c <lfs_min>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006e6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	4613      	mov	r3, r2
 8006e78:	4a0f      	ldr	r2, [pc, #60]	; (8006eb8 <lfs_file_rawopencfg+0x398>)
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7fc fe05 	bl	8003a8c <lfs_dir_get>
 8006e82:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8006e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da02      	bge.n	8006e90 <lfs_file_rawopencfg+0x370>
                err = res;
 8006e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006e8e:	e002      	b.n	8006e96 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e00b      	b.n	8006eac <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8006e94:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f823 	bl	8006ef0 <lfs_file_rawclose>
    return err;
 8006eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3760      	adds	r7, #96	; 0x60
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb4:	20100000 	.word	0x20100000
 8006eb8:	700ffc00 	.word	0x700ffc00
 8006ebc:	7ffffc00 	.word	0x7ffffc00

08006ec0 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006ece:	4b07      	ldr	r3, [pc, #28]	; (8006eec <lfs_file_rawopen+0x2c>)
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fe21 	bl	8006b20 <lfs_file_rawopencfg>
 8006ede:	6178      	str	r0, [r7, #20]
    return err;
 8006ee0:	697b      	ldr	r3, [r7, #20]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	0800c998 	.word	0x0800c998

08006ef0 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f9e5 	bl	80072cc <lfs_file_rawsync>
 8006f02:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fc fb9b 	bl	8003642 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fb fd61 	bl	80029e2 <lfs_free>
    }

    return err;
 8006f20:	68fb      	ldr	r3, [r7, #12]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	b08d      	sub	sp, #52	; 0x34
 8006f30:	af06      	add	r7, sp, #24
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8006f36:	f107 030c 	add.w	r3, r7, #12
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7fc fc0b 	bl	8003758 <lfs_alloc>
 8006f42:	6138      	str	r0, [r7, #16]
        if (err) {
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <lfs_file_relocate+0x22>
            return err;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	e0bb      	b.n	80070c6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fc f868 	bl	8003028 <lfs_bd_erase>
 8006f58:	6138      	str	r0, [r7, #16]
        if (err) {
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006f66:	f000 809b 	beq.w	80070a0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	e0ab      	b.n	80070c6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	e069      	b.n	8007048 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d027      	beq.n	8006fd0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	f103 0008 	add.w	r0, r3, #8
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	889b      	ldrh	r3, [r3, #4]
 8006f98:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8006f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	9105      	str	r1, [sp, #20]
 8006fa6:	f107 010b 	add.w	r1, r7, #11
 8006faa:	9104      	str	r1, [sp, #16]
 8006fac:	6979      	ldr	r1, [r7, #20]
 8006fae:	9103      	str	r1, [sp, #12]
 8006fb0:	9302      	str	r3, [sp, #8]
 8006fb2:	4b47      	ldr	r3, [pc, #284]	; (80070d0 <lfs_file_relocate+0x1a4>)
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	9200      	str	r2, [sp, #0]
 8006fb8:	4623      	mov	r3, r4
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4601      	mov	r1, r0
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7fc fd7f 	bl	8003ac2 <lfs_dir_getread>
 8006fc4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01e      	beq.n	800700a <lfs_file_relocate+0xde>
                    return err;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	e07a      	b.n	80070c6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8006fd6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	1ad4      	subs	r4, r2, r3
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	9203      	str	r2, [sp, #12]
 8006fe8:	f107 020b 	add.w	r2, r7, #11
 8006fec:	9202      	str	r2, [sp, #8]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	9201      	str	r2, [sp, #4]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fb fd23 	bl	8002a44 <lfs_bd_read>
 8006ffe:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <lfs_file_relocate+0xde>
                    return err;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	e05d      	b.n	80070c6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f103 0110 	add.w	r1, r3, #16
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	9203      	str	r2, [sp, #12]
 8007018:	f107 020b 	add.w	r2, r7, #11
 800701c:	9202      	str	r2, [sp, #8]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	9201      	str	r2, [sp, #4]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	2301      	movs	r3, #1
 8007026:	4602      	mov	r2, r0
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fb ff51 	bl	8002ed0 <lfs_bd_prog>
 800702e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800703c:	d032      	beq.n	80070a4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	e041      	b.n	80070c6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3301      	adds	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	429a      	cmp	r2, r3
 8007050:	d390      	bcc.n	8006f74 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69d9      	ldr	r1, [r3, #28]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	461a      	mov	r2, r3
 8007062:	f003 facd 	bl	800a600 <memcpy>
        file->cache.block = lfs->pcache.block;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695a      	ldr	r2, [r3, #20]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3310      	adds	r3, #16
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7fb fcc6 	bl	8002a16 <lfs_cache_zero>

        file->block = nblock;
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800709c:	2300      	movs	r3, #0
 800709e:	e012      	b.n	80070c6 <lfs_file_relocate+0x19a>
                goto relocate;
 80070a0:	bf00      	nop
 80070a2:	e000      	b.n	80070a6 <lfs_file_relocate+0x17a>
                    goto relocate;
 80070a4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a0a      	ldr	r2, [pc, #40]	; (80070d4 <lfs_file_relocate+0x1a8>)
 80070aa:	9200      	str	r2, [sp, #0]
 80070ac:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 80070b0:	4909      	ldr	r1, [pc, #36]	; (80070d8 <lfs_file_relocate+0x1ac>)
 80070b2:	480a      	ldr	r0, [pc, #40]	; (80070dc <lfs_file_relocate+0x1b0>)
 80070b4:	f003 fea2 	bl	800adfc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3310      	adds	r3, #16
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fb fc9a 	bl	80029f8 <lfs_cache_drop>
    while (true) {
 80070c4:	e737      	b.n	8006f36 <lfs_file_relocate+0xa>
    }
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	bf00      	nop
 80070d0:	fff7fc00 	.word	0xfff7fc00
 80070d4:	0800bfe8 	.word	0x0800bfe8
 80070d8:	0800bee4 	.word	0x0800bee4
 80070dc:	0800c068 	.word	0x0800c068

080070e0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fc fb10 	bl	8003718 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff16 	bl	8006f2c <lfs_file_relocate>
 8007100:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <lfs_file_outline+0x2c>
        return err;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	e006      	b.n	800711a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b09f      	sub	sp, #124	; 0x7c
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d105      	bne.n	8007152 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	3340      	adds	r3, #64	; 0x40
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fb fc53 	bl	80029f8 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80a4 	beq.w	80072b4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d176      	bne.n	800726c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800717e:	f107 030c 	add.w	r3, r7, #12
 8007182:	2254      	movs	r2, #84	; 0x54
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f003 fa62 	bl	800a650 <memset>
                .ctz.head = file->ctz.head,
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8007196:	63bb      	str	r3, [r7, #56]	; 0x38
 8007198:	2301      	movs	r3, #1
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80071a0:	643b      	str	r3, [r7, #64]	; 0x40
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80071a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fb fc20 	bl	80029f8 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80071b8:	e02b      	b.n	8007212 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80071ba:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80071be:	f107 010c 	add.w	r1, r7, #12
 80071c2:	2301      	movs	r3, #1
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f90d 	bl	80073e4 <lfs_file_flushedread>
 80071ca:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80071cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da01      	bge.n	80071d6 <lfs_file_flush+0xb2>
                    return res;
 80071d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d4:	e06f      	b.n	80072b6 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80071d6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80071da:	2301      	movs	r3, #1
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9d2 	bl	8007588 <lfs_file_flushedwrite>
 80071e4:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80071e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da01      	bge.n	80071f0 <lfs_file_flush+0xcc>
                    return res;
 80071ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ee:	e062      	b.n	80072b6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f8:	d00b      	beq.n	8007212 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	3340      	adds	r3, #64	; 0x40
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fb fbf8 	bl	80029f8 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fb fbf3 	bl	80029f8 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	429a      	cmp	r2, r3
 800721c:	d3cd      	bcc.n	80071ba <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	2301      	movs	r3, #1
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fb fda1 	bl	8002d70 <lfs_bd_flush>
 800722e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8007230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007232:	2b00      	cmp	r3, #0
 8007234:	d026      	beq.n	8007284 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8007236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007238:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800723c:	d001      	beq.n	8007242 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800723e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007240:	e039      	b.n	80072b6 <lfs_file_flush+0x192>
                        goto relocate;
 8007242:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	4a1d      	ldr	r2, [pc, #116]	; (80072c0 <lfs_file_flush+0x19c>)
 800724a:	9200      	str	r2, [sp, #0]
 800724c:	f640 425f 	movw	r2, #3167	; 0xc5f
 8007250:	491c      	ldr	r1, [pc, #112]	; (80072c4 <lfs_file_flush+0x1a0>)
 8007252:	481d      	ldr	r0, [pc, #116]	; (80072c8 <lfs_file_flush+0x1a4>)
 8007254:	f003 fdd2 	bl	800adfc <iprintf>
                err = lfs_file_relocate(lfs, file);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fe66 	bl	8006f2c <lfs_file_relocate>
 8007260:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8007262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0da      	beq.n	800721e <lfs_file_flush+0xfa>
                    return err;
 8007268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800726a:	e024      	b.n	80072b6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f7fb faf8 	bl	800286c <lfs_max>
 800727c:	4602      	mov	r2, r0
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	635a      	str	r2, [r3, #52]	; 0x34
 8007282:	e000      	b.n	8007286 <lfs_file_flush+0x162>
                break;
 8007284:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072b2:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3774      	adds	r7, #116	; 0x74
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd90      	pop	{r4, r7, pc}
 80072be:	bf00      	nop
 80072c0:	0800bfe8 	.word	0x0800bfe8
 80072c4:	0800bee4 	.word	0x0800bee4
 80072c8:	0800c068 	.word	0x0800c068

080072cc <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b090      	sub	sp, #64	; 0x40
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e07a      	b.n	80073dc <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ff1b 	bl	8007124 <lfs_file_flush>
 80072ee:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	e06a      	b.n	80073dc <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d063      	beq.n	80073da <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	4618      	mov	r0, r3
 8007318:	f7fb fecd 	bl	80030b6 <lfs_pair_isnull>
 800731c:	4603      	mov	r3, r0
 800731e:	f083 0301 	eor.w	r3, r3, #1
 8007322:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8007324:	2b00      	cmp	r3, #0
 8007326:	d058      	beq.n	80073da <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8007334:	f240 2301 	movw	r3, #513	; 0x201
 8007338:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
 8007346:	e014      	b.n	8007372 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8007348:	f240 2302 	movw	r3, #514	; 0x202
 800734c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007354:	3228      	adds	r2, #40	; 0x28
 8007356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800735a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800735e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007362:	4618      	mov	r0, r3
 8007364:	f7fc f8c8 	bl	80034f8 <lfs_ctz_tole32>
            buffer = &ctz;
 8007368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800736e:	2308      	movs	r3, #8
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	f103 0108 	add.w	r1, r3, #8
 8007378:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800737a:	051a      	lsls	r2, r3, #20
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	889b      	ldrh	r3, [r3, #4]
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	431a      	orrs	r2, r3
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	4313      	orrs	r3, r2
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	889b      	ldrh	r3, [r3, #4]
 8007392:	029a      	lsls	r2, r3, #10
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4313      	orrs	r3, r2
 800739c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80073a0:	623b      	str	r3, [r7, #32]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
 80073aa:	f107 0218 	add.w	r2, r7, #24
 80073ae:	2302      	movs	r3, #2
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff f969 	bl	8006688 <lfs_dir_commit>
 80073b6:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	e006      	b.n	80073dc <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3740      	adds	r7, #64	; 0x40
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80073e4:	b5b0      	push	{r4, r5, r7, lr}
 80073e6:	b090      	sub	sp, #64	; 0x40
 80073e8:	af06      	add	r7, sp, #24
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	429a      	cmp	r2, r3
 8007404:	d301      	bcc.n	800740a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8007406:	2300      	movs	r3, #0
 8007408:	e0b7      	b.n	800757a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	4619      	mov	r1, r3
 8007416:	6838      	ldr	r0, [r7, #0]
 8007418:	f7fb fa38 	bl	800288c <lfs_min>
 800741c:	6038      	str	r0, [r7, #0]
    nsize = size;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8007422:	e0a5      	b.n	8007570 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007438:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800743a:	429a      	cmp	r2, r3
 800743c:	d130      	bne.n	80074a0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d11c      	bne.n	8007484 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	3138      	adds	r1, #56	; 0x38
 8007460:	68b8      	ldr	r0, [r7, #8]
 8007462:	303c      	adds	r0, #60	; 0x3c
 8007464:	9003      	str	r0, [sp, #12]
 8007466:	9102      	str	r1, [sp, #8]
 8007468:	9201      	str	r2, [sp, #4]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	462b      	mov	r3, r5
 800746e:	4622      	mov	r2, r4
 8007470:	2100      	movs	r1, #0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff f965 	bl	8006742 <lfs_ctz_find>
 8007478:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d009      	beq.n	8007494 <lfs_file_flushedread+0xb0>
                    return err;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	e07a      	b.n	800757a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f06f 0201 	mvn.w	r2, #1
 800748a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	6a38      	ldr	r0, [r7, #32]
 80074b0:	f7fb f9ec 	bl	800288c <lfs_min>
 80074b4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d026      	beq.n	8007510 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f103 0408 	add.w	r4, r3, #8
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80074d2:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	889b      	ldrh	r3, [r3, #4]
 80074d8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80074da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80074e6:	69b8      	ldr	r0, [r7, #24]
 80074e8:	9005      	str	r0, [sp, #20]
 80074ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ec:	9004      	str	r0, [sp, #16]
 80074ee:	9103      	str	r1, [sp, #12]
 80074f0:	9302      	str	r3, [sp, #8]
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <lfs_file_flushedread+0x1a0>)
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	9200      	str	r2, [sp, #0]
 80074f8:	462b      	mov	r3, r5
 80074fa:	2200      	movs	r2, #0
 80074fc:	4621      	mov	r1, r4
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7fc fadf 	bl	8003ac2 <lfs_dir_getread>
 8007504:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01d      	beq.n	8007548 <lfs_file_flushedread+0x164>
                return err;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	e034      	b.n	800757a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800751a:	69dc      	ldr	r4, [r3, #28]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007524:	69b9      	ldr	r1, [r7, #24]
 8007526:	9103      	str	r1, [sp, #12]
 8007528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800752a:	9102      	str	r1, [sp, #8]
 800752c:	9201      	str	r2, [sp, #4]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	4623      	mov	r3, r4
 8007532:	4602      	mov	r2, r0
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7fb fa84 	bl	8002a44 <lfs_bd_read>
 800753c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <lfs_file_flushedread+0x164>
                return err;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	e018      	b.n	800757a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	441a      	add	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	441a      	add	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8007560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	4413      	add	r3, r2
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f47f af56 	bne.w	8007424 <lfs_file_flushedread+0x40>
    }

    return size;
 8007578:	683b      	ldr	r3, [r7, #0]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3728      	adds	r7, #40	; 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bdb0      	pop	{r4, r5, r7, pc}
 8007582:	bf00      	nop
 8007584:	fff7fc00 	.word	0xfff7fc00

08007588 <lfs_file_flushedwrite>:
}


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007588:	b5b0      	push	{r4, r5, r7, lr}
 800758a:	b090      	sub	sp, #64	; 0x40
 800758c:	af04      	add	r7, sp, #16
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 810c 	beq.w	80077c4 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	441a      	add	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fb f956 	bl	800286c <lfs_max>
 80075c0:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80075c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80075d8:	08db      	lsrs	r3, r3, #3
 80075da:	e003      	b.n	80075e4 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e0:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80075e2:	08db      	lsrs	r3, r3, #3
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f7fb f950 	bl	800288c <lfs_min>
 80075ec:	4603      	mov	r3, r0
 80075ee:	4619      	mov	r1, r3
 80075f0:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80075f4:	f7fb f94a 	bl	800288c <lfs_min>
 80075f8:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80075fa:	429c      	cmp	r4, r3
 80075fc:	f240 80e2 	bls.w	80077c4 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fd6c 	bl	80070e0 <lfs_file_outline>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80d9 	beq.w	80077c4 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	e0d5      	b.n	80077ce <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d006      	beq.n	800763c <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007636:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d16b      	bne.n	8007714 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d157      	bne.n	80076f8 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d12d      	bne.n	80076b0 <lfs_file_flushedwrite+0x128>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d029      	beq.n	80076b0 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800766e:	3a01      	subs	r2, #1
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	3138      	adds	r1, #56	; 0x38
 8007674:	68b8      	ldr	r0, [r7, #8]
 8007676:	303c      	adds	r0, #60	; 0x3c
 8007678:	9003      	str	r0, [sp, #12]
 800767a:	9102      	str	r1, [sp, #8]
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	462b      	mov	r3, r5
 8007682:	4622      	mov	r2, r4
 8007684:	2100      	movs	r1, #0
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff f85b 	bl	8006742 <lfs_ctz_find>
 800768c:	6238      	str	r0, [r7, #32]
                    if (err) {
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	e094      	b.n	80077ce <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3340      	adds	r3, #64	; 0x40
 80076a8:	4619      	mov	r1, r3
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7fb f9b3 	bl	8002a16 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7fc f831 	bl	8003718 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80076bc:	68fc      	ldr	r4, [r7, #12]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	3238      	adds	r2, #56	; 0x38
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	313c      	adds	r1, #60	; 0x3c
 80076ce:	9102      	str	r1, [sp, #8]
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	462b      	mov	r3, r5
 80076d6:	4622      	mov	r2, r4
 80076d8:	4601      	mov	r1, r0
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff f89c 	bl	8006818 <lfs_ctz_extend>
 80076e0:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00f      	beq.n	8007708 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	e06a      	b.n	80077ce <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f06f 0201 	mvn.w	r2, #1
 80076fe:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007718:	69da      	ldr	r2, [r3, #28]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	4619      	mov	r1, r3
 8007722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007724:	f7fb f8b2 	bl	800288c <lfs_min>
 8007728:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007730:	68fc      	ldr	r4, [r7, #12]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800773a:	69b9      	ldr	r1, [r7, #24]
 800773c:	9103      	str	r1, [sp, #12]
 800773e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007740:	9102      	str	r1, [sp, #8]
 8007742:	9201      	str	r2, [sp, #4]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	2301      	movs	r3, #1
 8007748:	4622      	mov	r2, r4
 800774a:	4601      	mov	r1, r0
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f7fb fbbf 	bl	8002ed0 <lfs_bd_prog>
 8007752:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d01c      	beq.n	8007794 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007760:	d007      	beq.n	8007772 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	e02d      	b.n	80077ce <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8007772:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fbd8 	bl	8006f2c <lfs_file_relocate>
 800777c:	6178      	str	r0, [r7, #20]
            if (err) {
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0d2      	beq.n	800772a <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	e01c      	b.n	80077ce <lfs_file_flushedwrite+0x246>
            break;
 8007794:	bf00      	nop
            }
        }

        file->pos += diff;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	441a      	add	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	441a      	add	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80077ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	4413      	add	r3, r2
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80077b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7fb ffaa 	bl	8003718 <lfs_alloc_ack>
    while (nsize > 0) {
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f47f af2b 	bne.w	8007622 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 80077cc:	683b      	ldr	r3, [r7, #0]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3730      	adds	r7, #48	; 0x30
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080077d8 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <lfs_file_rawwrite+0x28>
 80077f2:	4b38      	ldr	r3, [pc, #224]	; (80078d4 <lfs_file_rawwrite+0xfc>)
 80077f4:	4a38      	ldr	r2, [pc, #224]	; (80078d8 <lfs_file_rawwrite+0x100>)
 80077f6:	f640 5155 	movw	r1, #3413	; 0xd55
 80077fa:	4838      	ldr	r0, [pc, #224]	; (80078dc <lfs_file_rawwrite+0x104>)
 80077fc:	f002 fe78 	bl	800a4f0 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff fc88 	bl	8007124 <lfs_file_flush>
 8007814:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <lfs_file_rawwrite+0x48>
            return err;
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	e055      	b.n	80078cc <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <lfs_file_rawwrite+0x68>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	429a      	cmp	r2, r3
 8007836:	d203      	bcs.n	8007840 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	441a      	add	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784c:	429a      	cmp	r2, r3
 800784e:	d902      	bls.n	8007856 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8007850:	f06f 031a 	mvn.w	r3, #26
 8007854:	e03a      	b.n	80078cc <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d121      	bne.n	80078a6 <lfs_file_rawwrite+0xce>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	429a      	cmp	r2, r3
 800786c:	d91b      	bls.n	80078a6 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800787c:	e00e      	b.n	800789c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]
 8007882:	f107 0217 	add.w	r2, r7, #23
 8007886:	2301      	movs	r3, #1
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fe7c 	bl	8007588 <lfs_file_flushedwrite>
 8007890:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	da01      	bge.n	800789c <lfs_file_rawwrite+0xc4>
                return res;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	e017      	b.n	80078cc <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a0:	6a3a      	ldr	r2, [r7, #32]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d8eb      	bhi.n	800787e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff fe6b 	bl	8007588 <lfs_file_flushedwrite>
 80078b2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da01      	bge.n	80078be <lfs_file_rawwrite+0xe6>
        return nsize;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	e006      	b.n	80078cc <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 80078ca:	69bb      	ldr	r3, [r7, #24]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3728      	adds	r7, #40	; 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	0800c240 	.word	0x0800c240
 80078d8:	0800c9a4 	.word	0x0800c9a4
 80078dc:	0800bee4 	.word	0x0800bee4

080078e0 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08c      	sub	sp, #48	; 0x30
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <lfs_init+0x2c>
 80078fe:	4b92      	ldr	r3, [pc, #584]	; (8007b48 <lfs_init+0x268>)
 8007900:	4a92      	ldr	r2, [pc, #584]	; (8007b4c <lfs_init+0x26c>)
 8007902:	f640 7146 	movw	r1, #3910	; 0xf46
 8007906:	4892      	ldr	r0, [pc, #584]	; (8007b50 <lfs_init+0x270>)
 8007908:	f002 fdf2 	bl	800a4f0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <lfs_init+0x44>
 8007916:	4b8f      	ldr	r3, [pc, #572]	; (8007b54 <lfs_init+0x274>)
 8007918:	4a8c      	ldr	r2, [pc, #560]	; (8007b4c <lfs_init+0x26c>)
 800791a:	f640 7147 	movw	r1, #3911	; 0xf47
 800791e:	488c      	ldr	r0, [pc, #560]	; (8007b50 <lfs_init+0x270>)
 8007920:	f002 fde6 	bl	800a4f0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <lfs_init+0x5c>
 800792e:	4b8a      	ldr	r3, [pc, #552]	; (8007b58 <lfs_init+0x278>)
 8007930:	4a86      	ldr	r2, [pc, #536]	; (8007b4c <lfs_init+0x26c>)
 8007932:	f640 7148 	movw	r1, #3912	; 0xf48
 8007936:	4886      	ldr	r0, [pc, #536]	; (8007b50 <lfs_init+0x270>)
 8007938:	f002 fdda 	bl	800a4f0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007946:	6952      	ldr	r2, [r2, #20]
 8007948:	fbb3 f1f2 	udiv	r1, r3, r2
 800794c:	fb01 f202 	mul.w	r2, r1, r2
 8007950:	1a9b      	subs	r3, r3, r2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d006      	beq.n	8007964 <lfs_init+0x84>
 8007956:	4b81      	ldr	r3, [pc, #516]	; (8007b5c <lfs_init+0x27c>)
 8007958:	4a7c      	ldr	r2, [pc, #496]	; (8007b4c <lfs_init+0x26c>)
 800795a:	f640 714c 	movw	r1, #3916	; 0xf4c
 800795e:	487c      	ldr	r0, [pc, #496]	; (8007b50 <lfs_init+0x270>)
 8007960:	f002 fdc6 	bl	800a4f0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800796e:	6992      	ldr	r2, [r2, #24]
 8007970:	fbb3 f1f2 	udiv	r1, r3, r2
 8007974:	fb01 f202 	mul.w	r2, r1, r2
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <lfs_init+0xac>
 800797e:	4b78      	ldr	r3, [pc, #480]	; (8007b60 <lfs_init+0x280>)
 8007980:	4a72      	ldr	r2, [pc, #456]	; (8007b4c <lfs_init+0x26c>)
 8007982:	f640 714d 	movw	r1, #3917	; 0xf4d
 8007986:	4872      	ldr	r0, [pc, #456]	; (8007b50 <lfs_init+0x270>)
 8007988:	f002 fdb2 	bl	800a4f0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007996:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007998:	fbb3 f1f2 	udiv	r1, r3, r2
 800799c:	fb01 f202 	mul.w	r2, r1, r2
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d006      	beq.n	80079b4 <lfs_init+0xd4>
 80079a6:	4b6f      	ldr	r3, [pc, #444]	; (8007b64 <lfs_init+0x284>)
 80079a8:	4a68      	ldr	r2, [pc, #416]	; (8007b4c <lfs_init+0x26c>)
 80079aa:	f640 714e 	movw	r1, #3918	; 0xf4e
 80079ae:	4868      	ldr	r0, [pc, #416]	; (8007b50 <lfs_init+0x270>)
 80079b0:	f002 fd9e 	bl	800a4f0 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	3b08      	subs	r3, #8
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fa ff98 	bl	80028fa <lfs_npw2>
 80079ca:	4603      	mov	r3, r0
 80079cc:	009a      	lsls	r2, r3, #2
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d906      	bls.n	80079e6 <lfs_init+0x106>
 80079d8:	4b63      	ldr	r3, [pc, #396]	; (8007b68 <lfs_init+0x288>)
 80079da:	4a5c      	ldr	r2, [pc, #368]	; (8007b4c <lfs_init+0x26c>)
 80079dc:	f640 7151 	movw	r1, #3921	; 0xf51
 80079e0:	485b      	ldr	r0, [pc, #364]	; (8007b50 <lfs_init+0x270>)
 80079e2:	f002 fd85 	bl	800a4f0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <lfs_init+0x11e>
 80079f0:	4b5e      	ldr	r3, [pc, #376]	; (8007b6c <lfs_init+0x28c>)
 80079f2:	4a56      	ldr	r2, [pc, #344]	; (8007b4c <lfs_init+0x26c>)
 80079f4:	f640 715a 	movw	r1, #3930	; 0xf5a
 80079f8:	4855      	ldr	r0, [pc, #340]	; (8007b50 <lfs_init+0x270>)
 80079fa:	f002 fd79 	bl	800a4f0 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60da      	str	r2, [r3, #12]
 8007a12:	e010      	b.n	8007a36 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fa ffd5 	bl	80029ca <lfs_malloc>
 8007a20:	4602      	mov	r2, r0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8007a2e:	f06f 030b 	mvn.w	r3, #11
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007a34:	e0fd      	b.n	8007c32 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	61da      	str	r2, [r3, #28]
 8007a4a:	e010      	b.n	8007a6e <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fa ffb9 	bl	80029ca <lfs_malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8007a66:	f06f 030b 	mvn.w	r3, #11
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007a6c:	e0e1      	b.n	8007c32 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fa ffcf 	bl	8002a16 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3310      	adds	r3, #16
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fa ffc9 	bl	8002a16 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <lfs_init+0x1bc>
 8007a8e:	4b38      	ldr	r3, [pc, #224]	; (8007b70 <lfs_init+0x290>)
 8007a90:	4a2e      	ldr	r2, [pc, #184]	; (8007b4c <lfs_init+0x26c>)
 8007a92:	f640 7178 	movw	r1, #3960	; 0xf78
 8007a96:	482e      	ldr	r0, [pc, #184]	; (8007b50 <lfs_init+0x270>)
 8007a98:	f002 fd2a 	bl	800a4f0 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <lfs_init+0x1d8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d006      	beq.n	8007ac6 <lfs_init+0x1e6>
 8007ab8:	4b2e      	ldr	r3, [pc, #184]	; (8007b74 <lfs_init+0x294>)
 8007aba:	4a24      	ldr	r2, [pc, #144]	; (8007b4c <lfs_init+0x26c>)
 8007abc:	f640 7179 	movw	r1, #3961	; 0xf79
 8007ac0:	4823      	ldr	r0, [pc, #140]	; (8007b50 <lfs_init+0x270>)
 8007ac2:	f002 fd15 	bl	800a4f0 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	665a      	str	r2, [r3, #100]	; 0x64
 8007ada:	e010      	b.n	8007afe <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fa ff71 	bl	80029ca <lfs_malloc>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8007af6:	f06f 030b 	mvn.w	r3, #11
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007afc:	e099      	b.n	8007c32 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	2bff      	cmp	r3, #255	; 0xff
 8007b06:	d906      	bls.n	8007b16 <lfs_init+0x236>
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <lfs_init+0x298>)
 8007b0a:	4a10      	ldr	r2, [pc, #64]	; (8007b4c <lfs_init+0x26c>)
 8007b0c:	f640 7186 	movw	r1, #3974	; 0xf86
 8007b10:	480f      	ldr	r0, [pc, #60]	; (8007b50 <lfs_init+0x270>)
 8007b12:	f002 fced 	bl	800a4f0 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	22ff      	movs	r2, #255	; 0xff
 8007b2c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	da23      	bge.n	8007b80 <lfs_init+0x2a0>
 8007b38:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <lfs_init+0x29c>)
 8007b3a:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <lfs_init+0x26c>)
 8007b3c:	f640 718c 	movw	r1, #3980	; 0xf8c
 8007b40:	4803      	ldr	r0, [pc, #12]	; (8007b50 <lfs_init+0x270>)
 8007b42:	f002 fcd5 	bl	800a4f0 <__assert_func>
 8007b46:	bf00      	nop
 8007b48:	0800c270 	.word	0x0800c270
 8007b4c:	0800c9b8 	.word	0x0800c9b8
 8007b50:	0800bee4 	.word	0x0800bee4
 8007b54:	0800c28c 	.word	0x0800c28c
 8007b58:	0800c2a8 	.word	0x0800c2a8
 8007b5c:	0800c2c4 	.word	0x0800c2c4
 8007b60:	0800c2f4 	.word	0x0800c2f4
 8007b64:	0800c324 	.word	0x0800c324
 8007b68:	0800c358 	.word	0x0800c358
 8007b6c:	0800c3a4 	.word	0x0800c3a4
 8007b70:	0800c3c0 	.word	0x0800c3c0
 8007b74:	0800c3e0 	.word	0x0800c3e0
 8007b78:	0800c434 	.word	0x0800c434
 8007b7c:	0800c450 	.word	0x0800c450
    lfs->file_max = lfs->cfg->file_max;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d103      	bne.n	8007b9a <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007b98:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d906      	bls.n	8007bb6 <lfs_init+0x2d6>
 8007ba8:	4b26      	ldr	r3, [pc, #152]	; (8007c44 <lfs_init+0x364>)
 8007baa:	4a27      	ldr	r2, [pc, #156]	; (8007c48 <lfs_init+0x368>)
 8007bac:	f640 7192 	movw	r1, #3986	; 0xf92
 8007bb0:	4826      	ldr	r0, [pc, #152]	; (8007c4c <lfs_init+0x36c>)
 8007bb2:	f002 fc9d 	bl	800a4f0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007bce:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d906      	bls.n	8007bee <lfs_init+0x30e>
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <lfs_init+0x370>)
 8007be2:	4a19      	ldr	r2, [pc, #100]	; (8007c48 <lfs_init+0x368>)
 8007be4:	f640 7198 	movw	r1, #3992	; 0xf98
 8007be8:	4818      	ldr	r0, [pc, #96]	; (8007c4c <lfs_init+0x36c>)
 8007bea:	f002 fc81 	bl	800a4f0 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bf4:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	333c      	adds	r3, #60	; 0x3c
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	605a      	str	r2, [r3, #4]
 8007c14:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3330      	adds	r3, #48	; 0x30
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3348      	adds	r3, #72	; 0x48
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	605a      	str	r2, [r3, #4]
 8007c2c:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e003      	b.n	8007c3a <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f80e 	bl	8007c54 <lfs_deinit>
    return err;
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3730      	adds	r7, #48	; 0x30
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	0800c474 	.word	0x0800c474
 8007c48:	0800c9b8 	.word	0x0800c9b8
 8007c4c:	0800bee4 	.word	0x0800bee4
 8007c50:	0800c490 	.word	0x0800c490

08007c54 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d104      	bne.n	8007c70 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fa feb9 	bl	80029e2 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d104      	bne.n	8007c84 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fa feaf 	bl	80029e2 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fa fea5 	bl	80029e2 <lfs_free>
    }

    return 0;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b0a0      	sub	sp, #128	; 0x80
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
    int err = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff fe13 	bl	80078e0 <lfs_init>
 8007cba:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <lfs_rawformat+0x22>
            return err;
 8007cc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cc4:	e082      	b.n	8007dcc <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	f002 fcbc 	bl	800a650 <memset>
        lfs->free.off = 0;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fa fdcc 	bl	800288c <lfs_min>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fb fd09 	bl	8003718 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8007d06:	f107 030c 	add.w	r3, r7, #12
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fd fae1 	bl	80052d4 <lfs_dir_alloc>
 8007d12:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d14f      	bne.n	8007dba <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8007d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d1e:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d24:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8007d26:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8007d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8007d34:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8007d3a:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8007d40:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007d42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fb fc26 	bl	8003598 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007d4c:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <lfs_rawformat+0x130>)
 8007d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d50:	2300      	movs	r3, #0
 8007d52:	653b      	str	r3, [r7, #80]	; 0x50
 8007d54:	4b20      	ldr	r3, [pc, #128]	; (8007dd8 <lfs_rawformat+0x134>)
 8007d56:	657b      	str	r3, [r7, #84]	; 0x54
 8007d58:	4b20      	ldr	r3, [pc, #128]	; (8007ddc <lfs_rawformat+0x138>)
 8007d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d5c:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <lfs_rawformat+0x13c>)
 8007d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d64:	663b      	str	r3, [r7, #96]	; 0x60
 8007d66:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007d6a:	f107 010c 	add.w	r1, r7, #12
 8007d6e:	2303      	movs	r3, #3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7fe fc89 	bl	8006688 <lfs_dir_commit>
 8007d76:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8007d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d11f      	bne.n	8007dbe <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007d84:	f107 010c 	add.w	r1, r7, #12
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fe fc7b 	bl	8006688 <lfs_dir_commit>
 8007d92:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d113      	bne.n	8007dc2 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d9e:	2301      	movs	r3, #1
 8007da0:	633b      	str	r3, [r7, #48]	; 0x30
 8007da2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7fc ff0d 	bl	8004bcc <lfs_dir_fetch>
 8007db2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007db4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	e004      	b.n	8007dc4 <lfs_rawformat+0x120>
            goto cleanup;
 8007dba:	bf00      	nop
 8007dbc:	e002      	b.n	8007dc4 <lfs_rawformat+0x120>
            goto cleanup;
 8007dbe:	bf00      	nop
 8007dc0:	e000      	b.n	8007dc4 <lfs_rawformat+0x120>
            goto cleanup;
 8007dc2:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff ff45 	bl	8007c54 <lfs_deinit>
    return err;
 8007dca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3780      	adds	r7, #128	; 0x80
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40100000 	.word	0x40100000
 8007dd8:	0ff00008 	.word	0x0ff00008
 8007ddc:	0800c4c0 	.word	0x0800c4c0
 8007de0:	20100018 	.word	0x20100018

08007de4 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b09c      	sub	sp, #112	; 0x70
 8007de8:	af04      	add	r7, sp, #16
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fd75 	bl	80078e0 <lfs_init>
 8007df6:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8007df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <lfs_rawmount+0x1e>
        return err;
 8007dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e00:	e192      	b.n	8008128 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e06:	2220      	movs	r2, #32
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 fc20 	bl	800a650 <memset>
 8007e10:	2301      	movs	r3, #1
 8007e12:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8007e18:	e10b      	b.n	8008032 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	085b      	lsrs	r3, r3, #1
 8007e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d303      	bcc.n	8007e30 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8007e28:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007e2e:	e177      	b.n	8008120 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8007e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e32:	3301      	adds	r3, #1
 8007e34:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3a:	4b8a      	ldr	r3, [pc, #552]	; (8008064 <lfs_rawmount+0x280>)
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e3e:	2308      	movs	r3, #8
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8007e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e46:	f103 0218 	add.w	r2, r3, #24
 8007e4a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	4b84      	ldr	r3, [pc, #528]	; (8008068 <lfs_rawmount+0x284>)
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	4b83      	ldr	r3, [pc, #524]	; (800806c <lfs_rawmount+0x288>)
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4b83      	ldr	r3, [pc, #524]	; (8008070 <lfs_rawmount+0x28c>)
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fc fb44 	bl	80044f0 <lfs_dir_fetchmatch>
 8007e68:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8007e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	da02      	bge.n	8007e76 <lfs_rawmount+0x92>
            err = tag;
 8007e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e72:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007e74:	e154      	b.n	8008120 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8007e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80cd 	beq.w	8008018 <lfs_rawmount+0x234>
 8007e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fb f9cc 	bl	800321e <lfs_tag_isdelete>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f083 0301 	eor.w	r3, r3, #1
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80c2 	beq.w	8008018 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8007e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8007e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007ea0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	4b72      	ldr	r3, [pc, #456]	; (8008074 <lfs_rawmount+0x290>)
 8007eac:	4a70      	ldr	r2, [pc, #448]	; (8008070 <lfs_rawmount+0x28c>)
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fb fdec 	bl	8003a8c <lfs_dir_get>
 8007eb4:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8007eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da02      	bge.n	8007ec2 <lfs_rawmount+0xde>
                err = tag;
 8007ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007ec0:	e12e      	b.n	8008120 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8007ec2:	f107 030c 	add.w	r3, r7, #12
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fb fb2e 	bl	8003528 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8007eda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d103      	bne.n	8007eea <lfs_rawmount+0x106>
 8007ee2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d011      	beq.n	8007f0e <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8007eea:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8007eee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ef2:	4961      	ldr	r1, [pc, #388]	; (8008078 <lfs_rawmount+0x294>)
 8007ef4:	9101      	str	r1, [sp, #4]
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	f241 0233 	movw	r2, #4147	; 0x1033
 8007efe:	495f      	ldr	r1, [pc, #380]	; (800807c <lfs_rawmount+0x298>)
 8007f00:	485f      	ldr	r0, [pc, #380]	; (8008080 <lfs_rawmount+0x29c>)
 8007f02:	f002 ff7b 	bl	800adfc <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8007f06:	f06f 0315 	mvn.w	r3, #21
 8007f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007f0c:	e083      	b.n	8008016 <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d018      	beq.n	8007f46 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d910      	bls.n	8007f40 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f24:	4954      	ldr	r1, [pc, #336]	; (8008078 <lfs_rawmount+0x294>)
 8007f26:	9101      	str	r1, [sp, #4]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	f241 023c 	movw	r2, #4156	; 0x103c
 8007f30:	4952      	ldr	r1, [pc, #328]	; (800807c <lfs_rawmount+0x298>)
 8007f32:	4854      	ldr	r0, [pc, #336]	; (8008084 <lfs_rawmount+0x2a0>)
 8007f34:	f002 ff62 	bl	800adfc <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8007f38:	f06f 0315 	mvn.w	r3, #21
 8007f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007f3e:	e06a      	b.n	8008016 <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d018      	beq.n	8007f7e <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d910      	bls.n	8007f78 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5c:	4946      	ldr	r1, [pc, #280]	; (8008078 <lfs_rawmount+0x294>)
 8007f5e:	9101      	str	r1, [sp, #4]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4613      	mov	r3, r2
 8007f64:	f241 0247 	movw	r2, #4167	; 0x1047
 8007f68:	4944      	ldr	r1, [pc, #272]	; (800807c <lfs_rawmount+0x298>)
 8007f6a:	4847      	ldr	r0, [pc, #284]	; (8008088 <lfs_rawmount+0x2a4>)
 8007f6c:	f002 ff46 	bl	800adfc <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8007f70:	f06f 0315 	mvn.w	r3, #21
 8007f74:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007f76:	e04e      	b.n	8008016 <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d018      	beq.n	8007fb6 <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8007f84:	6a3a      	ldr	r2, [r7, #32]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d910      	bls.n	8007fb0 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8007f8e:	6a3a      	ldr	r2, [r7, #32]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f94:	4938      	ldr	r1, [pc, #224]	; (8008078 <lfs_rawmount+0x294>)
 8007f96:	9101      	str	r1, [sp, #4]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	f241 0252 	movw	r2, #4178	; 0x1052
 8007fa0:	4936      	ldr	r1, [pc, #216]	; (800807c <lfs_rawmount+0x298>)
 8007fa2:	483a      	ldr	r0, [pc, #232]	; (800808c <lfs_rawmount+0x2a8>)
 8007fa4:	f002 ff2a 	bl	800adfc <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8007fa8:	f06f 0315 	mvn.w	r3, #21
 8007fac:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007fae:	e032      	b.n	8008016 <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8007fb0:	6a3a      	ldr	r2, [r7, #32]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d011      	beq.n	8007fe6 <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	492b      	ldr	r1, [pc, #172]	; (8008078 <lfs_rawmount+0x294>)
 8007fcc:	9101      	str	r1, [sp, #4]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	f241 025c 	movw	r2, #4188	; 0x105c
 8007fd6:	4929      	ldr	r1, [pc, #164]	; (800807c <lfs_rawmount+0x298>)
 8007fd8:	482d      	ldr	r0, [pc, #180]	; (8008090 <lfs_rawmount+0x2ac>)
 8007fda:	f002 ff0f 	bl	800adfc <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8007fde:	f06f 0315 	mvn.w	r3, #21
 8007fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007fe4:	e017      	b.n	8008016 <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d012      	beq.n	8008018 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	491f      	ldr	r1, [pc, #124]	; (8008078 <lfs_rawmount+0x294>)
 8007ffc:	9101      	str	r1, [sp, #4]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	f241 0263 	movw	r2, #4195	; 0x1063
 8008006:	491d      	ldr	r1, [pc, #116]	; (800807c <lfs_rawmount+0x298>)
 8008008:	4822      	ldr	r0, [pc, #136]	; (8008094 <lfs_rawmount+0x2b0>)
 800800a:	f002 fef7 	bl	800adfc <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 800800e:	f06f 0315 	mvn.w	r3, #21
 8008012:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008014:	bf00      	nop
            goto cleanup;
 8008016:	e083      	b.n	8008120 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800801e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7fc fded 	bl	8004c04 <lfs_dir_getgstate>
 800802a:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800802c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d175      	bne.n	800811e <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8008032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008036:	3318      	adds	r3, #24
 8008038:	4618      	mov	r0, r3
 800803a:	f7fb f83c 	bl	80030b6 <lfs_pair_isnull>
 800803e:	4603      	mov	r3, r0
 8008040:	f083 0301 	eor.w	r3, r3, #1
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	f47f aee7 	bne.w	8007e1a <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3320      	adds	r3, #32
 8008050:	4618      	mov	r0, r3
 8008052:	f7fb f830 	bl	80030b6 <lfs_pair_isnull>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01d      	beq.n	8008098 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 800805c:	f06f 0315 	mvn.w	r3, #21
 8008060:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8008062:	e05d      	b.n	8008120 <lfs_rawmount+0x33c>
 8008064:	0800c4c0 	.word	0x0800c4c0
 8008068:	08004c69 	.word	0x08004c69
 800806c:	0ff00008 	.word	0x0ff00008
 8008070:	7ffffc00 	.word	0x7ffffc00
 8008074:	20100018 	.word	0x20100018
 8008078:	0800bfe8 	.word	0x0800bfe8
 800807c:	0800bee4 	.word	0x0800bee4
 8008080:	0800c4cc 	.word	0x0800c4cc
 8008084:	0800c4f8 	.word	0x0800c4f8
 8008088:	0800c52c 	.word	0x0800c52c
 800808c:	0800c560 	.word	0x0800c560
 8008090:	0800c594 	.word	0x0800c594
 8008094:	0800c5c8 	.word	0x0800c5c8
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3330      	adds	r3, #48	; 0x30
 800809c:	4618      	mov	r0, r3
 800809e:	f7fb f961 	bl	8003364 <lfs_gstate_iszero>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f083 0301 	eor.w	r3, r3, #1
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d010      	beq.n	80080d0 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080ba:	481d      	ldr	r0, [pc, #116]	; (8008130 <lfs_rawmount+0x34c>)
 80080bc:	9002      	str	r0, [sp, #8]
 80080be:	9201      	str	r2, [sp, #4]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	460b      	mov	r3, r1
 80080c4:	f241 0279 	movw	r2, #4217	; 0x1079
 80080c8:	491a      	ldr	r1, [pc, #104]	; (8008134 <lfs_rawmount+0x350>)
 80080ca:	481b      	ldr	r0, [pc, #108]	; (8008138 <lfs_rawmount+0x354>)
 80080cc:	f002 fe96 	bl	800adfc <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fb f894 	bl	8003202 <lfs_tag_isvalid>
 80080da:	4603      	mov	r3, r0
 80080dc:	f083 0301 	eor.w	r3, r3, #1
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	441a      	add	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	333c      	adds	r3, #60	; 0x3c
 80080f4:	3230      	adds	r2, #48	; 0x30
 80080f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80080f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008104:	6a12      	ldr	r2, [r2, #32]
 8008106:	fbb3 f1f2 	udiv	r1, r3, r2
 800810a:	fb01 f202 	mul.w	r2, r1, r2
 800810e:	1a9a      	subs	r2, r3, r2
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7fb fb0e 	bl	8003736 <lfs_alloc_drop>

    return 0;
 800811a:	2300      	movs	r3, #0
 800811c:	e004      	b.n	8008128 <lfs_rawmount+0x344>
            goto cleanup;
 800811e:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f80b 	bl	800813c <lfs_rawunmount>
    return err;
 8008126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8008128:	4618      	mov	r0, r3
 800812a:	3760      	adds	r7, #96	; 0x60
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	0800bfe8 	.word	0x0800bfe8
 8008134:	0800bee4 	.word	0x0800bee4
 8008138:	0800c5f8 	.word	0x0800c5f8

0800813c <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fd85 	bl	8007c54 <lfs_deinit>
 800814a:	4603      	mov	r3, r0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b09d      	sub	sp, #116	; 0x74
 8008158:	af04      	add	r7, sp, #16
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8008162:	f107 0318 	add.w	r3, r7, #24
 8008166:	2220      	movs	r2, #32
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f002 fa70 	bl	800a650 <memset>
 8008170:	2301      	movs	r3, #1
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8008178:	e0a7      	b.n	80082ca <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	085b      	lsrs	r3, r3, #1
 8008182:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008184:	429a      	cmp	r2, r3
 8008186:	d302      	bcc.n	800818e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8008188:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800818c:	e102      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800818e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008190:	3301      	adds	r3, #1
 8008192:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8008194:	2300      	movs	r3, #0
 8008196:	65bb      	str	r3, [r7, #88]	; 0x58
 8008198:	e013      	b.n	80081c2 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800819a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800819c:	3306      	adds	r3, #6
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	3360      	adds	r3, #96	; 0x60
 80081a2:	443b      	add	r3, r7
 80081a4:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4611      	mov	r1, r2
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
 80081b0:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <lfs_fs_rawtraverse+0x68>
                return err;
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	e0eb      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 80081bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081be:	3301      	adds	r3, #1
 80081c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80081c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	dde8      	ble.n	800819a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80081c8:	f107 0318 	add.w	r3, r7, #24
 80081cc:	f103 0218 	add.w	r2, r3, #24
 80081d0:	f107 0318 	add.w	r3, r7, #24
 80081d4:	4619      	mov	r1, r3
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7fc fcf8 	bl	8004bcc <lfs_dir_fetch>
 80081dc:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 80081de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <lfs_fs_rawtraverse+0x94>
            return err;
 80081e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e6:	e0d5      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80081ee:	e067      	b.n	80082c0 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80081f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081f4:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80081f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081fa:	f043 0308 	orr.w	r3, r3, #8
 80081fe:	f107 0118 	add.w	r1, r7, #24
 8008202:	f107 0210 	add.w	r2, r7, #16
 8008206:	9200      	str	r2, [sp, #0]
 8008208:	4a64      	ldr	r2, [pc, #400]	; (800839c <lfs_fs_rawtraverse+0x248>)
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7fb fc3e 	bl	8003a8c <lfs_dir_get>
 8008210:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8008212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008214:	2b00      	cmp	r3, #0
 8008216:	da05      	bge.n	8008224 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8008218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821a:	f113 0f02 	cmn.w	r3, #2
 800821e:	d049      	beq.n	80082b4 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8008220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008222:	e0b7      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8008224:	f107 0310 	add.w	r3, r7, #16
 8008228:	4618      	mov	r0, r3
 800822a:	f7fb f94d 	bl	80034c8 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800822e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008230:	4618      	mov	r0, r3
 8008232:	f7fb f817 	bl	8003264 <lfs_tag_type3>
 8008236:	4603      	mov	r3, r0
 8008238:	461a      	mov	r2, r3
 800823a:	f240 2302 	movw	r3, #514	; 0x202
 800823e:	429a      	cmp	r2, r3
 8008240:	d113      	bne.n	800826a <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	6938      	ldr	r0, [r7, #16]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	9202      	str	r2, [sp, #8]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	9201      	str	r2, [sp, #4]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	4603      	mov	r3, r0
 8008254:	460a      	mov	r2, r1
 8008256:	2100      	movs	r1, #0
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7fe fbe5 	bl	8006a28 <lfs_ctz_traverse>
 800825e:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8008260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d027      	beq.n	80082b6 <lfs_fs_rawtraverse+0x162>
                    return err;
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	e094      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d022      	beq.n	80082b6 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8008270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008272:	4618      	mov	r0, r3
 8008274:	f7fa fff6 	bl	8003264 <lfs_tag_type3>
 8008278:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800827a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800827e:	d11a      	bne.n	80082b6 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8008280:	2300      	movs	r3, #0
 8008282:	653b      	str	r3, [r7, #80]	; 0x50
 8008284:	e012      	b.n	80082ac <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8008286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	f107 0210 	add.w	r2, r7, #16
 800828e:	4413      	add	r3, r2
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	4611      	mov	r1, r2
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
 800829a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800829c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <lfs_fs_rawtraverse+0x152>
                        return err;
 80082a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a4:	e076      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 80082a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a8:	3301      	adds	r3, #1
 80082aa:	653b      	str	r3, [r7, #80]	; 0x50
 80082ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	dde9      	ble.n	8008286 <lfs_fs_rawtraverse+0x132>
 80082b2:	e000      	b.n	80082b6 <lfs_fs_rawtraverse+0x162>
                    continue;
 80082b4:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80082b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082ba:	3301      	adds	r3, #1
 80082bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80082c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082c2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d392      	bcc.n	80081f0 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 80082ca:	f107 0318 	add.w	r3, r7, #24
 80082ce:	3318      	adds	r3, #24
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fa fef0 	bl	80030b6 <lfs_pair_isnull>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f083 0301 	eor.w	r3, r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f47f af4b 	bne.w	800817a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ea:	e04f      	b.n	800838c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 80082ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ee:	799b      	ldrb	r3, [r3, #6]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d147      	bne.n	8008384 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80082f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01d      	beq.n	800833c <lfs_fs_rawtraverse+0x1e8>
 8008300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d117      	bne.n	800833c <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800830c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800830e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008316:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8008318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	9202      	str	r2, [sp, #8]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	9201      	str	r2, [sp, #4]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	4623      	mov	r3, r4
 8008328:	4602      	mov	r2, r0
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7fe fb7c 	bl	8006a28 <lfs_ctz_traverse>
 8008330:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8008332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <lfs_fs_rawtraverse+0x1e8>
                return err;
 8008338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800833a:	e02b      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800833c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01e      	beq.n	8008386 <lfs_fs_rawtraverse+0x232>
 8008348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d118      	bne.n	8008386 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8008354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008356:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	9202      	str	r2, [sp, #8]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	9201      	str	r2, [sp, #4]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4623      	mov	r3, r4
 8008370:	4602      	mov	r2, r0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f7fe fb58 	bl	8006a28 <lfs_ctz_traverse>
 8008378:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800837a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <lfs_fs_rawtraverse+0x232>
                return err;
 8008380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008382:	e007      	b.n	8008394 <lfs_fs_rawtraverse+0x240>
            continue;
 8008384:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1ac      	bne.n	80082ec <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3764      	adds	r7, #100	; 0x64
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}
 800839c:	700ffc00 	.word	0x700ffc00

080083a0 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 80083bc:	e024      	b.n	8008408 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	085b      	lsrs	r3, r3, #1
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d302      	bcc.n	80083d2 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80083cc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80083d0:	e027      	b.n	8008422 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	3301      	adds	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3318      	adds	r3, #24
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fa fe84 	bl	80030ec <lfs_pair_cmp>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <lfs_fs_pred+0x4e>
            return 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e019      	b.n	8008422 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3318      	adds	r3, #24
 80083f2:	461a      	mov	r2, r3
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7fc fbe8 	bl	8004bcc <lfs_dir_fetch>
 80083fc:	6138      	str	r0, [r7, #16]
        if (err) {
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <lfs_fs_pred+0x68>
            return err;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	e00c      	b.n	8008422 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3318      	adds	r3, #24
 800840c:	4618      	mov	r0, r3
 800840e:	f7fa fe52 	bl	80030b6 <lfs_pair_isnull>
 8008412:	4603      	mov	r3, r0
 8008414:	f083 0301 	eor.w	r3, r3, #1
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1cf      	bne.n	80083be <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800841e:	f06f 0301 	mvn.w	r3, #1
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800842a:	b5b0      	push	{r4, r5, r7, lr}
 800842c:	b08e      	sub	sp, #56	; 0x38
 800842e:	af04      	add	r7, sp, #16
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800844a:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8008450:	69dd      	ldr	r5, [r3, #28]
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	6852      	ldr	r2, [r2, #4]
 800845a:	2108      	movs	r1, #8
 800845c:	9103      	str	r1, [sp, #12]
 800845e:	f107 0110 	add.w	r1, r7, #16
 8008462:	9102      	str	r1, [sp, #8]
 8008464:	9201      	str	r2, [sp, #4]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	462b      	mov	r3, r5
 800846a:	4622      	mov	r2, r4
 800846c:	4601      	mov	r1, r0
 800846e:	6a38      	ldr	r0, [r7, #32]
 8008470:	f7fa fae8 	bl	8002a44 <lfs_bd_read>
 8008474:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <lfs_fs_parent_match+0x56>
        return err;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	e012      	b.n	80084a6 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8008480:	f107 0310 	add.w	r3, r7, #16
 8008484:	4618      	mov	r0, r3
 8008486:	f7fa fe88 	bl	800319a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	1d1a      	adds	r2, r3, #4
 800848e:	f107 0310 	add.w	r3, r7, #16
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f7fa fe29 	bl	80030ec <lfs_pair_cmp>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	bf14      	ite	ne
 80084a0:	2301      	movne	r3, #1
 80084a2:	2300      	moveq	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3728      	adds	r7, #40	; 0x28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080084b0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08e      	sub	sp, #56	; 0x38
 80084b4:	af04      	add	r7, sp, #16
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 80084cc:	e02f      	b.n	800852e <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	429a      	cmp	r2, r3
 80084da:	d302      	bcc.n	80084e2 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80084dc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80084e0:	e032      	b.n	8008548 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	3301      	adds	r3, #1
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80084fe:	f107 0314 	add.w	r3, r7, #20
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	4b12      	ldr	r3, [pc, #72]	; (8008550 <lfs_fs_parent+0xa0>)
 8008506:	9302      	str	r3, [sp, #8]
 8008508:	2300      	movs	r3, #0
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	4b11      	ldr	r3, [pc, #68]	; (8008554 <lfs_fs_parent+0xa4>)
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	4b11      	ldr	r3, [pc, #68]	; (8008558 <lfs_fs_parent+0xa8>)
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7fb ffeb 	bl	80044f0 <lfs_dir_fetchmatch>
 800851a:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <lfs_fs_parent+0x7e>
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	f113 0f02 	cmn.w	r3, #2
 8008528:	d001      	beq.n	800852e <lfs_fs_parent+0x7e>
            return tag;
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	e00c      	b.n	8008548 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3318      	adds	r3, #24
 8008532:	4618      	mov	r0, r3
 8008534:	f7fa fdbf 	bl	80030b6 <lfs_pair_isnull>
 8008538:	4603      	mov	r3, r0
 800853a:	f083 0301 	eor.w	r3, r3, #1
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1c4      	bne.n	80084ce <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8008544:	f06f 0301 	mvn.w	r3, #1
}
 8008548:	4618      	mov	r0, r3
 800854a:	3728      	adds	r7, #40	; 0x28
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	0800842b 	.word	0x0800842b
 8008554:	20000008 	.word	0x20000008
 8008558:	7ff003ff 	.word	0x7ff003ff

0800855c <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	4618      	mov	r0, r3
 800856e:	f7fa feb3 	bl	80032d8 <lfs_tag_size>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <lfs_fs_preporphans+0x32>
 8008578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da06      	bge.n	800858e <lfs_fs_preporphans+0x32>
 8008580:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <lfs_fs_preporphans+0x68>)
 8008582:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <lfs_fs_preporphans+0x6c>)
 8008584:	f241 114c 	movw	r1, #4428	; 0x114c
 8008588:	4810      	ldr	r0, [pc, #64]	; (80085cc <lfs_fs_preporphans+0x70>)
 800858a:	f001 ffb1 	bl	800a4f0 <__assert_func>
    lfs->gstate.tag += orphans;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008596:	441a      	add	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3330      	adds	r3, #48	; 0x30
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fa fef8 	bl	800339e <lfs_gstate_hasorphans>
 80085ae:	4603      	mov	r3, r0
 80085b0:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80085b2:	ea44 0203 	orr.w	r2, r4, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd90      	pop	{r4, r7, pc}
 80085c4:	0800c630 	.word	0x0800c630
 80085c8:	0800c9c4 	.word	0x0800c9c4
 80085cc:	0800bee4 	.word	0x0800bee4

080085d0 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	460b      	mov	r3, r1
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e2:	4a17      	ldr	r2, [pc, #92]	; (8008640 <lfs_fs_prepmove+0x70>)
 80085e4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80085e6:	897b      	ldrh	r3, [r7, #10]
 80085e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80085ec:	428b      	cmp	r3, r1
 80085ee:	d006      	beq.n	80085fe <lfs_fs_prepmove+0x2e>
 80085f0:	897b      	ldrh	r3, [r7, #10]
 80085f2:	029b      	lsls	r3, r3, #10
 80085f4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80085f8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80085fc:	e000      	b.n	8008600 <lfs_fs_prepmove+0x30>
 80085fe:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8008600:	431a      	orrs	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8008606:	897b      	ldrh	r3, [r7, #10]
 8008608:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800860c:	4293      	cmp	r3, r2
 800860e:	d002      	beq.n	8008616 <lfs_fs_prepmove+0x46>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	e000      	b.n	8008618 <lfs_fs_prepmove+0x48>
 8008616:	2300      	movs	r3, #0
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800861c:	897b      	ldrh	r3, [r7, #10]
 800861e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <lfs_fs_prepmove+0x5e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3304      	adds	r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	e000      	b.n	8008630 <lfs_fs_prepmove+0x60>
 800862e:	2300      	movs	r3, #0
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008634:	bf00      	nop
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	800003ff 	.word	0x800003ff

08008644 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8008644:	b5b0      	push	{r4, r5, r7, lr}
 8008646:	b094      	sub	sp, #80	; 0x50
 8008648:	af04      	add	r7, sp, #16
 800864a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	333c      	adds	r3, #60	; 0x3c
 8008650:	4618      	mov	r0, r3
 8008652:	f7fa fec6 	bl	80033e2 <lfs_gstate_hasmove>
 8008656:	4603      	mov	r3, r0
 8008658:	f083 0301 	eor.w	r3, r3, #1
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <lfs_fs_demove+0x22>
        return 0;
 8008662:	2300      	movs	r3, #0
 8008664:	e049      	b.n	80086fa <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	4618      	mov	r0, r3
 8008674:	f7fa fe20 	bl	80032b8 <lfs_tag_id>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	4b21      	ldr	r3, [pc, #132]	; (8008704 <lfs_fs_demove+0xc0>)
 800867e:	9302      	str	r3, [sp, #8]
 8008680:	9201      	str	r2, [sp, #4]
 8008682:	9400      	str	r4, [sp, #0]
 8008684:	462b      	mov	r3, r5
 8008686:	f241 1266 	movw	r2, #4454	; 0x1166
 800868a:	491f      	ldr	r1, [pc, #124]	; (8008708 <lfs_fs_demove+0xc4>)
 800868c:	481f      	ldr	r0, [pc, #124]	; (800870c <lfs_fs_demove+0xc8>)
 800868e:	f002 fbb5 	bl	800adfc <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008698:	f107 0318 	add.w	r3, r7, #24
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fc fa94 	bl	8004bcc <lfs_dir_fetch>
 80086a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80086a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <lfs_fs_demove+0x6c>
        return err;
 80086ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ae:	e024      	b.n	80086fa <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fa fdff 	bl	80032b8 <lfs_tag_id>
 80086ba:	4603      	mov	r3, r0
 80086bc:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80086be:	2200      	movs	r2, #0
 80086c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff ff83 	bl	80085d0 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80086ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80086cc:	029b      	lsls	r3, r3, #10
 80086ce:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80086d2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	f107 0210 	add.w	r2, r7, #16
 80086e0:	f107 0118 	add.w	r1, r7, #24
 80086e4:	2301      	movs	r3, #1
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fd ffce 	bl	8006688 <lfs_dir_commit>
 80086ec:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <lfs_fs_demove+0xb4>
        return err;
 80086f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f6:	e000      	b.n	80086fa <lfs_fs_demove+0xb6>
    }

    return 0;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3740      	adds	r7, #64	; 0x40
 80086fe:	46bd      	mov	sp, r7
 8008700:	bdb0      	pop	{r4, r5, r7, pc}
 8008702:	bf00      	nop
 8008704:	0800bfe8 	.word	0x0800bfe8
 8008708:	0800bee4 	.word	0x0800bee4
 800870c:	0800c664 	.word	0x0800c664

08008710 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8008710:	b5b0      	push	{r4, r5, r7, lr}
 8008712:	b0b2      	sub	sp, #200	; 0xc8
 8008714:	af04      	add	r7, sp, #16
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3330      	adds	r3, #48	; 0x30
 8008720:	4618      	mov	r0, r3
 8008722:	f7fa fe3c 	bl	800339e <lfs_gstate_hasorphans>
 8008726:	4603      	mov	r3, r0
 8008728:	f083 0301 	eor.w	r3, r3, #1
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <lfs_fs_deorphan+0x26>
        return 0;
 8008732:	2300      	movs	r3, #0
 8008734:	e17c      	b.n	8008a30 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800873c:	f107 030c 	add.w	r3, r7, #12
 8008740:	2220      	movs	r2, #32
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f001 ff83 	bl	800a650 <memset>
 800874a:	2301      	movs	r3, #1
 800874c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008750:	2301      	movs	r3, #1
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8008754:	e148      	b.n	80089e8 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8008756:	f107 030c 	add.w	r3, r7, #12
 800875a:	f103 0218 	add.w	r2, r3, #24
 800875e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fc fa31 	bl	8004bcc <lfs_dir_fetch>
 800876a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 800876e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <lfs_fs_deorphan+0x6c>
                return err;
 8008776:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800877a:	e159      	b.n	8008a30 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800877c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008780:	f083 0301 	eor.w	r3, r3, #1
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 8124 	beq.w	80089d4 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800878c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008790:	f107 030c 	add.w	r3, r7, #12
 8008794:	3318      	adds	r3, #24
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff fe89 	bl	80084b0 <lfs_fs_parent>
 800879e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80087a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da07      	bge.n	80087ba <lfs_fs_deorphan+0xaa>
 80087aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ae:	f113 0f02 	cmn.w	r3, #2
 80087b2:	d002      	beq.n	80087ba <lfs_fs_deorphan+0xaa>
                    return tag;
 80087b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087b8:	e13a      	b.n	8008a30 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 80087ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087be:	f113 0f02 	cmn.w	r3, #2
 80087c2:	d157      	bne.n	8008874 <lfs_fs_deorphan+0x164>
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d054      	beq.n	8008874 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80087ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	499a      	ldr	r1, [pc, #616]	; (8008a38 <lfs_fs_deorphan+0x328>)
 80087d0:	9101      	str	r1, [sp, #4]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	f241 12a1 	movw	r2, #4513	; 0x11a1
 80087da:	4998      	ldr	r1, [pc, #608]	; (8008a3c <lfs_fs_deorphan+0x32c>)
 80087dc:	4898      	ldr	r0, [pc, #608]	; (8008a40 <lfs_fs_deorphan+0x330>)
 80087de:	f002 fb0d 	bl	800adfc <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80087e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fc fa08 	bl	8004c04 <lfs_dir_getgstate>
 80087f4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 80087f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <lfs_fs_deorphan+0xf6>
                        return err;
 8008800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008804:	e114      	b.n	8008a30 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8008806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800880a:	3318      	adds	r3, #24
 800880c:	4618      	mov	r0, r3
 800880e:	f7fa fcde 	bl	80031ce <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008812:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008816:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800881a:	051a      	lsls	r2, r3, #20
 800881c:	4b89      	ldr	r3, [pc, #548]	; (8008a44 <lfs_fs_deorphan+0x334>)
 800881e:	4313      	orrs	r3, r2
 8008820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008828:	3318      	adds	r3, #24
 800882a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800882e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008832:	f107 010c 	add.w	r1, r7, #12
 8008836:	2301      	movs	r3, #1
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fd fc2b 	bl	8006094 <lfs_dir_orphaningcommit>
 800883e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8008842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008846:	3318      	adds	r3, #24
 8008848:	4618      	mov	r0, r3
 800884a:	f7fa fca6 	bl	800319a <lfs_pair_fromle32>
                    if (state < 0) {
 800884e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008852:	2b00      	cmp	r3, #0
 8008854:	da02      	bge.n	800885c <lfs_fs_deorphan+0x14c>
                        return state;
 8008856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 800885a:	e0e9      	b.n	8008a30 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 800885c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008860:	3301      	adds	r3, #1
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8008868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800886c:	2b03      	cmp	r3, #3
 800886e:	f040 80af 	bne.w	80089d0 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 8008872:	e763      	b.n	800873c <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8008874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008878:	f113 0f02 	cmn.w	r3, #2
 800887c:	f000 80aa 	beq.w	80089d4 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8008880:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008884:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008888:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	4613      	mov	r3, r2
 8008890:	4a6d      	ldr	r2, [pc, #436]	; (8008a48 <lfs_fs_deorphan+0x338>)
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fb f8fa 	bl	8003a8c <lfs_dir_get>
 8008898:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800889c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da02      	bge.n	80088aa <lfs_fs_deorphan+0x19a>
                        return state;
 80088a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088a8:	e0c2      	b.n	8008a30 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 80088aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fa fc73 	bl	800319a <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80088b4:	f107 030c 	add.w	r3, r7, #12
 80088b8:	f103 0218 	add.w	r2, r3, #24
 80088bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fa fc3c 	bl	8003140 <lfs_pair_sync>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f083 0301 	eor.w	r3, r3, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d07f      	beq.n	80089d4 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80088d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80088dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088e0:	4c55      	ldr	r4, [pc, #340]	; (8008a38 <lfs_fs_deorphan+0x328>)
 80088e2:	9403      	str	r4, [sp, #12]
 80088e4:	9102      	str	r1, [sp, #8]
 80088e6:	9201      	str	r2, [sp, #4]
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	4603      	mov	r3, r0
 80088ec:	f241 12ca 	movw	r2, #4554	; 0x11ca
 80088f0:	4952      	ldr	r1, [pc, #328]	; (8008a3c <lfs_fs_deorphan+0x32c>)
 80088f2:	4856      	ldr	r0, [pc, #344]	; (8008a4c <lfs_fs_deorphan+0x33c>)
 80088f4:	f002 fa82 	bl	800adfc <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80088f8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80088fc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3330      	adds	r3, #48	; 0x30
 8008904:	f107 020c 	add.w	r2, r7, #12
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7fa fd7c 	bl	8003408 <lfs_gstate_hasmovehere>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01c      	beq.n	8008950 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	4618      	mov	r0, r3
 800891c:	f7fa fccc 	bl	80032b8 <lfs_tag_id>
 8008920:	4603      	mov	r3, r0
 8008922:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800892e:	4842      	ldr	r0, [pc, #264]	; (8008a38 <lfs_fs_deorphan+0x328>)
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	9201      	str	r2, [sp, #4]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	460b      	mov	r3, r1
 8008938:	f241 12d5 	movw	r2, #4565	; 0x11d5
 800893c:	493f      	ldr	r1, [pc, #252]	; (8008a3c <lfs_fs_deorphan+0x32c>)
 800893e:	4844      	ldr	r0, [pc, #272]	; (8008a50 <lfs_fs_deorphan+0x340>)
 8008940:	f002 fa5c 	bl	800adfc <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008944:	2200      	movs	r2, #0
 8008946:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fe40 	bl	80085d0 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8008950:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008954:	4618      	mov	r0, r3
 8008956:	f7fa fc3a 	bl	80031ce <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800895a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800895e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008962:	4293      	cmp	r3, r2
 8008964:	d007      	beq.n	8008976 <lfs_fs_deorphan+0x266>
 8008966:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800896a:	029b      	lsls	r3, r3, #10
 800896c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008970:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008974:	e000      	b.n	8008978 <lfs_fs_deorphan+0x268>
 8008976:	2300      	movs	r3, #0
 8008978:	67fb      	str	r3, [r7, #124]	; 0x7c
 800897a:	2300      	movs	r3, #0
 800897c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008980:	4b34      	ldr	r3, [pc, #208]	; (8008a54 <lfs_fs_deorphan+0x344>)
 8008982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008986:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800898a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800898e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008992:	f107 010c 	add.w	r1, r7, #12
 8008996:	2302      	movs	r3, #2
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7fd fb7b 	bl	8006094 <lfs_dir_orphaningcommit>
 800899e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80089a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fa fbf7 	bl	800319a <lfs_pair_fromle32>
                        if (state < 0) {
 80089ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	da02      	bge.n	80089ba <lfs_fs_deorphan+0x2aa>
                            return state;
 80089b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 80089b8:	e03a      	b.n	8008a30 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 80089ba:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80089be:	3301      	adds	r3, #1
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80089c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d10c      	bne.n	80089e8 <lfs_fs_deorphan+0x2d8>
 80089ce:	e6b5      	b.n	800873c <lfs_fs_deorphan+0x2c>
                    continue;
 80089d0:	bf00      	nop
 80089d2:	e009      	b.n	80089e8 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 80089d4:	f107 040c 	add.w	r4, r7, #12
 80089d8:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80089dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 80089e8:	f107 030c 	add.w	r3, r7, #12
 80089ec:	3318      	adds	r3, #24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fa fb61 	bl	80030b6 <lfs_pair_isnull>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f083 0301 	eor.w	r3, r3, #1
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f47f aeaa 	bne.w	8008756 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3330      	adds	r3, #48	; 0x30
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fa fcdc 	bl	80033c4 <lfs_gstate_getorphans>
 8008a0c:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f7f9 ff38 	bl	800288c <lfs_min>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	425b      	negs	r3, r3
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	b25b      	sxtb	r3, r3
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fd97 	bl	800855c <lfs_fs_preporphans>
 8008a2e:	4603      	mov	r3, r0
            found));
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	37b8      	adds	r7, #184	; 0xb8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bdb0      	pop	{r4, r5, r7, pc}
 8008a38:	0800bfe8 	.word	0x0800bfe8
 8008a3c:	0800bee4 	.word	0x0800bee4
 8008a40:	0800c698 	.word	0x0800c698
 8008a44:	000ffc08 	.word	0x000ffc08
 8008a48:	7ffffc00 	.word	0x7ffffc00
 8008a4c:	0800c6c8 	.word	0x0800c6c8
 8008a50:	0800c70c 	.word	0x0800c70c
 8008a54:	600ffc08 	.word	0x600ffc08

08008a58 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff fdef 	bl	8008644 <lfs_fs_demove>
 8008a66:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <lfs_fs_forceconsistency+0x1a>
        return err;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	e00a      	b.n	8008a88 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8008a72:	2101      	movs	r1, #1
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff fe4b 	bl	8008710 <lfs_fs_deorphan>
 8008a7a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <lfs_fs_forceconsistency+0x2e>
        return err;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	e000      	b.n	8008a88 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	601a      	str	r2, [r3, #0]
    return 0;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8008ac4:	f107 0208 	add.w	r2, r7, #8
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4907      	ldr	r1, [pc, #28]	; (8008ae8 <lfs_fs_rawsize+0x30>)
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff fb41 	bl	8008154 <lfs_fs_rawtraverse>
 8008ad2:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <lfs_fs_rawsize+0x26>
        return err;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	e000      	b.n	8008ae0 <lfs_fs_rawsize+0x28>
    }

    return size;
 8008ade:	68bb      	ldr	r3, [r7, #8]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	08008a91 	.word	0x08008a91

08008aec <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <lfs_format+0x18>
        return err;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	e005      	b.n	8008b10 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff f8cc 	bl	8007ca4 <lfs_rawformat>
 8008b0c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <lfs_mount+0x18>
        return err;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	e005      	b.n	8008b3c <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff f956 	bl	8007de4 <lfs_rawmount>
 8008b38:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008b52:	2300      	movs	r3, #0
 8008b54:	617b      	str	r3, [r7, #20]
    if (err) {
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <lfs_file_open+0x1c>
        return err;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	e01a      	b.n	8008b96 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fa fd4e 	bl	8003608 <lfs_mlist_isopen>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f083 0301 	eor.w	r3, r3, #1
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <lfs_file_open+0x42>
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <lfs_file_open+0x5c>)
 8008b7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <lfs_file_open+0x60>)
 8008b7c:	f241 5166 	movw	r1, #5478	; 0x1566
 8008b80:	4809      	ldr	r0, [pc, #36]	; (8008ba8 <lfs_file_open+0x64>)
 8008b82:	f001 fcb5 	bl	800a4f0 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7fe f997 	bl	8006ec0 <lfs_file_rawopen>
 8008b92:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008b94:	697b      	ldr	r3, [r7, #20]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	0800c754 	.word	0x0800c754
 8008ba4:	0800c9d8 	.word	0x0800c9d8
 8008ba8:	0800bee4 	.word	0x0800bee4

08008bac <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <lfs_file_close+0x18>
        return err;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	e015      	b.n	8008bf0 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fa fd1c 	bl	8003608 <lfs_mlist_isopen>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <lfs_file_close+0x38>
 8008bd6:	4b08      	ldr	r3, [pc, #32]	; (8008bf8 <lfs_file_close+0x4c>)
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <lfs_file_close+0x50>)
 8008bda:	f241 518a 	movw	r1, #5514	; 0x158a
 8008bde:	4808      	ldr	r0, [pc, #32]	; (8008c00 <lfs_file_close+0x54>)
 8008be0:	f001 fc86 	bl	800a4f0 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fe f982 	bl	8006ef0 <lfs_file_rawclose>
 8008bec:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008bee:	68fb      	ldr	r3, [r7, #12]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	0800c78c 	.word	0x0800c78c
 8008bfc:	0800c9e8 	.word	0x0800c9e8
 8008c00:	0800bee4 	.word	0x0800bee4

08008c04 <lfs_file_write>:
    return res;
}

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
    if (err) {
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <lfs_file_write+0x1c>
        return err;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	e017      	b.n	8008c50 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fa fcee 	bl	8003608 <lfs_mlist_isopen>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <lfs_file_write+0x3c>
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <lfs_file_write+0x54>)
 8008c34:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <lfs_file_write+0x58>)
 8008c36:	f241 51be 	movw	r1, #5566	; 0x15be
 8008c3a:	4809      	ldr	r0, [pc, #36]	; (8008c60 <lfs_file_write+0x5c>)
 8008c3c:	f001 fc58 	bl	800a4f0 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7fe fdc6 	bl	80077d8 <lfs_file_rawwrite>
 8008c4c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008c4e:	693b      	ldr	r3, [r7, #16]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	0800c78c 	.word	0x0800c78c
 8008c5c:	0800c9f8 	.word	0x0800c9f8
 8008c60:	0800bee4 	.word	0x0800bee4

08008c64 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	e024      	b.n	8008cc4 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	091a      	lsrs	r2, r3, #4
 8008c7e:	6939      	ldr	r1, [r7, #16]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	440b      	add	r3, r1
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	404b      	eors	r3, r1
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	4912      	ldr	r1, [pc, #72]	; (8008cdc <lfs_crc+0x78>)
 8008c92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c96:	4053      	eors	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	091a      	lsrs	r2, r3, #4
 8008c9e:	6939      	ldr	r1, [r7, #16]
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	440b      	add	r3, r1
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	091b      	lsrs	r3, r3, #4
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	404b      	eors	r3, r1
 8008cb0:	f003 030f 	and.w	r3, r3, #15
 8008cb4:	4909      	ldr	r1, [pc, #36]	; (8008cdc <lfs_crc+0x78>)
 8008cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008cba:	4053      	eors	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d3d6      	bcc.n	8008c7a <lfs_crc+0x16>
    }

    return crc;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	0800ca08 	.word	0x0800ca08

08008ce0 <_ZN6W25Q64C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
constexpr uint8_t CMD_READ_JDEC          = 0x9F;

constexpr uint8_t STATUS_BUSY_MASK = 0x01;

/* Constructor */
W25Q64::W25Q64(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_gpio_port, uint16_t cs_pin)
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	807b      	strh	r3, [r7, #2]
	: mySPIPort(hspi, cs_pin, cs_gpio_port)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f103 000c 	add.w	r0, r3, #12
 8008cf4:	887a      	ldrh	r2, [r7, #2]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68b9      	ldr	r1, [r7, #8]
 8008cfa:	f000 fc3f 	bl	800957c <_ZN3SPIC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDef>
{
	this->hspi = hspi;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	601a      	str	r2, [r3, #0]
	this->csPin = cs_pin;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	887a      	ldrh	r2, [r7, #2]
 8008d08:	811a      	strh	r2, [r3, #8]
	this->csGPIOPort = cs_gpio_port;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	605a      	str	r2, [r3, #4]
}
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <_ZN6W25Q644initEv>:

/* Public methods */
HAL_StatusTypeDef W25Q64::init()
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
	return mySPIPort.init();
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	330c      	adds	r3, #12
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fc40 	bl	80095ac <_ZN3SPI4initEv>
 8008d2c:	4603      	mov	r3, r0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <_ZN6W25Q6412write_enableEv>:

void W25Q64::write_enable()
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	cs_select();
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f8d9 	bl	8008ef8 <_ZN6W25Q649cs_selectEv>
	mySPIPort.transmit((uint8_t *) &CMD_WRITE_ENABLE, 1);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4905      	ldr	r1, [pc, #20]	; (8008d64 <_ZN6W25Q6412write_enableEv+0x2c>)
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fca0 	bl	8009694 <_ZN3SPI8transmitEPht>
	cs_deselect();
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f8dc 	bl	8008f12 <_ZN6W25Q6411cs_deselectEv>
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	0800ca48 	.word	0x0800ca48

08008d68 <_ZN6W25Q6420read_status_registerEv>:
	mySPIPort.transmit((uint8_t *) &CMD_WRITE_DISABLE, 1);
	cs_deselect();
}

uint8_t W25Q64::read_status_register()
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	cs_select();
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f8c1 	bl	8008ef8 <_ZN6W25Q649cs_selectEv>
	mySPIPort.transmit((uint8_t *) &CMD_READ_STATUS_REG, 1);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4909      	ldr	r1, [pc, #36]	; (8008da4 <_ZN6W25Q6420read_status_registerEv+0x3c>)
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fc88 	bl	8009694 <_ZN3SPI8transmitEPht>
	mySPIPort.receive(&status, 1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	330c      	adds	r3, #12
 8008d88:	f107 010f 	add.w	r1, r7, #15
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fc94 	bl	80096bc <_ZN3SPI7receiveEPht>
	cs_deselect();
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8bc 	bl	8008f12 <_ZN6W25Q6411cs_deselectEv>
	return status;
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	0800ca49 	.word	0x0800ca49

08008da8 <_ZN6W25Q6411block_eraseEm>:
 * @brief Erase a block (64KB) of the W25Q64 flash memory.
 *
 * @param addr The starting address of the block to erase.
 */
void W25Q64::block_erase(uint32_t addr)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
    write_enable();
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ffc0 	bl	8008d38 <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f89d 	bl	8008ef8 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_BLOCK_ERASE,
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	23d8      	movs	r3, #216	; 0xd8
 8008dc4:	733b      	strb	r3, [r7, #12]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	737b      	strb	r3, [r7, #13]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	73bb      	strb	r3, [r7, #14]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	73fb      	strb	r3, [r7, #15]
    mySPIPort.transmit(cmd, 4);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	330c      	adds	r3, #12
 8008de0:	f107 010c 	add.w	r1, r7, #12
 8008de4:	2204      	movs	r2, #4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fc54 	bl	8009694 <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f890 	bl	8008f12 <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f86d 	bl	8008ed2 <_ZN6W25Q6416wait_until_readyEv>
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <_ZN6W25Q6412page_programEmPht>:
 * @param addr The starting address of the page to write.
 * @param data A pointer to the buffer containing the data to be written.
 * @param size The size of the data buffer (must be 256 bytes or less).
 */
void W25Q64::page_program(uint32_t addr, uint8_t *data, uint16_t size)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	807b      	strh	r3, [r7, #2]
    if (size > 256) return; // Ensure that the data size is within the page limit
 8008e0e:	887b      	ldrh	r3, [r7, #2]
 8008e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e14:	d82a      	bhi.n	8008e6c <_ZN6W25Q6412page_programEmPht+0x6c>

    write_enable();
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f7ff ff8e 	bl	8008d38 <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 f86b 	bl	8008ef8 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_PAGE_PROGRAM,
 8008e22:	2300      	movs	r3, #0
 8008e24:	617b      	str	r3, [r7, #20]
 8008e26:	2302      	movs	r3, #2
 8008e28:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	75bb      	strb	r3, [r7, #22]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	75fb      	strb	r3, [r7, #23]
    mySPIPort.transmit(cmd, 4);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	330c      	adds	r3, #12
 8008e44:	f107 0114 	add.w	r1, r7, #20
 8008e48:	2204      	movs	r2, #4
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fc22 	bl	8009694 <_ZN3SPI8transmitEPht>
    mySPIPort.transmit(data, size);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	330c      	adds	r3, #12
 8008e54:	887a      	ldrh	r2, [r7, #2]
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fc1b 	bl	8009694 <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f857 	bl	8008f12 <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f834 	bl	8008ed2 <_ZN6W25Q6416wait_until_readyEv>
 8008e6a:	e000      	b.n	8008e6e <_ZN6W25Q6412page_programEmPht+0x6e>
    if (size > 256) return; // Ensure that the data size is within the page limit
 8008e6c:	bf00      	nop
}
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <_ZN6W25Q649read_dataEmPht>:
 * @param addr The starting address to read from.
 * @param data A pointer to the buffer where the read data will be stored.
 * @param size The number of bytes to read.
 */
void W25Q64::read_data(uint32_t addr, uint8_t *data, uint16_t size)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	807b      	strh	r3, [r7, #2]
    cs_select();
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 f838 	bl	8008ef8 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_READ_DATA,
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	75bb      	strb	r3, [r7, #22]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	75fb      	strb	r3, [r7, #23]
 	mySPIPort.transmit(cmd, 4);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	330c      	adds	r3, #12
 8008eaa:	f107 0114 	add.w	r1, r7, #20
 8008eae:	2204      	movs	r2, #4
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fbef 	bl	8009694 <_ZN3SPI8transmitEPht>
    mySPIPort.receive(data, size);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	887a      	ldrh	r2, [r7, #2]
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fbfc 	bl	80096bc <_ZN3SPI7receiveEPht>
    cs_deselect();
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 f824 	bl	8008f12 <_ZN6W25Q6411cs_deselectEv>
}
 8008eca:	bf00      	nop
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <_ZN6W25Q6416wait_until_readyEv>:
 * @brief Wait for the W25Q64 flash memory to become ready for the next operation.
 *
 * This method polls the status register and waits until the busy bit is cleared.
 */
void W25Q64::wait_until_ready()
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
    uint8_t status;
    do
    {
        status = read_status_register();
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff ff44 	bl	8008d68 <_ZN6W25Q6420read_status_registerEv>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
    } while (status & STATUS_BUSY_MASK); // Wait until the busy bit (bit 0) is cleared
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d000      	beq.n	8008ef0 <_ZN6W25Q6416wait_until_readyEv+0x1e>
    do
 8008eee:	e7f4      	b.n	8008eda <_ZN6W25Q6416wait_until_readyEv+0x8>
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <_ZN6W25Q649cs_selectEv>:

/* Private methods */
void W25Q64::cs_select()
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	mySPIPort.csLow();
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	330c      	adds	r3, #12
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fbfd 	bl	8009704 <_ZN3SPI5csLowEv>
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZN6W25Q6411cs_deselectEv>:

void W25Q64::cs_deselect()
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
	mySPIPort.csHigh();
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	330c      	adds	r3, #12
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fbe0 	bl	80096e4 <_ZN3SPI6csHighEv>
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <_ZN10fileSystemC1Ev>:
 *
 * Initializes the file system by mounting the filesystem.
 * If mounting fails, it tries to format the filesystem and mount again.
 * If both operations fail, it calls the errorHandler function.
 */
fileSystem::fileSystem()
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
{
    flash_init();
 8008f34:	f000 f9fc 	bl	8009330 <_Z10flash_initv>
    int res = lfs_mount(&lfs, &cfg);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4915      	ldr	r1, [pc, #84]	; (8008f90 <_ZN10fileSystemC1Ev+0x64>)
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff fdeb 	bl	8008b18 <lfs_mount>
 8008f42:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da1d      	bge.n	8008f86 <_ZN10fileSystemC1Ev+0x5a>
    {
        // If the mount fails, try formatting the filesystem
        res = lfs_format(&lfs, &cfg);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4910      	ldr	r1, [pc, #64]	; (8008f90 <_ZN10fileSystemC1Ev+0x64>)
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff fdcc 	bl	8008aec <lfs_format>
 8008f54:	60f8      	str	r0, [r7, #12]
        if (res < 0)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da05      	bge.n	8008f68 <_ZN10fileSystemC1Ev+0x3c>
        {
            errorHandler(__FILE__, __LINE__, ERROR_FATAL, "unable to format filesystem");
 8008f5c:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <_ZN10fileSystemC1Ev+0x68>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	211d      	movs	r1, #29
 8008f62:	480d      	ldr	r0, [pc, #52]	; (8008f98 <_ZN10fileSystemC1Ev+0x6c>)
 8008f64:	f7f7 fb3c 	bl	80005e0 <errorHandler>
        }

        // Try mounting again
        res = lfs_mount(&lfs, &cfg);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4909      	ldr	r1, [pc, #36]	; (8008f90 <_ZN10fileSystemC1Ev+0x64>)
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff fdd3 	bl	8008b18 <lfs_mount>
 8008f72:	60f8      	str	r0, [r7, #12]
        if (res < 0)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da05      	bge.n	8008f86 <_ZN10fileSystemC1Ev+0x5a>
        {
            errorHandler(__FILE__, __LINE__, ERROR_FATAL, "unable to mount filesystem");
 8008f7a:	4b08      	ldr	r3, [pc, #32]	; (8008f9c <_ZN10fileSystemC1Ev+0x70>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2124      	movs	r1, #36	; 0x24
 8008f80:	4805      	ldr	r0, [pc, #20]	; (8008f98 <_ZN10fileSystemC1Ev+0x6c>)
 8008f82:	f7f7 fb2d 	bl	80005e0 <errorHandler>
        }
    }
}
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	0800ca4c 	.word	0x0800ca4c
 8008f94:	0800c7fc 	.word	0x0800c7fc
 8008f98:	0800c818 	.word	0x0800c818
 8008f9c:	0800c838 	.word	0x0800c838

08008fa0 <_ZN10fileSystem11getInstanceEv>:
 * @brief Get the singleton instance of the fileSystem class.
 *
 * @return A reference to the fileSystem instance.
 */
fileSystem& fileSystem::getInstance()
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
    static fileSystem instance;
 8008fa4:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <_ZN10fileSystem11getInstanceEv+0x48>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	f3bf 8f5b 	dmb	ish
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bf0c      	ite	eq
 8008fb6:	2301      	moveq	r3, #1
 8008fb8:	2300      	movne	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d010      	beq.n	8008fe2 <_ZN10fileSystem11getInstanceEv+0x42>
 8008fc0:	4809      	ldr	r0, [pc, #36]	; (8008fe8 <_ZN10fileSystem11getInstanceEv+0x48>)
 8008fc2:	f000 fc0d 	bl	80097e0 <__cxa_guard_acquire>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bf14      	ite	ne
 8008fcc:	2301      	movne	r3, #1
 8008fce:	2300      	moveq	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <_ZN10fileSystem11getInstanceEv+0x42>
 8008fd6:	4805      	ldr	r0, [pc, #20]	; (8008fec <_ZN10fileSystem11getInstanceEv+0x4c>)
 8008fd8:	f7ff ffa8 	bl	8008f2c <_ZN10fileSystemC1Ev>
 8008fdc:	4802      	ldr	r0, [pc, #8]	; (8008fe8 <_ZN10fileSystem11getInstanceEv+0x48>)
 8008fde:	f000 fc0b 	bl	80097f8 <__cxa_guard_release>
    return instance;
 8008fe2:	4b02      	ldr	r3, [pc, #8]	; (8008fec <_ZN10fileSystem11getInstanceEv+0x4c>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	200001dc 	.word	0x200001dc
 8008fec:	20000160 	.word	0x20000160

08008ff0 <_ZN10fileSystem5writeEPKcS1_>:
 * @param fileName The name of the file.
 * @param data The data to write to the file.
 * @return The result of the write operation (fileSystemReturnType).
 */
fileSystemReturnType fileSystem::write(const char *fileName, const char *data)
{
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b09b      	sub	sp, #108	; 0x6c
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
    if (fileName == nullptr || data == nullptr)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <_ZN10fileSystem5writeEPKcS1_+0x18>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <_ZN10fileSystem5writeEPKcS1_+0x24>
    {
        errorHandler(__FILE__, __LINE__, ERROR_FATAL, "NULL POINTER");
 8009008:	4b16      	ldr	r3, [pc, #88]	; (8009064 <_ZN10fileSystem5writeEPKcS1_+0x74>)
 800900a:	2200      	movs	r2, #0
 800900c:	213f      	movs	r1, #63	; 0x3f
 800900e:	4816      	ldr	r0, [pc, #88]	; (8009068 <_ZN10fileSystem5writeEPKcS1_+0x78>)
 8009010:	f7f7 fae6 	bl	80005e0 <errorHandler>
    }

    int res;
    lfs_file_t file;

    res = lfs_file_open(&lfs, &file, fileName, LFS_O_WRONLY | LFS_O_CREAT);
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f107 0110 	add.w	r1, r7, #16
 800901a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	f7ff fd90 	bl	8008b44 <lfs_file_open>
 8009024:	6678      	str	r0, [r7, #100]	; 0x64

    if (res < 0)
 8009026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009028:	2b00      	cmp	r3, #0
 800902a:	da01      	bge.n	8009030 <_ZN10fileSystem5writeEPKcS1_+0x40>
    {
        return fileSystemReturnType::errorOpeningFile;
 800902c:	2300      	movs	r3, #0
 800902e:	e014      	b.n	800905a <_ZN10fileSystem5writeEPKcS1_+0x6a>
    }

    res = lfs_file_write(&lfs, &file, data, strlen(data));
 8009030:	68fc      	ldr	r4, [r7, #12]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7f7 f936 	bl	80002a4 <strlen>
 8009038:	4603      	mov	r3, r0
 800903a:	f107 0110 	add.w	r1, r7, #16
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	4620      	mov	r0, r4
 8009042:	f7ff fddf 	bl	8008c04 <lfs_file_write>
 8009046:	6678      	str	r0, [r7, #100]	; 0x64

    res = lfs_file_close(&lfs, &file);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f107 0210 	add.w	r2, r7, #16
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fdab 	bl	8008bac <lfs_file_close>
 8009056:	6678      	str	r0, [r7, #100]	; 0x64

    return fileSystemReturnType::noError;
 8009058:	2305      	movs	r3, #5
}
 800905a:	4618      	mov	r0, r3
 800905c:	376c      	adds	r7, #108	; 0x6c
 800905e:	46bd      	mov	sp, r7
 8009060:	bd90      	pop	{r4, r7, pc}
 8009062:	bf00      	nop
 8009064:	0800c854 	.word	0x0800c854
 8009068:	0800c818 	.word	0x0800c818

0800906c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
      return std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	2100      	movs	r1, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fd39 	bl	8009af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8009082:	4603      	mov	r3, r0
 8009084:	4618      	mov	r0, r3
 8009086:	f000 f8a6 	bl	80091d6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800908a:	4603      	mov	r3, r0
 800908c:	4619      	mov	r1, r3
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fc65 	bl	800995e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	68b8      	ldr	r0, [r7, #8]
 80090ac:	f000 fd5a 	bl	8009b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80090b0:	4603      	mov	r3, r0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f88f 	bl	80091d6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80090b8:	4603      	mov	r3, r0
 80090ba:	4619      	mov	r1, r3
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fc4e 	bl	800995e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	2301      	movs	r3, #1
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80090e0:	b590      	push	{r4, r7, lr}
 80090e2:	b08b      	sub	sp, #44	; 0x2c
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 80090ec:	2300      	movs	r3, #0
 80090ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 80090f2:	f107 0314 	add.w	r3, r7, #20
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff ffe7 	bl	80090ca <_ZNKSt17integral_constantIbLb1EEcvbEv>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009108:	e024      	b.n	8009154 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 800910a:	f107 0318 	add.w	r3, r7, #24
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fd3d 	bl	8009b90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8009116:	f107 031c 	add.w	r3, r7, #28
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fd37 	bl	8009b90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8009122:	f107 021c 	add.w	r2, r7, #28
 8009126:	f107 0318 	add.w	r3, r7, #24
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f85d 	bl	80091ec <_ZSteqRKSaIcES1_>
 8009132:	4603      	mov	r3, r0
 8009134:	461c      	mov	r4, r3
 8009136:	f107 031c 	add.w	r3, r7, #28
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fb60 	bl	8009800 <_ZNSaIcED1Ev>
 8009140:	f107 0318 	add.w	r3, r7, #24
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fb5b 	bl	8009800 <_ZNSaIcED1Ev>
 800914a:	2c00      	cmp	r4, #0
 800914c:	d002      	beq.n	8009154 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 8009154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009158:	2b00      	cmp	r3, #0
 800915a:	d02b      	beq.n	80091b4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f000 fc1e 	bl	800999e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8009162:	4604      	mov	r4, r0
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc1a 	bl	800999e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800916a:	4603      	mov	r3, r0
 800916c:	4423      	add	r3, r4
 800916e:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 8009170:	68b8      	ldr	r0, [r7, #8]
 8009172:	f000 fc16 	bl	80099a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8009176:	4602      	mov	r2, r0
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	4293      	cmp	r3, r2
 800917c:	d908      	bls.n	8009190 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fc0f 	bl	80099a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8009184:	4602      	mov	r2, r0
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	4293      	cmp	r3, r2
 800918a:	d801      	bhi.n	8009190 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 800918c:	2301      	movs	r3, #1
 800918e:	e000      	b.n	8009192 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 8009190:	2300      	movs	r3, #0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	2100      	movs	r1, #0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fca0 	bl	8009ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 80091a0:	4603      	mov	r3, r0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f817 	bl	80091d6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80091a8:	4603      	mov	r3, r0
 80091aa:	4619      	mov	r1, r3
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 fbd6 	bl	800995e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80091b2:	e00c      	b.n	80091ce <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	68b8      	ldr	r0, [r7, #8]
 80091b8:	f000 fcce 	bl	8009b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80091bc:	4603      	mov	r3, r0
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f809 	bl	80091d6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80091c4:	4603      	mov	r3, r0
 80091c6:	4619      	mov	r1, r3
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fbc8 	bl	800995e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	372c      	adds	r7, #44	; 0x2c
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd90      	pop	{r4, r7, pc}

080091d6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <_ZSteqRKSaIcES1_>:
	  __allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
      { return true; }
 80091f6:	2301      	movs	r3, #1
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <_Z41__static_initialization_and_destruction_0ii>:
 * @brief
 */
uint8_t serialAvailable()
{

}
 8009204:	b580      	push	{r7, lr}
 8009206:	b0a2      	sub	sp, #136	; 0x88
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d161      	bne.n	80092d8 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800921a:	4293      	cmp	r3, r2
 800921c:	d15c      	bne.n	80092d8 <_Z41__static_initialization_and_destruction_0ii+0xd4>
std::string EMATCommands = "Ingrese uno de los siguientes comandos:\r\n1)" + std::string(CMD_SET_TIME) + "\r\n2)" + std::string(CMD_PRINT_TIME) + "\r\n";
 800921e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009222:	4618      	mov	r0, r3
 8009224:	f000 faeb 	bl	80097fe <_ZNSaIcEC1Ev>
 8009228:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800922c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009230:	4931      	ldr	r1, [pc, #196]	; (80092f8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fcd2 	bl	8009bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800923c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009240:	492e      	ldr	r1, [pc, #184]	; (80092fc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff ff12 	bl	800906c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009248:	f107 0320 	add.w	r3, r7, #32
 800924c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009250:	4a2b      	ldr	r2, [pc, #172]	; (8009300 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff ff22 	bl	800909c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009258:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800925c:	4618      	mov	r0, r3
 800925e:	f000 face 	bl	80097fe <_ZNSaIcEC1Ev>
 8009262:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009266:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800926a:	4926      	ldr	r1, [pc, #152]	; (8009304 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fcb5 	bl	8009bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800927a:	f107 0120 	add.w	r1, r7, #32
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ff2e 	bl	80090e0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8009284:	4820      	ldr	r0, [pc, #128]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4a20      	ldr	r2, [pc, #128]	; (800930c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800928c:	4619      	mov	r1, r3
 800928e:	f7ff ff05 	bl	800909c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009292:	f107 0308 	add.w	r3, r7, #8
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fb7b 	bl	8009992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800929c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fb76 	bl	8009992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 faa8 	bl	8009800 <_ZNSaIcED1Ev>
 80092b0:	f107 0320 	add.w	r3, r7, #32
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 fb6c 	bl	8009992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fb67 	bl	8009992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fb62 	bl	8009992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fa94 	bl	8009800 <_ZNSaIcED1Ev>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d107      	bne.n	80092ee <_Z41__static_initialization_and_destruction_0ii+0xea>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d102      	bne.n	80092ee <_Z41__static_initialization_and_destruction_0ii+0xea>
 80092e8:	4807      	ldr	r0, [pc, #28]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80092ea:	f000 fb52 	bl	8009992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80092ee:	bf00      	nop
 80092f0:	3788      	adds	r7, #136	; 0x88
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	0800c868 	.word	0x0800c868
 80092fc:	0800c8b4 	.word	0x0800c8b4
 8009300:	0800c8e0 	.word	0x0800c8e0
 8009304:	0800c888 	.word	0x0800c888
 8009308:	200001e0 	.word	0x200001e0
 800930c:	0800c8e8 	.word	0x0800c8e8

08009310 <_GLOBAL__sub_I__Z12EMATCommandsB5cxx11>:
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
 8009314:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009318:	2001      	movs	r0, #1
 800931a:	f7ff ff73 	bl	8009204 <_Z41__static_initialization_and_destruction_0ii>
 800931e:	bd80      	pop	{r7, pc}

08009320 <_GLOBAL__sub_D__Z12EMATCommandsB5cxx11>:
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
 8009324:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009328:	2000      	movs	r0, #0
 800932a:	f7ff ff6b 	bl	8009204 <_Z41__static_initialization_and_destruction_0ii>
 800932e:	bd80      	pop	{r7, pc}

08009330 <_Z10flash_initv>:
{
	FSStatus = status;
}

int flash_init()
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
	if (HAL_OK == myFlash.init())
 8009334:	480a      	ldr	r0, [pc, #40]	; (8009360 <_Z10flash_initv+0x30>)
 8009336:	f7ff fcf0 	bl	8008d1a <_ZN6W25Q644initEv>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	bf0c      	ite	eq
 8009340:	2301      	moveq	r3, #1
 8009342:	2300      	movne	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <_Z10flash_initv+0x20>
	{
		FSStatus = FileSystemStatus::volumeInit;
 800934a:	4b06      	ldr	r3, [pc, #24]	; (8009364 <_Z10flash_initv+0x34>)
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
	}

	FSStatus = FileSystemStatus::volumeNotInit;
 8009350:	4b04      	ldr	r3, [pc, #16]	; (8009364 <_Z10flash_initv+0x34>)
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
	return -1;
 8009356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800935a:	4618      	mov	r0, r3
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000250 	.word	0x20000250
 8009364:	20000268 	.word	0x20000268

08009368 <_Z11w25q64_readPK10lfs_configmmPvm>:

int w25q64_read(const struct lfs_config *c, lfs_block_t block,
                lfs_off_t off, void *buffer, lfs_size_t size)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	fb02 f303 	mul.w	r3, r2, r3
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	617b      	str	r3, [r7, #20]
    myFlash.read_data(addr, static_cast<uint8_t *>(buffer), size);
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	b29b      	uxth	r3, r3
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	6979      	ldr	r1, [r7, #20]
 800938e:	4804      	ldr	r0, [pc, #16]	; (80093a0 <_Z11w25q64_readPK10lfs_configmmPvm+0x38>)
 8009390:	f7ff fd70 	bl	8008e74 <_ZN6W25Q649read_dataEmPht>
    return 0;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20000250 	.word	0x20000250

080093a4 <_Z11w25q64_progPK10lfs_configmmPKvm>:

int w25q64_prog(const struct lfs_config *c, lfs_block_t block,
                lfs_off_t off, const void *buffer, lfs_size_t size)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	fb02 f303 	mul.w	r3, r2, r3
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	4413      	add	r3, r2
 80093c0:	617b      	str	r3, [r7, #20]
    myFlash.page_program(addr, const_cast<uint8_t *>(static_cast<const uint8_t *>(buffer)), size);
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	6979      	ldr	r1, [r7, #20]
 80093ca:	4804      	ldr	r0, [pc, #16]	; (80093dc <_Z11w25q64_progPK10lfs_configmmPKvm+0x38>)
 80093cc:	f7ff fd18 	bl	8008e00 <_ZN6W25Q6412page_programEmPht>
    return 0;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000250 	.word	0x20000250

080093e0 <_Z12w25q64_erasePK10lfs_configm>:

int w25q64_erase(const struct lfs_config *c, lfs_block_t block)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
    uint32_t addr = block * c->block_size;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	69da      	ldr	r2, [r3, #28]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	fb02 f303 	mul.w	r3, r2, r3
 80093f4:	60fb      	str	r3, [r7, #12]
    myFlash.block_erase(addr);
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	4803      	ldr	r0, [pc, #12]	; (8009408 <_Z12w25q64_erasePK10lfs_configm+0x28>)
 80093fa:	f7ff fcd5 	bl	8008da8 <_ZN6W25Q6411block_eraseEm>
    return 0;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000250 	.word	0x20000250

0800940c <_Z11w25q64_syncPK10lfs_config>:

int w25q64_sync(const struct lfs_config *c)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
    // Nothing to do since we're not using any caching or buffering
    return 0;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
	...

08009424 <_Z41__static_initialization_and_destruction_0ii>:
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d10b      	bne.n	800944c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800943a:	4293      	cmp	r3, r2
 800943c:	d106      	bne.n	800944c <_Z41__static_initialization_and_destruction_0ii+0x28>
W25Q64 myFlash(&hspi1, GPIOF, GPIO_PIN_13);
 800943e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009442:	4a04      	ldr	r2, [pc, #16]	; (8009454 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8009444:	4904      	ldr	r1, [pc, #16]	; (8009458 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8009446:	4805      	ldr	r0, [pc, #20]	; (800945c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8009448:	f7ff fc4a 	bl	8008ce0 <_ZN6W25Q64C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	40021400 	.word	0x40021400
 8009458:	200001f8 	.word	0x200001f8
 800945c:	20000250 	.word	0x20000250

08009460 <_GLOBAL__sub_I_hspi1>:
 8009460:	b580      	push	{r7, lr}
 8009462:	af00      	add	r7, sp, #0
 8009464:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009468:	2001      	movs	r0, #1
 800946a:	f7ff ffdb 	bl	8009424 <_Z41__static_initialization_and_destruction_0ii>
 800946e:	bd80      	pop	{r7, pc}

08009470 <_ZN8RTOSTaskC1EPKcPFvPvEtmS2_>:
 */

#include "rtos_module.h"

/* Constructor */
RTOSTask::RTOSTask(const char *taskName,
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	807b      	strh	r3, [r7, #2]
		void (*taskFunction)(void *),
		TaskStackDepth stackSize,
		TaskPriority priority,
		void *parameters)
{
	this->m_taskFunction = taskFunction;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	609a      	str	r2, [r3, #8]
	this->m_name = taskName;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	605a      	str	r2, [r3, #4]
	this->m_stackSize = stackSize;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	887a      	ldrh	r2, [r7, #2]
 800948e:	821a      	strh	r2, [r3, #16]
	this->m_priority = priority;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	615a      	str	r2, [r3, #20]
	this->m_parameters = parameters;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	60da      	str	r2, [r3, #12]
}
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
	...

080094ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08a      	sub	sp, #40	; 0x28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094b4:	f107 0314 	add.w	r3, r7, #20
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	605a      	str	r2, [r3, #4]
 80094be:	609a      	str	r2, [r3, #8]
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a28      	ldr	r2, [pc, #160]	; (800956c <HAL_SPI_MspInit+0xc0>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d149      	bne.n	8009562 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	4b27      	ldr	r3, [pc, #156]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 80094d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d6:	4a26      	ldr	r2, [pc, #152]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 80094d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094dc:	6453      	str	r3, [r2, #68]	; 0x44
 80094de:	4b24      	ldr	r3, [pc, #144]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 80094e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	4b20      	ldr	r3, [pc, #128]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	4a1f      	ldr	r2, [pc, #124]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 80094f4:	f043 0301 	orr.w	r3, r3, #1
 80094f8:	6313      	str	r3, [r2, #48]	; 0x30
 80094fa:	4b1d      	ldr	r3, [pc, #116]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 80094fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
 800950a:	4b19      	ldr	r3, [pc, #100]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	4a18      	ldr	r2, [pc, #96]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 8009510:	f043 0302 	orr.w	r3, r3, #2
 8009514:	6313      	str	r3, [r2, #48]	; 0x30
 8009516:	4b16      	ldr	r3, [pc, #88]	; (8009570 <HAL_SPI_MspInit+0xc4>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	60bb      	str	r3, [r7, #8]
 8009520:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009522:	2360      	movs	r3, #96	; 0x60
 8009524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009526:	2302      	movs	r3, #2
 8009528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800952e:	2303      	movs	r3, #3
 8009530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009532:	2305      	movs	r3, #5
 8009534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009536:	f107 0314 	add.w	r3, r7, #20
 800953a:	4619      	mov	r1, r3
 800953c:	480d      	ldr	r0, [pc, #52]	; (8009574 <HAL_SPI_MspInit+0xc8>)
 800953e:	f7f7 fbe9 	bl	8000d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009542:	2320      	movs	r3, #32
 8009544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009546:	2302      	movs	r3, #2
 8009548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800954a:	2300      	movs	r3, #0
 800954c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800954e:	2303      	movs	r3, #3
 8009550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009552:	2305      	movs	r3, #5
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009556:	f107 0314 	add.w	r3, r7, #20
 800955a:	4619      	mov	r1, r3
 800955c:	4806      	ldr	r0, [pc, #24]	; (8009578 <HAL_SPI_MspInit+0xcc>)
 800955e:	f7f7 fbd9 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8009562:	bf00      	nop
 8009564:	3728      	adds	r7, #40	; 0x28
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40013000 	.word	0x40013000
 8009570:	40023800 	.word	0x40023800
 8009574:	40020000 	.word	0x40020000
 8009578:	40020400 	.word	0x40020400

0800957c <_ZN3SPIC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDef>:

SPI::SPI(SPI_HandleTypeDef *hspi, uint16_t pin, GPIO_TypeDef *port)
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	4613      	mov	r3, r2
 800958a:	80fb      	strh	r3, [r7, #6]
{
	this->hspi_ = hspi;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	601a      	str	r2, [r3, #0]
	this->CSPin = pin;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	88fa      	ldrh	r2, [r7, #6]
 8009596:	809a      	strh	r2, [r3, #4]
	this->CSPort = port;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	609a      	str	r2, [r3, #8]
}
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <_ZN3SPI4initEv>:

HAL_StatusTypeDef SPI::init()
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]

	// Configure CS GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b4:	f107 030c 	add.w	r3, r7, #12
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	605a      	str	r2, [r3, #4]
 80095be:	609a      	str	r2, [r3, #8]
 80095c0:	60da      	str	r2, [r3, #12]
 80095c2:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE(); //TODO add modularity
 80095c4:	2300      	movs	r3, #0
 80095c6:	60bb      	str	r3, [r7, #8]
 80095c8:	4b30      	ldr	r3, [pc, #192]	; (800968c <_ZN3SPI4initEv+0xe0>)
 80095ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095cc:	4a2f      	ldr	r2, [pc, #188]	; (800968c <_ZN3SPI4initEv+0xe0>)
 80095ce:	f043 0320 	orr.w	r3, r3, #32
 80095d2:	6313      	str	r3, [r2, #48]	; 0x30
 80095d4:	4b2d      	ldr	r3, [pc, #180]	; (800968c <_ZN3SPI4initEv+0xe0>)
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	60bb      	str	r3, [r7, #8]
 80095de:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = this->CSPin;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	889b      	ldrh	r3, [r3, #4]
 80095e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095e6:	2301      	movs	r3, #1
 80095e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095ee:	2300      	movs	r3, #0
 80095f0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(this->CSPort, &GPIO_InitStruct);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f107 020c 	add.w	r2, r7, #12
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7f7 fb89 	bl	8000d14 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(this->CSPort, this->CSPin, GPIO_PIN_SET);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6898      	ldr	r0, [r3, #8]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	4619      	mov	r1, r3
 800960e:	f7f7 fd2d 	bl	800106c <HAL_GPIO_WritePin>

	this->hspi_->Instance = SPI1; //TODO add modularity
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a1e      	ldr	r2, [pc, #120]	; (8009690 <_ZN3SPI4initEv+0xe4>)
 8009618:	601a      	str	r2, [r3, #0]
	this->hspi_->Init.Mode = SPI_MODE_MASTER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009622:	605a      	str	r2, [r3, #4]
	this->hspi_->Init.Direction = SPI_DIRECTION_2LINES;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2200      	movs	r2, #0
 800962a:	609a      	str	r2, [r3, #8]
	this->hspi_->Init.DataSize = SPI_DATASIZE_8BIT;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2200      	movs	r2, #0
 8009632:	60da      	str	r2, [r3, #12]
	this->hspi_->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2200      	movs	r2, #0
 800963a:	611a      	str	r2, [r3, #16]
	this->hspi_->Init.CLKPhase = SPI_PHASE_1EDGE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2200      	movs	r2, #0
 8009642:	615a      	str	r2, [r3, #20]
	this->hspi_->Init.NSS = SPI_NSS_SOFT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800964c:	619a      	str	r2, [r3, #24]
	this->hspi_->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2218      	movs	r2, #24
 8009654:	61da      	str	r2, [r3, #28]
	this->hspi_->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2200      	movs	r2, #0
 800965c:	621a      	str	r2, [r3, #32]
	this->hspi_->Init.TIMode = SPI_TIMODE_DISABLE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2200      	movs	r2, #0
 8009664:	625a      	str	r2, [r3, #36]	; 0x24
	this->hspi_->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2200      	movs	r2, #0
 800966c:	629a      	str	r2, [r3, #40]	; 0x28
	this->hspi_->Init.CRCPolynomial = 10;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	220a      	movs	r2, #10
 8009674:	62da      	str	r2, [r3, #44]	; 0x2c
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
	/* DMA2_Stream3_IRQn interrupt configuration */
	//HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);

	return HAL_SPI_Init(this->hspi_);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4618      	mov	r0, r3
 800967c:	f7f8 f974 	bl	8001968 <HAL_SPI_Init>
 8009680:	4603      	mov	r3, r0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	40023800 	.word	0x40023800
 8009690:	40013000 	.word	0x40013000

08009694 <_ZN3SPI8transmitEPht>:

HAL_StatusTypeDef SPI::transmit(uint8_t *pData, uint16_t size)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4613      	mov	r3, r2
 80096a0:	80fb      	strh	r3, [r7, #6]
	return HAL_SPI_Transmit(this->hspi_, pData, size, HAL_MAX_DELAY);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	88fa      	ldrh	r2, [r7, #6]
 80096a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	f7f8 f9e4 	bl	8001a7a <HAL_SPI_Transmit>
 80096b2:	4603      	mov	r3, r0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <_ZN3SPI7receiveEPht>:

HAL_StatusTypeDef SPI::receive(uint8_t *pData, uint16_t size)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	80fb      	strh	r3, [r7, #6]
	return HAL_SPI_Receive(this->hspi_, pData, size, HAL_MAX_DELAY);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	88fa      	ldrh	r2, [r7, #6]
 80096d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	f7f8 fb0c 	bl	8001cf2 <HAL_SPI_Receive>
 80096da:	4603      	mov	r3, r0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <_ZN3SPI6csHighEv>:
{
	return HAL_SPI_TransmitReceive(this->hspi_, pTxData, pRxData, size, HAL_MAX_DELAY);
}

void SPI::csHigh()
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CSPort, this->CSPin, GPIO_PIN_SET);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6898      	ldr	r0, [r3, #8]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	889b      	ldrh	r3, [r3, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	4619      	mov	r1, r3
 80096f8:	f7f7 fcb8 	bl	800106c <HAL_GPIO_WritePin>
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZN3SPI5csLowEv>:

void SPI::csLow()
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CSPort, this->CSPin, GPIO_PIN_RESET);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6898      	ldr	r0, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	889b      	ldrh	r3, [r3, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	4619      	mov	r1, r3
 8009718:	f7f7 fca8 	bl	800106c <HAL_GPIO_WritePin>
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <_Z18applicationManagerPv>:
 */

#include "applicationManager.h"

void applicationManager(void *pvParams)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
	while (1)
 800972c:	e7fe      	b.n	800972c <_Z18applicationManagerPv+0x8>

0800972e <_Z14commandManagerPv>:
 */

#include "commandManager.h"

void commandManager(void *pvParams)
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
	while (1)
 8009736:	e7fe      	b.n	8009736 <_Z14commandManagerPv+0x8>

08009738 <main_cpp>:
/* Includes for testing purposes */
#include "filesystem.h"


void main_cpp(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
	createTasks();
 800973c:	f000 f801 	bl	8009742 <_Z11createTasksv>

	while(1);
 8009740:	e7fe      	b.n	8009740 <main_cpp+0x8>

08009742 <_Z11createTasksv>:
class RTOSTask cmdManagerTask(CMDTaskName, commandManager, CMDTaskStackDepth, CMDTaskStackPriority, NULL);

/* Public functions */

void createTasks()
{
 8009742:	b480      	push	{r7}
 8009744:	af00      	add	r7, sp, #0

}
 8009746:	bf00      	nop
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <_Z41__static_initialization_and_destruction_0ii>:
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af02      	add	r7, sp, #8
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d11e      	bne.n	800979e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009766:	4293      	cmp	r3, r2
 8009768:	d119      	bne.n	800979e <_Z41__static_initialization_and_destruction_0ii+0x4e>
class RTOSTask appTask(appTaskName, applicationManager, appTaskStackDepth, appTaskStackPriority, NULL);
 800976a:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800976c:	881a      	ldrh	r2, [r3, #0]
 800976e:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2100      	movs	r1, #0
 8009774:	9101      	str	r1, [sp, #4]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	4a0d      	ldr	r2, [pc, #52]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800977c:	490d      	ldr	r1, [pc, #52]	; (80097b4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800977e:	480e      	ldr	r0, [pc, #56]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8009780:	f7ff fe76 	bl	8009470 <_ZN8RTOSTaskC1EPKcPFvPvEtmS2_>
class RTOSTask cmdManagerTask(CMDTaskName, commandManager, CMDTaskStackDepth, CMDTaskStackPriority, NULL);
 8009784:	4b0d      	ldr	r3, [pc, #52]	; (80097bc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8009786:	881a      	ldrh	r2, [r3, #0]
 8009788:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2100      	movs	r1, #0
 800978e:	9101      	str	r1, [sp, #4]
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	4613      	mov	r3, r2
 8009794:	4a0b      	ldr	r2, [pc, #44]	; (80097c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009796:	490c      	ldr	r1, [pc, #48]	; (80097c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8009798:	480c      	ldr	r0, [pc, #48]	; (80097cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800979a:	f7ff fe69 	bl	8009470 <_ZN8RTOSTaskC1EPKcPFvPvEtmS2_>
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2000000e 	.word	0x2000000e
 80097ac:	20000010 	.word	0x20000010
 80097b0:	08009725 	.word	0x08009725
 80097b4:	0800ca98 	.word	0x0800ca98
 80097b8:	2000026c 	.word	0x2000026c
 80097bc:	20000014 	.word	0x20000014
 80097c0:	20000018 	.word	0x20000018
 80097c4:	0800972f 	.word	0x0800972f
 80097c8:	0800caac 	.word	0x0800caac
 80097cc:	20000284 	.word	0x20000284

080097d0 <_GLOBAL__sub_I_appTaskStackDepth>:
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80097d8:	2001      	movs	r0, #1
 80097da:	f7ff ffb9 	bl	8009750 <_Z41__static_initialization_and_destruction_0ii>
 80097de:	bd80      	pop	{r7, pc}

080097e0 <__cxa_guard_acquire>:
 80097e0:	6803      	ldr	r3, [r0, #0]
 80097e2:	07db      	lsls	r3, r3, #31
 80097e4:	d406      	bmi.n	80097f4 <__cxa_guard_acquire+0x14>
 80097e6:	7843      	ldrb	r3, [r0, #1]
 80097e8:	b103      	cbz	r3, 80097ec <__cxa_guard_acquire+0xc>
 80097ea:	deff      	udf	#255	; 0xff
 80097ec:	2301      	movs	r3, #1
 80097ee:	7043      	strb	r3, [r0, #1]
 80097f0:	4618      	mov	r0, r3
 80097f2:	4770      	bx	lr
 80097f4:	2000      	movs	r0, #0
 80097f6:	4770      	bx	lr

080097f8 <__cxa_guard_release>:
 80097f8:	2301      	movs	r3, #1
 80097fa:	6003      	str	r3, [r0, #0]
 80097fc:	4770      	bx	lr

080097fe <_ZNSaIcEC1Ev>:
 80097fe:	4770      	bx	lr

08009800 <_ZNSaIcED1Ev>:
 8009800:	4770      	bx	lr

08009802 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8009802:	b10a      	cbz	r2, 8009808 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8009804:	f000 befc 	b.w	800a600 <memcpy>
 8009808:	4770      	bx	lr
	...

0800980c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800980c:	b508      	push	{r3, lr}
 800980e:	680b      	ldr	r3, [r1, #0]
 8009810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009814:	d302      	bcc.n	800981c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8009816:	480d      	ldr	r0, [pc, #52]	; (800984c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8009818:	f000 fc8c 	bl	800a134 <_ZSt20__throw_length_errorPKc>
 800981c:	4293      	cmp	r3, r2
 800981e:	d90b      	bls.n	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009820:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009824:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009828:	d206      	bcs.n	8009838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800982a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800982e:	bf2a      	itet	cs
 8009830:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009834:	6008      	strcc	r0, [r1, #0]
 8009836:	600b      	strcs	r3, [r1, #0]
 8009838:	6808      	ldr	r0, [r1, #0]
 800983a:	3001      	adds	r0, #1
 800983c:	d501      	bpl.n	8009842 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800983e:	f000 fc73 	bl	800a128 <_ZSt17__throw_bad_allocv>
 8009842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009846:	f000 bab9 	b.w	8009dbc <_Znwj>
 800984a:	bf00      	nop
 800984c:	0800cab9 	.word	0x0800cab9

08009850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009850:	f850 3b08 	ldr.w	r3, [r0], #8
 8009854:	4283      	cmp	r3, r0
 8009856:	d002      	beq.n	800985e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009858:	4618      	mov	r0, r3
 800985a:	f000 baab 	b.w	8009db4 <_ZdlPv>
 800985e:	4770      	bx	lr

08009860 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8009860:	b508      	push	{r3, lr}
 8009862:	4603      	mov	r3, r0
 8009864:	4608      	mov	r0, r1
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4298      	cmp	r0, r3
 800986a:	4611      	mov	r1, r2
 800986c:	d903      	bls.n	8009876 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800986e:	4602      	mov	r2, r0
 8009870:	4801      	ldr	r0, [pc, #4]	; (8009878 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8009872:	f000 fc62 	bl	800a13a <_ZSt24__throw_out_of_range_fmtPKcz>
 8009876:	bd08      	pop	{r3, pc}
 8009878:	0800cad1 	.word	0x0800cad1

0800987c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800987c:	6840      	ldr	r0, [r0, #4]
 800987e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8009882:	3901      	subs	r1, #1
 8009884:	1a09      	subs	r1, r1, r0
 8009886:	4291      	cmp	r1, r2
 8009888:	b508      	push	{r3, lr}
 800988a:	d202      	bcs.n	8009892 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fc51 	bl	800a134 <_ZSt20__throw_length_errorPKc>
 8009892:	bd08      	pop	{r3, pc}

08009894 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8009894:	6803      	ldr	r3, [r0, #0]
 8009896:	428b      	cmp	r3, r1
 8009898:	d806      	bhi.n	80098a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800989a:	6840      	ldr	r0, [r0, #4]
 800989c:	4418      	add	r0, r3
 800989e:	4281      	cmp	r1, r0
 80098a0:	bf94      	ite	ls
 80098a2:	2000      	movls	r0, #0
 80098a4:	2001      	movhi	r0, #1
 80098a6:	4770      	bx	lr
 80098a8:	2001      	movs	r0, #1
 80098aa:	4770      	bx	lr

080098ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80098ac:	2a01      	cmp	r2, #1
 80098ae:	b410      	push	{r4}
 80098b0:	d104      	bne.n	80098bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80098b2:	780a      	ldrb	r2, [r1, #0]
 80098b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b8:	7002      	strb	r2, [r0, #0]
 80098ba:	4770      	bx	lr
 80098bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098c0:	f7ff bf9f 	b.w	8009802 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80098c4:	2a01      	cmp	r2, #1
 80098c6:	b430      	push	{r4, r5}
 80098c8:	d103      	bne.n	80098d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80098ca:	780b      	ldrb	r3, [r1, #0]
 80098cc:	7003      	strb	r3, [r0, #0]
 80098ce:	bc30      	pop	{r4, r5}
 80098d0:	4770      	bx	lr
 80098d2:	2a00      	cmp	r2, #0
 80098d4:	d0fb      	beq.n	80098ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80098d6:	bc30      	pop	{r4, r5}
 80098d8:	f000 bea0 	b.w	800a61c <memmove>

080098dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80098dc:	b508      	push	{r3, lr}
 80098de:	1a52      	subs	r2, r2, r1
 80098e0:	f7ff ffe4 	bl	80098ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80098e4:	bd08      	pop	{r3, pc}

080098e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80098e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80098ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80098ec:	461f      	mov	r7, r3
 80098ee:	6843      	ldr	r3, [r0, #4]
 80098f0:	eb01 0802 	add.w	r8, r1, r2
 80098f4:	1ab2      	subs	r2, r6, r2
 80098f6:	441a      	add	r2, r3
 80098f8:	eba3 0908 	sub.w	r9, r3, r8
 80098fc:	4603      	mov	r3, r0
 80098fe:	9201      	str	r2, [sp, #4]
 8009900:	f853 2b08 	ldr.w	r2, [r3], #8
 8009904:	429a      	cmp	r2, r3
 8009906:	bf18      	it	ne
 8009908:	6882      	ldrne	r2, [r0, #8]
 800990a:	460d      	mov	r5, r1
 800990c:	bf08      	it	eq
 800990e:	220f      	moveq	r2, #15
 8009910:	a901      	add	r1, sp, #4
 8009912:	4604      	mov	r4, r0
 8009914:	f7ff ff7a 	bl	800980c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009918:	4682      	mov	sl, r0
 800991a:	b11d      	cbz	r5, 8009924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800991c:	6821      	ldr	r1, [r4, #0]
 800991e:	462a      	mov	r2, r5
 8009920:	f7ff ffc4 	bl	80098ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009924:	b137      	cbz	r7, 8009934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009926:	b12e      	cbz	r6, 8009934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009928:	4632      	mov	r2, r6
 800992a:	4639      	mov	r1, r7
 800992c:	eb0a 0005 	add.w	r0, sl, r5
 8009930:	f7ff ffbc 	bl	80098ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009934:	f1b9 0f00 	cmp.w	r9, #0
 8009938:	d007      	beq.n	800994a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800993a:	6821      	ldr	r1, [r4, #0]
 800993c:	4435      	add	r5, r6
 800993e:	464a      	mov	r2, r9
 8009940:	4441      	add	r1, r8
 8009942:	eb0a 0005 	add.w	r0, sl, r5
 8009946:	f7ff ffb1 	bl	80098ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800994a:	4620      	mov	r0, r4
 800994c:	f7ff ff80 	bl	8009850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009950:	9b01      	ldr	r3, [sp, #4]
 8009952:	f8c4 a000 	str.w	sl, [r4]
 8009956:	60a3      	str	r3, [r4, #8]
 8009958:	b002      	add	sp, #8
 800995a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800995e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800995e:	b570      	push	{r4, r5, r6, lr}
 8009960:	4604      	mov	r4, r0
 8009962:	460e      	mov	r6, r1
 8009964:	3008      	adds	r0, #8
 8009966:	6020      	str	r0, [r4, #0]
 8009968:	f856 3b08 	ldr.w	r3, [r6], #8
 800996c:	429e      	cmp	r6, r3
 800996e:	460d      	mov	r5, r1
 8009970:	d10b      	bne.n	800998a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8009972:	2210      	movs	r2, #16
 8009974:	4631      	mov	r1, r6
 8009976:	f7ff ff44 	bl	8009802 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800997a:	686b      	ldr	r3, [r5, #4]
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	2300      	movs	r3, #0
 8009980:	602e      	str	r6, [r5, #0]
 8009982:	606b      	str	r3, [r5, #4]
 8009984:	722b      	strb	r3, [r5, #8]
 8009986:	4620      	mov	r0, r4
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	688b      	ldr	r3, [r1, #8]
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	e7f3      	b.n	800997a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08009992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009992:	b510      	push	{r4, lr}
 8009994:	4604      	mov	r4, r0
 8009996:	f7ff ff5b 	bl	8009850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800999a:	4620      	mov	r0, r4
 800999c:	bd10      	pop	{r4, pc}

0800999e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800999e:	6840      	ldr	r0, [r0, #4]
 80099a0:	4770      	bx	lr

080099a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80099a2:	4603      	mov	r3, r0
 80099a4:	f853 2b08 	ldr.w	r2, [r3], #8
 80099a8:	429a      	cmp	r2, r3
 80099aa:	bf14      	ite	ne
 80099ac:	6880      	ldrne	r0, [r0, #8]
 80099ae:	200f      	moveq	r0, #15
 80099b0:	4770      	bx	lr
	...

080099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80099b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099ba:	4614      	mov	r4, r2
 80099bc:	4680      	mov	r8, r0
 80099be:	462a      	mov	r2, r5
 80099c0:	4689      	mov	r9, r1
 80099c2:	461f      	mov	r7, r3
 80099c4:	4621      	mov	r1, r4
 80099c6:	4b39      	ldr	r3, [pc, #228]	; (8009aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80099c8:	f7ff ff58 	bl	800987c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80099cc:	4642      	mov	r2, r8
 80099ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099d2:	f852 6b08 	ldr.w	r6, [r2], #8
 80099d6:	4296      	cmp	r6, r2
 80099d8:	bf18      	it	ne
 80099da:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80099de:	eba5 0b04 	sub.w	fp, r5, r4
 80099e2:	eb03 0a0b 	add.w	sl, r3, fp
 80099e6:	bf08      	it	eq
 80099e8:	220f      	moveq	r2, #15
 80099ea:	4552      	cmp	r2, sl
 80099ec:	d351      	bcc.n	8009a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80099ee:	444e      	add	r6, r9
 80099f0:	4639      	mov	r1, r7
 80099f2:	44a1      	add	r9, r4
 80099f4:	4640      	mov	r0, r8
 80099f6:	eba3 0909 	sub.w	r9, r3, r9
 80099fa:	f7ff ff4b 	bl	8009894 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80099fe:	b180      	cbz	r0, 8009a22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	d006      	beq.n	8009a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009a06:	42ac      	cmp	r4, r5
 8009a08:	d004      	beq.n	8009a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009a0a:	464a      	mov	r2, r9
 8009a0c:	1931      	adds	r1, r6, r4
 8009a0e:	1970      	adds	r0, r6, r5
 8009a10:	f7ff ff58 	bl	80098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009a14:	b315      	cbz	r5, 8009a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009a16:	462a      	mov	r2, r5
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7ff ff46 	bl	80098ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009a20:	e01c      	b.n	8009a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009a22:	b135      	cbz	r5, 8009a32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8009a24:	42ac      	cmp	r4, r5
 8009a26:	d33c      	bcc.n	8009aa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ff49 	bl	80098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009a32:	f1b9 0f00 	cmp.w	r9, #0
 8009a36:	d011      	beq.n	8009a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009a38:	42ac      	cmp	r4, r5
 8009a3a:	d00f      	beq.n	8009a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009a3c:	464a      	mov	r2, r9
 8009a3e:	1931      	adds	r1, r6, r4
 8009a40:	1970      	adds	r0, r6, r5
 8009a42:	f7ff ff3f 	bl	80098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009a46:	42ac      	cmp	r4, r5
 8009a48:	d208      	bcs.n	8009a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009a4a:	4434      	add	r4, r6
 8009a4c:	197b      	adds	r3, r7, r5
 8009a4e:	429c      	cmp	r4, r3
 8009a50:	d30f      	bcc.n	8009a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8009a52:	462a      	mov	r2, r5
 8009a54:	4639      	mov	r1, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff ff34 	bl	80098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a60:	f8c8 a004 	str.w	sl, [r8, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	4640      	mov	r0, r8
 8009a68:	f803 200a 	strb.w	r2, [r3, sl]
 8009a6c:	b003      	add	sp, #12
 8009a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a72:	42bc      	cmp	r4, r7
 8009a74:	d803      	bhi.n	8009a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8009a76:	462a      	mov	r2, r5
 8009a78:	eb07 010b 	add.w	r1, r7, fp
 8009a7c:	e7cd      	b.n	8009a1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8009a7e:	1be4      	subs	r4, r4, r7
 8009a80:	4622      	mov	r2, r4
 8009a82:	4639      	mov	r1, r7
 8009a84:	4630      	mov	r0, r6
 8009a86:	f7ff ff1d 	bl	80098c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009a8a:	1b2a      	subs	r2, r5, r4
 8009a8c:	1971      	adds	r1, r6, r5
 8009a8e:	1930      	adds	r0, r6, r4
 8009a90:	e7c4      	b.n	8009a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8009a92:	9500      	str	r5, [sp, #0]
 8009a94:	463b      	mov	r3, r7
 8009a96:	4622      	mov	r2, r4
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f7ff ff23 	bl	80098e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009aa0:	e7dc      	b.n	8009a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009aa2:	f1b9 0f00 	cmp.w	r9, #0
 8009aa6:	d0d0      	beq.n	8009a4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8009aa8:	e7c8      	b.n	8009a3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8009aaa:	bf00      	nop
 8009aac:	0800cb1e 	.word	0x0800cb1e

08009ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8009ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4615      	mov	r5, r2
 8009ab6:	4a09      	ldr	r2, [pc, #36]	; (8009adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8009ab8:	9303      	str	r3, [sp, #12]
 8009aba:	460e      	mov	r6, r1
 8009abc:	f7ff fed0 	bl	8009860 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009ac0:	6862      	ldr	r2, [r4, #4]
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	1b92      	subs	r2, r2, r6
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	42aa      	cmp	r2, r5
 8009aca:	9808      	ldr	r0, [sp, #32]
 8009acc:	9000      	str	r0, [sp, #0]
 8009ace:	bf28      	it	cs
 8009ad0:	462a      	movcs	r2, r5
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f7ff ff6e 	bl	80099b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8009ad8:	b004      	add	sp, #16
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
 8009adc:	0800cb08 	.word	0x0800cb08

08009ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 8009ae0:	b507      	push	{r0, r1, r2, lr}
 8009ae2:	6853      	ldr	r3, [r2, #4]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	6813      	ldr	r3, [r2, #0]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f7ff ffe1 	bl	8009ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8009aee:	b003      	add	sp, #12
 8009af0:	f85d fb04 	ldr.w	pc, [sp], #4

08009af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8009af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009af6:	4604      	mov	r4, r0
 8009af8:	4610      	mov	r0, r2
 8009afa:	9103      	str	r1, [sp, #12]
 8009afc:	9202      	str	r2, [sp, #8]
 8009afe:	f7f6 fbd1 	bl	80002a4 <strlen>
 8009b02:	9b02      	ldr	r3, [sp, #8]
 8009b04:	9000      	str	r0, [sp, #0]
 8009b06:	9903      	ldr	r1, [sp, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f7ff ffd0 	bl	8009ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8009b10:	b004      	add	sp, #16
 8009b12:	bd10      	pop	{r4, pc}

08009b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8009b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b16:	4604      	mov	r4, r0
 8009b18:	4623      	mov	r3, r4
 8009b1a:	6840      	ldr	r0, [r0, #4]
 8009b1c:	f853 6b08 	ldr.w	r6, [r3], #8
 8009b20:	429e      	cmp	r6, r3
 8009b22:	bf18      	it	ne
 8009b24:	68a3      	ldrne	r3, [r4, #8]
 8009b26:	eb00 0502 	add.w	r5, r0, r2
 8009b2a:	bf08      	it	eq
 8009b2c:	230f      	moveq	r3, #15
 8009b2e:	429d      	cmp	r5, r3
 8009b30:	d80a      	bhi.n	8009b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8009b32:	b112      	cbz	r2, 8009b3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8009b34:	4430      	add	r0, r6
 8009b36:	f7ff feb9 	bl	80098ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	6065      	str	r5, [r4, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	4620      	mov	r0, r4
 8009b42:	555a      	strb	r2, [r3, r5]
 8009b44:	b002      	add	sp, #8
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	9200      	str	r2, [sp, #0]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4601      	mov	r1, r0
 8009b50:	4620      	mov	r0, r4
 8009b52:	f7ff fec8 	bl	80098e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009b56:	e7f0      	b.n	8009b3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08009b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8009b58:	b508      	push	{r3, lr}
 8009b5a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009b5e:	f7ff ffd9 	bl	8009b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009b62:	bd08      	pop	{r3, pc}

08009b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8009b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	f7f6 fb9a 	bl	80002a4 <strlen>
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8009b72:	9001      	str	r0, [sp, #4]
 8009b74:	4602      	mov	r2, r0
 8009b76:	2100      	movs	r1, #0
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff fe7f 	bl	800987c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8009b7e:	9a01      	ldr	r2, [sp, #4]
 8009b80:	4629      	mov	r1, r5
 8009b82:	4620      	mov	r0, r4
 8009b84:	f7ff ffc6 	bl	8009b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009b88:	b003      	add	sp, #12
 8009b8a:	bd30      	pop	{r4, r5, pc}
 8009b8c:	0800cb37 	.word	0x0800cb37

08009b90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 8009b90:	4770      	bx	lr
	...

08009b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b96:	4604      	mov	r4, r0
 8009b98:	4616      	mov	r6, r2
 8009b9a:	460d      	mov	r5, r1
 8009b9c:	b919      	cbnz	r1, 8009ba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009b9e:	b112      	cbz	r2, 8009ba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009ba0:	480d      	ldr	r0, [pc, #52]	; (8009bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009ba2:	f000 fac4 	bl	800a12e <_ZSt19__throw_logic_errorPKc>
 8009ba6:	1b73      	subs	r3, r6, r5
 8009ba8:	2b0f      	cmp	r3, #15
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	d907      	bls.n	8009bbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	a901      	add	r1, sp, #4
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7ff fe2a 	bl	800980c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	6020      	str	r0, [r4, #0]
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	4632      	mov	r2, r6
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	6820      	ldr	r0, [r4, #0]
 8009bc4:	f7ff fe8a 	bl	80098dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009bc8:	9b01      	ldr	r3, [sp, #4]
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	6063      	str	r3, [r4, #4]
 8009bce:	2100      	movs	r1, #0
 8009bd0:	54d1      	strb	r1, [r2, r3]
 8009bd2:	b002      	add	sp, #8
 8009bd4:	bd70      	pop	{r4, r5, r6, pc}
 8009bd6:	bf00      	nop
 8009bd8:	0800cb4c 	.word	0x0800cb4c

08009bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	f100 0308 	add.w	r3, r0, #8
 8009be2:	4604      	mov	r4, r0
 8009be4:	6003      	str	r3, [r0, #0]
 8009be6:	460d      	mov	r5, r1
 8009be8:	b159      	cbz	r1, 8009c02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009bea:	4608      	mov	r0, r1
 8009bec:	f7f6 fb5a 	bl	80002a4 <strlen>
 8009bf0:	182a      	adds	r2, r5, r0
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f04f 0300 	mov.w	r3, #0
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7ff ffcb 	bl	8009b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
 8009c02:	2201      	movs	r2, #1
 8009c04:	e7f5      	b.n	8009bf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08009c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8009c08:	4b24      	ldr	r3, [pc, #144]	; (8009c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	07d0      	lsls	r0, r2, #31
 8009c0e:	bf5c      	itt	pl
 8009c10:	2201      	movpl	r2, #1
 8009c12:	601a      	strpl	r2, [r3, #0]
 8009c14:	4b22      	ldr	r3, [pc, #136]	; (8009ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	07d1      	lsls	r1, r2, #31
 8009c1a:	bf5c      	itt	pl
 8009c1c:	2201      	movpl	r2, #1
 8009c1e:	601a      	strpl	r2, [r3, #0]
 8009c20:	4b20      	ldr	r3, [pc, #128]	; (8009ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	07d2      	lsls	r2, r2, #31
 8009c26:	bf5c      	itt	pl
 8009c28:	2201      	movpl	r2, #1
 8009c2a:	601a      	strpl	r2, [r3, #0]
 8009c2c:	4b1e      	ldr	r3, [pc, #120]	; (8009ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	07d0      	lsls	r0, r2, #31
 8009c32:	bf5c      	itt	pl
 8009c34:	2201      	movpl	r2, #1
 8009c36:	601a      	strpl	r2, [r3, #0]
 8009c38:	4b1c      	ldr	r3, [pc, #112]	; (8009cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	07d1      	lsls	r1, r2, #31
 8009c3e:	bf5c      	itt	pl
 8009c40:	2201      	movpl	r2, #1
 8009c42:	601a      	strpl	r2, [r3, #0]
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	07d2      	lsls	r2, r2, #31
 8009c4a:	bf5c      	itt	pl
 8009c4c:	2201      	movpl	r2, #1
 8009c4e:	601a      	strpl	r2, [r3, #0]
 8009c50:	4b18      	ldr	r3, [pc, #96]	; (8009cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	07d0      	lsls	r0, r2, #31
 8009c56:	bf5c      	itt	pl
 8009c58:	2201      	movpl	r2, #1
 8009c5a:	601a      	strpl	r2, [r3, #0]
 8009c5c:	4b16      	ldr	r3, [pc, #88]	; (8009cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	07d1      	lsls	r1, r2, #31
 8009c62:	bf5c      	itt	pl
 8009c64:	2201      	movpl	r2, #1
 8009c66:	601a      	strpl	r2, [r3, #0]
 8009c68:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	07d2      	lsls	r2, r2, #31
 8009c6e:	bf5c      	itt	pl
 8009c70:	2201      	movpl	r2, #1
 8009c72:	601a      	strpl	r2, [r3, #0]
 8009c74:	4b12      	ldr	r3, [pc, #72]	; (8009cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	07d0      	lsls	r0, r2, #31
 8009c7a:	bf5c      	itt	pl
 8009c7c:	2201      	movpl	r2, #1
 8009c7e:	601a      	strpl	r2, [r3, #0]
 8009c80:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	07d1      	lsls	r1, r2, #31
 8009c86:	bf5c      	itt	pl
 8009c88:	2201      	movpl	r2, #1
 8009c8a:	601a      	strpl	r2, [r3, #0]
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	; (8009cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	07d2      	lsls	r2, r2, #31
 8009c92:	bf5c      	itt	pl
 8009c94:	2201      	movpl	r2, #1
 8009c96:	601a      	strpl	r2, [r3, #0]
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	200002c8 	.word	0x200002c8
 8009ca0:	200002c4 	.word	0x200002c4
 8009ca4:	200002c0 	.word	0x200002c0
 8009ca8:	200002bc 	.word	0x200002bc
 8009cac:	200002b8 	.word	0x200002b8
 8009cb0:	200002b4 	.word	0x200002b4
 8009cb4:	200002b0 	.word	0x200002b0
 8009cb8:	200002ac 	.word	0x200002ac
 8009cbc:	200002a8 	.word	0x200002a8
 8009cc0:	200002a4 	.word	0x200002a4
 8009cc4:	200002a0 	.word	0x200002a0
 8009cc8:	2000029c 	.word	0x2000029c

08009ccc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8009ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009cce:	2400      	movs	r4, #0
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009cd6:	6803      	ldr	r3, [r0, #0]
 8009cd8:	4615      	mov	r5, r2
 8009cda:	699e      	ldr	r6, [r3, #24]
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	466b      	mov	r3, sp
 8009ce0:	e9cd 4400 	strd	r4, r4, [sp]
 8009ce4:	47b0      	blx	r6
 8009ce6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009cea:	f003 0306 	and.w	r3, r3, #6
 8009cee:	2b06      	cmp	r3, #6
 8009cf0:	bf03      	ittte	eq
 8009cf2:	9b00      	ldreq	r3, [sp, #0]
 8009cf4:	602b      	streq	r3, [r5, #0]
 8009cf6:	2001      	moveq	r0, #1
 8009cf8:	4620      	movne	r0, r4
 8009cfa:	b004      	add	sp, #16
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}

08009cfe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8009cfe:	9800      	ldr	r0, [sp, #0]
 8009d00:	4290      	cmp	r0, r2
 8009d02:	bf14      	ite	ne
 8009d04:	2001      	movne	r0, #1
 8009d06:	2006      	moveq	r0, #6
 8009d08:	4770      	bx	lr
	...

08009d0c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	4604      	mov	r4, r0
 8009d14:	f000 f8e3 	bl	8009ede <_ZNSt9type_infoD1Ev>
 8009d18:	4620      	mov	r0, r4
 8009d1a:	bd10      	pop	{r4, pc}
 8009d1c:	0800cbb0 	.word	0x0800cbb0

08009d20 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8009d20:	b510      	push	{r4, lr}
 8009d22:	4604      	mov	r4, r0
 8009d24:	f7ff fff2 	bl	8009d0c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	2108      	movs	r1, #8
 8009d2c:	f000 f844 	bl	8009db8 <_ZdlPvj>
 8009d30:	4620      	mov	r0, r4
 8009d32:	bd10      	pop	{r4, pc}

08009d34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8009d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d38:	461f      	mov	r7, r3
 8009d3a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8009d3e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009d42:	4598      	cmp	r8, r3
 8009d44:	4606      	mov	r6, r0
 8009d46:	4615      	mov	r5, r2
 8009d48:	d107      	bne.n	8009d5a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8009d4a:	9907      	ldr	r1, [sp, #28]
 8009d4c:	f000 f8ca 	bl	8009ee4 <_ZNKSt9type_infoeqERKS_>
 8009d50:	b118      	cbz	r0, 8009d5a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8009d52:	7165      	strb	r5, [r4, #5]
 8009d54:	2000      	movs	r0, #0
 8009d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 f8c1 	bl	8009ee4 <_ZNKSt9type_infoeqERKS_>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d0f6      	beq.n	8009d54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8009d66:	2301      	movs	r3, #1
 8009d68:	f8c4 8000 	str.w	r8, [r4]
 8009d6c:	7125      	strb	r5, [r4, #4]
 8009d6e:	71a3      	strb	r3, [r4, #6]
 8009d70:	e7f0      	b.n	8009d54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08009d72 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8009d72:	b538      	push	{r3, r4, r5, lr}
 8009d74:	4615      	mov	r5, r2
 8009d76:	461c      	mov	r4, r3
 8009d78:	f000 f8b4 	bl	8009ee4 <_ZNKSt9type_infoeqERKS_>
 8009d7c:	b120      	cbz	r0, 8009d88 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8009d7e:	2308      	movs	r3, #8
 8009d80:	60e3      	str	r3, [r4, #12]
 8009d82:	2306      	movs	r3, #6
 8009d84:	6025      	str	r5, [r4, #0]
 8009d86:	7123      	strb	r3, [r4, #4]
 8009d88:	bd38      	pop	{r3, r4, r5, pc}

08009d8a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8009d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	9201      	str	r2, [sp, #4]
 8009d92:	461e      	mov	r6, r3
 8009d94:	f000 f8a6 	bl	8009ee4 <_ZNKSt9type_infoeqERKS_>
 8009d98:	b950      	cbnz	r0, 8009db0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8009d9a:	2e03      	cmp	r6, #3
 8009d9c:	d808      	bhi.n	8009db0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	9a01      	ldr	r2, [sp, #4]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	4629      	mov	r1, r5
 8009da6:	4620      	mov	r0, r4
 8009da8:	b002      	add	sp, #8
 8009daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dae:	4718      	bx	r3
 8009db0:	b002      	add	sp, #8
 8009db2:	bd70      	pop	{r4, r5, r6, pc}

08009db4 <_ZdlPv>:
 8009db4:	f000 bc0c 	b.w	800a5d0 <free>

08009db8 <_ZdlPvj>:
 8009db8:	f7ff bffc 	b.w	8009db4 <_ZdlPv>

08009dbc <_Znwj>:
 8009dbc:	2801      	cmp	r0, #1
 8009dbe:	bf38      	it	cc
 8009dc0:	2001      	movcc	r0, #1
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 fbfa 	bl	800a5c0 <malloc>
 8009dcc:	b930      	cbnz	r0, 8009ddc <_Znwj+0x20>
 8009dce:	f000 fac7 	bl	800a360 <_ZSt15get_new_handlerv>
 8009dd2:	b908      	cbnz	r0, 8009dd8 <_Znwj+0x1c>
 8009dd4:	f000 fb85 	bl	800a4e2 <abort>
 8009dd8:	4780      	blx	r0
 8009dda:	e7f4      	b.n	8009dc6 <_Znwj+0xa>
 8009ddc:	bd10      	pop	{r4, pc}
	...

08009de0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8009de4:	6003      	str	r3, [r0, #0]
 8009de6:	4604      	mov	r4, r0
 8009de8:	f7ff ff90 	bl	8009d0c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009dec:	4620      	mov	r0, r4
 8009dee:	bd10      	pop	{r4, pc}
 8009df0:	0800cc10 	.word	0x0800cc10

08009df4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	4604      	mov	r4, r0
 8009df8:	f7ff fff2 	bl	8009de0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	210c      	movs	r1, #12
 8009e00:	f7ff ffda 	bl	8009db8 <_ZdlPvj>
 8009e04:	4620      	mov	r0, r4
 8009e06:	bd10      	pop	{r4, pc}

08009e08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8009e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e0a:	9f08      	ldr	r7, [sp, #32]
 8009e0c:	4297      	cmp	r7, r2
 8009e0e:	4605      	mov	r5, r0
 8009e10:	460e      	mov	r6, r1
 8009e12:	4614      	mov	r4, r2
 8009e14:	d00a      	beq.n	8009e2c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8009e16:	68a8      	ldr	r0, [r5, #8]
 8009e18:	6802      	ldr	r2, [r0, #0]
 8009e1a:	9708      	str	r7, [sp, #32]
 8009e1c:	6a15      	ldr	r5, [r2, #32]
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4622      	mov	r2, r4
 8009e22:	46ac      	mov	ip, r5
 8009e24:	b003      	add	sp, #12
 8009e26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009e2a:	4760      	bx	ip
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	f000 f858 	bl	8009ee4 <_ZNKSt9type_infoeqERKS_>
 8009e34:	9b01      	ldr	r3, [sp, #4]
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d0ed      	beq.n	8009e16 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8009e3a:	2006      	movs	r0, #6
 8009e3c:	b003      	add	sp, #12
 8009e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009e40:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	460d      	mov	r5, r1
 8009e46:	4619      	mov	r1, r3
 8009e48:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8009e4c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8009e50:	4681      	mov	r9, r0
 8009e52:	4617      	mov	r7, r2
 8009e54:	4698      	mov	r8, r3
 8009e56:	f000 f845 	bl	8009ee4 <_ZNKSt9type_infoeqERKS_>
 8009e5a:	b190      	cbz	r0, 8009e82 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8009e5c:	2d00      	cmp	r5, #0
 8009e5e:	6034      	str	r4, [r6, #0]
 8009e60:	7137      	strb	r7, [r6, #4]
 8009e62:	db09      	blt.n	8009e78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8009e64:	1961      	adds	r1, r4, r5
 8009e66:	458a      	cmp	sl, r1
 8009e68:	bf0c      	ite	eq
 8009e6a:	2106      	moveq	r1, #6
 8009e6c:	2101      	movne	r1, #1
 8009e6e:	71b1      	strb	r1, [r6, #6]
 8009e70:	2000      	movs	r0, #0
 8009e72:	b001      	add	sp, #4
 8009e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e78:	3502      	adds	r5, #2
 8009e7a:	d1f9      	bne.n	8009e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	71b3      	strb	r3, [r6, #6]
 8009e80:	e7f6      	b.n	8009e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009e82:	4554      	cmp	r4, sl
 8009e84:	d106      	bne.n	8009e94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009e86:	4659      	mov	r1, fp
 8009e88:	4648      	mov	r0, r9
 8009e8a:	f000 f82b 	bl	8009ee4 <_ZNKSt9type_infoeqERKS_>
 8009e8e:	b108      	cbz	r0, 8009e94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009e90:	7177      	strb	r7, [r6, #5]
 8009e92:	e7ed      	b.n	8009e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009e94:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8009e98:	6803      	ldr	r3, [r0, #0]
 8009e9a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8009e9e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8009ea2:	69dc      	ldr	r4, [r3, #28]
 8009ea4:	463a      	mov	r2, r7
 8009ea6:	4643      	mov	r3, r8
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	46a4      	mov	ip, r4
 8009eac:	b001      	add	sp, #4
 8009eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb2:	4760      	bx	ip

08009eb4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8009eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb8:	4607      	mov	r7, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4615      	mov	r5, r2
 8009ebe:	461e      	mov	r6, r3
 8009ec0:	f7ff ff57 	bl	8009d72 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8009ec4:	b948      	cbnz	r0, 8009eda <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8009ec6:	68b8      	ldr	r0, [r7, #8]
 8009ec8:	6803      	ldr	r3, [r0, #0]
 8009eca:	699f      	ldr	r7, [r3, #24]
 8009ecc:	462a      	mov	r2, r5
 8009ece:	4633      	mov	r3, r6
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	46bc      	mov	ip, r7
 8009ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed8:	4760      	bx	ip
 8009eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ede <_ZNSt9type_infoD1Ev>:
 8009ede:	4770      	bx	lr

08009ee0 <_ZNKSt9type_info14__is_pointer_pEv>:
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	4770      	bx	lr

08009ee4 <_ZNKSt9type_infoeqERKS_>:
 8009ee4:	4281      	cmp	r1, r0
 8009ee6:	b508      	push	{r3, lr}
 8009ee8:	d00e      	beq.n	8009f08 <_ZNKSt9type_infoeqERKS_+0x24>
 8009eea:	6840      	ldr	r0, [r0, #4]
 8009eec:	7803      	ldrb	r3, [r0, #0]
 8009eee:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef0:	d00c      	beq.n	8009f0c <_ZNKSt9type_infoeqERKS_+0x28>
 8009ef2:	6849      	ldr	r1, [r1, #4]
 8009ef4:	780b      	ldrb	r3, [r1, #0]
 8009ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef8:	bf08      	it	eq
 8009efa:	3101      	addeq	r1, #1
 8009efc:	f7f6 f9c8 	bl	8000290 <strcmp>
 8009f00:	fab0 f080 	clz	r0, r0
 8009f04:	0940      	lsrs	r0, r0, #5
 8009f06:	bd08      	pop	{r3, pc}
 8009f08:	2001      	movs	r0, #1
 8009f0a:	e7fc      	b.n	8009f06 <_ZNKSt9type_infoeqERKS_+0x22>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e7fa      	b.n	8009f06 <_ZNKSt9type_infoeqERKS_+0x22>

08009f10 <_ZNSs7_M_copyEPcPKcj>:
 8009f10:	2a01      	cmp	r2, #1
 8009f12:	b430      	push	{r4, r5}
 8009f14:	d103      	bne.n	8009f1e <_ZNSs7_M_copyEPcPKcj+0xe>
 8009f16:	780b      	ldrb	r3, [r1, #0]
 8009f18:	7003      	strb	r3, [r0, #0]
 8009f1a:	bc30      	pop	{r4, r5}
 8009f1c:	4770      	bx	lr
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	d0fb      	beq.n	8009f1a <_ZNSs7_M_copyEPcPKcj+0xa>
 8009f22:	bc30      	pop	{r4, r5}
 8009f24:	f000 bb6c 	b.w	800a600 <memcpy>

08009f28 <_ZNSs13_S_copy_charsEPcS_S_>:
 8009f28:	b508      	push	{r3, lr}
 8009f2a:	1a52      	subs	r2, r2, r1
 8009f2c:	f7ff fff0 	bl	8009f10 <_ZNSs7_M_copyEPcPKcj>
 8009f30:	bd08      	pop	{r3, pc}
	...

08009f34 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8009f34:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8009f36:	4298      	cmp	r0, r3
 8009f38:	d004      	beq.n	8009f44 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	6083      	str	r3, [r0, #8]
 8009f3e:	6001      	str	r1, [r0, #0]
 8009f40:	4408      	add	r0, r1
 8009f42:	7303      	strb	r3, [r0, #12]
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	200002cc 	.word	0x200002cc

08009f4c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8009f4c:	4b15      	ldr	r3, [pc, #84]	; (8009fa4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8009f4e:	4298      	cmp	r0, r3
 8009f50:	b510      	push	{r4, lr}
 8009f52:	4604      	mov	r4, r0
 8009f54:	d902      	bls.n	8009f5c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8009f56:	4814      	ldr	r0, [pc, #80]	; (8009fa8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8009f58:	f000 f8ec 	bl	800a134 <_ZSt20__throw_length_errorPKc>
 8009f5c:	4288      	cmp	r0, r1
 8009f5e:	d903      	bls.n	8009f68 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8009f60:	004b      	lsls	r3, r1, #1
 8009f62:	4298      	cmp	r0, r3
 8009f64:	bf38      	it	cc
 8009f66:	461c      	movcc	r4, r3
 8009f68:	f104 031d 	add.w	r3, r4, #29
 8009f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f70:	f104 000d 	add.w	r0, r4, #13
 8009f74:	d90c      	bls.n	8009f90 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8009f76:	428c      	cmp	r4, r1
 8009f78:	d90a      	bls.n	8009f90 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8009f7a:	480a      	ldr	r0, [pc, #40]	; (8009fa4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8009f7c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8009f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f84:	1ae4      	subs	r4, r4, r3
 8009f86:	4284      	cmp	r4, r0
 8009f88:	bf28      	it	cs
 8009f8a:	4604      	movcs	r4, r0
 8009f8c:	f104 000d 	add.w	r0, r4, #13
 8009f90:	2800      	cmp	r0, #0
 8009f92:	da01      	bge.n	8009f98 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8009f94:	f000 f8c8 	bl	800a128 <_ZSt17__throw_bad_allocv>
 8009f98:	f7ff ff10 	bl	8009dbc <_Znwj>
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	6044      	str	r4, [r0, #4]
 8009fa0:	6082      	str	r2, [r0, #8]
 8009fa2:	bd10      	pop	{r4, pc}
 8009fa4:	3ffffffc 	.word	0x3ffffffc
 8009fa8:	0800cc49 	.word	0x0800cc49

08009fac <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.0>:
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	eba1 0800 	sub.w	r8, r1, r0
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	460e      	mov	r6, r1
 8009fb8:	4640      	mov	r0, r8
 8009fba:	2100      	movs	r1, #0
 8009fbc:	f7ff ffc6 	bl	8009f4c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8009fc0:	f100 070c 	add.w	r7, r0, #12
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4638      	mov	r0, r7
 8009fcc:	f7ff ffac 	bl	8009f28 <_ZNSs13_S_copy_charsEPcS_S_>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	4641      	mov	r1, r8
 8009fd4:	f7ff ffae 	bl	8009f34 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8009fd8:	4638      	mov	r0, r7
 8009fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009fe0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8009fe0:	4288      	cmp	r0, r1
 8009fe2:	b508      	push	{r3, lr}
 8009fe4:	d007      	beq.n	8009ff6 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x16>
 8009fe6:	b118      	cbz	r0, 8009ff0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x10>
 8009fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009fec:	f7ff bfde 	b.w	8009fac <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.0>
 8009ff0:	4802      	ldr	r0, [pc, #8]	; (8009ffc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
 8009ff2:	f000 f89c 	bl	800a12e <_ZSt19__throw_logic_errorPKc>
 8009ff6:	4802      	ldr	r0, [pc, #8]	; (800a000 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
 8009ff8:	bd08      	pop	{r3, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0800cc61 	.word	0x0800cc61
 800a000:	200002d8 	.word	0x200002d8

0800a004 <_ZNSsC1EPKcjRKSaIcE>:
 800a004:	b510      	push	{r4, lr}
 800a006:	4604      	mov	r4, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	4611      	mov	r1, r2
 800a00c:	4401      	add	r1, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	f04f 0300 	mov.w	r3, #0
 800a014:	f7ff ffe4 	bl	8009fe0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 800a018:	6020      	str	r0, [r4, #0]
 800a01a:	4620      	mov	r0, r4
 800a01c:	bd10      	pop	{r4, pc}
	...

0800a020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 800a020:	4b18      	ldr	r3, [pc, #96]	; (800a084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	07d1      	lsls	r1, r2, #31
 800a026:	bf5c      	itt	pl
 800a028:	2201      	movpl	r2, #1
 800a02a:	601a      	strpl	r2, [r3, #0]
 800a02c:	4b16      	ldr	r3, [pc, #88]	; (800a088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	07d2      	lsls	r2, r2, #31
 800a032:	bf5c      	itt	pl
 800a034:	2201      	movpl	r2, #1
 800a036:	601a      	strpl	r2, [r3, #0]
 800a038:	4b14      	ldr	r3, [pc, #80]	; (800a08c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	07d0      	lsls	r0, r2, #31
 800a03e:	bf5c      	itt	pl
 800a040:	2201      	movpl	r2, #1
 800a042:	601a      	strpl	r2, [r3, #0]
 800a044:	4b12      	ldr	r3, [pc, #72]	; (800a090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	07d1      	lsls	r1, r2, #31
 800a04a:	bf5c      	itt	pl
 800a04c:	2201      	movpl	r2, #1
 800a04e:	601a      	strpl	r2, [r3, #0]
 800a050:	4b10      	ldr	r3, [pc, #64]	; (800a094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	07d2      	lsls	r2, r2, #31
 800a056:	bf5c      	itt	pl
 800a058:	2201      	movpl	r2, #1
 800a05a:	601a      	strpl	r2, [r3, #0]
 800a05c:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	07d0      	lsls	r0, r2, #31
 800a062:	bf5c      	itt	pl
 800a064:	2201      	movpl	r2, #1
 800a066:	601a      	strpl	r2, [r3, #0]
 800a068:	4b0c      	ldr	r3, [pc, #48]	; (800a09c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	07d1      	lsls	r1, r2, #31
 800a06e:	bf5c      	itt	pl
 800a070:	2201      	movpl	r2, #1
 800a072:	601a      	strpl	r2, [r3, #0]
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	07d2      	lsls	r2, r2, #31
 800a07a:	bf5c      	itt	pl
 800a07c:	2201      	movpl	r2, #1
 800a07e:	601a      	strpl	r2, [r3, #0]
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	200002f8 	.word	0x200002f8
 800a088:	200002f4 	.word	0x200002f4
 800a08c:	200002f0 	.word	0x200002f0
 800a090:	200002ec 	.word	0x200002ec
 800a094:	200002e8 	.word	0x200002e8
 800a098:	200002e4 	.word	0x200002e4
 800a09c:	200002e0 	.word	0x200002e0
 800a0a0:	200002dc 	.word	0x200002dc

0800a0a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 800a0a4:	4b18      	ldr	r3, [pc, #96]	; (800a108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	07d1      	lsls	r1, r2, #31
 800a0aa:	bf5c      	itt	pl
 800a0ac:	2201      	movpl	r2, #1
 800a0ae:	601a      	strpl	r2, [r3, #0]
 800a0b0:	4b16      	ldr	r3, [pc, #88]	; (800a10c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	07d2      	lsls	r2, r2, #31
 800a0b6:	bf5c      	itt	pl
 800a0b8:	2201      	movpl	r2, #1
 800a0ba:	601a      	strpl	r2, [r3, #0]
 800a0bc:	4b14      	ldr	r3, [pc, #80]	; (800a110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	07d0      	lsls	r0, r2, #31
 800a0c2:	bf5c      	itt	pl
 800a0c4:	2201      	movpl	r2, #1
 800a0c6:	601a      	strpl	r2, [r3, #0]
 800a0c8:	4b12      	ldr	r3, [pc, #72]	; (800a114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	07d1      	lsls	r1, r2, #31
 800a0ce:	bf5c      	itt	pl
 800a0d0:	2201      	movpl	r2, #1
 800a0d2:	601a      	strpl	r2, [r3, #0]
 800a0d4:	4b10      	ldr	r3, [pc, #64]	; (800a118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	07d2      	lsls	r2, r2, #31
 800a0da:	bf5c      	itt	pl
 800a0dc:	2201      	movpl	r2, #1
 800a0de:	601a      	strpl	r2, [r3, #0]
 800a0e0:	4b0e      	ldr	r3, [pc, #56]	; (800a11c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	07d0      	lsls	r0, r2, #31
 800a0e6:	bf5c      	itt	pl
 800a0e8:	2201      	movpl	r2, #1
 800a0ea:	601a      	strpl	r2, [r3, #0]
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	07d1      	lsls	r1, r2, #31
 800a0f2:	bf5c      	itt	pl
 800a0f4:	2201      	movpl	r2, #1
 800a0f6:	601a      	strpl	r2, [r3, #0]
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	07d2      	lsls	r2, r2, #31
 800a0fe:	bf5c      	itt	pl
 800a100:	2201      	movpl	r2, #1
 800a102:	601a      	strpl	r2, [r3, #0]
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	20000318 	.word	0x20000318
 800a10c:	20000314 	.word	0x20000314
 800a110:	20000310 	.word	0x20000310
 800a114:	2000030c 	.word	0x2000030c
 800a118:	20000308 	.word	0x20000308
 800a11c:	20000304 	.word	0x20000304
 800a120:	20000300 	.word	0x20000300
 800a124:	200002fc 	.word	0x200002fc

0800a128 <_ZSt17__throw_bad_allocv>:
 800a128:	b508      	push	{r3, lr}
 800a12a:	f000 f9da 	bl	800a4e2 <abort>

0800a12e <_ZSt19__throw_logic_errorPKc>:
 800a12e:	b508      	push	{r3, lr}
 800a130:	f000 f9d7 	bl	800a4e2 <abort>

0800a134 <_ZSt20__throw_length_errorPKc>:
 800a134:	b508      	push	{r3, lr}
 800a136:	f000 f9d4 	bl	800a4e2 <abort>

0800a13a <_ZSt24__throw_out_of_range_fmtPKcz>:
 800a13a:	b40f      	push	{r0, r1, r2, r3}
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	f107 0418 	add.w	r4, r7, #24
 800a146:	f854 2b04 	ldr.w	r2, [r4], #4
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	4610      	mov	r0, r2
 800a14e:	f7f6 f8a9 	bl	80002a4 <strlen>
 800a152:	f200 2307 	addw	r3, r0, #519	; 0x207
 800a156:	f023 0307 	bic.w	r3, r3, #7
 800a15a:	ebad 0d03 	sub.w	sp, sp, r3
 800a15e:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	60fc      	str	r4, [r7, #12]
 800a166:	4623      	mov	r3, r4
 800a168:	4668      	mov	r0, sp
 800a16a:	f000 f8b7 	bl	800a2dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800a16e:	f000 f9b8 	bl	800a4e2 <abort>
	...

0800a174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	07d0      	lsls	r0, r2, #31
 800a17a:	bf5c      	itt	pl
 800a17c:	2201      	movpl	r2, #1
 800a17e:	601a      	strpl	r2, [r3, #0]
 800a180:	4b22      	ldr	r3, [pc, #136]	; (800a20c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	07d1      	lsls	r1, r2, #31
 800a186:	bf5c      	itt	pl
 800a188:	2201      	movpl	r2, #1
 800a18a:	601a      	strpl	r2, [r3, #0]
 800a18c:	4b20      	ldr	r3, [pc, #128]	; (800a210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	07d2      	lsls	r2, r2, #31
 800a192:	bf5c      	itt	pl
 800a194:	2201      	movpl	r2, #1
 800a196:	601a      	strpl	r2, [r3, #0]
 800a198:	4b1e      	ldr	r3, [pc, #120]	; (800a214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	07d0      	lsls	r0, r2, #31
 800a19e:	bf5c      	itt	pl
 800a1a0:	2201      	movpl	r2, #1
 800a1a2:	601a      	strpl	r2, [r3, #0]
 800a1a4:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	07d1      	lsls	r1, r2, #31
 800a1aa:	bf5c      	itt	pl
 800a1ac:	2201      	movpl	r2, #1
 800a1ae:	601a      	strpl	r2, [r3, #0]
 800a1b0:	4b1a      	ldr	r3, [pc, #104]	; (800a21c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	07d2      	lsls	r2, r2, #31
 800a1b6:	bf5c      	itt	pl
 800a1b8:	2201      	movpl	r2, #1
 800a1ba:	601a      	strpl	r2, [r3, #0]
 800a1bc:	4b18      	ldr	r3, [pc, #96]	; (800a220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	07d0      	lsls	r0, r2, #31
 800a1c2:	bf5c      	itt	pl
 800a1c4:	2201      	movpl	r2, #1
 800a1c6:	601a      	strpl	r2, [r3, #0]
 800a1c8:	4b16      	ldr	r3, [pc, #88]	; (800a224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	07d1      	lsls	r1, r2, #31
 800a1ce:	bf5c      	itt	pl
 800a1d0:	2201      	movpl	r2, #1
 800a1d2:	601a      	strpl	r2, [r3, #0]
 800a1d4:	4b14      	ldr	r3, [pc, #80]	; (800a228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	07d2      	lsls	r2, r2, #31
 800a1da:	bf5c      	itt	pl
 800a1dc:	2201      	movpl	r2, #1
 800a1de:	601a      	strpl	r2, [r3, #0]
 800a1e0:	4b12      	ldr	r3, [pc, #72]	; (800a22c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	07d0      	lsls	r0, r2, #31
 800a1e6:	bf5c      	itt	pl
 800a1e8:	2201      	movpl	r2, #1
 800a1ea:	601a      	strpl	r2, [r3, #0]
 800a1ec:	4b10      	ldr	r3, [pc, #64]	; (800a230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	07d1      	lsls	r1, r2, #31
 800a1f2:	bf5c      	itt	pl
 800a1f4:	2201      	movpl	r2, #1
 800a1f6:	601a      	strpl	r2, [r3, #0]
 800a1f8:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	07d2      	lsls	r2, r2, #31
 800a1fe:	bf5c      	itt	pl
 800a200:	2201      	movpl	r2, #1
 800a202:	601a      	strpl	r2, [r3, #0]
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	20000348 	.word	0x20000348
 800a20c:	20000344 	.word	0x20000344
 800a210:	20000340 	.word	0x20000340
 800a214:	2000033c 	.word	0x2000033c
 800a218:	20000338 	.word	0x20000338
 800a21c:	20000334 	.word	0x20000334
 800a220:	20000330 	.word	0x20000330
 800a224:	2000032c 	.word	0x2000032c
 800a228:	20000328 	.word	0x20000328
 800a22c:	20000324 	.word	0x20000324
 800a230:	20000320 	.word	0x20000320
 800a234:	2000031c 	.word	0x2000031c

0800a238 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800a238:	b580      	push	{r7, lr}
 800a23a:	b09c      	sub	sp, #112	; 0x70
 800a23c:	4606      	mov	r6, r0
 800a23e:	af00      	add	r7, sp, #0
 800a240:	460c      	mov	r4, r1
 800a242:	1ba4      	subs	r4, r4, r6
 800a244:	490e      	ldr	r1, [pc, #56]	; (800a280 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800a246:	2269      	movs	r2, #105	; 0x69
 800a248:	1d38      	adds	r0, r7, #4
 800a24a:	f000 f9d9 	bl	800a600 <memcpy>
 800a24e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800a252:	f023 0307 	bic.w	r3, r3, #7
 800a256:	ebad 0d03 	sub.w	sp, sp, r3
 800a25a:	466d      	mov	r5, sp
 800a25c:	2268      	movs	r2, #104	; 0x68
 800a25e:	1d39      	adds	r1, r7, #4
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f9cd 	bl	800a600 <memcpy>
 800a266:	4622      	mov	r2, r4
 800a268:	4631      	mov	r1, r6
 800a26a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800a26e:	442c      	add	r4, r5
 800a270:	f000 f9c6 	bl	800a600 <memcpy>
 800a274:	2300      	movs	r3, #0
 800a276:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800a27a:	4628      	mov	r0, r5
 800a27c:	f7ff ff57 	bl	800a12e <_ZSt19__throw_logic_errorPKc>
 800a280:	0800cc8b 	.word	0x0800cc8b

0800a284 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a288:	af00      	add	r7, sp, #0
 800a28a:	b084      	sub	sp, #16
 800a28c:	466d      	mov	r5, sp
 800a28e:	f105 040c 	add.w	r4, r5, #12
 800a292:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800a2d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800a296:	4623      	mov	r3, r4
 800a298:	f04f 0c0a 	mov.w	ip, #10
 800a29c:	fbb2 f6fc 	udiv	r6, r2, ip
 800a2a0:	fb0c 2e16 	mls	lr, ip, r6, r2
 800a2a4:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800a2a8:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800a2ac:	4696      	mov	lr, r2
 800a2ae:	f1be 0f09 	cmp.w	lr, #9
 800a2b2:	4632      	mov	r2, r6
 800a2b4:	d8f2      	bhi.n	800a29c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800a2b6:	1ae4      	subs	r4, r4, r3
 800a2b8:	428c      	cmp	r4, r1
 800a2ba:	d809      	bhi.n	800a2d0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800a2bc:	f1c4 030c 	rsb	r3, r4, #12
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	18e9      	adds	r1, r5, r3
 800a2c4:	f000 f99c 	bl	800a600 <memcpy>
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a2d4:	e7f8      	b.n	800a2c8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800a2d6:	bf00      	nop
 800a2d8:	0800ccf4 	.word	0x0800ccf4

0800a2dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800a2dc:	3901      	subs	r1, #1
 800a2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e2:	4607      	mov	r7, r0
 800a2e4:	4615      	mov	r5, r2
 800a2e6:	eb00 0801 	add.w	r8, r0, r1
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	782a      	ldrb	r2, [r5, #0]
 800a2ee:	b392      	cbz	r2, 800a356 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800a2f0:	4544      	cmp	r4, r8
 800a2f2:	d22a      	bcs.n	800a34a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800a2f4:	2a25      	cmp	r2, #37	; 0x25
 800a2f6:	d107      	bne.n	800a308 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800a2f8:	786a      	ldrb	r2, [r5, #1]
 800a2fa:	2a73      	cmp	r2, #115	; 0x73
 800a2fc:	d009      	beq.n	800a312 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800a2fe:	2a7a      	cmp	r2, #122	; 0x7a
 800a300:	d012      	beq.n	800a328 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800a302:	2a25      	cmp	r2, #37	; 0x25
 800a304:	d100      	bne.n	800a308 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800a306:	3501      	adds	r5, #1
 800a308:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a30c:	f804 2b01 	strb.w	r2, [r4], #1
 800a310:	e7ec      	b.n	800a2ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800a312:	f853 2b04 	ldr.w	r2, [r3], #4
 800a316:	3a01      	subs	r2, #1
 800a318:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a31c:	b1c9      	cbz	r1, 800a352 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800a31e:	4544      	cmp	r4, r8
 800a320:	d013      	beq.n	800a34a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800a322:	f804 1b01 	strb.w	r1, [r4], #1
 800a326:	e7f7      	b.n	800a318 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800a328:	78aa      	ldrb	r2, [r5, #2]
 800a32a:	2a75      	cmp	r2, #117	; 0x75
 800a32c:	d1ec      	bne.n	800a308 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800a32e:	461e      	mov	r6, r3
 800a330:	eba8 0104 	sub.w	r1, r8, r4
 800a334:	f856 2b04 	ldr.w	r2, [r6], #4
 800a338:	4620      	mov	r0, r4
 800a33a:	f7ff ffa3 	bl	800a284 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800a33e:	2800      	cmp	r0, #0
 800a340:	dd03      	ble.n	800a34a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800a342:	4404      	add	r4, r0
 800a344:	3503      	adds	r5, #3
 800a346:	4633      	mov	r3, r6
 800a348:	e7d0      	b.n	800a2ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7ff ff73 	bl	800a238 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800a352:	3502      	adds	r5, #2
 800a354:	e7ca      	b.n	800a2ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800a356:	7022      	strb	r2, [r4, #0]
 800a358:	1be0      	subs	r0, r4, r7
 800a35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a360 <_ZSt15get_new_handlerv>:
 800a360:	4b02      	ldr	r3, [pc, #8]	; (800a36c <_ZSt15get_new_handlerv+0xc>)
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	f3bf 8f5b 	dmb	ish
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	2000034c 	.word	0x2000034c

0800a370 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 800a370:	4800      	ldr	r0, [pc, #0]	; (800a374 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 800a372:	4770      	bx	lr
 800a374:	0800ccff 	.word	0x0800ccff

0800a378 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 800a378:	4800      	ldr	r0, [pc, #0]	; (800a37c <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 800a37a:	4770      	bx	lr
 800a37c:	0800d12a 	.word	0x0800d12a

0800a380 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 800a380:	2a74      	cmp	r2, #116	; 0x74
 800a382:	dc22      	bgt.n	800a3ca <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4a>
 800a384:	2a57      	cmp	r2, #87	; 0x57
 800a386:	dc0b      	bgt.n	800a3a0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x20>
 800a388:	2a4d      	cmp	r2, #77	; 0x4d
 800a38a:	dc28      	bgt.n	800a3de <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a38c:	2a3b      	cmp	r2, #59	; 0x3b
 800a38e:	dc0d      	bgt.n	800a3ac <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x2c>
 800a390:	2a24      	cmp	r2, #36	; 0x24
 800a392:	dc16      	bgt.n	800a3c2 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x42>
 800a394:	2a0f      	cmp	r2, #15
 800a396:	dc10      	bgt.n	800a3ba <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800a398:	1e53      	subs	r3, r2, #1
 800a39a:	2b0d      	cmp	r3, #13
 800a39c:	d81f      	bhi.n	800a3de <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a39e:	e00c      	b.n	800a3ba <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800a3a0:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4099      	lsls	r1, r3
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x64>)
 800a3aa:	e015      	b.n	800a3d8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x58>
 800a3ac:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	408b      	lsls	r3, r1
 800a3b4:	490c      	ldr	r1, [pc, #48]	; (800a3e8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x68>)
 800a3b6:	420b      	tst	r3, r1
 800a3b8:	d011      	beq.n	800a3de <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a3ba:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x6c>)
 800a3bc:	6002      	str	r2, [r0, #0]
 800a3be:	6043      	str	r3, [r0, #4]
 800a3c0:	4770      	bx	lr
 800a3c2:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	e7e8      	b.n	800a39c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 800a3ca:	f1a2 0376 	sub.w	r3, r2, #118	; 0x76
 800a3ce:	2b18      	cmp	r3, #24
 800a3d0:	d805      	bhi.n	800a3de <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	4099      	lsls	r1, r3
 800a3d6:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x70>)
 800a3d8:	400b      	ands	r3, r1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1ed      	bne.n	800a3ba <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x74>)
 800a3e0:	6002      	str	r2, [r0, #0]
 800a3e2:	e7ec      	b.n	800a3be <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3e>
 800a3e4:	1fbf009d 	.word	0x1fbf009d
 800a3e8:	0002088f 	.word	0x0002088f
 800a3ec:	20000020 	.word	0x20000020
 800a3f0:	01f107bf 	.word	0x01f107bf
 800a3f4:	2000001c 	.word	0x2000001c

0800a3f8 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 800a3f8:	e9c0 2100 	strd	r2, r1, [r0]
 800a3fc:	4770      	bx	lr

0800a3fe <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 800a3fe:	b513      	push	{r0, r1, r4, lr}
 800a400:	6803      	ldr	r3, [r0, #0]
 800a402:	4614      	mov	r4, r2
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	460a      	mov	r2, r1
 800a408:	4601      	mov	r1, r0
 800a40a:	4668      	mov	r0, sp
 800a40c:	4798      	blx	r3
 800a40e:	6863      	ldr	r3, [r4, #4]
 800a410:	9a01      	ldr	r2, [sp, #4]
 800a412:	429a      	cmp	r2, r3
 800a414:	d106      	bne.n	800a424 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x26>
 800a416:	9800      	ldr	r0, [sp, #0]
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	1ac3      	subs	r3, r0, r3
 800a41c:	4258      	negs	r0, r3
 800a41e:	4158      	adcs	r0, r3
 800a420:	b002      	add	sp, #8
 800a422:	bd10      	pop	{r4, pc}
 800a424:	2000      	movs	r0, #0
 800a426:	e7fb      	b.n	800a420 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x22>

0800a428 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 800a428:	684b      	ldr	r3, [r1, #4]
 800a42a:	4283      	cmp	r3, r0
 800a42c:	d104      	bne.n	800a438 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0x10>
 800a42e:	6808      	ldr	r0, [r1, #0]
 800a430:	1a83      	subs	r3, r0, r2
 800a432:	4258      	negs	r0, r3
 800a434:	4158      	adcs	r0, r3
 800a436:	4770      	bx	lr
 800a438:	2000      	movs	r0, #0
 800a43a:	4770      	bx	lr

0800a43c <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 800a43c:	4770      	bx	lr

0800a43e <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 800a43e:	4770      	bx	lr

0800a440 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 800a440:	b510      	push	{r4, lr}
 800a442:	4604      	mov	r4, r0
 800a444:	f7ff fcb6 	bl	8009db4 <_ZdlPv>
 800a448:	4620      	mov	r0, r4
 800a44a:	bd10      	pop	{r4, pc}

0800a44c <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	f7ff fcb0 	bl	8009db4 <_ZdlPv>
 800a454:	4620      	mov	r0, r4
 800a456:	bd10      	pop	{r4, pc}

0800a458 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 800a458:	b513      	push	{r0, r1, r4, lr}
 800a45a:	4604      	mov	r4, r0
 800a45c:	4610      	mov	r0, r2
 800a45e:	f000 ffb5 	bl	800b3cc <strerror>
 800a462:	aa01      	add	r2, sp, #4
 800a464:	4601      	mov	r1, r0
 800a466:	4620      	mov	r0, r4
 800a468:	f7ff fbb8 	bl	8009bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a46c:	4620      	mov	r0, r4
 800a46e:	b002      	add	sp, #8
 800a470:	bd10      	pop	{r4, pc}

0800a472 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 800a472:	b510      	push	{r4, lr}
 800a474:	680b      	ldr	r3, [r1, #0]
 800a476:	b086      	sub	sp, #24
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	4604      	mov	r4, r0
 800a47c:	4668      	mov	r0, sp
 800a47e:	4798      	blx	r3
 800a480:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a484:	4620      	mov	r0, r4
 800a486:	f000 f824 	bl	800a4d2 <_ZNSt12__cow_stringC1EPKcj>
 800a48a:	4668      	mov	r0, sp
 800a48c:	f7ff f9e0 	bl	8009850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a490:	4620      	mov	r0, r4
 800a492:	b006      	add	sp, #24
 800a494:	bd10      	pop	{r4, pc}
	...

0800a498 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 800a498:	b508      	push	{r3, lr}
 800a49a:	4a06      	ldr	r2, [pc, #24]	; (800a4b4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 800a49c:	4906      	ldr	r1, [pc, #24]	; (800a4b8 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 800a49e:	4807      	ldr	r0, [pc, #28]	; (800a4bc <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 800a4a0:	f000 f812 	bl	800a4c8 <__aeabi_atexit>
 800a4a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4a8:	4a02      	ldr	r2, [pc, #8]	; (800a4b4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 800a4aa:	4905      	ldr	r1, [pc, #20]	; (800a4c0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 800a4ac:	4805      	ldr	r0, [pc, #20]	; (800a4c4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 800a4ae:	f000 b80b 	b.w	800a4c8 <__aeabi_atexit>
 800a4b2:	bf00      	nop
 800a4b4:	20000000 	.word	0x20000000
 800a4b8:	0800a43f 	.word	0x0800a43f
 800a4bc:	20000020 	.word	0x20000020
 800a4c0:	0800a43d 	.word	0x0800a43d
 800a4c4:	2000001c 	.word	0x2000001c

0800a4c8 <__aeabi_atexit>:
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 b82d 	b.w	800a52c <__cxa_atexit>

0800a4d2 <_ZNSt12__cow_stringC1EPKcj>:
 800a4d2:	b513      	push	{r0, r1, r4, lr}
 800a4d4:	ab01      	add	r3, sp, #4
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	f7ff fd94 	bl	800a004 <_ZNSsC1EPKcjRKSaIcE>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	b002      	add	sp, #8
 800a4e0:	bd10      	pop	{r4, pc}

0800a4e2 <abort>:
 800a4e2:	b508      	push	{r3, lr}
 800a4e4:	2006      	movs	r0, #6
 800a4e6:	f000 fcd9 	bl	800ae9c <raise>
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	f7f6 f9d1 	bl	8000892 <_exit>

0800a4f0 <__assert_func>:
 800a4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4f2:	4614      	mov	r4, r2
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	4b09      	ldr	r3, [pc, #36]	; (800a51c <__assert_func+0x2c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	68d8      	ldr	r0, [r3, #12]
 800a4fe:	b14c      	cbz	r4, 800a514 <__assert_func+0x24>
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <__assert_func+0x30>)
 800a502:	9100      	str	r1, [sp, #0]
 800a504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a508:	4906      	ldr	r1, [pc, #24]	; (800a524 <__assert_func+0x34>)
 800a50a:	462b      	mov	r3, r5
 800a50c:	f000 f822 	bl	800a554 <fiprintf>
 800a510:	f7ff ffe7 	bl	800a4e2 <abort>
 800a514:	4b04      	ldr	r3, [pc, #16]	; (800a528 <__assert_func+0x38>)
 800a516:	461c      	mov	r4, r3
 800a518:	e7f3      	b.n	800a502 <__assert_func+0x12>
 800a51a:	bf00      	nop
 800a51c:	20000024 	.word	0x20000024
 800a520:	0800cde4 	.word	0x0800cde4
 800a524:	0800cdf1 	.word	0x0800cdf1
 800a528:	0800ce1f 	.word	0x0800ce1f

0800a52c <__cxa_atexit>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	4c05      	ldr	r4, [pc, #20]	; (800a544 <__cxa_atexit+0x18>)
 800a530:	4613      	mov	r3, r2
 800a532:	b12c      	cbz	r4, 800a540 <__cxa_atexit+0x14>
 800a534:	460a      	mov	r2, r1
 800a536:	4601      	mov	r1, r0
 800a538:	2002      	movs	r0, #2
 800a53a:	f3af 8000 	nop.w
 800a53e:	bd10      	pop	{r4, pc}
 800a540:	4620      	mov	r0, r4
 800a542:	e7fc      	b.n	800a53e <__cxa_atexit+0x12>
 800a544:	00000000 	.word	0x00000000

0800a548 <__errno>:
 800a548:	4b01      	ldr	r3, [pc, #4]	; (800a550 <__errno+0x8>)
 800a54a:	6818      	ldr	r0, [r3, #0]
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000024 	.word	0x20000024

0800a554 <fiprintf>:
 800a554:	b40e      	push	{r1, r2, r3}
 800a556:	b503      	push	{r0, r1, lr}
 800a558:	4601      	mov	r1, r0
 800a55a:	ab03      	add	r3, sp, #12
 800a55c:	4805      	ldr	r0, [pc, #20]	; (800a574 <fiprintf+0x20>)
 800a55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a562:	6800      	ldr	r0, [r0, #0]
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	f000 f985 	bl	800a874 <_vfiprintf_r>
 800a56a:	b002      	add	sp, #8
 800a56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a570:	b003      	add	sp, #12
 800a572:	4770      	bx	lr
 800a574:	20000024 	.word	0x20000024

0800a578 <__libc_init_array>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4d0d      	ldr	r5, [pc, #52]	; (800a5b0 <__libc_init_array+0x38>)
 800a57c:	4c0d      	ldr	r4, [pc, #52]	; (800a5b4 <__libc_init_array+0x3c>)
 800a57e:	1b64      	subs	r4, r4, r5
 800a580:	10a4      	asrs	r4, r4, #2
 800a582:	2600      	movs	r6, #0
 800a584:	42a6      	cmp	r6, r4
 800a586:	d109      	bne.n	800a59c <__libc_init_array+0x24>
 800a588:	4d0b      	ldr	r5, [pc, #44]	; (800a5b8 <__libc_init_array+0x40>)
 800a58a:	4c0c      	ldr	r4, [pc, #48]	; (800a5bc <__libc_init_array+0x44>)
 800a58c:	f001 fc20 	bl	800bdd0 <_init>
 800a590:	1b64      	subs	r4, r4, r5
 800a592:	10a4      	asrs	r4, r4, #2
 800a594:	2600      	movs	r6, #0
 800a596:	42a6      	cmp	r6, r4
 800a598:	d105      	bne.n	800a5a6 <__libc_init_array+0x2e>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a0:	4798      	blx	r3
 800a5a2:	3601      	adds	r6, #1
 800a5a4:	e7ee      	b.n	800a584 <__libc_init_array+0xc>
 800a5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5aa:	4798      	blx	r3
 800a5ac:	3601      	adds	r6, #1
 800a5ae:	e7f2      	b.n	800a596 <__libc_init_array+0x1e>
 800a5b0:	0800d558 	.word	0x0800d558
 800a5b4:	0800d558 	.word	0x0800d558
 800a5b8:	0800d558 	.word	0x0800d558
 800a5bc:	0800d57c 	.word	0x0800d57c

0800a5c0 <malloc>:
 800a5c0:	4b02      	ldr	r3, [pc, #8]	; (800a5cc <malloc+0xc>)
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	6818      	ldr	r0, [r3, #0]
 800a5c6:	f000 b8b7 	b.w	800a738 <_malloc_r>
 800a5ca:	bf00      	nop
 800a5cc:	20000024 	.word	0x20000024

0800a5d0 <free>:
 800a5d0:	4b02      	ldr	r3, [pc, #8]	; (800a5dc <free+0xc>)
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	f000 b843 	b.w	800a660 <_free_r>
 800a5da:	bf00      	nop
 800a5dc:	20000024 	.word	0x20000024

0800a5e0 <memcmp>:
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	3901      	subs	r1, #1
 800a5e4:	4402      	add	r2, r0
 800a5e6:	4290      	cmp	r0, r2
 800a5e8:	d101      	bne.n	800a5ee <memcmp+0xe>
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	e005      	b.n	800a5fa <memcmp+0x1a>
 800a5ee:	7803      	ldrb	r3, [r0, #0]
 800a5f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	d001      	beq.n	800a5fc <memcmp+0x1c>
 800a5f8:	1b18      	subs	r0, r3, r4
 800a5fa:	bd10      	pop	{r4, pc}
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	e7f2      	b.n	800a5e6 <memcmp+0x6>

0800a600 <memcpy>:
 800a600:	440a      	add	r2, r1
 800a602:	4291      	cmp	r1, r2
 800a604:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a608:	d100      	bne.n	800a60c <memcpy+0xc>
 800a60a:	4770      	bx	lr
 800a60c:	b510      	push	{r4, lr}
 800a60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a616:	4291      	cmp	r1, r2
 800a618:	d1f9      	bne.n	800a60e <memcpy+0xe>
 800a61a:	bd10      	pop	{r4, pc}

0800a61c <memmove>:
 800a61c:	4288      	cmp	r0, r1
 800a61e:	b510      	push	{r4, lr}
 800a620:	eb01 0402 	add.w	r4, r1, r2
 800a624:	d902      	bls.n	800a62c <memmove+0x10>
 800a626:	4284      	cmp	r4, r0
 800a628:	4623      	mov	r3, r4
 800a62a:	d807      	bhi.n	800a63c <memmove+0x20>
 800a62c:	1e43      	subs	r3, r0, #1
 800a62e:	42a1      	cmp	r1, r4
 800a630:	d008      	beq.n	800a644 <memmove+0x28>
 800a632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a63a:	e7f8      	b.n	800a62e <memmove+0x12>
 800a63c:	4402      	add	r2, r0
 800a63e:	4601      	mov	r1, r0
 800a640:	428a      	cmp	r2, r1
 800a642:	d100      	bne.n	800a646 <memmove+0x2a>
 800a644:	bd10      	pop	{r4, pc}
 800a646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a64e:	e7f7      	b.n	800a640 <memmove+0x24>

0800a650 <memset>:
 800a650:	4402      	add	r2, r0
 800a652:	4603      	mov	r3, r0
 800a654:	4293      	cmp	r3, r2
 800a656:	d100      	bne.n	800a65a <memset+0xa>
 800a658:	4770      	bx	lr
 800a65a:	f803 1b01 	strb.w	r1, [r3], #1
 800a65e:	e7f9      	b.n	800a654 <memset+0x4>

0800a660 <_free_r>:
 800a660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a662:	2900      	cmp	r1, #0
 800a664:	d044      	beq.n	800a6f0 <_free_r+0x90>
 800a666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a66a:	9001      	str	r0, [sp, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f1a1 0404 	sub.w	r4, r1, #4
 800a672:	bfb8      	it	lt
 800a674:	18e4      	addlt	r4, r4, r3
 800a676:	f001 f9d9 	bl	800ba2c <__malloc_lock>
 800a67a:	4a1e      	ldr	r2, [pc, #120]	; (800a6f4 <_free_r+0x94>)
 800a67c:	9801      	ldr	r0, [sp, #4]
 800a67e:	6813      	ldr	r3, [r2, #0]
 800a680:	b933      	cbnz	r3, 800a690 <_free_r+0x30>
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	6014      	str	r4, [r2, #0]
 800a686:	b003      	add	sp, #12
 800a688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a68c:	f001 b9d4 	b.w	800ba38 <__malloc_unlock>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d908      	bls.n	800a6a6 <_free_r+0x46>
 800a694:	6825      	ldr	r5, [r4, #0]
 800a696:	1961      	adds	r1, r4, r5
 800a698:	428b      	cmp	r3, r1
 800a69a:	bf01      	itttt	eq
 800a69c:	6819      	ldreq	r1, [r3, #0]
 800a69e:	685b      	ldreq	r3, [r3, #4]
 800a6a0:	1949      	addeq	r1, r1, r5
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	e7ed      	b.n	800a682 <_free_r+0x22>
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b10b      	cbz	r3, 800a6b0 <_free_r+0x50>
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d9fa      	bls.n	800a6a6 <_free_r+0x46>
 800a6b0:	6811      	ldr	r1, [r2, #0]
 800a6b2:	1855      	adds	r5, r2, r1
 800a6b4:	42a5      	cmp	r5, r4
 800a6b6:	d10b      	bne.n	800a6d0 <_free_r+0x70>
 800a6b8:	6824      	ldr	r4, [r4, #0]
 800a6ba:	4421      	add	r1, r4
 800a6bc:	1854      	adds	r4, r2, r1
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	6011      	str	r1, [r2, #0]
 800a6c2:	d1e0      	bne.n	800a686 <_free_r+0x26>
 800a6c4:	681c      	ldr	r4, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	6053      	str	r3, [r2, #4]
 800a6ca:	4421      	add	r1, r4
 800a6cc:	6011      	str	r1, [r2, #0]
 800a6ce:	e7da      	b.n	800a686 <_free_r+0x26>
 800a6d0:	d902      	bls.n	800a6d8 <_free_r+0x78>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	e7d6      	b.n	800a686 <_free_r+0x26>
 800a6d8:	6825      	ldr	r5, [r4, #0]
 800a6da:	1961      	adds	r1, r4, r5
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	bf04      	itt	eq
 800a6e0:	6819      	ldreq	r1, [r3, #0]
 800a6e2:	685b      	ldreq	r3, [r3, #4]
 800a6e4:	6063      	str	r3, [r4, #4]
 800a6e6:	bf04      	itt	eq
 800a6e8:	1949      	addeq	r1, r1, r5
 800a6ea:	6021      	streq	r1, [r4, #0]
 800a6ec:	6054      	str	r4, [r2, #4]
 800a6ee:	e7ca      	b.n	800a686 <_free_r+0x26>
 800a6f0:	b003      	add	sp, #12
 800a6f2:	bd30      	pop	{r4, r5, pc}
 800a6f4:	20000350 	.word	0x20000350

0800a6f8 <sbrk_aligned>:
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	4e0e      	ldr	r6, [pc, #56]	; (800a734 <sbrk_aligned+0x3c>)
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	6831      	ldr	r1, [r6, #0]
 800a700:	4605      	mov	r5, r0
 800a702:	b911      	cbnz	r1, 800a70a <sbrk_aligned+0x12>
 800a704:	f000 fb92 	bl	800ae2c <_sbrk_r>
 800a708:	6030      	str	r0, [r6, #0]
 800a70a:	4621      	mov	r1, r4
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 fb8d 	bl	800ae2c <_sbrk_r>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d00a      	beq.n	800a72c <sbrk_aligned+0x34>
 800a716:	1cc4      	adds	r4, r0, #3
 800a718:	f024 0403 	bic.w	r4, r4, #3
 800a71c:	42a0      	cmp	r0, r4
 800a71e:	d007      	beq.n	800a730 <sbrk_aligned+0x38>
 800a720:	1a21      	subs	r1, r4, r0
 800a722:	4628      	mov	r0, r5
 800a724:	f000 fb82 	bl	800ae2c <_sbrk_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	d101      	bne.n	800a730 <sbrk_aligned+0x38>
 800a72c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a730:	4620      	mov	r0, r4
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	20000354 	.word	0x20000354

0800a738 <_malloc_r>:
 800a738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73c:	1ccd      	adds	r5, r1, #3
 800a73e:	f025 0503 	bic.w	r5, r5, #3
 800a742:	3508      	adds	r5, #8
 800a744:	2d0c      	cmp	r5, #12
 800a746:	bf38      	it	cc
 800a748:	250c      	movcc	r5, #12
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	4607      	mov	r7, r0
 800a74e:	db01      	blt.n	800a754 <_malloc_r+0x1c>
 800a750:	42a9      	cmp	r1, r5
 800a752:	d905      	bls.n	800a760 <_malloc_r+0x28>
 800a754:	230c      	movs	r3, #12
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	2600      	movs	r6, #0
 800a75a:	4630      	mov	r0, r6
 800a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a760:	4e2e      	ldr	r6, [pc, #184]	; (800a81c <_malloc_r+0xe4>)
 800a762:	f001 f963 	bl	800ba2c <__malloc_lock>
 800a766:	6833      	ldr	r3, [r6, #0]
 800a768:	461c      	mov	r4, r3
 800a76a:	bb34      	cbnz	r4, 800a7ba <_malloc_r+0x82>
 800a76c:	4629      	mov	r1, r5
 800a76e:	4638      	mov	r0, r7
 800a770:	f7ff ffc2 	bl	800a6f8 <sbrk_aligned>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	4604      	mov	r4, r0
 800a778:	d14d      	bne.n	800a816 <_malloc_r+0xde>
 800a77a:	6834      	ldr	r4, [r6, #0]
 800a77c:	4626      	mov	r6, r4
 800a77e:	2e00      	cmp	r6, #0
 800a780:	d140      	bne.n	800a804 <_malloc_r+0xcc>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	4631      	mov	r1, r6
 800a786:	4638      	mov	r0, r7
 800a788:	eb04 0803 	add.w	r8, r4, r3
 800a78c:	f000 fb4e 	bl	800ae2c <_sbrk_r>
 800a790:	4580      	cmp	r8, r0
 800a792:	d13a      	bne.n	800a80a <_malloc_r+0xd2>
 800a794:	6821      	ldr	r1, [r4, #0]
 800a796:	3503      	adds	r5, #3
 800a798:	1a6d      	subs	r5, r5, r1
 800a79a:	f025 0503 	bic.w	r5, r5, #3
 800a79e:	3508      	adds	r5, #8
 800a7a0:	2d0c      	cmp	r5, #12
 800a7a2:	bf38      	it	cc
 800a7a4:	250c      	movcc	r5, #12
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f7ff ffa5 	bl	800a6f8 <sbrk_aligned>
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d02b      	beq.n	800a80a <_malloc_r+0xd2>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	442b      	add	r3, r5
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	e00e      	b.n	800a7d8 <_malloc_r+0xa0>
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	1b52      	subs	r2, r2, r5
 800a7be:	d41e      	bmi.n	800a7fe <_malloc_r+0xc6>
 800a7c0:	2a0b      	cmp	r2, #11
 800a7c2:	d916      	bls.n	800a7f2 <_malloc_r+0xba>
 800a7c4:	1961      	adds	r1, r4, r5
 800a7c6:	42a3      	cmp	r3, r4
 800a7c8:	6025      	str	r5, [r4, #0]
 800a7ca:	bf18      	it	ne
 800a7cc:	6059      	strne	r1, [r3, #4]
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	bf08      	it	eq
 800a7d2:	6031      	streq	r1, [r6, #0]
 800a7d4:	5162      	str	r2, [r4, r5]
 800a7d6:	604b      	str	r3, [r1, #4]
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f104 060b 	add.w	r6, r4, #11
 800a7de:	f001 f92b 	bl	800ba38 <__malloc_unlock>
 800a7e2:	f026 0607 	bic.w	r6, r6, #7
 800a7e6:	1d23      	adds	r3, r4, #4
 800a7e8:	1af2      	subs	r2, r6, r3
 800a7ea:	d0b6      	beq.n	800a75a <_malloc_r+0x22>
 800a7ec:	1b9b      	subs	r3, r3, r6
 800a7ee:	50a3      	str	r3, [r4, r2]
 800a7f0:	e7b3      	b.n	800a75a <_malloc_r+0x22>
 800a7f2:	6862      	ldr	r2, [r4, #4]
 800a7f4:	42a3      	cmp	r3, r4
 800a7f6:	bf0c      	ite	eq
 800a7f8:	6032      	streq	r2, [r6, #0]
 800a7fa:	605a      	strne	r2, [r3, #4]
 800a7fc:	e7ec      	b.n	800a7d8 <_malloc_r+0xa0>
 800a7fe:	4623      	mov	r3, r4
 800a800:	6864      	ldr	r4, [r4, #4]
 800a802:	e7b2      	b.n	800a76a <_malloc_r+0x32>
 800a804:	4634      	mov	r4, r6
 800a806:	6876      	ldr	r6, [r6, #4]
 800a808:	e7b9      	b.n	800a77e <_malloc_r+0x46>
 800a80a:	230c      	movs	r3, #12
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	4638      	mov	r0, r7
 800a810:	f001 f912 	bl	800ba38 <__malloc_unlock>
 800a814:	e7a1      	b.n	800a75a <_malloc_r+0x22>
 800a816:	6025      	str	r5, [r4, #0]
 800a818:	e7de      	b.n	800a7d8 <_malloc_r+0xa0>
 800a81a:	bf00      	nop
 800a81c:	20000350 	.word	0x20000350

0800a820 <__sfputc_r>:
 800a820:	6893      	ldr	r3, [r2, #8]
 800a822:	3b01      	subs	r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	b410      	push	{r4}
 800a828:	6093      	str	r3, [r2, #8]
 800a82a:	da08      	bge.n	800a83e <__sfputc_r+0x1e>
 800a82c:	6994      	ldr	r4, [r2, #24]
 800a82e:	42a3      	cmp	r3, r4
 800a830:	db01      	blt.n	800a836 <__sfputc_r+0x16>
 800a832:	290a      	cmp	r1, #10
 800a834:	d103      	bne.n	800a83e <__sfputc_r+0x1e>
 800a836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a83a:	f000 bde3 	b.w	800b404 <__swbuf_r>
 800a83e:	6813      	ldr	r3, [r2, #0]
 800a840:	1c58      	adds	r0, r3, #1
 800a842:	6010      	str	r0, [r2, #0]
 800a844:	7019      	strb	r1, [r3, #0]
 800a846:	4608      	mov	r0, r1
 800a848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <__sfputs_r>:
 800a84e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a850:	4606      	mov	r6, r0
 800a852:	460f      	mov	r7, r1
 800a854:	4614      	mov	r4, r2
 800a856:	18d5      	adds	r5, r2, r3
 800a858:	42ac      	cmp	r4, r5
 800a85a:	d101      	bne.n	800a860 <__sfputs_r+0x12>
 800a85c:	2000      	movs	r0, #0
 800a85e:	e007      	b.n	800a870 <__sfputs_r+0x22>
 800a860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a864:	463a      	mov	r2, r7
 800a866:	4630      	mov	r0, r6
 800a868:	f7ff ffda 	bl	800a820 <__sfputc_r>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d1f3      	bne.n	800a858 <__sfputs_r+0xa>
 800a870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a874 <_vfiprintf_r>:
 800a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	460d      	mov	r5, r1
 800a87a:	b09d      	sub	sp, #116	; 0x74
 800a87c:	4614      	mov	r4, r2
 800a87e:	4698      	mov	r8, r3
 800a880:	4606      	mov	r6, r0
 800a882:	b118      	cbz	r0, 800a88c <_vfiprintf_r+0x18>
 800a884:	6983      	ldr	r3, [r0, #24]
 800a886:	b90b      	cbnz	r3, 800a88c <_vfiprintf_r+0x18>
 800a888:	f000 ffb8 	bl	800b7fc <__sinit>
 800a88c:	4b89      	ldr	r3, [pc, #548]	; (800aab4 <_vfiprintf_r+0x240>)
 800a88e:	429d      	cmp	r5, r3
 800a890:	d11b      	bne.n	800a8ca <_vfiprintf_r+0x56>
 800a892:	6875      	ldr	r5, [r6, #4]
 800a894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a896:	07d9      	lsls	r1, r3, #31
 800a898:	d405      	bmi.n	800a8a6 <_vfiprintf_r+0x32>
 800a89a:	89ab      	ldrh	r3, [r5, #12]
 800a89c:	059a      	lsls	r2, r3, #22
 800a89e:	d402      	bmi.n	800a8a6 <_vfiprintf_r+0x32>
 800a8a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8a2:	f001 f849 	bl	800b938 <__retarget_lock_acquire_recursive>
 800a8a6:	89ab      	ldrh	r3, [r5, #12]
 800a8a8:	071b      	lsls	r3, r3, #28
 800a8aa:	d501      	bpl.n	800a8b0 <_vfiprintf_r+0x3c>
 800a8ac:	692b      	ldr	r3, [r5, #16]
 800a8ae:	b9eb      	cbnz	r3, 800a8ec <_vfiprintf_r+0x78>
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f000 fe0a 	bl	800b4cc <__swsetup_r>
 800a8b8:	b1c0      	cbz	r0, 800a8ec <_vfiprintf_r+0x78>
 800a8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8bc:	07dc      	lsls	r4, r3, #31
 800a8be:	d50e      	bpl.n	800a8de <_vfiprintf_r+0x6a>
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c4:	b01d      	add	sp, #116	; 0x74
 800a8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ca:	4b7b      	ldr	r3, [pc, #492]	; (800aab8 <_vfiprintf_r+0x244>)
 800a8cc:	429d      	cmp	r5, r3
 800a8ce:	d101      	bne.n	800a8d4 <_vfiprintf_r+0x60>
 800a8d0:	68b5      	ldr	r5, [r6, #8]
 800a8d2:	e7df      	b.n	800a894 <_vfiprintf_r+0x20>
 800a8d4:	4b79      	ldr	r3, [pc, #484]	; (800aabc <_vfiprintf_r+0x248>)
 800a8d6:	429d      	cmp	r5, r3
 800a8d8:	bf08      	it	eq
 800a8da:	68f5      	ldreq	r5, [r6, #12]
 800a8dc:	e7da      	b.n	800a894 <_vfiprintf_r+0x20>
 800a8de:	89ab      	ldrh	r3, [r5, #12]
 800a8e0:	0598      	lsls	r0, r3, #22
 800a8e2:	d4ed      	bmi.n	800a8c0 <_vfiprintf_r+0x4c>
 800a8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8e6:	f001 f828 	bl	800b93a <__retarget_lock_release_recursive>
 800a8ea:	e7e9      	b.n	800a8c0 <_vfiprintf_r+0x4c>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8fa:	2330      	movs	r3, #48	; 0x30
 800a8fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aac0 <_vfiprintf_r+0x24c>
 800a900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a904:	f04f 0901 	mov.w	r9, #1
 800a908:	4623      	mov	r3, r4
 800a90a:	469a      	mov	sl, r3
 800a90c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a910:	b10a      	cbz	r2, 800a916 <_vfiprintf_r+0xa2>
 800a912:	2a25      	cmp	r2, #37	; 0x25
 800a914:	d1f9      	bne.n	800a90a <_vfiprintf_r+0x96>
 800a916:	ebba 0b04 	subs.w	fp, sl, r4
 800a91a:	d00b      	beq.n	800a934 <_vfiprintf_r+0xc0>
 800a91c:	465b      	mov	r3, fp
 800a91e:	4622      	mov	r2, r4
 800a920:	4629      	mov	r1, r5
 800a922:	4630      	mov	r0, r6
 800a924:	f7ff ff93 	bl	800a84e <__sfputs_r>
 800a928:	3001      	adds	r0, #1
 800a92a:	f000 80aa 	beq.w	800aa82 <_vfiprintf_r+0x20e>
 800a92e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a930:	445a      	add	r2, fp
 800a932:	9209      	str	r2, [sp, #36]	; 0x24
 800a934:	f89a 3000 	ldrb.w	r3, [sl]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 80a2 	beq.w	800aa82 <_vfiprintf_r+0x20e>
 800a93e:	2300      	movs	r3, #0
 800a940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a948:	f10a 0a01 	add.w	sl, sl, #1
 800a94c:	9304      	str	r3, [sp, #16]
 800a94e:	9307      	str	r3, [sp, #28]
 800a950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a954:	931a      	str	r3, [sp, #104]	; 0x68
 800a956:	4654      	mov	r4, sl
 800a958:	2205      	movs	r2, #5
 800a95a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a95e:	4858      	ldr	r0, [pc, #352]	; (800aac0 <_vfiprintf_r+0x24c>)
 800a960:	f7f5 fc46 	bl	80001f0 <memchr>
 800a964:	9a04      	ldr	r2, [sp, #16]
 800a966:	b9d8      	cbnz	r0, 800a9a0 <_vfiprintf_r+0x12c>
 800a968:	06d1      	lsls	r1, r2, #27
 800a96a:	bf44      	itt	mi
 800a96c:	2320      	movmi	r3, #32
 800a96e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a972:	0713      	lsls	r3, r2, #28
 800a974:	bf44      	itt	mi
 800a976:	232b      	movmi	r3, #43	; 0x2b
 800a978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a97c:	f89a 3000 	ldrb.w	r3, [sl]
 800a980:	2b2a      	cmp	r3, #42	; 0x2a
 800a982:	d015      	beq.n	800a9b0 <_vfiprintf_r+0x13c>
 800a984:	9a07      	ldr	r2, [sp, #28]
 800a986:	4654      	mov	r4, sl
 800a988:	2000      	movs	r0, #0
 800a98a:	f04f 0c0a 	mov.w	ip, #10
 800a98e:	4621      	mov	r1, r4
 800a990:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a994:	3b30      	subs	r3, #48	; 0x30
 800a996:	2b09      	cmp	r3, #9
 800a998:	d94e      	bls.n	800aa38 <_vfiprintf_r+0x1c4>
 800a99a:	b1b0      	cbz	r0, 800a9ca <_vfiprintf_r+0x156>
 800a99c:	9207      	str	r2, [sp, #28]
 800a99e:	e014      	b.n	800a9ca <_vfiprintf_r+0x156>
 800a9a0:	eba0 0308 	sub.w	r3, r0, r8
 800a9a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	9304      	str	r3, [sp, #16]
 800a9ac:	46a2      	mov	sl, r4
 800a9ae:	e7d2      	b.n	800a956 <_vfiprintf_r+0xe2>
 800a9b0:	9b03      	ldr	r3, [sp, #12]
 800a9b2:	1d19      	adds	r1, r3, #4
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	9103      	str	r1, [sp, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bfbb      	ittet	lt
 800a9bc:	425b      	neglt	r3, r3
 800a9be:	f042 0202 	orrlt.w	r2, r2, #2
 800a9c2:	9307      	strge	r3, [sp, #28]
 800a9c4:	9307      	strlt	r3, [sp, #28]
 800a9c6:	bfb8      	it	lt
 800a9c8:	9204      	strlt	r2, [sp, #16]
 800a9ca:	7823      	ldrb	r3, [r4, #0]
 800a9cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a9ce:	d10c      	bne.n	800a9ea <_vfiprintf_r+0x176>
 800a9d0:	7863      	ldrb	r3, [r4, #1]
 800a9d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a9d4:	d135      	bne.n	800aa42 <_vfiprintf_r+0x1ce>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	1d1a      	adds	r2, r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	9203      	str	r2, [sp, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bfb8      	it	lt
 800a9e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a9e6:	3402      	adds	r4, #2
 800a9e8:	9305      	str	r3, [sp, #20]
 800a9ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aad0 <_vfiprintf_r+0x25c>
 800a9ee:	7821      	ldrb	r1, [r4, #0]
 800a9f0:	2203      	movs	r2, #3
 800a9f2:	4650      	mov	r0, sl
 800a9f4:	f7f5 fbfc 	bl	80001f0 <memchr>
 800a9f8:	b140      	cbz	r0, 800aa0c <_vfiprintf_r+0x198>
 800a9fa:	2340      	movs	r3, #64	; 0x40
 800a9fc:	eba0 000a 	sub.w	r0, r0, sl
 800aa00:	fa03 f000 	lsl.w	r0, r3, r0
 800aa04:	9b04      	ldr	r3, [sp, #16]
 800aa06:	4303      	orrs	r3, r0
 800aa08:	3401      	adds	r4, #1
 800aa0a:	9304      	str	r3, [sp, #16]
 800aa0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa10:	482c      	ldr	r0, [pc, #176]	; (800aac4 <_vfiprintf_r+0x250>)
 800aa12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa16:	2206      	movs	r2, #6
 800aa18:	f7f5 fbea 	bl	80001f0 <memchr>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d03f      	beq.n	800aaa0 <_vfiprintf_r+0x22c>
 800aa20:	4b29      	ldr	r3, [pc, #164]	; (800aac8 <_vfiprintf_r+0x254>)
 800aa22:	bb1b      	cbnz	r3, 800aa6c <_vfiprintf_r+0x1f8>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	3307      	adds	r3, #7
 800aa28:	f023 0307 	bic.w	r3, r3, #7
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	9303      	str	r3, [sp, #12]
 800aa30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa32:	443b      	add	r3, r7
 800aa34:	9309      	str	r3, [sp, #36]	; 0x24
 800aa36:	e767      	b.n	800a908 <_vfiprintf_r+0x94>
 800aa38:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	2001      	movs	r0, #1
 800aa40:	e7a5      	b.n	800a98e <_vfiprintf_r+0x11a>
 800aa42:	2300      	movs	r3, #0
 800aa44:	3401      	adds	r4, #1
 800aa46:	9305      	str	r3, [sp, #20]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f04f 0c0a 	mov.w	ip, #10
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa54:	3a30      	subs	r2, #48	; 0x30
 800aa56:	2a09      	cmp	r2, #9
 800aa58:	d903      	bls.n	800aa62 <_vfiprintf_r+0x1ee>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d0c5      	beq.n	800a9ea <_vfiprintf_r+0x176>
 800aa5e:	9105      	str	r1, [sp, #20]
 800aa60:	e7c3      	b.n	800a9ea <_vfiprintf_r+0x176>
 800aa62:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa66:	4604      	mov	r4, r0
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e7f0      	b.n	800aa4e <_vfiprintf_r+0x1da>
 800aa6c:	ab03      	add	r3, sp, #12
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	462a      	mov	r2, r5
 800aa72:	4b16      	ldr	r3, [pc, #88]	; (800aacc <_vfiprintf_r+0x258>)
 800aa74:	a904      	add	r1, sp, #16
 800aa76:	4630      	mov	r0, r6
 800aa78:	f3af 8000 	nop.w
 800aa7c:	4607      	mov	r7, r0
 800aa7e:	1c78      	adds	r0, r7, #1
 800aa80:	d1d6      	bne.n	800aa30 <_vfiprintf_r+0x1bc>
 800aa82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa84:	07d9      	lsls	r1, r3, #31
 800aa86:	d405      	bmi.n	800aa94 <_vfiprintf_r+0x220>
 800aa88:	89ab      	ldrh	r3, [r5, #12]
 800aa8a:	059a      	lsls	r2, r3, #22
 800aa8c:	d402      	bmi.n	800aa94 <_vfiprintf_r+0x220>
 800aa8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa90:	f000 ff53 	bl	800b93a <__retarget_lock_release_recursive>
 800aa94:	89ab      	ldrh	r3, [r5, #12]
 800aa96:	065b      	lsls	r3, r3, #25
 800aa98:	f53f af12 	bmi.w	800a8c0 <_vfiprintf_r+0x4c>
 800aa9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa9e:	e711      	b.n	800a8c4 <_vfiprintf_r+0x50>
 800aaa0:	ab03      	add	r3, sp, #12
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4b09      	ldr	r3, [pc, #36]	; (800aacc <_vfiprintf_r+0x258>)
 800aaa8:	a904      	add	r1, sp, #16
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f000 f880 	bl	800abb0 <_printf_i>
 800aab0:	e7e4      	b.n	800aa7c <_vfiprintf_r+0x208>
 800aab2:	bf00      	nop
 800aab4:	0800d510 	.word	0x0800d510
 800aab8:	0800d530 	.word	0x0800d530
 800aabc:	0800d4f0 	.word	0x0800d4f0
 800aac0:	0800ce24 	.word	0x0800ce24
 800aac4:	0800ce2e 	.word	0x0800ce2e
 800aac8:	00000000 	.word	0x00000000
 800aacc:	0800a84f 	.word	0x0800a84f
 800aad0:	0800ce2a 	.word	0x0800ce2a

0800aad4 <_printf_common>:
 800aad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	4616      	mov	r6, r2
 800aada:	4699      	mov	r9, r3
 800aadc:	688a      	ldr	r2, [r1, #8]
 800aade:	690b      	ldr	r3, [r1, #16]
 800aae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aae4:	4293      	cmp	r3, r2
 800aae6:	bfb8      	it	lt
 800aae8:	4613      	movlt	r3, r2
 800aaea:	6033      	str	r3, [r6, #0]
 800aaec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b10a      	cbz	r2, 800aafa <_printf_common+0x26>
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	6033      	str	r3, [r6, #0]
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	0699      	lsls	r1, r3, #26
 800aafe:	bf42      	ittt	mi
 800ab00:	6833      	ldrmi	r3, [r6, #0]
 800ab02:	3302      	addmi	r3, #2
 800ab04:	6033      	strmi	r3, [r6, #0]
 800ab06:	6825      	ldr	r5, [r4, #0]
 800ab08:	f015 0506 	ands.w	r5, r5, #6
 800ab0c:	d106      	bne.n	800ab1c <_printf_common+0x48>
 800ab0e:	f104 0a19 	add.w	sl, r4, #25
 800ab12:	68e3      	ldr	r3, [r4, #12]
 800ab14:	6832      	ldr	r2, [r6, #0]
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	dc26      	bgt.n	800ab6a <_printf_common+0x96>
 800ab1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab20:	1e13      	subs	r3, r2, #0
 800ab22:	6822      	ldr	r2, [r4, #0]
 800ab24:	bf18      	it	ne
 800ab26:	2301      	movne	r3, #1
 800ab28:	0692      	lsls	r2, r2, #26
 800ab2a:	d42b      	bmi.n	800ab84 <_printf_common+0xb0>
 800ab2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab30:	4649      	mov	r1, r9
 800ab32:	4638      	mov	r0, r7
 800ab34:	47c0      	blx	r8
 800ab36:	3001      	adds	r0, #1
 800ab38:	d01e      	beq.n	800ab78 <_printf_common+0xa4>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	68e5      	ldr	r5, [r4, #12]
 800ab3e:	6832      	ldr	r2, [r6, #0]
 800ab40:	f003 0306 	and.w	r3, r3, #6
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	bf08      	it	eq
 800ab48:	1aad      	subeq	r5, r5, r2
 800ab4a:	68a3      	ldr	r3, [r4, #8]
 800ab4c:	6922      	ldr	r2, [r4, #16]
 800ab4e:	bf0c      	ite	eq
 800ab50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab54:	2500      	movne	r5, #0
 800ab56:	4293      	cmp	r3, r2
 800ab58:	bfc4      	itt	gt
 800ab5a:	1a9b      	subgt	r3, r3, r2
 800ab5c:	18ed      	addgt	r5, r5, r3
 800ab5e:	2600      	movs	r6, #0
 800ab60:	341a      	adds	r4, #26
 800ab62:	42b5      	cmp	r5, r6
 800ab64:	d11a      	bne.n	800ab9c <_printf_common+0xc8>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e008      	b.n	800ab7c <_printf_common+0xa8>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4652      	mov	r2, sl
 800ab6e:	4649      	mov	r1, r9
 800ab70:	4638      	mov	r0, r7
 800ab72:	47c0      	blx	r8
 800ab74:	3001      	adds	r0, #1
 800ab76:	d103      	bne.n	800ab80 <_printf_common+0xac>
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab80:	3501      	adds	r5, #1
 800ab82:	e7c6      	b.n	800ab12 <_printf_common+0x3e>
 800ab84:	18e1      	adds	r1, r4, r3
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	2030      	movs	r0, #48	; 0x30
 800ab8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab8e:	4422      	add	r2, r4
 800ab90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab98:	3302      	adds	r3, #2
 800ab9a:	e7c7      	b.n	800ab2c <_printf_common+0x58>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	4622      	mov	r2, r4
 800aba0:	4649      	mov	r1, r9
 800aba2:	4638      	mov	r0, r7
 800aba4:	47c0      	blx	r8
 800aba6:	3001      	adds	r0, #1
 800aba8:	d0e6      	beq.n	800ab78 <_printf_common+0xa4>
 800abaa:	3601      	adds	r6, #1
 800abac:	e7d9      	b.n	800ab62 <_printf_common+0x8e>
	...

0800abb0 <_printf_i>:
 800abb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abb4:	7e0f      	ldrb	r7, [r1, #24]
 800abb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abb8:	2f78      	cmp	r7, #120	; 0x78
 800abba:	4691      	mov	r9, r2
 800abbc:	4680      	mov	r8, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	469a      	mov	sl, r3
 800abc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abc6:	d807      	bhi.n	800abd8 <_printf_i+0x28>
 800abc8:	2f62      	cmp	r7, #98	; 0x62
 800abca:	d80a      	bhi.n	800abe2 <_printf_i+0x32>
 800abcc:	2f00      	cmp	r7, #0
 800abce:	f000 80d8 	beq.w	800ad82 <_printf_i+0x1d2>
 800abd2:	2f58      	cmp	r7, #88	; 0x58
 800abd4:	f000 80a3 	beq.w	800ad1e <_printf_i+0x16e>
 800abd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abe0:	e03a      	b.n	800ac58 <_printf_i+0xa8>
 800abe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abe6:	2b15      	cmp	r3, #21
 800abe8:	d8f6      	bhi.n	800abd8 <_printf_i+0x28>
 800abea:	a101      	add	r1, pc, #4	; (adr r1, 800abf0 <_printf_i+0x40>)
 800abec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abf0:	0800ac49 	.word	0x0800ac49
 800abf4:	0800ac5d 	.word	0x0800ac5d
 800abf8:	0800abd9 	.word	0x0800abd9
 800abfc:	0800abd9 	.word	0x0800abd9
 800ac00:	0800abd9 	.word	0x0800abd9
 800ac04:	0800abd9 	.word	0x0800abd9
 800ac08:	0800ac5d 	.word	0x0800ac5d
 800ac0c:	0800abd9 	.word	0x0800abd9
 800ac10:	0800abd9 	.word	0x0800abd9
 800ac14:	0800abd9 	.word	0x0800abd9
 800ac18:	0800abd9 	.word	0x0800abd9
 800ac1c:	0800ad69 	.word	0x0800ad69
 800ac20:	0800ac8d 	.word	0x0800ac8d
 800ac24:	0800ad4b 	.word	0x0800ad4b
 800ac28:	0800abd9 	.word	0x0800abd9
 800ac2c:	0800abd9 	.word	0x0800abd9
 800ac30:	0800ad8b 	.word	0x0800ad8b
 800ac34:	0800abd9 	.word	0x0800abd9
 800ac38:	0800ac8d 	.word	0x0800ac8d
 800ac3c:	0800abd9 	.word	0x0800abd9
 800ac40:	0800abd9 	.word	0x0800abd9
 800ac44:	0800ad53 	.word	0x0800ad53
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	1d1a      	adds	r2, r3, #4
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	602a      	str	r2, [r5, #0]
 800ac50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e0a3      	b.n	800ada4 <_printf_i+0x1f4>
 800ac5c:	6820      	ldr	r0, [r4, #0]
 800ac5e:	6829      	ldr	r1, [r5, #0]
 800ac60:	0606      	lsls	r6, r0, #24
 800ac62:	f101 0304 	add.w	r3, r1, #4
 800ac66:	d50a      	bpl.n	800ac7e <_printf_i+0xce>
 800ac68:	680e      	ldr	r6, [r1, #0]
 800ac6a:	602b      	str	r3, [r5, #0]
 800ac6c:	2e00      	cmp	r6, #0
 800ac6e:	da03      	bge.n	800ac78 <_printf_i+0xc8>
 800ac70:	232d      	movs	r3, #45	; 0x2d
 800ac72:	4276      	negs	r6, r6
 800ac74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac78:	485e      	ldr	r0, [pc, #376]	; (800adf4 <_printf_i+0x244>)
 800ac7a:	230a      	movs	r3, #10
 800ac7c:	e019      	b.n	800acb2 <_printf_i+0x102>
 800ac7e:	680e      	ldr	r6, [r1, #0]
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac86:	bf18      	it	ne
 800ac88:	b236      	sxthne	r6, r6
 800ac8a:	e7ef      	b.n	800ac6c <_printf_i+0xbc>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	1d19      	adds	r1, r3, #4
 800ac92:	6029      	str	r1, [r5, #0]
 800ac94:	0601      	lsls	r1, r0, #24
 800ac96:	d501      	bpl.n	800ac9c <_printf_i+0xec>
 800ac98:	681e      	ldr	r6, [r3, #0]
 800ac9a:	e002      	b.n	800aca2 <_printf_i+0xf2>
 800ac9c:	0646      	lsls	r6, r0, #25
 800ac9e:	d5fb      	bpl.n	800ac98 <_printf_i+0xe8>
 800aca0:	881e      	ldrh	r6, [r3, #0]
 800aca2:	4854      	ldr	r0, [pc, #336]	; (800adf4 <_printf_i+0x244>)
 800aca4:	2f6f      	cmp	r7, #111	; 0x6f
 800aca6:	bf0c      	ite	eq
 800aca8:	2308      	moveq	r3, #8
 800acaa:	230a      	movne	r3, #10
 800acac:	2100      	movs	r1, #0
 800acae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acb2:	6865      	ldr	r5, [r4, #4]
 800acb4:	60a5      	str	r5, [r4, #8]
 800acb6:	2d00      	cmp	r5, #0
 800acb8:	bfa2      	ittt	ge
 800acba:	6821      	ldrge	r1, [r4, #0]
 800acbc:	f021 0104 	bicge.w	r1, r1, #4
 800acc0:	6021      	strge	r1, [r4, #0]
 800acc2:	b90e      	cbnz	r6, 800acc8 <_printf_i+0x118>
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	d04d      	beq.n	800ad64 <_printf_i+0x1b4>
 800acc8:	4615      	mov	r5, r2
 800acca:	fbb6 f1f3 	udiv	r1, r6, r3
 800acce:	fb03 6711 	mls	r7, r3, r1, r6
 800acd2:	5dc7      	ldrb	r7, [r0, r7]
 800acd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acd8:	4637      	mov	r7, r6
 800acda:	42bb      	cmp	r3, r7
 800acdc:	460e      	mov	r6, r1
 800acde:	d9f4      	bls.n	800acca <_printf_i+0x11a>
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d10b      	bne.n	800acfc <_printf_i+0x14c>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	07de      	lsls	r6, r3, #31
 800ace8:	d508      	bpl.n	800acfc <_printf_i+0x14c>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	6861      	ldr	r1, [r4, #4]
 800acee:	4299      	cmp	r1, r3
 800acf0:	bfde      	ittt	le
 800acf2:	2330      	movle	r3, #48	; 0x30
 800acf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800acfc:	1b52      	subs	r2, r2, r5
 800acfe:	6122      	str	r2, [r4, #16]
 800ad00:	f8cd a000 	str.w	sl, [sp]
 800ad04:	464b      	mov	r3, r9
 800ad06:	aa03      	add	r2, sp, #12
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	f7ff fee2 	bl	800aad4 <_printf_common>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d14c      	bne.n	800adae <_printf_i+0x1fe>
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad18:	b004      	add	sp, #16
 800ad1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1e:	4835      	ldr	r0, [pc, #212]	; (800adf4 <_printf_i+0x244>)
 800ad20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad24:	6829      	ldr	r1, [r5, #0]
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad2c:	6029      	str	r1, [r5, #0]
 800ad2e:	061d      	lsls	r5, r3, #24
 800ad30:	d514      	bpl.n	800ad5c <_printf_i+0x1ac>
 800ad32:	07df      	lsls	r7, r3, #31
 800ad34:	bf44      	itt	mi
 800ad36:	f043 0320 	orrmi.w	r3, r3, #32
 800ad3a:	6023      	strmi	r3, [r4, #0]
 800ad3c:	b91e      	cbnz	r6, 800ad46 <_printf_i+0x196>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	f023 0320 	bic.w	r3, r3, #32
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	2310      	movs	r3, #16
 800ad48:	e7b0      	b.n	800acac <_printf_i+0xfc>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	f043 0320 	orr.w	r3, r3, #32
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	2378      	movs	r3, #120	; 0x78
 800ad54:	4828      	ldr	r0, [pc, #160]	; (800adf8 <_printf_i+0x248>)
 800ad56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad5a:	e7e3      	b.n	800ad24 <_printf_i+0x174>
 800ad5c:	0659      	lsls	r1, r3, #25
 800ad5e:	bf48      	it	mi
 800ad60:	b2b6      	uxthmi	r6, r6
 800ad62:	e7e6      	b.n	800ad32 <_printf_i+0x182>
 800ad64:	4615      	mov	r5, r2
 800ad66:	e7bb      	b.n	800ace0 <_printf_i+0x130>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	6826      	ldr	r6, [r4, #0]
 800ad6c:	6961      	ldr	r1, [r4, #20]
 800ad6e:	1d18      	adds	r0, r3, #4
 800ad70:	6028      	str	r0, [r5, #0]
 800ad72:	0635      	lsls	r5, r6, #24
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	d501      	bpl.n	800ad7c <_printf_i+0x1cc>
 800ad78:	6019      	str	r1, [r3, #0]
 800ad7a:	e002      	b.n	800ad82 <_printf_i+0x1d2>
 800ad7c:	0670      	lsls	r0, r6, #25
 800ad7e:	d5fb      	bpl.n	800ad78 <_printf_i+0x1c8>
 800ad80:	8019      	strh	r1, [r3, #0]
 800ad82:	2300      	movs	r3, #0
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	4615      	mov	r5, r2
 800ad88:	e7ba      	b.n	800ad00 <_printf_i+0x150>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	1d1a      	adds	r2, r3, #4
 800ad8e:	602a      	str	r2, [r5, #0]
 800ad90:	681d      	ldr	r5, [r3, #0]
 800ad92:	6862      	ldr	r2, [r4, #4]
 800ad94:	2100      	movs	r1, #0
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7f5 fa2a 	bl	80001f0 <memchr>
 800ad9c:	b108      	cbz	r0, 800ada2 <_printf_i+0x1f2>
 800ad9e:	1b40      	subs	r0, r0, r5
 800ada0:	6060      	str	r0, [r4, #4]
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	2300      	movs	r3, #0
 800ada8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adac:	e7a8      	b.n	800ad00 <_printf_i+0x150>
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	462a      	mov	r2, r5
 800adb2:	4649      	mov	r1, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	47d0      	blx	sl
 800adb8:	3001      	adds	r0, #1
 800adba:	d0ab      	beq.n	800ad14 <_printf_i+0x164>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	079b      	lsls	r3, r3, #30
 800adc0:	d413      	bmi.n	800adea <_printf_i+0x23a>
 800adc2:	68e0      	ldr	r0, [r4, #12]
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	4298      	cmp	r0, r3
 800adc8:	bfb8      	it	lt
 800adca:	4618      	movlt	r0, r3
 800adcc:	e7a4      	b.n	800ad18 <_printf_i+0x168>
 800adce:	2301      	movs	r3, #1
 800add0:	4632      	mov	r2, r6
 800add2:	4649      	mov	r1, r9
 800add4:	4640      	mov	r0, r8
 800add6:	47d0      	blx	sl
 800add8:	3001      	adds	r0, #1
 800adda:	d09b      	beq.n	800ad14 <_printf_i+0x164>
 800addc:	3501      	adds	r5, #1
 800adde:	68e3      	ldr	r3, [r4, #12]
 800ade0:	9903      	ldr	r1, [sp, #12]
 800ade2:	1a5b      	subs	r3, r3, r1
 800ade4:	42ab      	cmp	r3, r5
 800ade6:	dcf2      	bgt.n	800adce <_printf_i+0x21e>
 800ade8:	e7eb      	b.n	800adc2 <_printf_i+0x212>
 800adea:	2500      	movs	r5, #0
 800adec:	f104 0619 	add.w	r6, r4, #25
 800adf0:	e7f5      	b.n	800adde <_printf_i+0x22e>
 800adf2:	bf00      	nop
 800adf4:	0800ce35 	.word	0x0800ce35
 800adf8:	0800ce46 	.word	0x0800ce46

0800adfc <iprintf>:
 800adfc:	b40f      	push	{r0, r1, r2, r3}
 800adfe:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <iprintf+0x2c>)
 800ae00:	b513      	push	{r0, r1, r4, lr}
 800ae02:	681c      	ldr	r4, [r3, #0]
 800ae04:	b124      	cbz	r4, 800ae10 <iprintf+0x14>
 800ae06:	69a3      	ldr	r3, [r4, #24]
 800ae08:	b913      	cbnz	r3, 800ae10 <iprintf+0x14>
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fcf6 	bl	800b7fc <__sinit>
 800ae10:	ab05      	add	r3, sp, #20
 800ae12:	9a04      	ldr	r2, [sp, #16]
 800ae14:	68a1      	ldr	r1, [r4, #8]
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7ff fd2b 	bl	800a874 <_vfiprintf_r>
 800ae1e:	b002      	add	sp, #8
 800ae20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae24:	b004      	add	sp, #16
 800ae26:	4770      	bx	lr
 800ae28:	20000024 	.word	0x20000024

0800ae2c <_sbrk_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d06      	ldr	r5, [pc, #24]	; (800ae48 <_sbrk_r+0x1c>)
 800ae30:	2300      	movs	r3, #0
 800ae32:	4604      	mov	r4, r0
 800ae34:	4608      	mov	r0, r1
 800ae36:	602b      	str	r3, [r5, #0]
 800ae38:	f7f5 fda2 	bl	8000980 <_sbrk>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_sbrk_r+0x1a>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_sbrk_r+0x1a>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	2000035c 	.word	0x2000035c

0800ae4c <_raise_r>:
 800ae4c:	291f      	cmp	r1, #31
 800ae4e:	b538      	push	{r3, r4, r5, lr}
 800ae50:	4604      	mov	r4, r0
 800ae52:	460d      	mov	r5, r1
 800ae54:	d904      	bls.n	800ae60 <_raise_r+0x14>
 800ae56:	2316      	movs	r3, #22
 800ae58:	6003      	str	r3, [r0, #0]
 800ae5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae62:	b112      	cbz	r2, 800ae6a <_raise_r+0x1e>
 800ae64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae68:	b94b      	cbnz	r3, 800ae7e <_raise_r+0x32>
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f830 	bl	800aed0 <_getpid_r>
 800ae70:	462a      	mov	r2, r5
 800ae72:	4601      	mov	r1, r0
 800ae74:	4620      	mov	r0, r4
 800ae76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae7a:	f000 b817 	b.w	800aeac <_kill_r>
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d00a      	beq.n	800ae98 <_raise_r+0x4c>
 800ae82:	1c59      	adds	r1, r3, #1
 800ae84:	d103      	bne.n	800ae8e <_raise_r+0x42>
 800ae86:	2316      	movs	r3, #22
 800ae88:	6003      	str	r3, [r0, #0]
 800ae8a:	2001      	movs	r0, #1
 800ae8c:	e7e7      	b.n	800ae5e <_raise_r+0x12>
 800ae8e:	2400      	movs	r4, #0
 800ae90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae94:	4628      	mov	r0, r5
 800ae96:	4798      	blx	r3
 800ae98:	2000      	movs	r0, #0
 800ae9a:	e7e0      	b.n	800ae5e <_raise_r+0x12>

0800ae9c <raise>:
 800ae9c:	4b02      	ldr	r3, [pc, #8]	; (800aea8 <raise+0xc>)
 800ae9e:	4601      	mov	r1, r0
 800aea0:	6818      	ldr	r0, [r3, #0]
 800aea2:	f7ff bfd3 	b.w	800ae4c <_raise_r>
 800aea6:	bf00      	nop
 800aea8:	20000024 	.word	0x20000024

0800aeac <_kill_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	; (800aecc <_kill_r+0x20>)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	602b      	str	r3, [r5, #0]
 800aeba:	f7f5 fcda 	bl	8000872 <_kill>
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	d102      	bne.n	800aec8 <_kill_r+0x1c>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	b103      	cbz	r3, 800aec8 <_kill_r+0x1c>
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	bd38      	pop	{r3, r4, r5, pc}
 800aeca:	bf00      	nop
 800aecc:	2000035c 	.word	0x2000035c

0800aed0 <_getpid_r>:
 800aed0:	f7f5 bcc7 	b.w	8000862 <_getpid>

0800aed4 <sniprintf>:
 800aed4:	b40c      	push	{r2, r3}
 800aed6:	b530      	push	{r4, r5, lr}
 800aed8:	4b17      	ldr	r3, [pc, #92]	; (800af38 <sniprintf+0x64>)
 800aeda:	1e0c      	subs	r4, r1, #0
 800aedc:	681d      	ldr	r5, [r3, #0]
 800aede:	b09d      	sub	sp, #116	; 0x74
 800aee0:	da08      	bge.n	800aef4 <sniprintf+0x20>
 800aee2:	238b      	movs	r3, #139	; 0x8b
 800aee4:	602b      	str	r3, [r5, #0]
 800aee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeea:	b01d      	add	sp, #116	; 0x74
 800aeec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aef0:	b002      	add	sp, #8
 800aef2:	4770      	bx	lr
 800aef4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aef8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aefc:	bf14      	ite	ne
 800aefe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800af02:	4623      	moveq	r3, r4
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	9307      	str	r3, [sp, #28]
 800af08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af0c:	9002      	str	r0, [sp, #8]
 800af0e:	9006      	str	r0, [sp, #24]
 800af10:	f8ad 3016 	strh.w	r3, [sp, #22]
 800af14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af16:	ab21      	add	r3, sp, #132	; 0x84
 800af18:	a902      	add	r1, sp, #8
 800af1a:	4628      	mov	r0, r5
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	f000 fe1b 	bl	800bb58 <_svfiprintf_r>
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	bfbc      	itt	lt
 800af26:	238b      	movlt	r3, #139	; 0x8b
 800af28:	602b      	strlt	r3, [r5, #0]
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	d0dd      	beq.n	800aeea <sniprintf+0x16>
 800af2e:	9b02      	ldr	r3, [sp, #8]
 800af30:	2200      	movs	r2, #0
 800af32:	701a      	strb	r2, [r3, #0]
 800af34:	e7d9      	b.n	800aeea <sniprintf+0x16>
 800af36:	bf00      	nop
 800af38:	20000024 	.word	0x20000024

0800af3c <__sread>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	460c      	mov	r4, r1
 800af40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af44:	f000 ff08 	bl	800bd58 <_read_r>
 800af48:	2800      	cmp	r0, #0
 800af4a:	bfab      	itete	ge
 800af4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af4e:	89a3      	ldrhlt	r3, [r4, #12]
 800af50:	181b      	addge	r3, r3, r0
 800af52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af56:	bfac      	ite	ge
 800af58:	6563      	strge	r3, [r4, #84]	; 0x54
 800af5a:	81a3      	strhlt	r3, [r4, #12]
 800af5c:	bd10      	pop	{r4, pc}

0800af5e <__swrite>:
 800af5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	461f      	mov	r7, r3
 800af64:	898b      	ldrh	r3, [r1, #12]
 800af66:	05db      	lsls	r3, r3, #23
 800af68:	4605      	mov	r5, r0
 800af6a:	460c      	mov	r4, r1
 800af6c:	4616      	mov	r6, r2
 800af6e:	d505      	bpl.n	800af7c <__swrite+0x1e>
 800af70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af74:	2302      	movs	r3, #2
 800af76:	2200      	movs	r2, #0
 800af78:	f000 fce0 	bl	800b93c <_lseek_r>
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	4632      	mov	r2, r6
 800af8a:	463b      	mov	r3, r7
 800af8c:	4628      	mov	r0, r5
 800af8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af92:	f000 ba89 	b.w	800b4a8 <_write_r>

0800af96 <__sseek>:
 800af96:	b510      	push	{r4, lr}
 800af98:	460c      	mov	r4, r1
 800af9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9e:	f000 fccd 	bl	800b93c <_lseek_r>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	bf15      	itete	ne
 800afa8:	6560      	strne	r0, [r4, #84]	; 0x54
 800afaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afb2:	81a3      	strheq	r3, [r4, #12]
 800afb4:	bf18      	it	ne
 800afb6:	81a3      	strhne	r3, [r4, #12]
 800afb8:	bd10      	pop	{r4, pc}

0800afba <__sclose>:
 800afba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afbe:	f000 baf3 	b.w	800b5a8 <_close_r>

0800afc2 <strchr>:
 800afc2:	b2c9      	uxtb	r1, r1
 800afc4:	4603      	mov	r3, r0
 800afc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afca:	b11a      	cbz	r2, 800afd4 <strchr+0x12>
 800afcc:	428a      	cmp	r2, r1
 800afce:	d1f9      	bne.n	800afc4 <strchr+0x2>
 800afd0:	4618      	mov	r0, r3
 800afd2:	4770      	bx	lr
 800afd4:	2900      	cmp	r1, #0
 800afd6:	bf18      	it	ne
 800afd8:	2300      	movne	r3, #0
 800afda:	e7f9      	b.n	800afd0 <strchr+0xe>

0800afdc <strcspn>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4603      	mov	r3, r0
 800afe0:	461e      	mov	r6, r3
 800afe2:	f813 4b01 	ldrb.w	r4, [r3], #1
 800afe6:	b144      	cbz	r4, 800affa <strcspn+0x1e>
 800afe8:	1e4a      	subs	r2, r1, #1
 800afea:	e001      	b.n	800aff0 <strcspn+0x14>
 800afec:	42a5      	cmp	r5, r4
 800afee:	d004      	beq.n	800affa <strcspn+0x1e>
 800aff0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800aff4:	2d00      	cmp	r5, #0
 800aff6:	d1f9      	bne.n	800afec <strcspn+0x10>
 800aff8:	e7f2      	b.n	800afe0 <strcspn+0x4>
 800affa:	1a30      	subs	r0, r6, r0
 800affc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b000 <_strerror_r>:
 800b000:	b510      	push	{r4, lr}
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	4611      	mov	r1, r2
 800b008:	288e      	cmp	r0, #142	; 0x8e
 800b00a:	f200 8130 	bhi.w	800b26e <_strerror_r+0x26e>
 800b00e:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b012:	0139      	.short	0x0139
 800b014:	0092008f 	.word	0x0092008f
 800b018:	00960094 	.word	0x00960094
 800b01c:	009a0098 	.word	0x009a0098
 800b020:	009e009c 	.word	0x009e009c
 800b024:	00a400a2 	.word	0x00a400a2
 800b028:	00aa00a8 	.word	0x00aa00a8
 800b02c:	00ae00ac 	.word	0x00ae00ac
 800b030:	00b0012e 	.word	0x00b0012e
 800b034:	00b400b2 	.word	0x00b400b2
 800b038:	00b800b6 	.word	0x00b800b6
 800b03c:	00c000be 	.word	0x00c000be
 800b040:	00c800c6 	.word	0x00c800c6
 800b044:	00cc00ca 	.word	0x00cc00ca
 800b048:	00d200ce 	.word	0x00d200ce
 800b04c:	00d800d6 	.word	0x00d800d6
 800b050:	00dc00da 	.word	0x00dc00da
 800b054:	00e000de 	.word	0x00e000de
 800b058:	00e400e2 	.word	0x00e400e2
 800b05c:	012e012e 	.word	0x012e012e
 800b060:	012e012e 	.word	0x012e012e
 800b064:	012e012e 	.word	0x012e012e
 800b068:	012e012e 	.word	0x012e012e
 800b06c:	00ec00e8 	.word	0x00ec00e8
 800b070:	012e012e 	.word	0x012e012e
 800b074:	012e012e 	.word	0x012e012e
 800b078:	012e012e 	.word	0x012e012e
 800b07c:	012e012e 	.word	0x012e012e
 800b080:	012e012e 	.word	0x012e012e
 800b084:	012e012e 	.word	0x012e012e
 800b088:	00ee012e 	.word	0x00ee012e
 800b08c:	00f00108 	.word	0x00f00108
 800b090:	012e00f2 	.word	0x012e00f2
 800b094:	012e012e 	.word	0x012e012e
 800b098:	012e00f4 	.word	0x012e00f4
 800b09c:	012e012e 	.word	0x012e012e
 800b0a0:	012e00f6 	.word	0x012e00f6
 800b0a4:	00fa012e 	.word	0x00fa012e
 800b0a8:	012e012e 	.word	0x012e012e
 800b0ac:	012e00fc 	.word	0x012e00fc
 800b0b0:	012e012e 	.word	0x012e012e
 800b0b4:	012e012e 	.word	0x012e012e
 800b0b8:	012e012e 	.word	0x012e012e
 800b0bc:	012e012e 	.word	0x012e012e
 800b0c0:	00fe012e 	.word	0x00fe012e
 800b0c4:	0100012e 	.word	0x0100012e
 800b0c8:	01040102 	.word	0x01040102
 800b0cc:	012e012e 	.word	0x012e012e
 800b0d0:	012e0126 	.word	0x012e0126
 800b0d4:	012e012e 	.word	0x012e012e
 800b0d8:	012e012e 	.word	0x012e012e
 800b0dc:	012e012e 	.word	0x012e012e
 800b0e0:	0114012e 	.word	0x0114012e
 800b0e4:	010a0106 	.word	0x010a0106
 800b0e8:	010e010c 	.word	0x010e010c
 800b0ec:	012e0110 	.word	0x012e0110
 800b0f0:	01160112 	.word	0x01160112
 800b0f4:	00ea011a 	.word	0x00ea011a
 800b0f8:	012c00c2 	.word	0x012c00c2
 800b0fc:	00d000ba 	.word	0x00d000ba
 800b100:	00a000bc 	.word	0x00a000bc
 800b104:	012a00a6 	.word	0x012a00a6
 800b108:	012e00f8 	.word	0x012e00f8
 800b10c:	00c40118 	.word	0x00c40118
 800b110:	011c011e 	.word	0x011c011e
 800b114:	012e012e 	.word	0x012e012e
 800b118:	012e012e 	.word	0x012e012e
 800b11c:	00d4012e 	.word	0x00d4012e
 800b120:	012e012e 	.word	0x012e012e
 800b124:	00e6012e 	.word	0x00e6012e
 800b128:	01200128 	.word	0x01200128
 800b12c:	01240122 	.word	0x01240122
 800b130:	4b55      	ldr	r3, [pc, #340]	; (800b288 <_strerror_r+0x288>)
 800b132:	4618      	mov	r0, r3
 800b134:	bd10      	pop	{r4, pc}
 800b136:	4b55      	ldr	r3, [pc, #340]	; (800b28c <_strerror_r+0x28c>)
 800b138:	e7fb      	b.n	800b132 <_strerror_r+0x132>
 800b13a:	4b55      	ldr	r3, [pc, #340]	; (800b290 <_strerror_r+0x290>)
 800b13c:	e7f9      	b.n	800b132 <_strerror_r+0x132>
 800b13e:	4b55      	ldr	r3, [pc, #340]	; (800b294 <_strerror_r+0x294>)
 800b140:	e7f7      	b.n	800b132 <_strerror_r+0x132>
 800b142:	4b55      	ldr	r3, [pc, #340]	; (800b298 <_strerror_r+0x298>)
 800b144:	e7f5      	b.n	800b132 <_strerror_r+0x132>
 800b146:	4b55      	ldr	r3, [pc, #340]	; (800b29c <_strerror_r+0x29c>)
 800b148:	e7f3      	b.n	800b132 <_strerror_r+0x132>
 800b14a:	4b55      	ldr	r3, [pc, #340]	; (800b2a0 <_strerror_r+0x2a0>)
 800b14c:	e7f1      	b.n	800b132 <_strerror_r+0x132>
 800b14e:	4b55      	ldr	r3, [pc, #340]	; (800b2a4 <_strerror_r+0x2a4>)
 800b150:	e7ef      	b.n	800b132 <_strerror_r+0x132>
 800b152:	4b55      	ldr	r3, [pc, #340]	; (800b2a8 <_strerror_r+0x2a8>)
 800b154:	e7ed      	b.n	800b132 <_strerror_r+0x132>
 800b156:	4b55      	ldr	r3, [pc, #340]	; (800b2ac <_strerror_r+0x2ac>)
 800b158:	e7eb      	b.n	800b132 <_strerror_r+0x132>
 800b15a:	4b55      	ldr	r3, [pc, #340]	; (800b2b0 <_strerror_r+0x2b0>)
 800b15c:	e7e9      	b.n	800b132 <_strerror_r+0x132>
 800b15e:	4b55      	ldr	r3, [pc, #340]	; (800b2b4 <_strerror_r+0x2b4>)
 800b160:	e7e7      	b.n	800b132 <_strerror_r+0x132>
 800b162:	4b55      	ldr	r3, [pc, #340]	; (800b2b8 <_strerror_r+0x2b8>)
 800b164:	e7e5      	b.n	800b132 <_strerror_r+0x132>
 800b166:	4b55      	ldr	r3, [pc, #340]	; (800b2bc <_strerror_r+0x2bc>)
 800b168:	e7e3      	b.n	800b132 <_strerror_r+0x132>
 800b16a:	4b55      	ldr	r3, [pc, #340]	; (800b2c0 <_strerror_r+0x2c0>)
 800b16c:	e7e1      	b.n	800b132 <_strerror_r+0x132>
 800b16e:	4b55      	ldr	r3, [pc, #340]	; (800b2c4 <_strerror_r+0x2c4>)
 800b170:	e7df      	b.n	800b132 <_strerror_r+0x132>
 800b172:	4b55      	ldr	r3, [pc, #340]	; (800b2c8 <_strerror_r+0x2c8>)
 800b174:	e7dd      	b.n	800b132 <_strerror_r+0x132>
 800b176:	4b55      	ldr	r3, [pc, #340]	; (800b2cc <_strerror_r+0x2cc>)
 800b178:	e7db      	b.n	800b132 <_strerror_r+0x132>
 800b17a:	4b55      	ldr	r3, [pc, #340]	; (800b2d0 <_strerror_r+0x2d0>)
 800b17c:	e7d9      	b.n	800b132 <_strerror_r+0x132>
 800b17e:	4b55      	ldr	r3, [pc, #340]	; (800b2d4 <_strerror_r+0x2d4>)
 800b180:	e7d7      	b.n	800b132 <_strerror_r+0x132>
 800b182:	4b55      	ldr	r3, [pc, #340]	; (800b2d8 <_strerror_r+0x2d8>)
 800b184:	e7d5      	b.n	800b132 <_strerror_r+0x132>
 800b186:	4b55      	ldr	r3, [pc, #340]	; (800b2dc <_strerror_r+0x2dc>)
 800b188:	e7d3      	b.n	800b132 <_strerror_r+0x132>
 800b18a:	4b55      	ldr	r3, [pc, #340]	; (800b2e0 <_strerror_r+0x2e0>)
 800b18c:	e7d1      	b.n	800b132 <_strerror_r+0x132>
 800b18e:	4b55      	ldr	r3, [pc, #340]	; (800b2e4 <_strerror_r+0x2e4>)
 800b190:	e7cf      	b.n	800b132 <_strerror_r+0x132>
 800b192:	4b55      	ldr	r3, [pc, #340]	; (800b2e8 <_strerror_r+0x2e8>)
 800b194:	e7cd      	b.n	800b132 <_strerror_r+0x132>
 800b196:	4b55      	ldr	r3, [pc, #340]	; (800b2ec <_strerror_r+0x2ec>)
 800b198:	e7cb      	b.n	800b132 <_strerror_r+0x132>
 800b19a:	4b55      	ldr	r3, [pc, #340]	; (800b2f0 <_strerror_r+0x2f0>)
 800b19c:	e7c9      	b.n	800b132 <_strerror_r+0x132>
 800b19e:	4b55      	ldr	r3, [pc, #340]	; (800b2f4 <_strerror_r+0x2f4>)
 800b1a0:	e7c7      	b.n	800b132 <_strerror_r+0x132>
 800b1a2:	4b55      	ldr	r3, [pc, #340]	; (800b2f8 <_strerror_r+0x2f8>)
 800b1a4:	e7c5      	b.n	800b132 <_strerror_r+0x132>
 800b1a6:	4b55      	ldr	r3, [pc, #340]	; (800b2fc <_strerror_r+0x2fc>)
 800b1a8:	e7c3      	b.n	800b132 <_strerror_r+0x132>
 800b1aa:	4b55      	ldr	r3, [pc, #340]	; (800b300 <_strerror_r+0x300>)
 800b1ac:	e7c1      	b.n	800b132 <_strerror_r+0x132>
 800b1ae:	4b55      	ldr	r3, [pc, #340]	; (800b304 <_strerror_r+0x304>)
 800b1b0:	e7bf      	b.n	800b132 <_strerror_r+0x132>
 800b1b2:	4b55      	ldr	r3, [pc, #340]	; (800b308 <_strerror_r+0x308>)
 800b1b4:	e7bd      	b.n	800b132 <_strerror_r+0x132>
 800b1b6:	4b55      	ldr	r3, [pc, #340]	; (800b30c <_strerror_r+0x30c>)
 800b1b8:	e7bb      	b.n	800b132 <_strerror_r+0x132>
 800b1ba:	4b55      	ldr	r3, [pc, #340]	; (800b310 <_strerror_r+0x310>)
 800b1bc:	e7b9      	b.n	800b132 <_strerror_r+0x132>
 800b1be:	4b55      	ldr	r3, [pc, #340]	; (800b314 <_strerror_r+0x314>)
 800b1c0:	e7b7      	b.n	800b132 <_strerror_r+0x132>
 800b1c2:	4b55      	ldr	r3, [pc, #340]	; (800b318 <_strerror_r+0x318>)
 800b1c4:	e7b5      	b.n	800b132 <_strerror_r+0x132>
 800b1c6:	4b55      	ldr	r3, [pc, #340]	; (800b31c <_strerror_r+0x31c>)
 800b1c8:	e7b3      	b.n	800b132 <_strerror_r+0x132>
 800b1ca:	4b55      	ldr	r3, [pc, #340]	; (800b320 <_strerror_r+0x320>)
 800b1cc:	e7b1      	b.n	800b132 <_strerror_r+0x132>
 800b1ce:	4b55      	ldr	r3, [pc, #340]	; (800b324 <_strerror_r+0x324>)
 800b1d0:	e7af      	b.n	800b132 <_strerror_r+0x132>
 800b1d2:	4b55      	ldr	r3, [pc, #340]	; (800b328 <_strerror_r+0x328>)
 800b1d4:	e7ad      	b.n	800b132 <_strerror_r+0x132>
 800b1d6:	4b55      	ldr	r3, [pc, #340]	; (800b32c <_strerror_r+0x32c>)
 800b1d8:	e7ab      	b.n	800b132 <_strerror_r+0x132>
 800b1da:	4b55      	ldr	r3, [pc, #340]	; (800b330 <_strerror_r+0x330>)
 800b1dc:	e7a9      	b.n	800b132 <_strerror_r+0x132>
 800b1de:	4b55      	ldr	r3, [pc, #340]	; (800b334 <_strerror_r+0x334>)
 800b1e0:	e7a7      	b.n	800b132 <_strerror_r+0x132>
 800b1e2:	4b55      	ldr	r3, [pc, #340]	; (800b338 <_strerror_r+0x338>)
 800b1e4:	e7a5      	b.n	800b132 <_strerror_r+0x132>
 800b1e6:	4b55      	ldr	r3, [pc, #340]	; (800b33c <_strerror_r+0x33c>)
 800b1e8:	e7a3      	b.n	800b132 <_strerror_r+0x132>
 800b1ea:	4b55      	ldr	r3, [pc, #340]	; (800b340 <_strerror_r+0x340>)
 800b1ec:	e7a1      	b.n	800b132 <_strerror_r+0x132>
 800b1ee:	4b55      	ldr	r3, [pc, #340]	; (800b344 <_strerror_r+0x344>)
 800b1f0:	e79f      	b.n	800b132 <_strerror_r+0x132>
 800b1f2:	4b55      	ldr	r3, [pc, #340]	; (800b348 <_strerror_r+0x348>)
 800b1f4:	e79d      	b.n	800b132 <_strerror_r+0x132>
 800b1f6:	4b55      	ldr	r3, [pc, #340]	; (800b34c <_strerror_r+0x34c>)
 800b1f8:	e79b      	b.n	800b132 <_strerror_r+0x132>
 800b1fa:	4b55      	ldr	r3, [pc, #340]	; (800b350 <_strerror_r+0x350>)
 800b1fc:	e799      	b.n	800b132 <_strerror_r+0x132>
 800b1fe:	4b55      	ldr	r3, [pc, #340]	; (800b354 <_strerror_r+0x354>)
 800b200:	e797      	b.n	800b132 <_strerror_r+0x132>
 800b202:	4b55      	ldr	r3, [pc, #340]	; (800b358 <_strerror_r+0x358>)
 800b204:	e795      	b.n	800b132 <_strerror_r+0x132>
 800b206:	4b55      	ldr	r3, [pc, #340]	; (800b35c <_strerror_r+0x35c>)
 800b208:	e793      	b.n	800b132 <_strerror_r+0x132>
 800b20a:	4b55      	ldr	r3, [pc, #340]	; (800b360 <_strerror_r+0x360>)
 800b20c:	e791      	b.n	800b132 <_strerror_r+0x132>
 800b20e:	4b55      	ldr	r3, [pc, #340]	; (800b364 <_strerror_r+0x364>)
 800b210:	e78f      	b.n	800b132 <_strerror_r+0x132>
 800b212:	4b55      	ldr	r3, [pc, #340]	; (800b368 <_strerror_r+0x368>)
 800b214:	e78d      	b.n	800b132 <_strerror_r+0x132>
 800b216:	4b55      	ldr	r3, [pc, #340]	; (800b36c <_strerror_r+0x36c>)
 800b218:	e78b      	b.n	800b132 <_strerror_r+0x132>
 800b21a:	4b55      	ldr	r3, [pc, #340]	; (800b370 <_strerror_r+0x370>)
 800b21c:	e789      	b.n	800b132 <_strerror_r+0x132>
 800b21e:	4b55      	ldr	r3, [pc, #340]	; (800b374 <_strerror_r+0x374>)
 800b220:	e787      	b.n	800b132 <_strerror_r+0x132>
 800b222:	4b55      	ldr	r3, [pc, #340]	; (800b378 <_strerror_r+0x378>)
 800b224:	e785      	b.n	800b132 <_strerror_r+0x132>
 800b226:	4b55      	ldr	r3, [pc, #340]	; (800b37c <_strerror_r+0x37c>)
 800b228:	e783      	b.n	800b132 <_strerror_r+0x132>
 800b22a:	4b55      	ldr	r3, [pc, #340]	; (800b380 <_strerror_r+0x380>)
 800b22c:	e781      	b.n	800b132 <_strerror_r+0x132>
 800b22e:	4b55      	ldr	r3, [pc, #340]	; (800b384 <_strerror_r+0x384>)
 800b230:	e77f      	b.n	800b132 <_strerror_r+0x132>
 800b232:	4b55      	ldr	r3, [pc, #340]	; (800b388 <_strerror_r+0x388>)
 800b234:	e77d      	b.n	800b132 <_strerror_r+0x132>
 800b236:	4b55      	ldr	r3, [pc, #340]	; (800b38c <_strerror_r+0x38c>)
 800b238:	e77b      	b.n	800b132 <_strerror_r+0x132>
 800b23a:	4b55      	ldr	r3, [pc, #340]	; (800b390 <_strerror_r+0x390>)
 800b23c:	e779      	b.n	800b132 <_strerror_r+0x132>
 800b23e:	4b55      	ldr	r3, [pc, #340]	; (800b394 <_strerror_r+0x394>)
 800b240:	e777      	b.n	800b132 <_strerror_r+0x132>
 800b242:	4b55      	ldr	r3, [pc, #340]	; (800b398 <_strerror_r+0x398>)
 800b244:	e775      	b.n	800b132 <_strerror_r+0x132>
 800b246:	4b55      	ldr	r3, [pc, #340]	; (800b39c <_strerror_r+0x39c>)
 800b248:	e773      	b.n	800b132 <_strerror_r+0x132>
 800b24a:	4b55      	ldr	r3, [pc, #340]	; (800b3a0 <_strerror_r+0x3a0>)
 800b24c:	e771      	b.n	800b132 <_strerror_r+0x132>
 800b24e:	4b55      	ldr	r3, [pc, #340]	; (800b3a4 <_strerror_r+0x3a4>)
 800b250:	e76f      	b.n	800b132 <_strerror_r+0x132>
 800b252:	4b55      	ldr	r3, [pc, #340]	; (800b3a8 <_strerror_r+0x3a8>)
 800b254:	e76d      	b.n	800b132 <_strerror_r+0x132>
 800b256:	4b55      	ldr	r3, [pc, #340]	; (800b3ac <_strerror_r+0x3ac>)
 800b258:	e76b      	b.n	800b132 <_strerror_r+0x132>
 800b25a:	4b55      	ldr	r3, [pc, #340]	; (800b3b0 <_strerror_r+0x3b0>)
 800b25c:	e769      	b.n	800b132 <_strerror_r+0x132>
 800b25e:	4b55      	ldr	r3, [pc, #340]	; (800b3b4 <_strerror_r+0x3b4>)
 800b260:	e767      	b.n	800b132 <_strerror_r+0x132>
 800b262:	4b55      	ldr	r3, [pc, #340]	; (800b3b8 <_strerror_r+0x3b8>)
 800b264:	e765      	b.n	800b132 <_strerror_r+0x132>
 800b266:	4b55      	ldr	r3, [pc, #340]	; (800b3bc <_strerror_r+0x3bc>)
 800b268:	e763      	b.n	800b132 <_strerror_r+0x132>
 800b26a:	4b55      	ldr	r3, [pc, #340]	; (800b3c0 <_strerror_r+0x3c0>)
 800b26c:	e761      	b.n	800b132 <_strerror_r+0x132>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bf14      	ite	ne
 800b272:	461a      	movne	r2, r3
 800b274:	4622      	moveq	r2, r4
 800b276:	f000 f8c3 	bl	800b400 <_user_strerror>
 800b27a:	4b52      	ldr	r3, [pc, #328]	; (800b3c4 <_strerror_r+0x3c4>)
 800b27c:	2800      	cmp	r0, #0
 800b27e:	bf18      	it	ne
 800b280:	4603      	movne	r3, r0
 800b282:	e756      	b.n	800b132 <_strerror_r+0x132>
 800b284:	4b50      	ldr	r3, [pc, #320]	; (800b3c8 <_strerror_r+0x3c8>)
 800b286:	e754      	b.n	800b132 <_strerror_r+0x132>
 800b288:	0800ce57 	.word	0x0800ce57
 800b28c:	0800ce61 	.word	0x0800ce61
 800b290:	0800ce7b 	.word	0x0800ce7b
 800b294:	0800ce8b 	.word	0x0800ce8b
 800b298:	0800cea3 	.word	0x0800cea3
 800b29c:	0800cead 	.word	0x0800cead
 800b2a0:	0800cec7 	.word	0x0800cec7
 800b2a4:	0800ced9 	.word	0x0800ced9
 800b2a8:	0800ceeb 	.word	0x0800ceeb
 800b2ac:	0800cf04 	.word	0x0800cf04
 800b2b0:	0800cf14 	.word	0x0800cf14
 800b2b4:	0800cf20 	.word	0x0800cf20
 800b2b8:	0800cf3d 	.word	0x0800cf3d
 800b2bc:	0800cf4f 	.word	0x0800cf4f
 800b2c0:	0800cf60 	.word	0x0800cf60
 800b2c4:	0800cf72 	.word	0x0800cf72
 800b2c8:	0800cf7e 	.word	0x0800cf7e
 800b2cc:	0800cf96 	.word	0x0800cf96
 800b2d0:	0800cfa2 	.word	0x0800cfa2
 800b2d4:	0800cfb4 	.word	0x0800cfb4
 800b2d8:	0800cfc3 	.word	0x0800cfc3
 800b2dc:	0800cfd3 	.word	0x0800cfd3
 800b2e0:	0800cfe0 	.word	0x0800cfe0
 800b2e4:	0800cfff 	.word	0x0800cfff
 800b2e8:	0800d00e 	.word	0x0800d00e
 800b2ec:	0800d01f 	.word	0x0800d01f
 800b2f0:	0800d043 	.word	0x0800d043
 800b2f4:	0800d061 	.word	0x0800d061
 800b2f8:	0800d07f 	.word	0x0800d07f
 800b2fc:	0800d09f 	.word	0x0800d09f
 800b300:	0800d0b6 	.word	0x0800d0b6
 800b304:	0800d0c5 	.word	0x0800d0c5
 800b308:	0800d0d4 	.word	0x0800d0d4
 800b30c:	0800d0e8 	.word	0x0800d0e8
 800b310:	0800d100 	.word	0x0800d100
 800b314:	0800d10e 	.word	0x0800d10e
 800b318:	0800d11b 	.word	0x0800d11b
 800b31c:	0800d131 	.word	0x0800d131
 800b320:	0800d140 	.word	0x0800d140
 800b324:	0800d14c 	.word	0x0800d14c
 800b328:	0800d17b 	.word	0x0800d17b
 800b32c:	0800d18c 	.word	0x0800d18c
 800b330:	0800d1a7 	.word	0x0800d1a7
 800b334:	0800d1ba 	.word	0x0800d1ba
 800b338:	0800d1d0 	.word	0x0800d1d0
 800b33c:	0800d1d9 	.word	0x0800d1d9
 800b340:	0800d1f0 	.word	0x0800d1f0
 800b344:	0800d1f8 	.word	0x0800d1f8
 800b348:	0800d205 	.word	0x0800d205
 800b34c:	0800d21a 	.word	0x0800d21a
 800b350:	0800d22e 	.word	0x0800d22e
 800b354:	0800d246 	.word	0x0800d246
 800b358:	0800d255 	.word	0x0800d255
 800b35c:	0800d266 	.word	0x0800d266
 800b360:	0800d279 	.word	0x0800d279
 800b364:	0800d285 	.word	0x0800d285
 800b368:	0800d29e 	.word	0x0800d29e
 800b36c:	0800d2b2 	.word	0x0800d2b2
 800b370:	0800d2cd 	.word	0x0800d2cd
 800b374:	0800d2e5 	.word	0x0800d2e5
 800b378:	0800d2ff 	.word	0x0800d2ff
 800b37c:	0800d307 	.word	0x0800d307
 800b380:	0800d337 	.word	0x0800d337
 800b384:	0800d356 	.word	0x0800d356
 800b388:	0800d375 	.word	0x0800d375
 800b38c:	0800d38c 	.word	0x0800d38c
 800b390:	0800d39f 	.word	0x0800d39f
 800b394:	0800d3b8 	.word	0x0800d3b8
 800b398:	0800d3cf 	.word	0x0800d3cf
 800b39c:	0800d3e5 	.word	0x0800d3e5
 800b3a0:	0800d406 	.word	0x0800d406
 800b3a4:	0800d41e 	.word	0x0800d41e
 800b3a8:	0800d43a 	.word	0x0800d43a
 800b3ac:	0800d44d 	.word	0x0800d44d
 800b3b0:	0800d463 	.word	0x0800d463
 800b3b4:	0800d477 	.word	0x0800d477
 800b3b8:	0800d499 	.word	0x0800d499
 800b3bc:	0800d4bf 	.word	0x0800d4bf
 800b3c0:	0800d4d0 	.word	0x0800d4d0
 800b3c4:	0800ce1f 	.word	0x0800ce1f
 800b3c8:	0800d4e5 	.word	0x0800d4e5

0800b3cc <strerror>:
 800b3cc:	4601      	mov	r1, r0
 800b3ce:	4803      	ldr	r0, [pc, #12]	; (800b3dc <strerror+0x10>)
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	6800      	ldr	r0, [r0, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	f7ff be13 	b.w	800b000 <_strerror_r>
 800b3da:	bf00      	nop
 800b3dc:	20000024 	.word	0x20000024

0800b3e0 <strspn>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	461e      	mov	r6, r3
 800b3e6:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b3ea:	b13c      	cbz	r4, 800b3fc <strspn+0x1c>
 800b3ec:	1e4a      	subs	r2, r1, #1
 800b3ee:	e001      	b.n	800b3f4 <strspn+0x14>
 800b3f0:	42a5      	cmp	r5, r4
 800b3f2:	d0f7      	beq.n	800b3e4 <strspn+0x4>
 800b3f4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b3f8:	2d00      	cmp	r5, #0
 800b3fa:	d1f9      	bne.n	800b3f0 <strspn+0x10>
 800b3fc:	1a30      	subs	r0, r6, r0
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}

0800b400 <_user_strerror>:
 800b400:	2000      	movs	r0, #0
 800b402:	4770      	bx	lr

0800b404 <__swbuf_r>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	460e      	mov	r6, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	4605      	mov	r5, r0
 800b40c:	b118      	cbz	r0, 800b416 <__swbuf_r+0x12>
 800b40e:	6983      	ldr	r3, [r0, #24]
 800b410:	b90b      	cbnz	r3, 800b416 <__swbuf_r+0x12>
 800b412:	f000 f9f3 	bl	800b7fc <__sinit>
 800b416:	4b21      	ldr	r3, [pc, #132]	; (800b49c <__swbuf_r+0x98>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	d12b      	bne.n	800b474 <__swbuf_r+0x70>
 800b41c:	686c      	ldr	r4, [r5, #4]
 800b41e:	69a3      	ldr	r3, [r4, #24]
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	071a      	lsls	r2, r3, #28
 800b426:	d52f      	bpl.n	800b488 <__swbuf_r+0x84>
 800b428:	6923      	ldr	r3, [r4, #16]
 800b42a:	b36b      	cbz	r3, 800b488 <__swbuf_r+0x84>
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	6820      	ldr	r0, [r4, #0]
 800b430:	1ac0      	subs	r0, r0, r3
 800b432:	6963      	ldr	r3, [r4, #20]
 800b434:	b2f6      	uxtb	r6, r6
 800b436:	4283      	cmp	r3, r0
 800b438:	4637      	mov	r7, r6
 800b43a:	dc04      	bgt.n	800b446 <__swbuf_r+0x42>
 800b43c:	4621      	mov	r1, r4
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 f948 	bl	800b6d4 <_fflush_r>
 800b444:	bb30      	cbnz	r0, 800b494 <__swbuf_r+0x90>
 800b446:	68a3      	ldr	r3, [r4, #8]
 800b448:	3b01      	subs	r3, #1
 800b44a:	60a3      	str	r3, [r4, #8]
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	6022      	str	r2, [r4, #0]
 800b452:	701e      	strb	r6, [r3, #0]
 800b454:	6963      	ldr	r3, [r4, #20]
 800b456:	3001      	adds	r0, #1
 800b458:	4283      	cmp	r3, r0
 800b45a:	d004      	beq.n	800b466 <__swbuf_r+0x62>
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	07db      	lsls	r3, r3, #31
 800b460:	d506      	bpl.n	800b470 <__swbuf_r+0x6c>
 800b462:	2e0a      	cmp	r6, #10
 800b464:	d104      	bne.n	800b470 <__swbuf_r+0x6c>
 800b466:	4621      	mov	r1, r4
 800b468:	4628      	mov	r0, r5
 800b46a:	f000 f933 	bl	800b6d4 <_fflush_r>
 800b46e:	b988      	cbnz	r0, 800b494 <__swbuf_r+0x90>
 800b470:	4638      	mov	r0, r7
 800b472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b474:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <__swbuf_r+0x9c>)
 800b476:	429c      	cmp	r4, r3
 800b478:	d101      	bne.n	800b47e <__swbuf_r+0x7a>
 800b47a:	68ac      	ldr	r4, [r5, #8]
 800b47c:	e7cf      	b.n	800b41e <__swbuf_r+0x1a>
 800b47e:	4b09      	ldr	r3, [pc, #36]	; (800b4a4 <__swbuf_r+0xa0>)
 800b480:	429c      	cmp	r4, r3
 800b482:	bf08      	it	eq
 800b484:	68ec      	ldreq	r4, [r5, #12]
 800b486:	e7ca      	b.n	800b41e <__swbuf_r+0x1a>
 800b488:	4621      	mov	r1, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 f81e 	bl	800b4cc <__swsetup_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	d0cb      	beq.n	800b42c <__swbuf_r+0x28>
 800b494:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b498:	e7ea      	b.n	800b470 <__swbuf_r+0x6c>
 800b49a:	bf00      	nop
 800b49c:	0800d510 	.word	0x0800d510
 800b4a0:	0800d530 	.word	0x0800d530
 800b4a4:	0800d4f0 	.word	0x0800d4f0

0800b4a8 <_write_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d07      	ldr	r5, [pc, #28]	; (800b4c8 <_write_r+0x20>)
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	4608      	mov	r0, r1
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	602a      	str	r2, [r5, #0]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f7f5 fa12 	bl	80008e0 <_write>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_write_r+0x1e>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_write_r+0x1e>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	2000035c 	.word	0x2000035c

0800b4cc <__swsetup_r>:
 800b4cc:	4b32      	ldr	r3, [pc, #200]	; (800b598 <__swsetup_r+0xcc>)
 800b4ce:	b570      	push	{r4, r5, r6, lr}
 800b4d0:	681d      	ldr	r5, [r3, #0]
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	b125      	cbz	r5, 800b4e2 <__swsetup_r+0x16>
 800b4d8:	69ab      	ldr	r3, [r5, #24]
 800b4da:	b913      	cbnz	r3, 800b4e2 <__swsetup_r+0x16>
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f000 f98d 	bl	800b7fc <__sinit>
 800b4e2:	4b2e      	ldr	r3, [pc, #184]	; (800b59c <__swsetup_r+0xd0>)
 800b4e4:	429c      	cmp	r4, r3
 800b4e6:	d10f      	bne.n	800b508 <__swsetup_r+0x3c>
 800b4e8:	686c      	ldr	r4, [r5, #4]
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4f0:	0719      	lsls	r1, r3, #28
 800b4f2:	d42c      	bmi.n	800b54e <__swsetup_r+0x82>
 800b4f4:	06dd      	lsls	r5, r3, #27
 800b4f6:	d411      	bmi.n	800b51c <__swsetup_r+0x50>
 800b4f8:	2309      	movs	r3, #9
 800b4fa:	6033      	str	r3, [r6, #0]
 800b4fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b500:	81a3      	strh	r3, [r4, #12]
 800b502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b506:	e03e      	b.n	800b586 <__swsetup_r+0xba>
 800b508:	4b25      	ldr	r3, [pc, #148]	; (800b5a0 <__swsetup_r+0xd4>)
 800b50a:	429c      	cmp	r4, r3
 800b50c:	d101      	bne.n	800b512 <__swsetup_r+0x46>
 800b50e:	68ac      	ldr	r4, [r5, #8]
 800b510:	e7eb      	b.n	800b4ea <__swsetup_r+0x1e>
 800b512:	4b24      	ldr	r3, [pc, #144]	; (800b5a4 <__swsetup_r+0xd8>)
 800b514:	429c      	cmp	r4, r3
 800b516:	bf08      	it	eq
 800b518:	68ec      	ldreq	r4, [r5, #12]
 800b51a:	e7e6      	b.n	800b4ea <__swsetup_r+0x1e>
 800b51c:	0758      	lsls	r0, r3, #29
 800b51e:	d512      	bpl.n	800b546 <__swsetup_r+0x7a>
 800b520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b522:	b141      	cbz	r1, 800b536 <__swsetup_r+0x6a>
 800b524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b528:	4299      	cmp	r1, r3
 800b52a:	d002      	beq.n	800b532 <__swsetup_r+0x66>
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7ff f897 	bl	800a660 <_free_r>
 800b532:	2300      	movs	r3, #0
 800b534:	6363      	str	r3, [r4, #52]	; 0x34
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	2300      	movs	r3, #0
 800b540:	6063      	str	r3, [r4, #4]
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	f043 0308 	orr.w	r3, r3, #8
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	6923      	ldr	r3, [r4, #16]
 800b550:	b94b      	cbnz	r3, 800b566 <__swsetup_r+0x9a>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b55c:	d003      	beq.n	800b566 <__swsetup_r+0x9a>
 800b55e:	4621      	mov	r1, r4
 800b560:	4630      	mov	r0, r6
 800b562:	f000 fa23 	bl	800b9ac <__smakebuf_r>
 800b566:	89a0      	ldrh	r0, [r4, #12]
 800b568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b56c:	f010 0301 	ands.w	r3, r0, #1
 800b570:	d00a      	beq.n	800b588 <__swsetup_r+0xbc>
 800b572:	2300      	movs	r3, #0
 800b574:	60a3      	str	r3, [r4, #8]
 800b576:	6963      	ldr	r3, [r4, #20]
 800b578:	425b      	negs	r3, r3
 800b57a:	61a3      	str	r3, [r4, #24]
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	b943      	cbnz	r3, 800b592 <__swsetup_r+0xc6>
 800b580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b584:	d1ba      	bne.n	800b4fc <__swsetup_r+0x30>
 800b586:	bd70      	pop	{r4, r5, r6, pc}
 800b588:	0781      	lsls	r1, r0, #30
 800b58a:	bf58      	it	pl
 800b58c:	6963      	ldrpl	r3, [r4, #20]
 800b58e:	60a3      	str	r3, [r4, #8]
 800b590:	e7f4      	b.n	800b57c <__swsetup_r+0xb0>
 800b592:	2000      	movs	r0, #0
 800b594:	e7f7      	b.n	800b586 <__swsetup_r+0xba>
 800b596:	bf00      	nop
 800b598:	20000024 	.word	0x20000024
 800b59c:	0800d510 	.word	0x0800d510
 800b5a0:	0800d530 	.word	0x0800d530
 800b5a4:	0800d4f0 	.word	0x0800d4f0

0800b5a8 <_close_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d06      	ldr	r5, [pc, #24]	; (800b5c4 <_close_r+0x1c>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f5 f9b0 	bl	8000918 <_close>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_close_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_close_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	2000035c 	.word	0x2000035c

0800b5c8 <__sflush_r>:
 800b5c8:	898a      	ldrh	r2, [r1, #12]
 800b5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	0710      	lsls	r0, r2, #28
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	d458      	bmi.n	800b688 <__sflush_r+0xc0>
 800b5d6:	684b      	ldr	r3, [r1, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc05      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dc02      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	d0f9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5f4:	682f      	ldr	r7, [r5, #0]
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	d032      	beq.n	800b660 <__sflush_r+0x98>
 800b5fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	075a      	lsls	r2, r3, #29
 800b600:	d505      	bpl.n	800b60e <__sflush_r+0x46>
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	1ac0      	subs	r0, r0, r3
 800b606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b608:	b10b      	cbz	r3, 800b60e <__sflush_r+0x46>
 800b60a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b60c:	1ac0      	subs	r0, r0, r3
 800b60e:	2300      	movs	r3, #0
 800b610:	4602      	mov	r2, r0
 800b612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b614:	6a21      	ldr	r1, [r4, #32]
 800b616:	4628      	mov	r0, r5
 800b618:	47b0      	blx	r6
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	d106      	bne.n	800b62e <__sflush_r+0x66>
 800b620:	6829      	ldr	r1, [r5, #0]
 800b622:	291d      	cmp	r1, #29
 800b624:	d82c      	bhi.n	800b680 <__sflush_r+0xb8>
 800b626:	4a2a      	ldr	r2, [pc, #168]	; (800b6d0 <__sflush_r+0x108>)
 800b628:	40ca      	lsrs	r2, r1
 800b62a:	07d6      	lsls	r6, r2, #31
 800b62c:	d528      	bpl.n	800b680 <__sflush_r+0xb8>
 800b62e:	2200      	movs	r2, #0
 800b630:	6062      	str	r2, [r4, #4]
 800b632:	04d9      	lsls	r1, r3, #19
 800b634:	6922      	ldr	r2, [r4, #16]
 800b636:	6022      	str	r2, [r4, #0]
 800b638:	d504      	bpl.n	800b644 <__sflush_r+0x7c>
 800b63a:	1c42      	adds	r2, r0, #1
 800b63c:	d101      	bne.n	800b642 <__sflush_r+0x7a>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	b903      	cbnz	r3, 800b644 <__sflush_r+0x7c>
 800b642:	6560      	str	r0, [r4, #84]	; 0x54
 800b644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b646:	602f      	str	r7, [r5, #0]
 800b648:	2900      	cmp	r1, #0
 800b64a:	d0ca      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b650:	4299      	cmp	r1, r3
 800b652:	d002      	beq.n	800b65a <__sflush_r+0x92>
 800b654:	4628      	mov	r0, r5
 800b656:	f7ff f803 	bl	800a660 <_free_r>
 800b65a:	2000      	movs	r0, #0
 800b65c:	6360      	str	r0, [r4, #52]	; 0x34
 800b65e:	e7c1      	b.n	800b5e4 <__sflush_r+0x1c>
 800b660:	6a21      	ldr	r1, [r4, #32]
 800b662:	2301      	movs	r3, #1
 800b664:	4628      	mov	r0, r5
 800b666:	47b0      	blx	r6
 800b668:	1c41      	adds	r1, r0, #1
 800b66a:	d1c7      	bne.n	800b5fc <__sflush_r+0x34>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0c4      	beq.n	800b5fc <__sflush_r+0x34>
 800b672:	2b1d      	cmp	r3, #29
 800b674:	d001      	beq.n	800b67a <__sflush_r+0xb2>
 800b676:	2b16      	cmp	r3, #22
 800b678:	d101      	bne.n	800b67e <__sflush_r+0xb6>
 800b67a:	602f      	str	r7, [r5, #0]
 800b67c:	e7b1      	b.n	800b5e2 <__sflush_r+0x1a>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b684:	81a3      	strh	r3, [r4, #12]
 800b686:	e7ad      	b.n	800b5e4 <__sflush_r+0x1c>
 800b688:	690f      	ldr	r7, [r1, #16]
 800b68a:	2f00      	cmp	r7, #0
 800b68c:	d0a9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b68e:	0793      	lsls	r3, r2, #30
 800b690:	680e      	ldr	r6, [r1, #0]
 800b692:	bf08      	it	eq
 800b694:	694b      	ldreq	r3, [r1, #20]
 800b696:	600f      	str	r7, [r1, #0]
 800b698:	bf18      	it	ne
 800b69a:	2300      	movne	r3, #0
 800b69c:	eba6 0807 	sub.w	r8, r6, r7
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	f1b8 0f00 	cmp.w	r8, #0
 800b6a6:	dd9c      	ble.n	800b5e2 <__sflush_r+0x1a>
 800b6a8:	6a21      	ldr	r1, [r4, #32]
 800b6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6ac:	4643      	mov	r3, r8
 800b6ae:	463a      	mov	r2, r7
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b0      	blx	r6
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	dc06      	bgt.n	800b6c6 <__sflush_r+0xfe>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c4:	e78e      	b.n	800b5e4 <__sflush_r+0x1c>
 800b6c6:	4407      	add	r7, r0
 800b6c8:	eba8 0800 	sub.w	r8, r8, r0
 800b6cc:	e7e9      	b.n	800b6a2 <__sflush_r+0xda>
 800b6ce:	bf00      	nop
 800b6d0:	20400001 	.word	0x20400001

0800b6d4 <_fflush_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	690b      	ldr	r3, [r1, #16]
 800b6d8:	4605      	mov	r5, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	b913      	cbnz	r3, 800b6e4 <_fflush_r+0x10>
 800b6de:	2500      	movs	r5, #0
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	b118      	cbz	r0, 800b6ee <_fflush_r+0x1a>
 800b6e6:	6983      	ldr	r3, [r0, #24]
 800b6e8:	b90b      	cbnz	r3, 800b6ee <_fflush_r+0x1a>
 800b6ea:	f000 f887 	bl	800b7fc <__sinit>
 800b6ee:	4b14      	ldr	r3, [pc, #80]	; (800b740 <_fflush_r+0x6c>)
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	d11b      	bne.n	800b72c <_fflush_r+0x58>
 800b6f4:	686c      	ldr	r4, [r5, #4]
 800b6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0ef      	beq.n	800b6de <_fflush_r+0xa>
 800b6fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b700:	07d0      	lsls	r0, r2, #31
 800b702:	d404      	bmi.n	800b70e <_fflush_r+0x3a>
 800b704:	0599      	lsls	r1, r3, #22
 800b706:	d402      	bmi.n	800b70e <_fflush_r+0x3a>
 800b708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70a:	f000 f915 	bl	800b938 <__retarget_lock_acquire_recursive>
 800b70e:	4628      	mov	r0, r5
 800b710:	4621      	mov	r1, r4
 800b712:	f7ff ff59 	bl	800b5c8 <__sflush_r>
 800b716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b718:	07da      	lsls	r2, r3, #31
 800b71a:	4605      	mov	r5, r0
 800b71c:	d4e0      	bmi.n	800b6e0 <_fflush_r+0xc>
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	059b      	lsls	r3, r3, #22
 800b722:	d4dd      	bmi.n	800b6e0 <_fflush_r+0xc>
 800b724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b726:	f000 f908 	bl	800b93a <__retarget_lock_release_recursive>
 800b72a:	e7d9      	b.n	800b6e0 <_fflush_r+0xc>
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <_fflush_r+0x70>)
 800b72e:	429c      	cmp	r4, r3
 800b730:	d101      	bne.n	800b736 <_fflush_r+0x62>
 800b732:	68ac      	ldr	r4, [r5, #8]
 800b734:	e7df      	b.n	800b6f6 <_fflush_r+0x22>
 800b736:	4b04      	ldr	r3, [pc, #16]	; (800b748 <_fflush_r+0x74>)
 800b738:	429c      	cmp	r4, r3
 800b73a:	bf08      	it	eq
 800b73c:	68ec      	ldreq	r4, [r5, #12]
 800b73e:	e7da      	b.n	800b6f6 <_fflush_r+0x22>
 800b740:	0800d510 	.word	0x0800d510
 800b744:	0800d530 	.word	0x0800d530
 800b748:	0800d4f0 	.word	0x0800d4f0

0800b74c <std>:
 800b74c:	2300      	movs	r3, #0
 800b74e:	b510      	push	{r4, lr}
 800b750:	4604      	mov	r4, r0
 800b752:	e9c0 3300 	strd	r3, r3, [r0]
 800b756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b75a:	6083      	str	r3, [r0, #8]
 800b75c:	8181      	strh	r1, [r0, #12]
 800b75e:	6643      	str	r3, [r0, #100]	; 0x64
 800b760:	81c2      	strh	r2, [r0, #14]
 800b762:	6183      	str	r3, [r0, #24]
 800b764:	4619      	mov	r1, r3
 800b766:	2208      	movs	r2, #8
 800b768:	305c      	adds	r0, #92	; 0x5c
 800b76a:	f7fe ff71 	bl	800a650 <memset>
 800b76e:	4b05      	ldr	r3, [pc, #20]	; (800b784 <std+0x38>)
 800b770:	6263      	str	r3, [r4, #36]	; 0x24
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <std+0x3c>)
 800b774:	62a3      	str	r3, [r4, #40]	; 0x28
 800b776:	4b05      	ldr	r3, [pc, #20]	; (800b78c <std+0x40>)
 800b778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <std+0x44>)
 800b77c:	6224      	str	r4, [r4, #32]
 800b77e:	6323      	str	r3, [r4, #48]	; 0x30
 800b780:	bd10      	pop	{r4, pc}
 800b782:	bf00      	nop
 800b784:	0800af3d 	.word	0x0800af3d
 800b788:	0800af5f 	.word	0x0800af5f
 800b78c:	0800af97 	.word	0x0800af97
 800b790:	0800afbb 	.word	0x0800afbb

0800b794 <_cleanup_r>:
 800b794:	4901      	ldr	r1, [pc, #4]	; (800b79c <_cleanup_r+0x8>)
 800b796:	f000 b8af 	b.w	800b8f8 <_fwalk_reent>
 800b79a:	bf00      	nop
 800b79c:	0800b6d5 	.word	0x0800b6d5

0800b7a0 <__sfmoreglue>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	2268      	movs	r2, #104	; 0x68
 800b7a4:	1e4d      	subs	r5, r1, #1
 800b7a6:	4355      	muls	r5, r2
 800b7a8:	460e      	mov	r6, r1
 800b7aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7ae:	f7fe ffc3 	bl	800a738 <_malloc_r>
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	b140      	cbz	r0, 800b7c8 <__sfmoreglue+0x28>
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	e9c0 1600 	strd	r1, r6, [r0]
 800b7bc:	300c      	adds	r0, #12
 800b7be:	60a0      	str	r0, [r4, #8]
 800b7c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7c4:	f7fe ff44 	bl	800a650 <memset>
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}

0800b7cc <__sfp_lock_acquire>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	; (800b7d4 <__sfp_lock_acquire+0x8>)
 800b7ce:	f000 b8b3 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	20000359 	.word	0x20000359

0800b7d8 <__sfp_lock_release>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__sfp_lock_release+0x8>)
 800b7da:	f000 b8ae 	b.w	800b93a <__retarget_lock_release_recursive>
 800b7de:	bf00      	nop
 800b7e0:	20000359 	.word	0x20000359

0800b7e4 <__sinit_lock_acquire>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__sinit_lock_acquire+0x8>)
 800b7e6:	f000 b8a7 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	2000035a 	.word	0x2000035a

0800b7f0 <__sinit_lock_release>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	; (800b7f8 <__sinit_lock_release+0x8>)
 800b7f2:	f000 b8a2 	b.w	800b93a <__retarget_lock_release_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	2000035a 	.word	0x2000035a

0800b7fc <__sinit>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	4604      	mov	r4, r0
 800b800:	f7ff fff0 	bl	800b7e4 <__sinit_lock_acquire>
 800b804:	69a3      	ldr	r3, [r4, #24]
 800b806:	b11b      	cbz	r3, 800b810 <__sinit+0x14>
 800b808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b80c:	f7ff bff0 	b.w	800b7f0 <__sinit_lock_release>
 800b810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b814:	6523      	str	r3, [r4, #80]	; 0x50
 800b816:	4b13      	ldr	r3, [pc, #76]	; (800b864 <__sinit+0x68>)
 800b818:	4a13      	ldr	r2, [pc, #76]	; (800b868 <__sinit+0x6c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b81e:	42a3      	cmp	r3, r4
 800b820:	bf04      	itt	eq
 800b822:	2301      	moveq	r3, #1
 800b824:	61a3      	streq	r3, [r4, #24]
 800b826:	4620      	mov	r0, r4
 800b828:	f000 f820 	bl	800b86c <__sfp>
 800b82c:	6060      	str	r0, [r4, #4]
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 f81c 	bl	800b86c <__sfp>
 800b834:	60a0      	str	r0, [r4, #8]
 800b836:	4620      	mov	r0, r4
 800b838:	f000 f818 	bl	800b86c <__sfp>
 800b83c:	2200      	movs	r2, #0
 800b83e:	60e0      	str	r0, [r4, #12]
 800b840:	2104      	movs	r1, #4
 800b842:	6860      	ldr	r0, [r4, #4]
 800b844:	f7ff ff82 	bl	800b74c <std>
 800b848:	68a0      	ldr	r0, [r4, #8]
 800b84a:	2201      	movs	r2, #1
 800b84c:	2109      	movs	r1, #9
 800b84e:	f7ff ff7d 	bl	800b74c <std>
 800b852:	68e0      	ldr	r0, [r4, #12]
 800b854:	2202      	movs	r2, #2
 800b856:	2112      	movs	r1, #18
 800b858:	f7ff ff78 	bl	800b74c <std>
 800b85c:	2301      	movs	r3, #1
 800b85e:	61a3      	str	r3, [r4, #24]
 800b860:	e7d2      	b.n	800b808 <__sinit+0xc>
 800b862:	bf00      	nop
 800b864:	0800ce20 	.word	0x0800ce20
 800b868:	0800b795 	.word	0x0800b795

0800b86c <__sfp>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	4607      	mov	r7, r0
 800b870:	f7ff ffac 	bl	800b7cc <__sfp_lock_acquire>
 800b874:	4b1e      	ldr	r3, [pc, #120]	; (800b8f0 <__sfp+0x84>)
 800b876:	681e      	ldr	r6, [r3, #0]
 800b878:	69b3      	ldr	r3, [r6, #24]
 800b87a:	b913      	cbnz	r3, 800b882 <__sfp+0x16>
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff ffbd 	bl	800b7fc <__sinit>
 800b882:	3648      	adds	r6, #72	; 0x48
 800b884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b888:	3b01      	subs	r3, #1
 800b88a:	d503      	bpl.n	800b894 <__sfp+0x28>
 800b88c:	6833      	ldr	r3, [r6, #0]
 800b88e:	b30b      	cbz	r3, 800b8d4 <__sfp+0x68>
 800b890:	6836      	ldr	r6, [r6, #0]
 800b892:	e7f7      	b.n	800b884 <__sfp+0x18>
 800b894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b898:	b9d5      	cbnz	r5, 800b8d0 <__sfp+0x64>
 800b89a:	4b16      	ldr	r3, [pc, #88]	; (800b8f4 <__sfp+0x88>)
 800b89c:	60e3      	str	r3, [r4, #12]
 800b89e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8a2:	6665      	str	r5, [r4, #100]	; 0x64
 800b8a4:	f000 f847 	bl	800b936 <__retarget_lock_init_recursive>
 800b8a8:	f7ff ff96 	bl	800b7d8 <__sfp_lock_release>
 800b8ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8b4:	6025      	str	r5, [r4, #0]
 800b8b6:	61a5      	str	r5, [r4, #24]
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8c0:	f7fe fec6 	bl	800a650 <memset>
 800b8c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d0:	3468      	adds	r4, #104	; 0x68
 800b8d2:	e7d9      	b.n	800b888 <__sfp+0x1c>
 800b8d4:	2104      	movs	r1, #4
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	f7ff ff62 	bl	800b7a0 <__sfmoreglue>
 800b8dc:	4604      	mov	r4, r0
 800b8de:	6030      	str	r0, [r6, #0]
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d1d5      	bne.n	800b890 <__sfp+0x24>
 800b8e4:	f7ff ff78 	bl	800b7d8 <__sfp_lock_release>
 800b8e8:	230c      	movs	r3, #12
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	e7ee      	b.n	800b8cc <__sfp+0x60>
 800b8ee:	bf00      	nop
 800b8f0:	0800ce20 	.word	0x0800ce20
 800b8f4:	ffff0001 	.word	0xffff0001

0800b8f8 <_fwalk_reent>:
 800b8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	4688      	mov	r8, r1
 800b900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b904:	2700      	movs	r7, #0
 800b906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b90a:	f1b9 0901 	subs.w	r9, r9, #1
 800b90e:	d505      	bpl.n	800b91c <_fwalk_reent+0x24>
 800b910:	6824      	ldr	r4, [r4, #0]
 800b912:	2c00      	cmp	r4, #0
 800b914:	d1f7      	bne.n	800b906 <_fwalk_reent+0xe>
 800b916:	4638      	mov	r0, r7
 800b918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91c:	89ab      	ldrh	r3, [r5, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d907      	bls.n	800b932 <_fwalk_reent+0x3a>
 800b922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b926:	3301      	adds	r3, #1
 800b928:	d003      	beq.n	800b932 <_fwalk_reent+0x3a>
 800b92a:	4629      	mov	r1, r5
 800b92c:	4630      	mov	r0, r6
 800b92e:	47c0      	blx	r8
 800b930:	4307      	orrs	r7, r0
 800b932:	3568      	adds	r5, #104	; 0x68
 800b934:	e7e9      	b.n	800b90a <_fwalk_reent+0x12>

0800b936 <__retarget_lock_init_recursive>:
 800b936:	4770      	bx	lr

0800b938 <__retarget_lock_acquire_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_release_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <_lseek_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d07      	ldr	r5, [pc, #28]	; (800b95c <_lseek_r+0x20>)
 800b940:	4604      	mov	r4, r0
 800b942:	4608      	mov	r0, r1
 800b944:	4611      	mov	r1, r2
 800b946:	2200      	movs	r2, #0
 800b948:	602a      	str	r2, [r5, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	f7f5 f80b 	bl	8000966 <_lseek>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_lseek_r+0x1e>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_lseek_r+0x1e>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	2000035c 	.word	0x2000035c

0800b960 <__swhatbuf_r>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	460e      	mov	r6, r1
 800b964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b968:	2900      	cmp	r1, #0
 800b96a:	b096      	sub	sp, #88	; 0x58
 800b96c:	4614      	mov	r4, r2
 800b96e:	461d      	mov	r5, r3
 800b970:	da08      	bge.n	800b984 <__swhatbuf_r+0x24>
 800b972:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	602a      	str	r2, [r5, #0]
 800b97a:	061a      	lsls	r2, r3, #24
 800b97c:	d410      	bmi.n	800b9a0 <__swhatbuf_r+0x40>
 800b97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b982:	e00e      	b.n	800b9a2 <__swhatbuf_r+0x42>
 800b984:	466a      	mov	r2, sp
 800b986:	f000 f9f9 	bl	800bd7c <_fstat_r>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	dbf1      	blt.n	800b972 <__swhatbuf_r+0x12>
 800b98e:	9a01      	ldr	r2, [sp, #4]
 800b990:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b994:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b998:	425a      	negs	r2, r3
 800b99a:	415a      	adcs	r2, r3
 800b99c:	602a      	str	r2, [r5, #0]
 800b99e:	e7ee      	b.n	800b97e <__swhatbuf_r+0x1e>
 800b9a0:	2340      	movs	r3, #64	; 0x40
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	b016      	add	sp, #88	; 0x58
 800b9a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b9ac <__smakebuf_r>:
 800b9ac:	898b      	ldrh	r3, [r1, #12]
 800b9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9b0:	079d      	lsls	r5, r3, #30
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	d507      	bpl.n	800b9c8 <__smakebuf_r+0x1c>
 800b9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	6123      	str	r3, [r4, #16]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	6163      	str	r3, [r4, #20]
 800b9c4:	b002      	add	sp, #8
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	ab01      	add	r3, sp, #4
 800b9ca:	466a      	mov	r2, sp
 800b9cc:	f7ff ffc8 	bl	800b960 <__swhatbuf_r>
 800b9d0:	9900      	ldr	r1, [sp, #0]
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7fe feaf 	bl	800a738 <_malloc_r>
 800b9da:	b948      	cbnz	r0, 800b9f0 <__smakebuf_r+0x44>
 800b9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e0:	059a      	lsls	r2, r3, #22
 800b9e2:	d4ef      	bmi.n	800b9c4 <__smakebuf_r+0x18>
 800b9e4:	f023 0303 	bic.w	r3, r3, #3
 800b9e8:	f043 0302 	orr.w	r3, r3, #2
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	e7e3      	b.n	800b9b8 <__smakebuf_r+0xc>
 800b9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ba28 <__smakebuf_r+0x7c>)
 800b9f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	6020      	str	r0, [r4, #0]
 800b9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	9b00      	ldr	r3, [sp, #0]
 800ba00:	6163      	str	r3, [r4, #20]
 800ba02:	9b01      	ldr	r3, [sp, #4]
 800ba04:	6120      	str	r0, [r4, #16]
 800ba06:	b15b      	cbz	r3, 800ba20 <__smakebuf_r+0x74>
 800ba08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f000 f9c7 	bl	800bda0 <_isatty_r>
 800ba12:	b128      	cbz	r0, 800ba20 <__smakebuf_r+0x74>
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	f043 0301 	orr.w	r3, r3, #1
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	89a0      	ldrh	r0, [r4, #12]
 800ba22:	4305      	orrs	r5, r0
 800ba24:	81a5      	strh	r5, [r4, #12]
 800ba26:	e7cd      	b.n	800b9c4 <__smakebuf_r+0x18>
 800ba28:	0800b795 	.word	0x0800b795

0800ba2c <__malloc_lock>:
 800ba2c:	4801      	ldr	r0, [pc, #4]	; (800ba34 <__malloc_lock+0x8>)
 800ba2e:	f7ff bf83 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800ba32:	bf00      	nop
 800ba34:	20000358 	.word	0x20000358

0800ba38 <__malloc_unlock>:
 800ba38:	4801      	ldr	r0, [pc, #4]	; (800ba40 <__malloc_unlock+0x8>)
 800ba3a:	f7ff bf7e 	b.w	800b93a <__retarget_lock_release_recursive>
 800ba3e:	bf00      	nop
 800ba40:	20000358 	.word	0x20000358

0800ba44 <_realloc_r>:
 800ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba48:	4680      	mov	r8, r0
 800ba4a:	4614      	mov	r4, r2
 800ba4c:	460e      	mov	r6, r1
 800ba4e:	b921      	cbnz	r1, 800ba5a <_realloc_r+0x16>
 800ba50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba54:	4611      	mov	r1, r2
 800ba56:	f7fe be6f 	b.w	800a738 <_malloc_r>
 800ba5a:	b92a      	cbnz	r2, 800ba68 <_realloc_r+0x24>
 800ba5c:	f7fe fe00 	bl	800a660 <_free_r>
 800ba60:	4625      	mov	r5, r4
 800ba62:	4628      	mov	r0, r5
 800ba64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba68:	f000 f9aa 	bl	800bdc0 <_malloc_usable_size_r>
 800ba6c:	4284      	cmp	r4, r0
 800ba6e:	4607      	mov	r7, r0
 800ba70:	d802      	bhi.n	800ba78 <_realloc_r+0x34>
 800ba72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba76:	d812      	bhi.n	800ba9e <_realloc_r+0x5a>
 800ba78:	4621      	mov	r1, r4
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	f7fe fe5c 	bl	800a738 <_malloc_r>
 800ba80:	4605      	mov	r5, r0
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d0ed      	beq.n	800ba62 <_realloc_r+0x1e>
 800ba86:	42bc      	cmp	r4, r7
 800ba88:	4622      	mov	r2, r4
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	bf28      	it	cs
 800ba8e:	463a      	movcs	r2, r7
 800ba90:	f7fe fdb6 	bl	800a600 <memcpy>
 800ba94:	4631      	mov	r1, r6
 800ba96:	4640      	mov	r0, r8
 800ba98:	f7fe fde2 	bl	800a660 <_free_r>
 800ba9c:	e7e1      	b.n	800ba62 <_realloc_r+0x1e>
 800ba9e:	4635      	mov	r5, r6
 800baa0:	e7df      	b.n	800ba62 <_realloc_r+0x1e>

0800baa2 <__ssputs_r>:
 800baa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa6:	688e      	ldr	r6, [r1, #8]
 800baa8:	429e      	cmp	r6, r3
 800baaa:	4682      	mov	sl, r0
 800baac:	460c      	mov	r4, r1
 800baae:	4690      	mov	r8, r2
 800bab0:	461f      	mov	r7, r3
 800bab2:	d838      	bhi.n	800bb26 <__ssputs_r+0x84>
 800bab4:	898a      	ldrh	r2, [r1, #12]
 800bab6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baba:	d032      	beq.n	800bb22 <__ssputs_r+0x80>
 800babc:	6825      	ldr	r5, [r4, #0]
 800babe:	6909      	ldr	r1, [r1, #16]
 800bac0:	eba5 0901 	sub.w	r9, r5, r1
 800bac4:	6965      	ldr	r5, [r4, #20]
 800bac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bace:	3301      	adds	r3, #1
 800bad0:	444b      	add	r3, r9
 800bad2:	106d      	asrs	r5, r5, #1
 800bad4:	429d      	cmp	r5, r3
 800bad6:	bf38      	it	cc
 800bad8:	461d      	movcc	r5, r3
 800bada:	0553      	lsls	r3, r2, #21
 800badc:	d531      	bpl.n	800bb42 <__ssputs_r+0xa0>
 800bade:	4629      	mov	r1, r5
 800bae0:	f7fe fe2a 	bl	800a738 <_malloc_r>
 800bae4:	4606      	mov	r6, r0
 800bae6:	b950      	cbnz	r0, 800bafe <__ssputs_r+0x5c>
 800bae8:	230c      	movs	r3, #12
 800baea:	f8ca 3000 	str.w	r3, [sl]
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf4:	81a3      	strh	r3, [r4, #12]
 800baf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafe:	6921      	ldr	r1, [r4, #16]
 800bb00:	464a      	mov	r2, r9
 800bb02:	f7fe fd7d 	bl	800a600 <memcpy>
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb10:	81a3      	strh	r3, [r4, #12]
 800bb12:	6126      	str	r6, [r4, #16]
 800bb14:	6165      	str	r5, [r4, #20]
 800bb16:	444e      	add	r6, r9
 800bb18:	eba5 0509 	sub.w	r5, r5, r9
 800bb1c:	6026      	str	r6, [r4, #0]
 800bb1e:	60a5      	str	r5, [r4, #8]
 800bb20:	463e      	mov	r6, r7
 800bb22:	42be      	cmp	r6, r7
 800bb24:	d900      	bls.n	800bb28 <__ssputs_r+0x86>
 800bb26:	463e      	mov	r6, r7
 800bb28:	6820      	ldr	r0, [r4, #0]
 800bb2a:	4632      	mov	r2, r6
 800bb2c:	4641      	mov	r1, r8
 800bb2e:	f7fe fd75 	bl	800a61c <memmove>
 800bb32:	68a3      	ldr	r3, [r4, #8]
 800bb34:	1b9b      	subs	r3, r3, r6
 800bb36:	60a3      	str	r3, [r4, #8]
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	4433      	add	r3, r6
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	2000      	movs	r0, #0
 800bb40:	e7db      	b.n	800bafa <__ssputs_r+0x58>
 800bb42:	462a      	mov	r2, r5
 800bb44:	f7ff ff7e 	bl	800ba44 <_realloc_r>
 800bb48:	4606      	mov	r6, r0
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d1e1      	bne.n	800bb12 <__ssputs_r+0x70>
 800bb4e:	6921      	ldr	r1, [r4, #16]
 800bb50:	4650      	mov	r0, sl
 800bb52:	f7fe fd85 	bl	800a660 <_free_r>
 800bb56:	e7c7      	b.n	800bae8 <__ssputs_r+0x46>

0800bb58 <_svfiprintf_r>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	4698      	mov	r8, r3
 800bb5e:	898b      	ldrh	r3, [r1, #12]
 800bb60:	061b      	lsls	r3, r3, #24
 800bb62:	b09d      	sub	sp, #116	; 0x74
 800bb64:	4607      	mov	r7, r0
 800bb66:	460d      	mov	r5, r1
 800bb68:	4614      	mov	r4, r2
 800bb6a:	d50e      	bpl.n	800bb8a <_svfiprintf_r+0x32>
 800bb6c:	690b      	ldr	r3, [r1, #16]
 800bb6e:	b963      	cbnz	r3, 800bb8a <_svfiprintf_r+0x32>
 800bb70:	2140      	movs	r1, #64	; 0x40
 800bb72:	f7fe fde1 	bl	800a738 <_malloc_r>
 800bb76:	6028      	str	r0, [r5, #0]
 800bb78:	6128      	str	r0, [r5, #16]
 800bb7a:	b920      	cbnz	r0, 800bb86 <_svfiprintf_r+0x2e>
 800bb7c:	230c      	movs	r3, #12
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb84:	e0d1      	b.n	800bd2a <_svfiprintf_r+0x1d2>
 800bb86:	2340      	movs	r3, #64	; 0x40
 800bb88:	616b      	str	r3, [r5, #20]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8e:	2320      	movs	r3, #32
 800bb90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb94:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb98:	2330      	movs	r3, #48	; 0x30
 800bb9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd44 <_svfiprintf_r+0x1ec>
 800bb9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bba2:	f04f 0901 	mov.w	r9, #1
 800bba6:	4623      	mov	r3, r4
 800bba8:	469a      	mov	sl, r3
 800bbaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbae:	b10a      	cbz	r2, 800bbb4 <_svfiprintf_r+0x5c>
 800bbb0:	2a25      	cmp	r2, #37	; 0x25
 800bbb2:	d1f9      	bne.n	800bba8 <_svfiprintf_r+0x50>
 800bbb4:	ebba 0b04 	subs.w	fp, sl, r4
 800bbb8:	d00b      	beq.n	800bbd2 <_svfiprintf_r+0x7a>
 800bbba:	465b      	mov	r3, fp
 800bbbc:	4622      	mov	r2, r4
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7ff ff6e 	bl	800baa2 <__ssputs_r>
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	f000 80aa 	beq.w	800bd20 <_svfiprintf_r+0x1c8>
 800bbcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbce:	445a      	add	r2, fp
 800bbd0:	9209      	str	r2, [sp, #36]	; 0x24
 800bbd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f000 80a2 	beq.w	800bd20 <_svfiprintf_r+0x1c8>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbe6:	f10a 0a01 	add.w	sl, sl, #1
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	9307      	str	r3, [sp, #28]
 800bbee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbf2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbf4:	4654      	mov	r4, sl
 800bbf6:	2205      	movs	r2, #5
 800bbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbfc:	4851      	ldr	r0, [pc, #324]	; (800bd44 <_svfiprintf_r+0x1ec>)
 800bbfe:	f7f4 faf7 	bl	80001f0 <memchr>
 800bc02:	9a04      	ldr	r2, [sp, #16]
 800bc04:	b9d8      	cbnz	r0, 800bc3e <_svfiprintf_r+0xe6>
 800bc06:	06d0      	lsls	r0, r2, #27
 800bc08:	bf44      	itt	mi
 800bc0a:	2320      	movmi	r3, #32
 800bc0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc10:	0711      	lsls	r1, r2, #28
 800bc12:	bf44      	itt	mi
 800bc14:	232b      	movmi	r3, #43	; 0x2b
 800bc16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc20:	d015      	beq.n	800bc4e <_svfiprintf_r+0xf6>
 800bc22:	9a07      	ldr	r2, [sp, #28]
 800bc24:	4654      	mov	r4, sl
 800bc26:	2000      	movs	r0, #0
 800bc28:	f04f 0c0a 	mov.w	ip, #10
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc32:	3b30      	subs	r3, #48	; 0x30
 800bc34:	2b09      	cmp	r3, #9
 800bc36:	d94e      	bls.n	800bcd6 <_svfiprintf_r+0x17e>
 800bc38:	b1b0      	cbz	r0, 800bc68 <_svfiprintf_r+0x110>
 800bc3a:	9207      	str	r2, [sp, #28]
 800bc3c:	e014      	b.n	800bc68 <_svfiprintf_r+0x110>
 800bc3e:	eba0 0308 	sub.w	r3, r0, r8
 800bc42:	fa09 f303 	lsl.w	r3, r9, r3
 800bc46:	4313      	orrs	r3, r2
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	46a2      	mov	sl, r4
 800bc4c:	e7d2      	b.n	800bbf4 <_svfiprintf_r+0x9c>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	1d19      	adds	r1, r3, #4
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	9103      	str	r1, [sp, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	bfbb      	ittet	lt
 800bc5a:	425b      	neglt	r3, r3
 800bc5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc60:	9307      	strge	r3, [sp, #28]
 800bc62:	9307      	strlt	r3, [sp, #28]
 800bc64:	bfb8      	it	lt
 800bc66:	9204      	strlt	r2, [sp, #16]
 800bc68:	7823      	ldrb	r3, [r4, #0]
 800bc6a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc6c:	d10c      	bne.n	800bc88 <_svfiprintf_r+0x130>
 800bc6e:	7863      	ldrb	r3, [r4, #1]
 800bc70:	2b2a      	cmp	r3, #42	; 0x2a
 800bc72:	d135      	bne.n	800bce0 <_svfiprintf_r+0x188>
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	1d1a      	adds	r2, r3, #4
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	9203      	str	r2, [sp, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bfb8      	it	lt
 800bc80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc84:	3402      	adds	r4, #2
 800bc86:	9305      	str	r3, [sp, #20]
 800bc88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd54 <_svfiprintf_r+0x1fc>
 800bc8c:	7821      	ldrb	r1, [r4, #0]
 800bc8e:	2203      	movs	r2, #3
 800bc90:	4650      	mov	r0, sl
 800bc92:	f7f4 faad 	bl	80001f0 <memchr>
 800bc96:	b140      	cbz	r0, 800bcaa <_svfiprintf_r+0x152>
 800bc98:	2340      	movs	r3, #64	; 0x40
 800bc9a:	eba0 000a 	sub.w	r0, r0, sl
 800bc9e:	fa03 f000 	lsl.w	r0, r3, r0
 800bca2:	9b04      	ldr	r3, [sp, #16]
 800bca4:	4303      	orrs	r3, r0
 800bca6:	3401      	adds	r4, #1
 800bca8:	9304      	str	r3, [sp, #16]
 800bcaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcae:	4826      	ldr	r0, [pc, #152]	; (800bd48 <_svfiprintf_r+0x1f0>)
 800bcb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcb4:	2206      	movs	r2, #6
 800bcb6:	f7f4 fa9b 	bl	80001f0 <memchr>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d038      	beq.n	800bd30 <_svfiprintf_r+0x1d8>
 800bcbe:	4b23      	ldr	r3, [pc, #140]	; (800bd4c <_svfiprintf_r+0x1f4>)
 800bcc0:	bb1b      	cbnz	r3, 800bd0a <_svfiprintf_r+0x1b2>
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	3307      	adds	r3, #7
 800bcc6:	f023 0307 	bic.w	r3, r3, #7
 800bcca:	3308      	adds	r3, #8
 800bccc:	9303      	str	r3, [sp, #12]
 800bcce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd0:	4433      	add	r3, r6
 800bcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd4:	e767      	b.n	800bba6 <_svfiprintf_r+0x4e>
 800bcd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcda:	460c      	mov	r4, r1
 800bcdc:	2001      	movs	r0, #1
 800bcde:	e7a5      	b.n	800bc2c <_svfiprintf_r+0xd4>
 800bce0:	2300      	movs	r3, #0
 800bce2:	3401      	adds	r4, #1
 800bce4:	9305      	str	r3, [sp, #20]
 800bce6:	4619      	mov	r1, r3
 800bce8:	f04f 0c0a 	mov.w	ip, #10
 800bcec:	4620      	mov	r0, r4
 800bcee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcf2:	3a30      	subs	r2, #48	; 0x30
 800bcf4:	2a09      	cmp	r2, #9
 800bcf6:	d903      	bls.n	800bd00 <_svfiprintf_r+0x1a8>
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0c5      	beq.n	800bc88 <_svfiprintf_r+0x130>
 800bcfc:	9105      	str	r1, [sp, #20]
 800bcfe:	e7c3      	b.n	800bc88 <_svfiprintf_r+0x130>
 800bd00:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd04:	4604      	mov	r4, r0
 800bd06:	2301      	movs	r3, #1
 800bd08:	e7f0      	b.n	800bcec <_svfiprintf_r+0x194>
 800bd0a:	ab03      	add	r3, sp, #12
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	462a      	mov	r2, r5
 800bd10:	4b0f      	ldr	r3, [pc, #60]	; (800bd50 <_svfiprintf_r+0x1f8>)
 800bd12:	a904      	add	r1, sp, #16
 800bd14:	4638      	mov	r0, r7
 800bd16:	f3af 8000 	nop.w
 800bd1a:	1c42      	adds	r2, r0, #1
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	d1d6      	bne.n	800bcce <_svfiprintf_r+0x176>
 800bd20:	89ab      	ldrh	r3, [r5, #12]
 800bd22:	065b      	lsls	r3, r3, #25
 800bd24:	f53f af2c 	bmi.w	800bb80 <_svfiprintf_r+0x28>
 800bd28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd2a:	b01d      	add	sp, #116	; 0x74
 800bd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd30:	ab03      	add	r3, sp, #12
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	462a      	mov	r2, r5
 800bd36:	4b06      	ldr	r3, [pc, #24]	; (800bd50 <_svfiprintf_r+0x1f8>)
 800bd38:	a904      	add	r1, sp, #16
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	f7fe ff38 	bl	800abb0 <_printf_i>
 800bd40:	e7eb      	b.n	800bd1a <_svfiprintf_r+0x1c2>
 800bd42:	bf00      	nop
 800bd44:	0800ce24 	.word	0x0800ce24
 800bd48:	0800ce2e 	.word	0x0800ce2e
 800bd4c:	00000000 	.word	0x00000000
 800bd50:	0800baa3 	.word	0x0800baa3
 800bd54:	0800ce2a 	.word	0x0800ce2a

0800bd58 <_read_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4d07      	ldr	r5, [pc, #28]	; (800bd78 <_read_r+0x20>)
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	4608      	mov	r0, r1
 800bd60:	4611      	mov	r1, r2
 800bd62:	2200      	movs	r2, #0
 800bd64:	602a      	str	r2, [r5, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	f7f4 fd9d 	bl	80008a6 <_read>
 800bd6c:	1c43      	adds	r3, r0, #1
 800bd6e:	d102      	bne.n	800bd76 <_read_r+0x1e>
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	b103      	cbz	r3, 800bd76 <_read_r+0x1e>
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	bd38      	pop	{r3, r4, r5, pc}
 800bd78:	2000035c 	.word	0x2000035c

0800bd7c <_fstat_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d07      	ldr	r5, [pc, #28]	; (800bd9c <_fstat_r+0x20>)
 800bd80:	2300      	movs	r3, #0
 800bd82:	4604      	mov	r4, r0
 800bd84:	4608      	mov	r0, r1
 800bd86:	4611      	mov	r1, r2
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	f7f4 fdd1 	bl	8000930 <_fstat>
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	d102      	bne.n	800bd98 <_fstat_r+0x1c>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	b103      	cbz	r3, 800bd98 <_fstat_r+0x1c>
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	bf00      	nop
 800bd9c:	2000035c 	.word	0x2000035c

0800bda0 <_isatty_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4d06      	ldr	r5, [pc, #24]	; (800bdbc <_isatty_r+0x1c>)
 800bda4:	2300      	movs	r3, #0
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	602b      	str	r3, [r5, #0]
 800bdac:	f7f4 fdd0 	bl	8000950 <_isatty>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_isatty_r+0x1a>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_isatty_r+0x1a>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	2000035c 	.word	0x2000035c

0800bdc0 <_malloc_usable_size_r>:
 800bdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc4:	1f18      	subs	r0, r3, #4
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	bfbc      	itt	lt
 800bdca:	580b      	ldrlt	r3, [r1, r0]
 800bdcc:	18c0      	addlt	r0, r0, r3
 800bdce:	4770      	bx	lr

0800bdd0 <_init>:
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	bf00      	nop
 800bdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd6:	bc08      	pop	{r3}
 800bdd8:	469e      	mov	lr, r3
 800bdda:	4770      	bx	lr

0800bddc <_fini>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	bf00      	nop
 800bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde2:	bc08      	pop	{r3}
 800bde4:	469e      	mov	lr, r3
 800bde6:	4770      	bx	lr
