
Flash_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a548  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b304  0800b304  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b304  0800b304  0001b304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b30c  0800b30c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b30c  0800b30c  0001b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b314  0800b314  0001b314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116ff  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cc  00000000  00000000  0003179f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  00034d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027765  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd06  00000000  00000000  0005d415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d98f7  00000000  00000000  0006d11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146a12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004428  00000000  00000000  00146a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a6e0 	.word	0x0800a6e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800a6e0 	.word	0x0800a6e0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9d08      	ldr	r5, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	468e      	mov	lr, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14d      	bne.n	80003a2 <__udivmoddi4+0xaa>
 8000306:	428a      	cmp	r2, r1
 8000308:	4694      	mov	ip, r2
 800030a:	d969      	bls.n	80003e0 <__udivmoddi4+0xe8>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b152      	cbz	r2, 8000328 <__udivmoddi4+0x30>
 8000312:	fa01 f302 	lsl.w	r3, r1, r2
 8000316:	f1c2 0120 	rsb	r1, r2, #32
 800031a:	fa20 f101 	lsr.w	r1, r0, r1
 800031e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000322:	ea41 0e03 	orr.w	lr, r1, r3
 8000326:	4094      	lsls	r4, r2
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	0c21      	lsrs	r1, r4, #16
 800032e:	fbbe f6f8 	udiv	r6, lr, r8
 8000332:	fa1f f78c 	uxth.w	r7, ip
 8000336:	fb08 e316 	mls	r3, r8, r6, lr
 800033a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800033e:	fb06 f107 	mul.w	r1, r6, r7
 8000342:	4299      	cmp	r1, r3
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x64>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800034e:	f080 811f 	bcs.w	8000590 <__udivmoddi4+0x298>
 8000352:	4299      	cmp	r1, r3
 8000354:	f240 811c 	bls.w	8000590 <__udivmoddi4+0x298>
 8000358:	3e02      	subs	r6, #2
 800035a:	4463      	add	r3, ip
 800035c:	1a5b      	subs	r3, r3, r1
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800036c:	fb00 f707 	mul.w	r7, r0, r7
 8000370:	42a7      	cmp	r7, r4
 8000372:	d90a      	bls.n	800038a <__udivmoddi4+0x92>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037c:	f080 810a 	bcs.w	8000594 <__udivmoddi4+0x29c>
 8000380:	42a7      	cmp	r7, r4
 8000382:	f240 8107 	bls.w	8000594 <__udivmoddi4+0x29c>
 8000386:	4464      	add	r4, ip
 8000388:	3802      	subs	r0, #2
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	1be4      	subs	r4, r4, r7
 8000390:	2600      	movs	r6, #0
 8000392:	b11d      	cbz	r5, 800039c <__udivmoddi4+0xa4>
 8000394:	40d4      	lsrs	r4, r2
 8000396:	2300      	movs	r3, #0
 8000398:	e9c5 4300 	strd	r4, r3, [r5]
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0xc2>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	f000 80ef 	beq.w	800058a <__udivmoddi4+0x292>
 80003ac:	2600      	movs	r6, #0
 80003ae:	e9c5 0100 	strd	r0, r1, [r5]
 80003b2:	4630      	mov	r0, r6
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	fab3 f683 	clz	r6, r3
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d14a      	bne.n	8000458 <__udivmoddi4+0x160>
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xd4>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80f9 	bhi.w	80005be <__udivmoddi4+0x2c6>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb61 0303 	sbc.w	r3, r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	469e      	mov	lr, r3
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d0e0      	beq.n	800039c <__udivmoddi4+0xa4>
 80003da:	e9c5 4e00 	strd	r4, lr, [r5]
 80003de:	e7dd      	b.n	800039c <__udivmoddi4+0xa4>
 80003e0:	b902      	cbnz	r2, 80003e4 <__udivmoddi4+0xec>
 80003e2:	deff      	udf	#255	; 0xff
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	2a00      	cmp	r2, #0
 80003ea:	f040 8092 	bne.w	8000512 <__udivmoddi4+0x21a>
 80003ee:	eba1 010c 	sub.w	r1, r1, ip
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2601      	movs	r6, #1
 80003fc:	0c20      	lsrs	r0, r4, #16
 80003fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000402:	fb07 1113 	mls	r1, r7, r3, r1
 8000406:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040a:	fb0e f003 	mul.w	r0, lr, r3
 800040e:	4288      	cmp	r0, r1
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x12c>
 8000412:	eb1c 0101 	adds.w	r1, ip, r1
 8000416:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x12a>
 800041c:	4288      	cmp	r0, r1
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2c0>
 8000422:	4643      	mov	r3, r8
 8000424:	1a09      	subs	r1, r1, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1110 	mls	r1, r7, r0, r1
 8000430:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x156>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x154>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2ca>
 800044c:	4608      	mov	r0, r1
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	e79c      	b.n	8000392 <__udivmoddi4+0x9a>
 8000458:	f1c6 0720 	rsb	r7, r6, #32
 800045c:	40b3      	lsls	r3, r6
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa20 f407 	lsr.w	r4, r0, r7
 800046a:	fa01 f306 	lsl.w	r3, r1, r6
 800046e:	431c      	orrs	r4, r3
 8000470:	40f9      	lsrs	r1, r7
 8000472:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000476:	fa00 f306 	lsl.w	r3, r0, r6
 800047a:	fbb1 f8f9 	udiv	r8, r1, r9
 800047e:	0c20      	lsrs	r0, r4, #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fb09 1118 	mls	r1, r9, r8, r1
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	fb08 f00e 	mul.w	r0, r8, lr
 8000490:	4288      	cmp	r0, r1
 8000492:	fa02 f206 	lsl.w	r2, r2, r6
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b8>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2bc>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2bc>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1a09      	subs	r1, r1, r0
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b8:	fb09 1110 	mls	r1, r9, r0, r1
 80004bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c4:	458e      	cmp	lr, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1e2>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2b4>
 80004d2:	458e      	cmp	lr, r1
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2b4>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4461      	add	r1, ip
 80004da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004de:	fba0 9402 	umull	r9, r4, r0, r2
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	42a1      	cmp	r1, r4
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46a6      	mov	lr, r4
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x2a4>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x2a0>
 80004f0:	b15d      	cbz	r5, 800050a <__udivmoddi4+0x212>
 80004f2:	ebb3 0208 	subs.w	r2, r3, r8
 80004f6:	eb61 010e 	sbc.w	r1, r1, lr
 80004fa:	fa01 f707 	lsl.w	r7, r1, r7
 80004fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000502:	40f1      	lsrs	r1, r6
 8000504:	431f      	orrs	r7, r3
 8000506:	e9c5 7100 	strd	r7, r1, [r5]
 800050a:	2600      	movs	r6, #0
 800050c:	4631      	mov	r1, r6
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	f1c2 0320 	rsb	r3, r2, #32
 8000516:	40d8      	lsrs	r0, r3
 8000518:	fa0c fc02 	lsl.w	ip, ip, r2
 800051c:	fa21 f303 	lsr.w	r3, r1, r3
 8000520:	4091      	lsls	r1, r2
 8000522:	4301      	orrs	r1, r0
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000530:	fb07 3610 	mls	r6, r7, r0, r3
 8000534:	0c0b      	lsrs	r3, r1, #16
 8000536:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053a:	fb00 f60e 	mul.w	r6, r0, lr
 800053e:	429e      	cmp	r6, r3
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x260>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b8>
 8000550:	429e      	cmp	r6, r3
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b8>
 8000554:	3802      	subs	r0, #2
 8000556:	4463      	add	r3, ip
 8000558:	1b9b      	subs	r3, r3, r6
 800055a:	b289      	uxth	r1, r1
 800055c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000560:	fb07 3316 	mls	r3, r7, r6, r3
 8000564:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000568:	fb06 f30e 	mul.w	r3, r6, lr
 800056c:	428b      	cmp	r3, r1
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x28a>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2b0>
 800057a:	428b      	cmp	r3, r1
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2b0>
 800057e:	3e02      	subs	r6, #2
 8000580:	4461      	add	r1, ip
 8000582:	1ac9      	subs	r1, r1, r3
 8000584:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0x104>
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e705      	b.n	800039c <__udivmoddi4+0xa4>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e3      	b.n	800035c <__udivmoddi4+0x64>
 8000594:	4618      	mov	r0, r3
 8000596:	e6f8      	b.n	800038a <__udivmoddi4+0x92>
 8000598:	454b      	cmp	r3, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f8>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f8>
 80005a8:	4646      	mov	r6, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x28a>
 80005ac:	4620      	mov	r0, r4
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1e2>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x260>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b8>
 80005b8:	3b02      	subs	r3, #2
 80005ba:	4461      	add	r1, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x12c>
 80005be:	4630      	mov	r0, r6
 80005c0:	e709      	b.n	80003d6 <__udivmoddi4+0xde>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x156>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fafc 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f806 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f864 	bl	80006a4 <MX_GPIO_Init>
  //MX_DMA_Init();
  //MX_SPI1_Init();
  //MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  main_cpp();
 80005dc:	f008 ff4e 	bl	800947c <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x14>
	...

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 f864 	bl	80096c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xb8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <SystemClock_Config+0xb8>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <SystemClock_Config+0xb8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemClock_Config+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <SystemClock_Config+0xbc>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemClock_Config+0xbc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ff5f 	bl	800151c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000664:	f000 f93c 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f9c1 	bl	8001a0c <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000690:	f000 f926 	bl	80008e0 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	4b83      	ldr	r3, [pc, #524]	; (80008cc <MX_GPIO_Init+0x228>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a82      	ldr	r2, [pc, #520]	; (80008cc <MX_GPIO_Init+0x228>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b80      	ldr	r3, [pc, #512]	; (80008cc <MX_GPIO_Init+0x228>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b7c      	ldr	r3, [pc, #496]	; (80008cc <MX_GPIO_Init+0x228>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a7b      	ldr	r2, [pc, #492]	; (80008cc <MX_GPIO_Init+0x228>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b79      	ldr	r3, [pc, #484]	; (80008cc <MX_GPIO_Init+0x228>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b75      	ldr	r3, [pc, #468]	; (80008cc <MX_GPIO_Init+0x228>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a74      	ldr	r2, [pc, #464]	; (80008cc <MX_GPIO_Init+0x228>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b72      	ldr	r3, [pc, #456]	; (80008cc <MX_GPIO_Init+0x228>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b6e      	ldr	r3, [pc, #440]	; (80008cc <MX_GPIO_Init+0x228>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a6d      	ldr	r2, [pc, #436]	; (80008cc <MX_GPIO_Init+0x228>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b6b      	ldr	r3, [pc, #428]	; (80008cc <MX_GPIO_Init+0x228>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b67      	ldr	r3, [pc, #412]	; (80008cc <MX_GPIO_Init+0x228>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a66      	ldr	r2, [pc, #408]	; (80008cc <MX_GPIO_Init+0x228>)
 8000734:	f043 0320 	orr.w	r3, r3, #32
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b64      	ldr	r3, [pc, #400]	; (80008cc <MX_GPIO_Init+0x228>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0320 	and.w	r3, r3, #32
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b60      	ldr	r3, [pc, #384]	; (80008cc <MX_GPIO_Init+0x228>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a5f      	ldr	r2, [pc, #380]	; (80008cc <MX_GPIO_Init+0x228>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b5d      	ldr	r3, [pc, #372]	; (80008cc <MX_GPIO_Init+0x228>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <MX_GPIO_Init+0x228>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a58      	ldr	r2, [pc, #352]	; (80008cc <MX_GPIO_Init+0x228>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b56      	ldr	r3, [pc, #344]	; (80008cc <MX_GPIO_Init+0x228>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f244 0181 	movw	r1, #16513	; 0x4081
 8000784:	4852      	ldr	r0, [pc, #328]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000786:	f000 feaf 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configur GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2140      	movs	r1, #64	; 0x40
 800078e:	4851      	ldr	r0, [pc, #324]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000790:	f000 feaa 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	484b      	ldr	r0, [pc, #300]	; (80008d8 <MX_GPIO_Init+0x234>)
 80007ac:	f000 fcf0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007b0:	2332      	movs	r3, #50	; 0x32
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c0:	230b      	movs	r3, #11
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4843      	ldr	r0, [pc, #268]	; (80008d8 <MX_GPIO_Init+0x234>)
 80007cc:	f000 fce0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80007d0:	2306      	movs	r3, #6
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e0:	230b      	movs	r3, #11
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	483c      	ldr	r0, [pc, #240]	; (80008dc <MX_GPIO_Init+0x238>)
 80007ec:	f000 fcd0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4831      	ldr	r0, [pc, #196]	; (80008d0 <MX_GPIO_Init+0x22c>)
 800080a:	f000 fcc1 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4829      	ldr	r0, [pc, #164]	; (80008d0 <MX_GPIO_Init+0x22c>)
 800082c:	f000 fcb0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4823      	ldr	r0, [pc, #140]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000848:	f000 fca2 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	481d      	ldr	r0, [pc, #116]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000860:	f000 fc96 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000864:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000876:	230a      	movs	r3, #10
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4816      	ldr	r0, [pc, #88]	; (80008dc <MX_GPIO_Init+0x238>)
 8000882:	f000 fc85 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4810      	ldr	r0, [pc, #64]	; (80008dc <MX_GPIO_Init+0x238>)
 800089c:	f000 fc78 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_GPIO_Init+0x230>)
 80008be:	f000 fc67 	bl	8001190 <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3730      	adds	r7, #48	; 0x30
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40021800 	.word	0x40021800
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020000 	.word	0x40020000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f972 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <DMA2_Stream0_IRQHandler+0x10>)
 80009a6:	f000 fa69 	bl	8000e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000104 	.word	0x20000104

080009b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <DMA2_Stream3_IRQHandler+0x10>)
 80009ba:	f000 fa5f 	bl	8000e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000164 	.word	0x20000164

080009c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_kill>:

int _kill(int pid, int sig)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009e2:	f008 fe03 	bl	80095ec <__errno>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2216      	movs	r2, #22
 80009ea:	601a      	str	r2, [r3, #0]
	return -1;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_exit>:

void _exit (int status)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffe7 	bl	80009d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a0a:	e7fe      	b.n	8000a0a <_exit+0x12>

08000a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
	}

return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf1      	blt.n	8000a58 <_write+0x12>
	}
	return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_close>:

int _close(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f008 fd68 	bl	80095ec <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20030000 	.word	0x20030000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	200001d8 	.word	0x200001d8

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7e:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b94:	4c0b      	ldr	r4, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd7 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f008 fd39 	bl	800961c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fd0f 	bl	80005cc <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bb0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bbc:	0800b318 	.word	0x0800b318
  ldr r2, =_sbss
 8000bc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bc4:	200001d4 	.word	0x200001d4

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f90d 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe74 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f917 	bl	8000e62 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 f8ed 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000090 	.word	0x20000090

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000090 	.word	0x20000090

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff47 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff5c 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb0 	bl	8000dd0 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e88:	4b8e      	ldr	r3, [pc, #568]	; (80010c4 <HAL_DMA_IRQHandler+0x248>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a8e      	ldr	r2, [pc, #568]	; (80010c8 <HAL_DMA_IRQHandler+0x24c>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	0a9b      	lsrs	r3, r3, #10
 8000e94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d01a      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0204 	bic.w	r2, r2, #4
 8000ece:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee0:	f043 0201 	orr.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	2201      	movs	r2, #1
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d012      	beq.n	8000f1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00b      	beq.n	8000f1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f16:	f043 0202 	orr.w	r2, r3, #2
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f22:	2204      	movs	r2, #4
 8000f24:	409a      	lsls	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d012      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f40:	2204      	movs	r2, #4
 8000f42:	409a      	lsls	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4c:	f043 0204 	orr.w	r2, r3, #4
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f58:	2210      	movs	r2, #16
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d043      	beq.n	8000fec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d03c      	beq.n	8000fec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f76:	2210      	movs	r2, #16
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d018      	beq.n	8000fbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d108      	bne.n	8000fac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d024      	beq.n	8000fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	4798      	blx	r3
 8000faa:	e01f      	b.n	8000fec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01b      	beq.n	8000fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	4798      	blx	r3
 8000fbc:	e016      	b.n	8000fec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d107      	bne.n	8000fdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0208 	bic.w	r2, r2, #8
 8000fda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 808f 	beq.w	800111c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 8087 	beq.w	800111c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	2220      	movs	r2, #32
 8001014:	409a      	lsls	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b05      	cmp	r3, #5
 8001024:	d136      	bne.n	8001094 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0216 	bic.w	r2, r2, #22
 8001034:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001044:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <HAL_DMA_IRQHandler+0x1da>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0208 	bic.w	r2, r2, #8
 8001064:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	223f      	movs	r2, #63	; 0x3f
 800106c:	409a      	lsls	r2, r3
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001086:	2b00      	cmp	r3, #0
 8001088:	d07e      	beq.n	8001188 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
        }
        return;
 8001092:	e079      	b.n	8001188 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01d      	beq.n	80010de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10d      	bne.n	80010cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d031      	beq.n	800111c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	4798      	blx	r3
 80010c0:	e02c      	b.n	800111c <HAL_DMA_IRQHandler+0x2a0>
 80010c2:	bf00      	nop
 80010c4:	20000000 	.word	0x20000000
 80010c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d023      	beq.n	800111c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	4798      	blx	r3
 80010dc:	e01e      	b.n	800111c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10f      	bne.n	800110c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0210 	bic.w	r2, r2, #16
 80010fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	2b00      	cmp	r3, #0
 8001122:	d032      	beq.n	800118a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d022      	beq.n	8001176 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2205      	movs	r2, #5
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	d307      	bcc.n	8001164 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f2      	bne.n	8001148 <HAL_DMA_IRQHandler+0x2cc>
 8001162:	e000      	b.n	8001166 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001164:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	4798      	blx	r3
 8001186:	e000      	b.n	800118a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001188:	bf00      	nop
    }
  }
}
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e177      	b.n	800149c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8166 	bne.w	8001496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c0 	beq.w	8001496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d037      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d031      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_GPIO_Init+0x338>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_GPIO_Init+0x33c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_GPIO_Init+0x340>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x344>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x348>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_GPIO_Init+0x34c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x21a>
 80013a6:	2309      	movs	r3, #9
 80013a8:	e012      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013aa:	230a      	movs	r3, #10
 80013ac:	e010      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ae:	2308      	movs	r3, #8
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x328>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x354>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae84 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40022400 	.word	0x40022400
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e267      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d075      	beq.n	8001626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d00c      	beq.n	8001560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001546:	4b85      	ldr	r3, [pc, #532]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154e:	2b08      	cmp	r3, #8
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b82      	ldr	r3, [pc, #520]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b7e      	ldr	r3, [pc, #504]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x108>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e242      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x74>
 8001582:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a75      	ldr	r2, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x98>
 800159a:	4b70      	ldr	r3, [pc, #448]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6f      	ldr	r2, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b6d      	ldr	r3, [pc, #436]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6c      	ldr	r2, [pc, #432]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 80015b4:	4b69      	ldr	r3, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a68      	ldr	r2, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb60 	bl	8000c98 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb5c 	bl	8000c98 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e207      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb4c 	bl	8000c98 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fb48 	bl	8000c98 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1f3      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0xe8>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d063      	beq.n	80016fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1c7      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4937      	ldr	r1, [pc, #220]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e03a      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168c:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_RCC_OscConfig+0x244>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fb01 	bl	8000c98 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fafd 	bl	8000c98 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1a8      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4925      	ldr	r1, [pc, #148]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_RCC_OscConfig+0x244>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fae0 	bl	8000c98 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fadc 	bl	8000c98 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e187      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d036      	beq.n	8001774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d016      	beq.n	800173c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x248>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fac0 	bl	8000c98 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fabc 	bl	8000c98 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e167      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x200>
 800173a:	e01b      	b.n	8001774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_OscConfig+0x248>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff faa9 	bl	8000c98 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	e00e      	b.n	8001768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff faa5 	bl	8000c98 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d907      	bls.n	8001768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e150      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
 800175c:	40023800 	.word	0x40023800
 8001760:	42470000 	.word	0x42470000
 8001764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800176a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ea      	bne.n	800174a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8097 	beq.w	80018b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b7d      	ldr	r3, [pc, #500]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a7c      	ldr	r2, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b7a      	ldr	r3, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4b74      	ldr	r3, [pc, #464]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a73      	ldr	r2, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa65 	bl	8000c98 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7ff fa61 	bl	8000c98 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e10c      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x2ea>
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	4a63      	ldr	r2, [pc, #396]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6713      	str	r3, [r2, #112]	; 0x70
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x324>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x30c>
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	4a5e      	ldr	r2, [pc, #376]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a5b      	ldr	r2, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x324>
 8001828:	4b58      	ldr	r3, [pc, #352]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	4b55      	ldr	r3, [pc, #340]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a54      	ldr	r2, [pc, #336]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d015      	beq.n	8001874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff fa26 	bl	8000c98 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff fa22 	bl	8000c98 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0cb      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0ee      	beq.n	8001850 <HAL_RCC_OscConfig+0x334>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fa10 	bl	8000c98 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f7ff fa0c 	bl	8000c98 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0b5      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ee      	bne.n	800187c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a38      	ldr	r2, [pc, #224]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a1 	beq.w	80019fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d05c      	beq.n	8001980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d141      	bne.n	8001952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_OscConfig+0x478>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f9e0 	bl	8000c98 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f9dc 	bl	8000c98 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e087      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	491b      	ldr	r1, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x478>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f9b5 	bl	8000c98 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f9b1 	bl	8000c98 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e05c      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x416>
 8001950:	e054      	b.n	80019fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x478>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff f99e 	bl	8000c98 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f99a 	bl	8000c98 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e045      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x444>
 800197e:	e03d      	b.n	80019fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e038      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	40007000 	.word	0x40007000
 8001994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d028      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d121      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d11a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d111      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	3b01      	subs	r3, #1
 80019e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0cc      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d90c      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0b8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	494d      	ldr	r1, [pc, #308]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d044      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d119      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d003      	beq.n	8001aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e067      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4934      	ldr	r1, [pc, #208]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff f8cc 	bl	8000c98 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff f8c8 	bl	8000c98 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e04f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20c      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4916      	ldr	r1, [pc, #88]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b92:	f000 f821 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490a      	ldr	r1, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f82c 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	0800b060 	.word	0x0800b060
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b094      	sub	sp, #80	; 0x50
 8001bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
 8001be4:	2300      	movs	r3, #0
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be8:	2300      	movs	r3, #0
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf0:	4b79      	ldr	r3, [pc, #484]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d00d      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x40>
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	f200 80e1 	bhi.w	8001dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x34>
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0a:	e0db      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c10:	e0db      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c12:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c16:	e0d8      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c18:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c22:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	2200      	movs	r2, #0
 8001c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
 8001c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	f04f 0000 	mov.w	r0, #0
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	0159      	lsls	r1, r3, #5
 8001c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5c:	0150      	lsls	r0, r2, #5
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4621      	mov	r1, r4
 8001c64:	1a51      	subs	r1, r2, r1
 8001c66:	6139      	str	r1, [r7, #16]
 8001c68:	4629      	mov	r1, r5
 8001c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c7c:	4659      	mov	r1, fp
 8001c7e:	018b      	lsls	r3, r1, #6
 8001c80:	4651      	mov	r1, sl
 8001c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c86:	4651      	mov	r1, sl
 8001c88:	018a      	lsls	r2, r1, #6
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c90:	4659      	mov	r1, fp
 8001c92:	eb63 0901 	sbc.w	r9, r3, r1
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001caa:	4690      	mov	r8, r2
 8001cac:	4699      	mov	r9, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	eb18 0303 	adds.w	r3, r8, r3
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	462b      	mov	r3, r5
 8001cb8:	eb49 0303 	adc.w	r3, r9, r3
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cca:	4629      	mov	r1, r5
 8001ccc:	024b      	lsls	r3, r1, #9
 8001cce:	4621      	mov	r1, r4
 8001cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	024a      	lsls	r2, r1, #9
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cde:	2200      	movs	r2, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce8:	f7fe fada 	bl	80002a0 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf4:	e058      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	099b      	lsrs	r3, r3, #6
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4611      	mov	r1, r2
 8001d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d10:	4642      	mov	r2, r8
 8001d12:	464b      	mov	r3, r9
 8001d14:	f04f 0000 	mov.w	r0, #0
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	0159      	lsls	r1, r3, #5
 8001d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d22:	0150      	lsls	r0, r2, #5
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4641      	mov	r1, r8
 8001d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2e:	4649      	mov	r1, r9
 8001d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d48:	ebb2 040a 	subs.w	r4, r2, sl
 8001d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	00eb      	lsls	r3, r5, #3
 8001d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5e:	00e2      	lsls	r2, r4, #3
 8001d60:	4614      	mov	r4, r2
 8001d62:	461d      	mov	r5, r3
 8001d64:	4643      	mov	r3, r8
 8001d66:	18e3      	adds	r3, r4, r3
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	eb45 0303 	adc.w	r3, r5, r3
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7e:	4629      	mov	r1, r5
 8001d80:	028b      	lsls	r3, r1, #10
 8001d82:	4621      	mov	r1, r4
 8001d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d88:	4621      	mov	r1, r4
 8001d8a:	028a      	lsls	r2, r1, #10
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d92:	2200      	movs	r2, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	61fa      	str	r2, [r7, #28]
 8001d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d9c:	f7fe fa80 	bl	80002a0 <__aeabi_uldivmod>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4613      	mov	r3, r2
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3750      	adds	r7, #80	; 0x50
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	007a1200 	.word	0x007a1200

08001de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07b      	b.n	8001eee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d108      	bne.n	8001e10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e06:	d009      	beq.n	8001e1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
 8001e0e:	e005      	b.n	8001e1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f007 f9e4 	bl	8009204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	ea42 0103 	orr.w	r1, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	f003 0104 	and.w	r1, r3, #4
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f003 0210 	and.w	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001edc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b088      	sub	sp, #32
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_SPI_Transmit+0x22>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e126      	b.n	8002166 <HAL_SPI_Transmit+0x270>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f20:	f7fe feba 	bl	8000c98 <HAL_GetTick>
 8001f24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d002      	beq.n	8001f3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f3a:	e10b      	b.n	8002154 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_SPI_Transmit+0x52>
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f4c:	e102      	b.n	8002154 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2203      	movs	r2, #3
 8001f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	88fa      	ldrh	r2, [r7, #6]
 8001f66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	88fa      	ldrh	r2, [r7, #6]
 8001f6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f94:	d10f      	bne.n	8001fb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d007      	beq.n	8001fd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fdc:	d14b      	bne.n	8002076 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_Transmit+0xf6>
 8001fe6:	8afb      	ldrh	r3, [r7, #22]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d13e      	bne.n	800206a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002010:	e02b      	b.n	800206a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d112      	bne.n	8002046 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	1c9a      	adds	r2, r3, #2
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	86da      	strh	r2, [r3, #54]	; 0x36
 8002044:	e011      	b.n	800206a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002046:	f7fe fe27 	bl	8000c98 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d803      	bhi.n	800205e <HAL_SPI_Transmit+0x168>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800205c:	d102      	bne.n	8002064 <HAL_SPI_Transmit+0x16e>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002068:	e074      	b.n	8002154 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ce      	bne.n	8002012 <HAL_SPI_Transmit+0x11c>
 8002074:	e04c      	b.n	8002110 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_SPI_Transmit+0x18e>
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d140      	bne.n	8002106 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	330c      	adds	r3, #12
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020aa:	e02c      	b.n	8002106 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d113      	bne.n	80020e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	330c      	adds	r3, #12
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	86da      	strh	r2, [r3, #54]	; 0x36
 80020e0:	e011      	b.n	8002106 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e2:	f7fe fdd9 	bl	8000c98 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d803      	bhi.n	80020fa <HAL_SPI_Transmit+0x204>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f8:	d102      	bne.n	8002100 <HAL_SPI_Transmit+0x20a>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002104:	e026      	b.n	8002154 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1cd      	bne.n	80020ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fbcb 	bl	80028b0 <SPI_EndRxTxTransaction>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10a      	bne.n	8002144 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	77fb      	strb	r3, [r7, #31]
 8002150:	e000      	b.n	8002154 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002164:	7ffb      	ldrb	r3, [r7, #31]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b088      	sub	sp, #32
 8002172:	af02      	add	r7, sp, #8
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800218a:	d112      	bne.n	80021b2 <HAL_SPI_Receive+0x44>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10e      	bne.n	80021b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2204      	movs	r2, #4
 8002198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f8f1 	bl	8002390 <HAL_SPI_TransmitReceive>
 80021ae:	4603      	mov	r3, r0
 80021b0:	e0ea      	b.n	8002388 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_SPI_Receive+0x52>
 80021bc:	2302      	movs	r3, #2
 80021be:	e0e3      	b.n	8002388 <HAL_SPI_Receive+0x21a>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021c8:	f7fe fd66 	bl	8000c98 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d002      	beq.n	80021e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80021da:	2302      	movs	r3, #2
 80021dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021de:	e0ca      	b.n	8002376 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_SPI_Receive+0x7e>
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021f0:	e0c1      	b.n	8002376 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2204      	movs	r2, #4
 80021f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002238:	d10f      	bne.n	800225a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d007      	beq.n	8002278 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d162      	bne.n	8002346 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002280:	e02e      	b.n	80022e0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d115      	bne.n	80022bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f103 020c 	add.w	r2, r3, #12
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ba:	e011      	b.n	80022e0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022bc:	f7fe fcec 	bl	8000c98 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d803      	bhi.n	80022d4 <HAL_SPI_Receive+0x166>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d2:	d102      	bne.n	80022da <HAL_SPI_Receive+0x16c>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022de:	e04a      	b.n	8002376 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1cb      	bne.n	8002282 <HAL_SPI_Receive+0x114>
 80022ea:	e031      	b.n	8002350 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d113      	bne.n	8002322 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	b292      	uxth	r2, r2
 8002306:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	1c9a      	adds	r2, r3, #2
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002320:	e011      	b.n	8002346 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002322:	f7fe fcb9 	bl	8000c98 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d803      	bhi.n	800233a <HAL_SPI_Receive+0x1cc>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002338:	d102      	bne.n	8002340 <HAL_SPI_Receive+0x1d2>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002344:	e017      	b.n	8002376 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1cd      	bne.n	80022ec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fa45 	bl	80027e4 <SPI_EndRxTransaction>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
 8002372:	e000      	b.n	8002376 <HAL_SPI_Receive+0x208>
  }

error :
 8002374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800239e:	2301      	movs	r3, #1
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x26>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e18a      	b.n	80026cc <HAL_SPI_TransmitReceive+0x33c>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023be:	f7fe fc6b 	bl	8000c98 <HAL_GetTick>
 80023c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d00f      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x70>
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e6:	d107      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x68>
 80023f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d003      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
 80023fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023fe:	e15b      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x82>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x82>
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002418:	e14e      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b04      	cmp	r3, #4
 8002424:	d003      	beq.n	800242e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2205      	movs	r2, #5
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d007      	beq.n	8002482 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800248a:	d178      	bne.n	800257e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_SPI_TransmitReceive+0x10a>
 8002494:	8b7b      	ldrh	r3, [r7, #26]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d166      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	1c9a      	adds	r2, r3, #2
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024be:	e053      	b.n	8002568 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d11b      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x176>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d016      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x176>
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d113      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	1c9a      	adds	r2, r3, #2
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d119      	bne.n	8002548 <HAL_SPI_TransmitReceive+0x1b8>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d014      	beq.n	8002548 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	b292      	uxth	r2, r2
 800252a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	1c9a      	adds	r2, r3, #2
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002548:	f7fe fba6 	bl	8000c98 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002554:	429a      	cmp	r2, r3
 8002556:	d807      	bhi.n	8002568 <HAL_SPI_TransmitReceive+0x1d8>
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255e:	d003      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002566:	e0a7      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1a6      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x130>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1a1      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x130>
 800257c:	e07c      	b.n	8002678 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_TransmitReceive+0x1fc>
 8002586:	8b7b      	ldrh	r3, [r7, #26]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d16b      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b2:	e057      	b.n	8002664 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d11c      	bne.n	80025fc <HAL_SPI_TransmitReceive+0x26c>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d017      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x26c>
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d114      	bne.n	80025fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	330c      	adds	r3, #12
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d119      	bne.n	800263e <HAL_SPI_TransmitReceive+0x2ae>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d014      	beq.n	800263e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800263a:	2301      	movs	r3, #1
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800263e:	f7fe fb2b 	bl	8000c98 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264a:	429a      	cmp	r2, r3
 800264c:	d803      	bhi.n	8002656 <HAL_SPI_TransmitReceive+0x2c6>
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002654:	d102      	bne.n	800265c <HAL_SPI_TransmitReceive+0x2cc>
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002662:	e029      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1a2      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x224>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d19d      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f917 	bl	80028b0 <SPI_EndRxTxTransaction>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002694:	e010      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	e000      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3730      	adds	r7, #48	; 0x30
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026e4:	f7fe fad8 	bl	8000c98 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026f4:	f7fe fad0 	bl	8000c98 <HAL_GetTick>
 80026f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	015b      	lsls	r3, r3, #5
 8002700:	0d1b      	lsrs	r3, r3, #20
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800270a:	e054      	b.n	80027b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002712:	d050      	beq.n	80027b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002714:	f7fe fac0 	bl	8000c98 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	429a      	cmp	r2, r3
 8002722:	d902      	bls.n	800272a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d13d      	bne.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d111      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800274c:	d004      	beq.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002756:	d107      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002770:	d10f      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e017      	b.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	bf0c      	ite	eq
 80027c6:	2301      	moveq	r3, #1
 80027c8:	2300      	movne	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d19b      	bne.n	800270c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000

080027e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f8:	d111      	bne.n	800281e <SPI_EndRxTransaction+0x3a>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002802:	d004      	beq.n	800280e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280c:	d107      	bne.n	800281e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002826:	d12a      	bne.n	800287e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002830:	d012      	beq.n	8002858 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff ff49 	bl	80026d4 <SPI_WaitFlagStateUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d02d      	beq.n	80028a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e026      	b.n	80028a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2200      	movs	r2, #0
 8002860:	2101      	movs	r1, #1
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff ff36 	bl	80026d4 <SPI_WaitFlagStateUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01a      	beq.n	80028a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e013      	b.n	80028a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	2101      	movs	r1, #1
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff ff23 	bl	80026d4 <SPI_WaitFlagStateUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e000      	b.n	80028a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <SPI_EndRxTxTransaction+0x7c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <SPI_EndRxTxTransaction+0x80>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028da:	d112      	bne.n	8002902 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fef4 	bl	80026d4 <SPI_WaitFlagStateUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e00f      	b.n	8002922 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3b01      	subs	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d0f2      	beq.n	8002902 <SPI_EndRxTxTransaction+0x52>
 800291c:	e000      	b.n	8002920 <SPI_EndRxTxTransaction+0x70>
        break;
 800291e:	bf00      	nop
  }

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000
 8002930:	165e9f81 	.word	0x165e9f81

08002934 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4293      	cmp	r3, r2
 8002944:	bf38      	it	cc
 8002946:	4613      	movcc	r3, r2
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4293      	cmp	r3, r2
 8002964:	bf28      	it	cs
 8002966:	4613      	movcs	r3, r2
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	fbb3 f2f2 	udiv	r2, r3, r2
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	fb01 f202 	mul.w	r2, r1, r2
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	1ad3      	subs	r3, r2, r3
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ffde 	bl	8002974 <lfs_aligndown>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fd fc61 	bl	80002d0 <__popcountsi2>
 8002a0e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad3      	subs	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8002a3c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffee 	bl	8002a34 <lfs_fromle32>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffed 	bl	8002a62 <lfs_frombe32>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f006 fde2 	bl	8009664 <malloc>
 8002aa0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f006 fdde 	bl	8009674 <free>
#else
    (void)p;
#endif
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ad0:	601a      	str	r2, [r3, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68d8      	ldr	r0, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	461a      	mov	r2, r3
 8002af4:	21ff      	movs	r1, #255	; 0xff
 8002af6:	f006 fde3 	bl	80096c0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8002b0c:	b5b0      	push	{r4, r5, r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d208      	bcs.n	8002b3c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8002b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b34:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	f240 811b 	bls.w	8002d72 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8002b3c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002b40:	e11c      	b.n	8002d7c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03f      	beq.n	8002bcc <lfs_bd_read+0xc0>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d13a      	bne.n	8002bcc <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8002b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d232      	bcs.n	8002bcc <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d324      	bcc.n	8002bba <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	1acb      	subs	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	69b8      	ldr	r0, [r7, #24]
 8002b82:	f7ff fee7 	bl	8002954 <lfs_min>
 8002b86:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b92:	1acb      	subs	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	69f8      	ldr	r0, [r7, #28]
 8002b9c:	f006 fd82 	bl	80096a4 <memcpy>

                data += diff;
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002bb8:	e0db      	b.n	8002d72 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	69b8      	ldr	r0, [r7, #24]
 8002bc6:	f7ff fec5 	bl	8002954 <lfs_min>
 8002bca:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d13a      	bne.n	8002c4c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4413      	add	r3, r2
        if (block == rcache->block &&
 8002be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d232      	bcs.n	8002c4c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d324      	bcc.n	8002c3a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	1acb      	subs	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	69b8      	ldr	r0, [r7, #24]
 8002c02:	f7ff fea7 	bl	8002954 <lfs_min>
 8002c06:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c12:	1acb      	subs	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	69f8      	ldr	r0, [r7, #28]
 8002c1c:	f006 fd42 	bl	80096a4 <memcpy>

                data += diff;
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4413      	add	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002c38:	e09b      	b.n	8002d72 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	69b8      	ldr	r0, [r7, #24]
 8002c46:	f7ff fe85 	bl	8002954 <lfs_min>
 8002c4a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d336      	bcc.n	8002cc2 <lfs_bd_read+0x1b6>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c60:	fb01 f202 	mul.w	r2, r1, r2
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12b      	bne.n	8002cc2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d325      	bcc.n	8002cc2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	69b8      	ldr	r0, [r7, #24]
 8002c80:	f7ff fe78 	bl	8002974 <lfs_aligndown>
 8002c84:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8a:	685c      	ldr	r4, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c9a:	47a0      	blx	r4
 8002c9c:	6178      	str	r0, [r7, #20]
            if (err) {
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <lfs_bd_read+0x19c>
                return err;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	e069      	b.n	8002d7c <lfs_bd_read+0x270>
            }

            data += diff;
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4413      	add	r3, r2
 8002cae:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8002cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8002cc0:	e057      	b.n	8002d72 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d305      	bcc.n	8002cda <lfs_bd_read+0x1ce>
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <lfs_bd_read+0x278>)
 8002cd0:	4a2d      	ldr	r2, [pc, #180]	; (8002d88 <lfs_bd_read+0x27c>)
 8002cd2:	216b      	movs	r1, #107	; 0x6b
 8002cd4:	482d      	ldr	r0, [pc, #180]	; (8002d8c <lfs_bd_read+0x280>)
 8002cd6:	f006 fc6b 	bl	80095b0 <__assert_func>
        rcache->block = block;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cde:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cea:	f7ff fe43 	bl	8002974 <lfs_aligndown>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8002cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4619      	mov	r1, r3
 8002d02:	4610      	mov	r0, r2
 8002d04:	f7ff fe4b 	bl	800299e <lfs_alignup>
 8002d08:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f7ff fe1e 	bl	8002954 <lfs_min>
 8002d18:	4602      	mov	r2, r0
                - rcache->off,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8002d1e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7ff fe13 	bl	8002954 <lfs_min>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d38:	685c      	ldr	r4, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	462b      	mov	r3, r5
 8002d52:	47a0      	blx	r4
 8002d54:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	dd05      	ble.n	8002d68 <lfs_bd_read+0x25c>
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <lfs_bd_read+0x284>)
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <lfs_bd_read+0x27c>)
 8002d60:	2176      	movs	r1, #118	; 0x76
 8002d62:	480a      	ldr	r0, [pc, #40]	; (8002d8c <lfs_bd_read+0x280>)
 8002d64:	f006 fc24 	bl	80095b0 <__assert_func>
        if (err) {
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <lfs_bd_read+0x266>
            return err;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	e004      	b.n	8002d7c <lfs_bd_read+0x270>
    while (size > 0) {
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f aee4 	bne.w	8002b42 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bdb0      	pop	{r4, r5, r7, pc}
 8002d84:	0800a6f8 	.word	0x0800a6f8
 8002d88:	0800b070 	.word	0x0800b070
 8002d8c:	0800a718 	.word	0x0800a718
 8002d90:	0800a73c 	.word	0x0800a73c

08002d94 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
 8002dae:	e039      	b.n	8002e24 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8002db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2108      	movs	r1, #8
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fdcb 	bl	8002954 <lfs_min>
 8002dbe:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	1ad1      	subs	r1, r2, r3
 8002dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	4413      	add	r3, r2
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	9203      	str	r2, [sp, #12]
 8002dd0:	f107 0210 	add.w	r2, r7, #16
 8002dd4:	9202      	str	r2, [sp, #8]
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff fe92 	bl	8002b0c <lfs_bd_read>
 8002de8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <lfs_bd_cmp+0x60>
            return res;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	e01c      	b.n	8002e2e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	18d1      	adds	r1, r2, r3
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f006 fc3f 	bl	8009684 <memcmp>
 8002e06:	61b8      	str	r0, [r7, #24]
        if (res) {
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da01      	bge.n	8002e18 <lfs_bd_cmp+0x84>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e00a      	b.n	8002e2e <lfs_bd_cmp+0x9a>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e008      	b.n	8002e2e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	4413      	add	r3, r2
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d3c1      	bcc.n	8002db0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3728      	adds	r7, #40	; 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002e38:	b5b0      	push	{r4, r5, r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af04      	add	r7, sp, #16
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4e:	d061      	beq.n	8002f14 <lfs_bd_flush+0xdc>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f113 0f02 	cmn.w	r3, #2
 8002e58:	d05c      	beq.n	8002f14 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d305      	bcc.n	8002e74 <lfs_bd_flush+0x3c>
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <lfs_bd_flush+0xe8>)
 8002e6a:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <lfs_bd_flush+0xec>)
 8002e6c:	219e      	movs	r1, #158	; 0x9e
 8002e6e:	482e      	ldr	r0, [pc, #184]	; (8002f28 <lfs_bd_flush+0xf0>)
 8002e70:	f006 fb9e 	bl	80095b0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4610      	mov	r0, r2
 8002e82:	f7ff fd8c 	bl	800299e <lfs_alignup>
 8002e86:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e8c:	689c      	ldr	r4, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	47a0      	blx	r4
 8002ea6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	dd05      	ble.n	8002eba <lfs_bd_flush+0x82>
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <lfs_bd_flush+0xf4>)
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <lfs_bd_flush+0xec>)
 8002eb2:	21a2      	movs	r1, #162	; 0xa2
 8002eb4:	481c      	ldr	r0, [pc, #112]	; (8002f28 <lfs_bd_flush+0xf0>)
 8002eb6:	f006 fb7b 	bl	80095b0 <__assert_func>
        if (err) {
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <lfs_bd_flush+0x8c>
            return err;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	e028      	b.n	8002f16 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d020      	beq.n	8002f0c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff fdf7 	bl	8002ac0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8002ede:	69f8      	ldr	r0, [r7, #28]
 8002ee0:	9003      	str	r0, [sp, #12]
 8002ee2:	9102      	str	r1, [sp, #8]
 8002ee4:	9201      	str	r2, [sp, #4]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	2100      	movs	r1, #0
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff ff50 	bl	8002d94 <lfs_bd_cmp>
 8002ef4:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	da01      	bge.n	8002f00 <lfs_bd_flush+0xc8>
                return res;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	e00a      	b.n	8002f16 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8002f06:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002f0a:	e004      	b.n	8002f16 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff fde5 	bl	8002ade <lfs_cache_zero>
    }

    return 0;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	0800a748 	.word	0x0800a748
 8002f24:	0800b07c 	.word	0x0800b07c
 8002f28:	0800a718 	.word	0x0800a718
 8002f2c:	0800a73c 	.word	0x0800a73c

08002f30 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff fdbd 	bl	8002ac0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff ff73 	bl	8002e38 <lfs_bd_flush>
 8002f52:	6178      	str	r0, [r7, #20]
    if (err) {
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <lfs_bd_sync+0x2e>
        return err;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	e011      	b.n	8002f82 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4798      	blx	r3
 8002f6c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dd05      	ble.n	8002f80 <lfs_bd_sync+0x50>
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <lfs_bd_sync+0x5c>)
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <lfs_bd_sync+0x60>)
 8002f78:	21c8      	movs	r1, #200	; 0xc8
 8002f7a:	4806      	ldr	r0, [pc, #24]	; (8002f94 <lfs_bd_sync+0x64>)
 8002f7c:	f006 fb18 	bl	80095b0 <__assert_func>
    return err;
 8002f80:	697b      	ldr	r3, [r7, #20]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	0800a73c 	.word	0x0800a73c
 8002f90:	0800b08c 	.word	0x0800b08c
 8002f94:	0800a718 	.word	0x0800a718

08002f98 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f113 0f02 	cmn.w	r3, #2
 8002fb0:	d00b      	beq.n	8002fca <lfs_bd_prog+0x32>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d305      	bcc.n	8002fca <lfs_bd_prog+0x32>
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <lfs_bd_prog+0x144>)
 8002fc0:	4a47      	ldr	r2, [pc, #284]	; (80030e0 <lfs_bd_prog+0x148>)
 8002fc2:	21d3      	movs	r1, #211	; 0xd3
 8002fc4:	4847      	ldr	r0, [pc, #284]	; (80030e4 <lfs_bd_prog+0x14c>)
 8002fc6:	f006 faf3 	bl	80095b0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8002fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d977      	bls.n	80030ca <lfs_bd_prog+0x132>
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <lfs_bd_prog+0x150>)
 8002fdc:	4a40      	ldr	r2, [pc, #256]	; (80030e0 <lfs_bd_prog+0x148>)
 8002fde:	21d4      	movs	r1, #212	; 0xd4
 8002fe0:	4840      	ldr	r0, [pc, #256]	; (80030e4 <lfs_bd_prog+0x14c>)
 8002fe2:	f006 fae5 	bl	80095b0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d151      	bne.n	8003094 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8002ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d34c      	bcc.n	8003094 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	4413      	add	r3, r2
                off >= pcache->off &&
 8003006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003008:	429a      	cmp	r2, r3
 800300a:	d243      	bcs.n	8003094 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800301a:	4413      	add	r3, r2
 800301c:	4619      	mov	r1, r3
 800301e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003020:	f7ff fc98 	bl	8002954 <lfs_min>
 8003024:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003030:	1acb      	subs	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	69f9      	ldr	r1, [r7, #28]
 8003038:	4618      	mov	r0, r3
 800303a:	f006 fb33 	bl	80096a4 <memcpy>

            data += diff;
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4413      	add	r3, r2
 8003044:	61fb      	str	r3, [r7, #28]
            off += diff;
 8003046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800304e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6898      	ldr	r0, [r3, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	4619      	mov	r1, r3
 8003064:	f7ff fc66 	bl	8002934 <lfs_max>
 8003068:	4602      	mov	r2, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	429a      	cmp	r2, r3
 800307a:	d126      	bne.n	80030ca <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff fed8 	bl	8002e38 <lfs_bd_flush>
 8003088:	6178      	str	r0, [r7, #20]
                if (err) {
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <lfs_bd_prog+0x132>
                    return err;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	e01e      	b.n	80030d2 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309c:	d005      	beq.n	80030aa <lfs_bd_prog+0x112>
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <lfs_bd_prog+0x154>)
 80030a0:	4a0f      	ldr	r2, [pc, #60]	; (80030e0 <lfs_bd_prog+0x148>)
 80030a2:	21f1      	movs	r1, #241	; 0xf1
 80030a4:	480f      	ldr	r0, [pc, #60]	; (80030e4 <lfs_bd_prog+0x14c>)
 80030a6:	f006 fa83 	bl	80095b0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ae:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	4619      	mov	r1, r3
 80030b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ba:	f7ff fc5b 	bl	8002974 <lfs_aligndown>
 80030be:	4602      	mov	r2, r0
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d18a      	bne.n	8002fe6 <lfs_bd_prog+0x4e>
    }

    return 0;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	0800a770 	.word	0x0800a770
 80030e0:	0800b098 	.word	0x0800b098
 80030e4:	0800a718 	.word	0x0800a718
 80030e8:	0800a7ac 	.word	0x0800a7ac
 80030ec:	0800a7d0 	.word	0x0800a7d0

080030f0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d305      	bcc.n	8003112 <lfs_bd_erase+0x22>
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <lfs_bd_erase+0x54>)
 8003108:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <lfs_bd_erase+0x58>)
 800310a:	21ff      	movs	r1, #255	; 0xff
 800310c:	480f      	ldr	r0, [pc, #60]	; (800314c <lfs_bd_erase+0x5c>)
 800310e:	f006 fa4f 	bl	80095b0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	4610      	mov	r0, r2
 8003120:	4798      	blx	r3
 8003122:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	dd06      	ble.n	8003138 <lfs_bd_erase+0x48>
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <lfs_bd_erase+0x60>)
 800312c:	4a06      	ldr	r2, [pc, #24]	; (8003148 <lfs_bd_erase+0x58>)
 800312e:	f240 1101 	movw	r1, #257	; 0x101
 8003132:	4806      	ldr	r0, [pc, #24]	; (800314c <lfs_bd_erase+0x5c>)
 8003134:	f006 fa3c 	bl	80095b0 <__assert_func>
    return err;
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	0800a6f8 	.word	0x0800a6f8
 8003148:	0800b0a4 	.word	0x0800b0a4
 800314c:	0800a718 	.word	0x0800a718
 8003150:	0800a73c 	.word	0x0800a73c

08003154 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	601a      	str	r2, [r3, #0]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318e:	d005      	beq.n	800319c <lfs_pair_isnull+0x1e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319a:	d101      	bne.n	80031a0 <lfs_pair_isnull+0x22>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <lfs_pair_isnull+0x24>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	b2db      	uxtb	r3, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d017      	beq.n	80031fa <lfs_pair_cmp+0x46>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	3304      	adds	r3, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d00f      	beq.n	80031fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	3304      	adds	r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d008      	beq.n	80031fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <lfs_pair_cmp+0x46>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <lfs_pair_cmp+0x48>
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d107      	bne.n	800322e <lfs_pair_sync+0x26>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	3304      	adds	r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d00d      	beq.n	800324a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	3304      	adds	r3, #4
 8003236:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d108      	bne.n	800324e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d101      	bne.n	800324e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <lfs_pair_sync+0x48>
 800324e:	2300      	movs	r3, #0
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8003262:	b590      	push	{r4, r7, lr}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fbe0 	bl	8002a34 <lfs_fromle32>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	1d1c      	adds	r4, r3, #4
 8003284:	4610      	mov	r0, r2
 8003286:	f7ff fbd5 	bl	8002a34 <lfs_fromle32>
 800328a:	4603      	mov	r3, r0
 800328c:	6023      	str	r3, [r4, #0]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bd90      	pop	{r4, r7, pc}

08003296 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8003296:	b590      	push	{r4, r7, lr}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fbd1 	bl	8002a4a <lfs_tole32>
 80032a8:	4602      	mov	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	1d1c      	adds	r4, r3, #4
 80032b8:	4610      	mov	r0, r2
 80032ba:	f7ff fbc6 	bl	8002a4a <lfs_tole32>
 80032be:	4603      	mov	r3, r0
 80032c0:	6023      	str	r3, [r4, #0]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd90      	pop	{r4, r7, pc}

080032ca <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	0fdb      	lsrs	r3, r3, #31
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	059b      	lsls	r3, r3, #22
 80032f2:	159b      	asrs	r3, r3, #22
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0d1b      	lsrs	r3, r3, #20
 8003318:	b29b      	uxth	r3, r3
 800331a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800331e:	b29b      	uxth	r3, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	0d1b      	lsrs	r3, r3, #20
 8003338:	b29b      	uxth	r3, r3
 800333a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333e:	b29b      	uxth	r3, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	0d1b      	lsrs	r3, r3, #20
 8003358:	b2db      	uxtb	r3, r3
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ffec 	bl	800334c <lfs_tag_chunk>
 8003374:	4603      	mov	r3, r0
 8003376:	b25b      	sxtb	r3, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0a9b      	lsrs	r3, r3, #10
 800338c:	b29b      	uxth	r3, r3
 800338e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003392:	b29b      	uxth	r3, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff8f 	bl	80032e6 <lfs_tag_isdelete>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffe5 	bl	80033a0 <lfs_tag_size>
 80033d6:	4603      	mov	r3, r0
 80033d8:	3304      	adds	r3, #4
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e012      	b.n	8003418 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4413      	add	r3, r2
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4403      	add	r3, r0
 800340e:	404a      	eors	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b02      	cmp	r3, #2
 800341c:	dde9      	ble.n	80033f2 <lfs_gstate_xor+0x10>
    }
}
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e00b      	b.n	8003452 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <lfs_gstate_iszero+0x20>
            return false;
 8003448:	2300      	movs	r3, #0
 800344a:	e006      	b.n	800345a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b02      	cmp	r3, #2
 8003456:	ddf0      	ble.n	800343a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8003458:	2301      	movs	r3, #1
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff94 	bl	80033a0 <lfs_tag_size>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	b2db      	uxtb	r3, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff81 	bl	80033a0 <lfs_tag_size>
 800349e:	4603      	mov	r3, r0
 80034a0:	b2db      	uxtb	r3, r3
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff28 	bl	800330c <lfs_tag_type1>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff14 	bl	800330c <lfs_tag_type1>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <lfs_gstate_hasmovehere+0x30>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	6839      	ldr	r1, [r7, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fe5f 	bl	80031b4 <lfs_pair_cmp>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <lfs_gstate_hasmovehere+0x30>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <lfs_gstate_hasmovehere+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	b2db      	uxtb	r3, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fa89 	bl	8002a34 <lfs_fromle32>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fa81 	bl	8002a34 <lfs_fromle32>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fa79 	bl	8002a34 <lfs_fromle32>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fa74 	bl	8002a4a <lfs_tole32>
 8003562:	4602      	mov	r2, r0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fa6c 	bl	8002a4a <lfs_tole32>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fa64 	bl	8002a4a <lfs_tole32>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fa49 	bl	8002a34 <lfs_fromle32>
 80035a2:	4602      	mov	r2, r0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fa41 	bl	8002a34 <lfs_fromle32>
 80035b2:	4602      	mov	r2, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fa3c 	bl	8002a4a <lfs_tole32>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa34 	bl	8002a4a <lfs_tole32>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fa19 	bl	8002a34 <lfs_fromle32>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fa11 	bl	8002a34 <lfs_fromle32>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fa09 	bl	8002a34 <lfs_fromle32>
 8003622:	4602      	mov	r2, r0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fa01 	bl	8002a34 <lfs_fromle32>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f9f9 	bl	8002a34 <lfs_fromle32>
 8003642:	4602      	mov	r2, r0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff f9f1 	bl	8002a34 <lfs_fromle32>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	615a      	str	r2, [r3, #20]
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f9ec 	bl	8002a4a <lfs_tole32>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f9e4 	bl	8002a4a <lfs_tole32>
 8003682:	4602      	mov	r2, r0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f9dc 	bl	8002a4a <lfs_tole32>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f9d4 	bl	8002a4a <lfs_tole32>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff f9cc 	bl	8002a4a <lfs_tole32>
 80036b2:	4602      	mov	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff f9c4 	bl	8002a4a <lfs_tole32>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	615a      	str	r2, [r3, #20]
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e009      	b.n	80036f4 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d101      	bne.n	80036ee <lfs_mlist_isopen+0x1e>
            return true;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e007      	b.n	80036fe <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f1      	bne.n	80036e0 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3328      	adds	r3, #40	; 0x28
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e00d      	b.n	8003738 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d105      	bne.n	8003732 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	601a      	str	r2, [r3, #0]
            break;
 8003730:	e007      	b.n	8003742 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ed      	bne.n	800371c <lfs_mlist_remove+0x12>
        }
    }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4413      	add	r3, r2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003794:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8003796:	fbb3 f1f2 	udiv	r1, r3, r2
 800379a:	fb01 f202 	mul.w	r2, r1, r2
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d212      	bcs.n	80037d2 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	009a      	lsls	r2, r3, #2
 80037b6:	440a      	add	r2, r1
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2001      	movs	r0, #1
 80037c2:	fa00 f202 	lsl.w	r2, r0, r2
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4403      	add	r3, r0
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ffe4 	bl	80037e0 <lfs_alloc_ack>
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af02      	add	r7, sp, #8
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800382a:	e04f      	b.n	80038cc <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	1e5a      	subs	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2101      	movs	r1, #1
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d132      	bne.n	80038cc <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4413      	add	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003872:	6a12      	ldr	r2, [r2, #32]
 8003874:	fbb3 f1f2 	udiv	r1, r3, r2
 8003878:	fb01 f202 	mul.w	r2, r1, r2
 800387c:	1a9a      	subs	r2, r3, r2
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8003882:	e009      	b.n	8003898 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d011      	beq.n	80038c8 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1dd      	bne.n	8003884 <lfs_alloc+0x64>
                }

                return 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e050      	b.n	800396e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1a9      	bne.n	800382c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	4413      	add	r3, r2
 80038ea:	4a23      	ldr	r2, [pc, #140]	; (8003978 <lfs_alloc+0x158>)
 80038ec:	9200      	str	r2, [sp, #0]
 80038ee:	f240 2247 	movw	r2, #583	; 0x247
 80038f2:	4922      	ldr	r1, [pc, #136]	; (800397c <lfs_alloc+0x15c>)
 80038f4:	4822      	ldr	r0, [pc, #136]	; (8003980 <lfs_alloc+0x160>)
 80038f6:	f006 fab9 	bl	8009e6c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80038fa:	f06f 031b 	mvn.w	r3, #27
 80038fe:	e036      	b.n	800396e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800390e:	6a12      	ldr	r2, [r2, #32]
 8003910:	fbb3 f1f2 	udiv	r1, r3, r2
 8003914:	fb01 f202 	mul.w	r2, r1, r2
 8003918:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	00da      	lsls	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7ff f811 	bl	8002954 <lfs_min>
 8003932:	4602      	mov	r2, r0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	461a      	mov	r2, r3
 800394a:	2100      	movs	r1, #0
 800394c:	f005 feb8 	bl	80096c0 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8003950:	2301      	movs	r3, #1
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	490b      	ldr	r1, [pc, #44]	; (8003984 <lfs_alloc+0x164>)
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f004 fc96 	bl	8008288 <lfs_fs_rawtraverse>
 800395c:	60f8      	str	r0, [r7, #12]
        if (err) {
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f43f af62 	beq.w	800382a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff49 	bl	80037fe <lfs_alloc_drop>
            return err;
 800396c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	0800a81c 	.word	0x0800a81c
 800397c:	0800a718 	.word	0x0800a718
 8003980:	0800a7f4 	.word	0x0800a7f4
 8003984:	08003773 	.word	0x08003773

08003988 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b08f      	sub	sp, #60	; 0x3c
 800398c:	af04      	add	r7, sp, #16
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	333c      	adds	r3, #60	; 0x3c
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fd8e 	bl	80034d0 <lfs_gstate_hasmovehere>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80b9 	beq.w	8003b2e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fcdf 	bl	8003380 <lfs_tag_id>
 80039c2:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80b2 	beq.w	8003b2e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fcd6 	bl	8003380 <lfs_tag_id>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461c      	mov	r4, r3
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	f7ff fcd1 	bl	8003380 <lfs_tag_id>
 80039de:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 80039e0:	429c      	cmp	r4, r3
 80039e2:	f200 80a4 	bhi.w	8003b2e <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80039ec:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80039ee:	e09e      	b.n	8003b2e <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fce1 	bl	80033ba <lfs_tag_dsize>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	9203      	str	r2, [sp, #12]
 8003a0e:	f107 0210 	add.w	r2, r7, #16
 8003a12:	9202      	str	r2, [sp, #8]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	9201      	str	r2, [sp, #4]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	2100      	movs	r1, #0
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff f873 	bl	8002b0c <lfs_bd_read>
 8003a26:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <lfs_dir_getslice+0xaa>
            return err;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	e089      	b.n	8003b46 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f814 	bl	8002a62 <lfs_frombe32>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4053      	eors	r3, r2
 8003a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a44:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fc9a 	bl	8003380 <lfs_tag_id>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02b      	beq.n	8003aaa <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003a52:	69f8      	ldr	r0, [r7, #28]
 8003a54:	f7ff fc5a 	bl	800330c <lfs_tag_type1>
 8003a58:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d124      	bne.n	8003aaa <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8003a60:	69f8      	ldr	r0, [r7, #28]
 8003a62:	f7ff fc8d 	bl	8003380 <lfs_tag_id>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461c      	mov	r4, r3
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fc85 	bl	8003380 <lfs_tag_id>
 8003a76:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d816      	bhi.n	8003aaa <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <lfs_dir_getslice+0x1c8>)
 8003a84:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8003a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d102      	bne.n	8003a9a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8003a94:	f06f 0301 	mvn.w	r3, #1
 8003a98:	e055      	b.n	8003b46 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003a9a:	69f8      	ldr	r0, [r7, #28]
 8003a9c:	f7ff fc63 	bl	8003366 <lfs_tag_splice>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	029a      	lsls	r2, r3, #10
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	405a      	eors	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d138      	bne.n	8003b2e <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8003abc:	69f8      	ldr	r0, [r7, #28]
 8003abe:	f7ff fc12 	bl	80032e6 <lfs_tag_isdelete>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8003ac8:	f06f 0301 	mvn.w	r3, #1
 8003acc:	e03b      	b.n	8003b46 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8003ace:	69f8      	ldr	r0, [r7, #28]
 8003ad0:	f7ff fc66 	bl	80033a0 <lfs_tag_size>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff3b 	bl	8002954 <lfs_min>
 8003ade:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8003ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aea:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8003aec:	3204      	adds	r2, #4
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	9103      	str	r1, [sp, #12]
 8003af2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003af4:	9102      	str	r1, [sp, #8]
 8003af6:	9201      	str	r2, [sp, #4]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4602      	mov	r2, r0
 8003afe:	2100      	movs	r1, #0
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff f803 	bl	8002b0c <lfs_bd_read>
 8003b06:	61b8      	str	r0, [r7, #24]
            if (err) {
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <lfs_dir_getslice+0x18a>
                return err;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	e019      	b.n	8003b46 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8003b12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	18d0      	adds	r0, r2, r3
 8003b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2100      	movs	r1, #0
 8003b22:	f005 fdcd 	bl	80096c0 <memset>

            return tag + gdiff;
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	e00b      	b.n	8003b46 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fc42 	bl	80033ba <lfs_tag_dsize>
 8003b36:	4603      	mov	r3, r0
 8003b38:	3304      	adds	r3, #4
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	f4bf af57 	bcs.w	80039f0 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8003b42:	f06f 0301 	mvn.w	r3, #1
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	372c      	adds	r7, #44	; 0x2c
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	000ffc00 	.word	0x000ffc00

08003b54 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af04      	add	r7, sp, #16
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8003b62:	6838      	ldr	r0, [r7, #0]
 8003b64:	f7ff fc1c 	bl	80033a0 <lfs_tag_size>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2300      	movs	r3, #0
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f7ff ff04 	bl	8003988 <lfs_dir_getslice>
 8003b80:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b08c      	sub	sp, #48	; 0x30
 8003b8e:	af04      	add	r7, sp, #16
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8003b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	f240 80c0 	bls.w	8003d2e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8003bae:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003bb2:	e0c1      	b.n	8003d38 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb6:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03f      	beq.n	8003c3e <lfs_dir_getread+0xb4>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f113 0f02 	cmn.w	r3, #2
 8003bc6:	d13a      	bne.n	8003c3e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d232      	bcs.n	8003c3e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d324      	bcc.n	8003c2c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	1acb      	subs	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	69b8      	ldr	r0, [r7, #24]
 8003bf4:	f7fe feae 	bl	8002954 <lfs_min>
 8003bf8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c04:	1acb      	subs	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	69f8      	ldr	r0, [r7, #28]
 8003c0e:	f005 fd49 	bl	80096a4 <memcpy>

                data += diff;
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4413      	add	r3, r2
 8003c18:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003c2a:	e080      	b.n	8003d2e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	69b8      	ldr	r0, [r7, #24]
 8003c38:	f7fe fe8c 	bl	8002954 <lfs_min>
 8003c3c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f113 0f02 	cmn.w	r3, #2
 8003c46:	d13a      	bne.n	8003cbe <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d232      	bcs.n	8003cbe <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d324      	bcc.n	8003cac <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	1acb      	subs	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	69b8      	ldr	r0, [r7, #24]
 8003c74:	f7fe fe6e 	bl	8002954 <lfs_min>
 8003c78:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c84:	1acb      	subs	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	69f8      	ldr	r0, [r7, #28]
 8003c8e:	f005 fd09 	bl	80096a4 <memcpy>

                data += diff;
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	4413      	add	r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003caa:	e040      	b.n	8003d2e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	69b8      	ldr	r0, [r7, #24]
 8003cb8:	f7fe fe4c 	bl	8002954 <lfs_min>
 8003cbc:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f06f 0201 	mvn.w	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cd0:	f7fe fe50 	bl	8002974 <lfs_aligndown>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	441a      	add	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fe fe58 	bl	800299e <lfs_alignup>
 8003cee:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fe fe2b 	bl	8002954 <lfs_min>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	6889      	ldr	r1, [r1, #8]
 8003d10:	9102      	str	r1, [sp, #8]
 8003d12:	9201      	str	r2, [sp, #4]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff fe33 	bl	8003988 <lfs_dir_getslice>
 8003d22:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da01      	bge.n	8003d2e <lfs_dir_getread+0x1a4>
            return err;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	e004      	b.n	8003d38 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f af3f 	bne.w	8003bb4 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <lfs_dir_traverse_filter+0x1e>
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <lfs_dir_traverse_filter+0xac>)
 8003d5c:	e000      	b.n	8003d60 <lfs_dir_traverse_filter+0x20>
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003d60:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	405a      	eors	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fab5 	bl	80032e6 <lfs_tag_isdelete>
 8003d7c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a19      	ldr	r2, [pc, #100]	; (8003dec <lfs_dir_traverse_filter+0xac>)
 8003d86:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <lfs_dir_traverse_filter+0xb4>)
 8003d8e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003d90:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003d94:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d104      	bne.n	8003da6 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
        return true;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e01e      	b.n	8003de4 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f7ff fab0 	bl	800330c <lfs_tag_type1>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d116      	bne.n	8003de2 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8003db4:	68b8      	ldr	r0, [r7, #8]
 8003db6:	f7ff fae3 	bl	8003380 <lfs_tag_id>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fadc 	bl	8003380 <lfs_tag_id>
 8003dc8:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003dca:	429c      	cmp	r4, r3
 8003dcc:	d809      	bhi.n	8003de2 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003dce:	68b8      	ldr	r0, [r7, #8]
 8003dd0:	f7ff fac9 	bl	8003366 <lfs_tag_splice>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	029a      	lsls	r2, r3, #10
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	441a      	add	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	601a      	str	r2, [r3, #0]
    }

    return false;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd90      	pop	{r4, r7, pc}
 8003dec:	7ffffc00 	.word	0x7ffffc00
 8003df0:	700ffc00 	.word	0x700ffc00
 8003df4:	000ffc00 	.word	0x000ffc00

08003df8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b0c1      	sub	sp, #260	; 0x104
 8003dfc:	af04      	add	r7, sp, #16
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8003e0c:	6838      	ldr	r0, [r7, #0]
 8003e0e:	f7ff fad4 	bl	80033ba <lfs_tag_dsize>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	441a      	add	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d237      	bcs.n	8003e90 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8003e20:	6838      	ldr	r0, [r7, #0]
 8003e22:	f7ff faca 	bl	80033ba <lfs_tag_dsize>
 8003e26:	4602      	mov	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2204      	movs	r2, #4
 8003e36:	9203      	str	r2, [sp, #12]
 8003e38:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003e3c:	9202      	str	r2, [sp, #8]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	9201      	str	r2, [sp, #4]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2304      	movs	r3, #4
 8003e46:	460a      	mov	r2, r1
 8003e48:	2100      	movs	r1, #0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7fe fe5e 	bl	8002b0c <lfs_bd_read>
 8003e50:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8003e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <lfs_dir_traverse+0x6a>
                    return err;
 8003e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e60:	e3a6      	b.n	80045b0 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fdfc 	bl	8002a62 <lfs_frombe32>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4053      	eors	r3, r2
 8003e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e74:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8003e82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	e01b      	b.n	8003ec8 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8003e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dd13      	ble.n	8003ec0 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8003e98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8003ea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8003eaa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003eae:	3308      	adds	r3, #8
 8003eb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ebe:	e003      	b.n	8003ec8 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8003ec6:	e2a2      	b.n	800440e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8003ec8:	4b7e      	ldr	r3, [pc, #504]	; (80040c4 <lfs_dir_traverse+0x2cc>)
 8003eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003ece:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed4:	405a      	eors	r2, r3
 8003ed6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ede:	400b      	ands	r3, r1
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 8285 	bne.w	80043f2 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8003ee8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003eec:	f7ff fa48 	bl	8003380 <lfs_tag_id>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80f0 	beq.w	80040d8 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8003ef8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d906      	bls.n	8003f0e <lfs_dir_traverse+0x116>
 8003f00:	4b71      	ldr	r3, [pc, #452]	; (80040c8 <lfs_dir_traverse+0x2d0>)
 8003f02:	4a72      	ldr	r2, [pc, #456]	; (80040cc <lfs_dir_traverse+0x2d4>)
 8003f04:	f240 314e 	movw	r1, #846	; 0x34e
 8003f08:	4871      	ldr	r0, [pc, #452]	; (80040d0 <lfs_dir_traverse+0x2d8>)
 8003f0a:	f005 fb51 	bl	80095b0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8003f0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	33f0      	adds	r3, #240	; 0xf0
 8003f1e:	443b      	add	r3, r7
 8003f20:	3b98      	subs	r3, #152	; 0x98
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	33f0      	adds	r3, #240	; 0xf0
 8003f34:	443b      	add	r3, r7
 8003f36:	3b94      	subs	r3, #148	; 0x94
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	33f0      	adds	r3, #240	; 0xf0
 8003f4a:	443b      	add	r3, r7
 8003f4c:	3b90      	subs	r3, #144	; 0x90
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	33f0      	adds	r3, #240	; 0xf0
 8003f60:	443b      	add	r3, r7
 8003f62:	3b8c      	subs	r3, #140	; 0x8c
 8003f64:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	33f0      	adds	r3, #240	; 0xf0
 8003f78:	443b      	add	r3, r7
 8003f7a:	3b88      	subs	r3, #136	; 0x88
 8003f7c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	33f0      	adds	r3, #240	; 0xf0
 8003f90:	443b      	add	r3, r7
 8003f92:	3b84      	subs	r3, #132	; 0x84
 8003f94:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	33f0      	adds	r3, #240	; 0xf0
 8003fa8:	443b      	add	r3, r7
 8003faa:	3b80      	subs	r3, #128	; 0x80
 8003fac:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	33f0      	adds	r3, #240	; 0xf0
 8003fc0:	443b      	add	r3, r7
 8003fc2:	3b7c      	subs	r3, #124	; 0x7c
 8003fc4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	33f0      	adds	r3, #240	; 0xf0
 8003fd8:	443b      	add	r3, r7
 8003fda:	3b7a      	subs	r3, #122	; 0x7a
 8003fdc:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	33f0      	adds	r3, #240	; 0xf0
 8003ff0:	443b      	add	r3, r7
 8003ff2:	3b78      	subs	r3, #120	; 0x78
 8003ff4:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	33f0      	adds	r3, #240	; 0xf0
 8004008:	443b      	add	r3, r7
 800400a:	3b74      	subs	r3, #116	; 0x74
 800400c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	33f0      	adds	r3, #240	; 0xf0
 8004020:	443b      	add	r3, r7
 8004022:	3b70      	subs	r3, #112	; 0x70
 8004024:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	33f0      	adds	r3, #240	; 0xf0
 8004038:	443b      	add	r3, r7
 800403a:	3b6c      	subs	r3, #108	; 0x6c
 800403c:	6019      	str	r1, [r3, #0]
 800403e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	33f0      	adds	r3, #240	; 0xf0
 800404c:	443b      	add	r3, r7
 800404e:	3b68      	subs	r3, #104	; 0x68
 8004050:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	33f0      	adds	r3, #240	; 0xf0
 8004064:	443b      	add	r3, r7
 8004066:	3b68      	subs	r3, #104	; 0x68
 8004068:	3304      	adds	r3, #4
 800406a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800406e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004072:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8004076:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800407a:	3301      	adds	r3, #1
 800407c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <lfs_dir_traverse+0x2dc>)
 80040a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80040a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	3328      	adds	r3, #40	; 0x28
 80040b8:	440b      	add	r3, r1
 80040ba:	3304      	adds	r3, #4
 80040bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80040c0:	e6a4      	b.n	8003e0c <lfs_dir_traverse+0x14>
 80040c2:	bf00      	nop
 80040c4:	7ff00000 	.word	0x7ff00000
 80040c8:	0800a820 	.word	0x0800a820
 80040cc:	0800b0b4 	.word	0x0800b0b4
 80040d0:	0800a718 	.word	0x0800a718
 80040d4:	08003d41 	.word	0x08003d41
                continue;
            }
        }

popped:
 80040d8:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80040da:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80040de:	f7ff f94f 	bl	8003380 <lfs_tag_id>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff f948 	bl	8003380 <lfs_tag_id>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80040f4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80040f8:	4293      	cmp	r3, r2
 80040fa:	f200 817c 	bhi.w	80043f6 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80040fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff f93d 	bl	8003380 <lfs_tag_id>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800410e:	4293      	cmp	r3, r2
 8004110:	f240 8171 	bls.w	80043f6 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8004114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff f908 	bl	800332c <lfs_tag_type3>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	f43f ae74 	beq.w	8003e0c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff f900 	bl	800332c <lfs_tag_type3>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	f240 1301 	movw	r3, #257	; 0x101
 8004134:	429a      	cmp	r2, r3
 8004136:	f040 80e0 	bne.w	80042fa <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800413a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800413e:	4ab1      	ldr	r2, [pc, #708]	; (8004404 <lfs_dir_traverse+0x60c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	f000 815a 	beq.w	80043fa <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8004146:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	33f0      	adds	r3, #240	; 0xf0
 8004154:	443b      	add	r3, r7
 8004156:	3b98      	subs	r3, #152	; 0x98
 8004158:	4618      	mov	r0, r3
 800415a:	233c      	movs	r3, #60	; 0x3c
 800415c:	461a      	mov	r2, r3
 800415e:	2100      	movs	r1, #0
 8004160:	f005 faae 	bl	80096c0 <memset>
 8004164:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	33f0      	adds	r3, #240	; 0xf0
 8004172:	443b      	add	r3, r7
 8004174:	3b98      	subs	r3, #152	; 0x98
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	33f0      	adds	r3, #240	; 0xf0
 8004188:	443b      	add	r3, r7
 800418a:	3b94      	subs	r3, #148	; 0x94
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	33f0      	adds	r3, #240	; 0xf0
 800419e:	443b      	add	r3, r7
 80041a0:	3b90      	subs	r3, #144	; 0x90
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	33f0      	adds	r3, #240	; 0xf0
 80041b4:	443b      	add	r3, r7
 80041b6:	3b8c      	subs	r3, #140	; 0x8c
 80041b8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	33f0      	adds	r3, #240	; 0xf0
 80041cc:	443b      	add	r3, r7
 80041ce:	3b88      	subs	r3, #136	; 0x88
 80041d0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	33f0      	adds	r3, #240	; 0xf0
 80041e4:	443b      	add	r3, r7
 80041e6:	3b84      	subs	r3, #132	; 0x84
 80041e8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	33f0      	adds	r3, #240	; 0xf0
 80041fc:	443b      	add	r3, r7
 80041fe:	3b80      	subs	r3, #128	; 0x80
 8004200:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	33f0      	adds	r3, #240	; 0xf0
 8004214:	443b      	add	r3, r7
 8004216:	3b7c      	subs	r3, #124	; 0x7c
 8004218:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	33f0      	adds	r3, #240	; 0xf0
 800422c:	443b      	add	r3, r7
 800422e:	3b7a      	subs	r3, #122	; 0x7a
 8004230:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	33f0      	adds	r3, #240	; 0xf0
 8004244:	443b      	add	r3, r7
 8004246:	3b78      	subs	r3, #120	; 0x78
 8004248:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	33f0      	adds	r3, #240	; 0xf0
 800425c:	443b      	add	r3, r7
 800425e:	3b74      	subs	r3, #116	; 0x74
 8004260:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	33f0      	adds	r3, #240	; 0xf0
 8004274:	443b      	add	r3, r7
 8004276:	3b70      	subs	r3, #112	; 0x70
 8004278:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800427c:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800427e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004282:	3301      	adds	r3, #1
 8004284:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8004288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f888 	bl	80033a0 <lfs_tag_size>
 8004290:	4603      	mov	r3, r0
 8004292:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8004296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff f871 	bl	8003380 <lfs_tag_id>
 800429e:	4603      	mov	r3, r0
 80042a0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a8:	60bb      	str	r3, [r7, #8]
            off = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b2:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80042c0:	4b51      	ldr	r3, [pc, #324]	; (8004408 <lfs_dir_traverse+0x610>)
 80042c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80042c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80042ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80042ce:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80042d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80042d6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80042da:	3301      	adds	r3, #1
 80042dc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80042e0:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80042e4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80042f0:	4413      	add	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 80042f8:	e588      	b.n	8003e0c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80042fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff f815 	bl	800332c <lfs_tag_type3>
 8004302:	4603      	mov	r3, r0
 8004304:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004308:	d159      	bne.n	80043be <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004310:	e04b      	b.n	80043aa <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800431a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	461a      	mov	r2, r3
 8004328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800432c:	4413      	add	r3, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004334:	051c      	lsls	r4, r3, #20
 8004336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f821 	bl	8003380 <lfs_tag_id>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8004346:	4413      	add	r3, r2
 8004348:	029b      	lsls	r3, r3, #10
 800434a:	ea44 0103 	orr.w	r1, r4, r3
 800434e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	461a      	mov	r2, r3
 800435c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004360:	4413      	add	r3, r2
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8004366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800436a:	4613      	mov	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	461a      	mov	r2, r3
 8004374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004378:	4413      	add	r3, r2
 800437a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800437c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004380:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004384:	4798      	blx	r3
 8004386:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 800438a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800438e:	2b00      	cmp	r3, #0
 8004390:	da02      	bge.n	8004398 <lfs_dir_traverse+0x5a0>
                    return res;
 8004392:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004396:	e10b      	b.n	80045b0 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8004398:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d12e      	bne.n	80043fe <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80043a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a4:	3301      	adds	r3, #1
 80043a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fff7 	bl	80033a0 <lfs_tag_size>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d3aa      	bcc.n	8004312 <lfs_dir_traverse+0x51a>
 80043bc:	e526      	b.n	8003e0c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80043be:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80043c2:	029a      	lsls	r2, r3, #10
 80043c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c6:	18d1      	adds	r1, r2, r3
 80043c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043cc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043d0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80043d4:	4798      	blx	r3
 80043d6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80043da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da02      	bge.n	80043e8 <lfs_dir_traverse+0x5f0>
                return res;
 80043e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043e6:	e0e3      	b.n	80045b0 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 80043e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <lfs_dir_traverse+0x614>
 80043f0:	e50c      	b.n	8003e0c <lfs_dir_traverse+0x14>
                continue;
 80043f2:	bf00      	nop
 80043f4:	e50a      	b.n	8003e0c <lfs_dir_traverse+0x14>
            continue;
 80043f6:	bf00      	nop
 80043f8:	e508      	b.n	8003e0c <lfs_dir_traverse+0x14>
                continue;
 80043fa:	bf00      	nop
 80043fc:	e506      	b.n	8003e0c <lfs_dir_traverse+0x14>
                    break;
 80043fe:	bf00      	nop
        {
 8004400:	e504      	b.n	8003e0c <lfs_dir_traverse+0x14>
 8004402:	bf00      	nop
 8004404:	08003d41 	.word	0x08003d41
 8004408:	600ffc00 	.word	0x600ffc00
                break;
 800440c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800440e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80ca 	beq.w	80045ac <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8004418:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	33f0      	adds	r3, #240	; 0xf0
 8004428:	443b      	add	r3, r7
 800442a:	3b98      	subs	r3, #152	; 0x98
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8004430:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	33f0      	adds	r3, #240	; 0xf0
 8004440:	443b      	add	r3, r7
 8004442:	3b94      	subs	r3, #148	; 0x94
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8004448:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800444c:	1e5a      	subs	r2, r3, #1
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	33f0      	adds	r3, #240	; 0xf0
 8004458:	443b      	add	r3, r7
 800445a:	3b90      	subs	r3, #144	; 0x90
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8004460:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004464:	1e5a      	subs	r2, r3, #1
 8004466:	4613      	mov	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	33f0      	adds	r3, #240	; 0xf0
 8004470:	443b      	add	r3, r7
 8004472:	3b8c      	subs	r3, #140	; 0x8c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800447a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800447e:	1e5a      	subs	r2, r3, #1
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	33f0      	adds	r3, #240	; 0xf0
 800448a:	443b      	add	r3, r7
 800448c:	3b88      	subs	r3, #136	; 0x88
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8004494:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004498:	1e5a      	subs	r2, r3, #1
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	33f0      	adds	r3, #240	; 0xf0
 80044a4:	443b      	add	r3, r7
 80044a6:	3b84      	subs	r3, #132	; 0x84
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80044ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	33f0      	adds	r3, #240	; 0xf0
 80044be:	443b      	add	r3, r7
 80044c0:	3b80      	subs	r3, #128	; 0x80
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80044c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	33f0      	adds	r3, #240	; 0xf0
 80044d8:	443b      	add	r3, r7
 80044da:	3b7c      	subs	r3, #124	; 0x7c
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 80044e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044e6:	1e5a      	subs	r2, r3, #1
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	33f0      	adds	r3, #240	; 0xf0
 80044f2:	443b      	add	r3, r7
 80044f4:	3b7a      	subs	r3, #122	; 0x7a
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80044fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	4613      	mov	r3, r2
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	33f0      	adds	r3, #240	; 0xf0
 800450c:	443b      	add	r3, r7
 800450e:	3b78      	subs	r3, #120	; 0x78
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8004516:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	33f0      	adds	r3, #240	; 0xf0
 8004526:	443b      	add	r3, r7
 8004528:	3b74      	subs	r3, #116	; 0x74
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8004530:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004534:	1e5a      	subs	r2, r3, #1
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	33f0      	adds	r3, #240	; 0xf0
 8004540:	443b      	add	r3, r7
 8004542:	3b70      	subs	r3, #112	; 0x70
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800454a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800454e:	1e5a      	subs	r2, r3, #1
 8004550:	4613      	mov	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	33f0      	adds	r3, #240	; 0xf0
 800455a:	443b      	add	r3, r7
 800455c:	3b6c      	subs	r3, #108	; 0x6c
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8004562:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	33f0      	adds	r3, #240	; 0xf0
 8004572:	443b      	add	r3, r7
 8004574:	3b68      	subs	r3, #104	; 0x68
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 800457c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	33f0      	adds	r3, #240	; 0xf0
 800458c:	443b      	add	r3, r7
 800458e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8004592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004596:	3204      	adds	r2, #4
 8004598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800459c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80045a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80045a4:	3b01      	subs	r3, #1
 80045a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80045aa:	e596      	b.n	80040da <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80045ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	37f4      	adds	r7, #244	; 0xf4
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd90      	pop	{r4, r7, pc}

080045b8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b09f      	sub	sp, #124	; 0x7c
 80045bc:	af04      	add	r7, sp, #16
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ca:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d207      	bcs.n	80045ea <lfs_dir_fetchmatch+0x32>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 80045ea:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80045ee:	e342      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80045f0:	2300      	movs	r3, #0
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
 80045f4:	2300      	movs	r3, #0
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80045fc:	2300      	movs	r3, #0
 80045fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004600:	e052      	b.n	80046a8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8004602:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8004604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800460c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800460e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004612:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004614:	0092      	lsls	r2, r2, #2
 8004616:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8004618:	2104      	movs	r1, #4
 800461a:	9103      	str	r1, [sp, #12]
 800461c:	9202      	str	r2, [sp, #8]
 800461e:	2200      	movs	r2, #0
 8004620:	9201      	str	r2, [sp, #4]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2304      	movs	r3, #4
 8004626:	4602      	mov	r2, r0
 8004628:	2100      	movs	r1, #0
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7fe fa6e 	bl	8002b0c <lfs_bd_read>
 8004630:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	3368      	adds	r3, #104	; 0x68
 8004638:	443b      	add	r3, r7
 800463a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe f9f8 	bl	8002a34 <lfs_fromle32>
 8004644:	4602      	mov	r2, r0
 8004646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	3368      	adds	r3, #104	; 0x68
 800464c:	443b      	add	r3, r7
 800464e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <lfs_dir_fetchmatch+0xac>
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800465e:	d001      	beq.n	8004664 <lfs_dir_fetchmatch+0xac>
            return err;
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	e308      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800466a:	d01a      	beq.n	80046a2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800466c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	3368      	adds	r3, #104	; 0x68
 8004672:	443b      	add	r3, r7
 8004674:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467a:	3301      	adds	r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	bfb8      	it	lt
 8004684:	425b      	neglt	r3, r3
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	3368      	adds	r3, #104	; 0x68
 800468a:	443b      	add	r3, r7
 800468c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7fe f9c0 	bl	8002a18 <lfs_scmp>
 8004698:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd01      	ble.n	80046a2 <lfs_dir_fetchmatch+0xea>
            r = i;
 800469e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80046a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a4:	3301      	adds	r3, #1
 80046a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	dda9      	ble.n	8004602 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80046ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	bfb8      	it	lt
 80046b8:	425b      	neglt	r3, r3
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80046c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c8:	3301      	adds	r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	bfb8      	it	lt
 80046d2:	425b      	neglt	r3, r3
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80046e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	bfb8      	it	lt
 80046ea:	425b      	neglt	r3, r3
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	3368      	adds	r3, #104	; 0x68
 80046f0:	443b      	add	r3, r7
 80046f2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8004700:	2300      	movs	r3, #0
 8004702:	65bb      	str	r3, [r7, #88]	; 0x58
 8004704:	e2a3      	b.n	8004c4e <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8004716:	4a96      	ldr	r2, [pc, #600]	; (8004970 <lfs_dir_fetchmatch+0x3b8>)
 8004718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004720:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8004724:	2300      	movs	r3, #0
 8004726:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800472a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe f989 	bl	8002a4a <lfs_tole32>
 8004738:	4602      	mov	r2, r0
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	3308      	adds	r3, #8
 8004742:	2204      	movs	r2, #4
 8004744:	4619      	mov	r1, r3
 8004746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800474a:	f004 fb69 	bl	8008e20 <lfs_crc>
 800474e:	4603      	mov	r3, r0
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe f96c 	bl	8002a34 <lfs_fromle32>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8004762:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004764:	f7fe fe29 	bl	80033ba <lfs_tag_dsize>
 8004768:	4602      	mov	r2, r0
 800476a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476c:	4413      	add	r3, r2
 800476e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8004770:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8004776:	69d8      	ldr	r0, [r3, #28]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2204      	movs	r2, #4
 800477e:	9203      	str	r2, [sp, #12]
 8004780:	f107 0220 	add.w	r2, r7, #32
 8004784:	9202      	str	r2, [sp, #8]
 8004786:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4603      	mov	r3, r0
 800478e:	460a      	mov	r2, r1
 8004790:	2100      	movs	r1, #0
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7fe f9ba 	bl	8002b0c <lfs_bd_read>
 8004798:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800479a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80047a6:	d103      	bne.n	80047b0 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	759a      	strb	r2, [r3, #22]
                    break;
 80047ae:	e1d6      	b.n	8004b5e <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80047b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b2:	e260      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f107 0120 	add.w	r1, r7, #32
 80047ba:	2204      	movs	r2, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 fb2f 	bl	8008e20 <lfs_crc>
 80047c2:	4603      	mov	r3, r0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe f94a 	bl	8002a62 <lfs_frombe32>
 80047ce:	4602      	mov	r2, r0
 80047d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d2:	4053      	eors	r3, r2
 80047d4:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fe fd76 	bl	80032ca <lfs_tag_isvalid>
 80047de:	4603      	mov	r3, r0
 80047e0:	f083 0301 	eor.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01b      	beq.n	8004822 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80047ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80047ec:	f7fe fd8e 	bl	800330c <lfs_tag_type1>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047f6:	d10d      	bne.n	8004814 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004800:	6992      	ldr	r2, [r2, #24]
 8004802:	fbb3 f1f2 	udiv	r1, r3, r2
 8004806:	fb01 f202 	mul.w	r2, r1, r2
 800480a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <lfs_dir_fetchmatch+0x25c>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <lfs_dir_fetchmatch+0x25e>
 8004814:	2300      	movs	r3, #0
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	759a      	strb	r2, [r3, #22]
                break;
 8004820:	e19d      	b.n	8004b5e <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe fdc8 	bl	80033ba <lfs_tag_dsize>
 800482a:	4602      	mov	r2, r0
 800482c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	429a      	cmp	r2, r3
 8004838:	d903      	bls.n	8004842 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	759a      	strb	r2, [r3, #22]
                break;
 8004840:	e18d      	b.n	8004b5e <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fe fd5f 	bl	800330c <lfs_tag_type1>
 800484e:	4603      	mov	r3, r0
 8004850:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004854:	d164      	bne.n	8004920 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8004856:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800485c:	69dc      	ldr	r4, [r3, #28]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004864:	3204      	adds	r2, #4
 8004866:	2104      	movs	r1, #4
 8004868:	9103      	str	r1, [sp, #12]
 800486a:	f107 011c 	add.w	r1, r7, #28
 800486e:	9102      	str	r1, [sp, #8]
 8004870:	9201      	str	r2, [sp, #4]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4623      	mov	r3, r4
 8004876:	4602      	mov	r2, r0
 8004878:	2100      	movs	r1, #0
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7fe f946 	bl	8002b0c <lfs_bd_read>
 8004880:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8004882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 8004888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800488e:	d103      	bne.n	8004898 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	759a      	strb	r2, [r3, #22]
                        break;
 8004896:	e162      	b.n	8004b5e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8004898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800489a:	e1ec      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe f8c8 	bl	8002a34 <lfs_fromle32>
 80048a4:	4603      	mov	r3, r0
 80048a6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80048a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d003      	beq.n	80048b8 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	759a      	strb	r2, [r3, #22]
                    break;
 80048b6:	e152      	b.n	8004b5e <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fd46 	bl	800334c <lfs_tag_chunk>
 80048c0:	4603      	mov	r3, r0
 80048c2:	07db      	lsls	r3, r3, #31
 80048c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048c6:	4053      	eors	r3, r2
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80048d2:	2204      	movs	r2, #4
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 faa3 	bl	8008e20 <lfs_crc>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80048e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e2:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fd67 	bl	80033ba <lfs_tag_dsize>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	441a      	add	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048fa:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004902:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8004904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800490a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004916:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	e720      	b.n	8004762 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8004920:	2304      	movs	r3, #4
 8004922:	647b      	str	r3, [r7, #68]	; 0x44
 8004924:	e032      	b.n	800498c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8004926:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800492c:	69dc      	ldr	r4, [r3, #28]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004936:	440a      	add	r2, r1
 8004938:	2101      	movs	r1, #1
 800493a:	9103      	str	r1, [sp, #12]
 800493c:	f107 011b 	add.w	r1, r7, #27
 8004940:	9102      	str	r1, [sp, #8]
 8004942:	9201      	str	r2, [sp, #4]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	4623      	mov	r3, r4
 8004948:	4602      	mov	r2, r0
 800494a:	2100      	movs	r1, #0
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7fe f8dd 	bl	8002b0c <lfs_bd_read>
 8004952:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8004954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00c      	beq.n	8004974 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800495a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004960:	d103      	bne.n	800496a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2200      	movs	r2, #0
 8004966:	759a      	strb	r2, [r3, #22]
 8004968:	e018      	b.n	800499c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800496a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800496c:	e183      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
 800496e:	bf00      	nop
 8004970:	0800a860 	.word	0x0800a860
                }

                crc = lfs_crc(crc, &dat, 1);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f107 011b 	add.w	r1, r7, #27
 800497a:	2201      	movs	r2, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f004 fa4f 	bl	8008e20 <lfs_crc>
 8004982:	4603      	mov	r3, r0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8004986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004988:	3301      	adds	r3, #1
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe fd13 	bl	80033ba <lfs_tag_dsize>
 8004994:	4602      	mov	r2, r0
 8004996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004998:	4293      	cmp	r3, r2
 800499a:	d3c4      	bcc.n	8004926 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe fcb4 	bl	800330c <lfs_tag_type1>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fce7 	bl	8003380 <lfs_tag_id>
 80049b2:	4603      	mov	r3, r0
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f200 8083 	bhi.w	8004ac6 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fcdc 	bl	8003380 <lfs_tag_id>
 80049c8:	4603      	mov	r3, r0
 80049ca:	3301      	adds	r3, #1
 80049cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049d0:	e079      	b.n	8004ac6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fc99 	bl	800330c <lfs_tag_type1>
 80049da:	4603      	mov	r3, r0
 80049dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e0:	d134      	bne.n	8004a4c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fcbe 	bl	8003366 <lfs_tag_splice>
 80049ea:	4603      	mov	r3, r0
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049f2:	4413      	add	r3, r2
 80049f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80049f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fa:	4ba1      	ldr	r3, [pc, #644]	; (8004c80 <lfs_dir_fetchmatch+0x6c8>)
 80049fc:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80049fe:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004a02:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004a06:	6a3a      	ldr	r2, [r7, #32]
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d104      	bne.n	8004a16 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a14:	e057      	b.n	8004ac6 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8004a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1c:	d053      	beq.n	8004ac6 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe fcad 	bl	8003380 <lfs_tag_id>
 8004a26:	4603      	mov	r3, r0
 8004a28:	461c      	mov	r4, r3
 8004a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fca7 	bl	8003380 <lfs_tag_id>
 8004a32:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8004a34:	429c      	cmp	r4, r3
 8004a36:	d846      	bhi.n	8004ac6 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fc93 	bl	8003366 <lfs_tag_splice>
 8004a40:	4603      	mov	r3, r0
 8004a42:	029a      	lsls	r2, r3, #10
 8004a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a46:	4413      	add	r3, r2
 8004a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a4a:	e03c      	b.n	8004ac6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fc5c 	bl	800330c <lfs_tag_type1>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a5a:	d134      	bne.n	8004ac6 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fc74 	bl	800334c <lfs_tag_chunk>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8004a76:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004a7c:	69dc      	ldr	r4, [r3, #28]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a84:	3204      	adds	r2, #4
 8004a86:	2108      	movs	r1, #8
 8004a88:	9103      	str	r1, [sp, #12]
 8004a8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004a8e:	9102      	str	r1, [sp, #8]
 8004a90:	9201      	str	r2, [sp, #4]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4623      	mov	r3, r4
 8004a96:	4602      	mov	r2, r0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7fe f836 	bl	8002b0c <lfs_bd_read>
 8004aa0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8004aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8004aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aaa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004aae:	d103      	bne.n	8004ab8 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	759a      	strb	r2, [r3, #22]
                        break;
 8004ab6:	e052      	b.n	8004b5e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8004ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aba:	e0dc      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8004abc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe fbce 	bl	8003262 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aca:	405a      	eors	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f47f ae46 	bne.w	8004762 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004ad6:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004adc:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8004ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae0:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	f107 0210 	add.w	r2, r7, #16
 8004ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004aec:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004af0:	4798      	blx	r3
 8004af2:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8004af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da09      	bge.n	8004b0e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004b00:	d103      	bne.n	8004b0a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	759a      	strb	r2, [r3, #22]
 8004b08:	e029      	b.n	8004b5e <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8004b0c:	e0b3      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b18:	e623      	b.n	8004762 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8004b1a:	6a3a      	ldr	r2, [r7, #32]
 8004b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1e:	405a      	eors	r2, r3
 8004b20:	4b58      	ldr	r3, [pc, #352]	; (8004c84 <lfs_dir_fetchmatch+0x6cc>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b2e:	e618      	b.n	8004762 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8004b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	f47f ae15 	bne.w	8004762 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fc20 	bl	8003380 <lfs_tag_id>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461c      	mov	r4, r3
 8004b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fc1a 	bl	8003380 <lfs_tag_id>
 8004b4c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8004b4e:	429c      	cmp	r4, r3
 8004b50:	f63f ae07 	bhi.w	8004762 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5c:	e601      	b.n	8004762 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d100      	bne.n	8004b68 <lfs_dir_fetchmatch+0x5b0>
 8004b66:	e05d      	b.n	8004c24 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	333c      	adds	r3, #60	; 0x3c
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fcad 	bl	80034d0 <lfs_gstate_hasmovehere>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d028      	beq.n	8004bce <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fbfd 	bl	8003380 <lfs_tag_id>
 8004b86:	4603      	mov	r3, r0
 8004b88:	461c      	mov	r4, r3
 8004b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fbf7 	bl	8003380 <lfs_tag_id>
 8004b92:	4603      	mov	r3, r0
 8004b94:	429c      	cmp	r4, r3
 8004b96:	d104      	bne.n	8004ba2 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8004b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b9e:	667b      	str	r3, [r7, #100]	; 0x64
 8004ba0:	e015      	b.n	8004bce <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8004ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba8:	d011      	beq.n	8004bce <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fbe6 	bl	8003380 <lfs_tag_id>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	461c      	mov	r4, r3
 8004bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fbe0 	bl	8003380 <lfs_tag_id>
 8004bc0:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8004bc2:	429c      	cmp	r4, r3
 8004bc4:	d203      	bcs.n	8004bce <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8004bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004bcc:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8004bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00f      	beq.n	8004bf4 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8004bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fbd2 	bl	8003380 <lfs_tag_id>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	8a9b      	ldrh	r3, [r3, #20]
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f7fd feb4 	bl	8002954 <lfs_min>
 8004bec:	4603      	mov	r3, r0
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bf2:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8004bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe fb67 	bl	80032ca <lfs_tag_isvalid>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8004c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c04:	e037      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8004c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fbb9 	bl	8003380 <lfs_tag_id>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	8a9b      	ldrh	r3, [r3, #20]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d202      	bcs.n	8004c20 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8004c1a:	f06f 0301 	mvn.w	r3, #1
 8004c1e:	e02a      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e028      	b.n	8004c76 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fa94 	bl	8003154 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8004c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c2e:	3301      	adds	r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	bfb8      	it	lt
 8004c38:	425b      	neglt	r3, r3
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	3368      	adds	r3, #104	; 0x68
 8004c3e:	443b      	add	r3, r7
 8004c40:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8004c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f77f ad58 	ble.w	8004706 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	490a      	ldr	r1, [pc, #40]	; (8004c88 <lfs_dir_fetchmatch+0x6d0>)
 8004c60:	9101      	str	r1, [sp, #4]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8004c6a:	4908      	ldr	r1, [pc, #32]	; (8004c8c <lfs_dir_fetchmatch+0x6d4>)
 8004c6c:	4808      	ldr	r0, [pc, #32]	; (8004c90 <lfs_dir_fetchmatch+0x6d8>)
 8004c6e:	f005 f8fd 	bl	8009e6c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8004c72:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	376c      	adds	r7, #108	; 0x6c
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	000ffc00 	.word	0x000ffc00
 8004c84:	7ffffc00 	.word	0x7ffffc00
 8004c88:	0800a81c 	.word	0x0800a81c
 8004c8c:	0800a718 	.word	0x0800a718
 8004c90:	0800a828 	.word	0x0800a828

08004c94 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af04      	add	r7, sp, #16
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9303      	str	r3, [sp, #12]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9302      	str	r3, [sp, #8]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff fc7c 	bl	80045b8 <lfs_dir_fetchmatch>
 8004cc0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8004cd8:	f107 0310 	add.w	r3, r7, #16
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <lfs_dir_getgstate+0x5c>)
 8004ce0:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <lfs_dir_getgstate+0x60>)
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7fe ff35 	bl	8003b54 <lfs_dir_get>
 8004cea:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	da05      	bge.n	8004cfe <lfs_dir_getgstate+0x32>
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f113 0f02 	cmn.w	r3, #2
 8004cf8:	d001      	beq.n	8004cfe <lfs_dir_getgstate+0x32>
        return res;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	e00f      	b.n	8004d1e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f113 0f02 	cmn.w	r3, #2
 8004d04:	d00a      	beq.n	8004d1c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8004d06:	f107 0310 	add.w	r3, r7, #16
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe fc00 	bl	8003510 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe fb63 	bl	80033e2 <lfs_gstate_xor>
    }

    return 0;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	7ff0000c 	.word	0x7ff0000c
 8004d2c:	7ff00000 	.word	0x7ff00000

08004d30 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b08f      	sub	sp, #60	; 0x3c
 8004d34:	af04      	add	r7, sp, #16
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	689c      	ldr	r4, [r3, #8]
 8004d4e:	68b8      	ldr	r0, [r7, #8]
 8004d50:	f7fe fb26 	bl	80033a0 <lfs_tag_size>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4619      	mov	r1, r3
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f7fd fdfb 	bl	8002954 <lfs_min>
 8004d5e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8004d60:	6a3c      	ldr	r4, [r7, #32]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	6852      	ldr	r2, [r2, #4]
 8004d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d6c:	6849      	ldr	r1, [r1, #4]
 8004d6e:	69b8      	ldr	r0, [r7, #24]
 8004d70:	9003      	str	r0, [sp, #12]
 8004d72:	9102      	str	r1, [sp, #8]
 8004d74:	9201      	str	r2, [sp, #4]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	6a38      	ldr	r0, [r7, #32]
 8004d80:	f7fe f808 	bl	8002d94 <lfs_bd_cmp>
 8004d84:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <lfs_dir_find_match+0x60>
        return res;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	e014      	b.n	8004dba <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	689c      	ldr	r4, [r3, #8]
 8004d94:	68b8      	ldr	r0, [r7, #8]
 8004d96:	f7fe fb03 	bl	80033a0 <lfs_tag_size>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	429c      	cmp	r4, r3
 8004d9e:	d00b      	beq.n	8004db8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	689c      	ldr	r4, [r3, #8]
 8004da4:	68b8      	ldr	r0, [r7, #8]
 8004da6:	f7fe fafb 	bl	80033a0 <lfs_tag_size>
 8004daa:	4603      	mov	r3, r0
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d201      	bcs.n	8004db4 <lfs_dir_find_match+0x84>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e002      	b.n	8004dba <lfs_dir_find_match+0x8a>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e000      	b.n	8004dba <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	372c      	adds	r7, #44	; 0x2c
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}
	...

08004dc4 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b093      	sub	sp, #76	; 0x4c
 8004dc8:	af04      	add	r7, sp, #16
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004de4:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8004de6:	4b6e      	ldr	r3, [pc, #440]	; (8004fa0 <lfs_dir_find+0x1dc>)
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1a      	ldr	r2, [r3, #32]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8004dfa:	496a      	ldr	r1, [pc, #424]	; (8004fa4 <lfs_dir_find+0x1e0>)
 8004dfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004dfe:	f005 f87b 	bl	8009ef8 <strspn>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	4413      	add	r3, r2
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8004e0a:	4966      	ldr	r1, [pc, #408]	; (8004fa4 <lfs_dir_find+0x1e0>)
 8004e0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e0e:	f005 f862 	bl	8009ed6 <strcspn>
 8004e12:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <lfs_dir_find+0x62>
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	4b62      	ldr	r3, [pc, #392]	; (8004fa8 <lfs_dir_find+0x1e4>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d00a      	beq.n	8004e3c <lfs_dir_find+0x78>
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d10c      	bne.n	8004e46 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	495f      	ldr	r1, [pc, #380]	; (8004fac <lfs_dir_find+0x1e8>)
 8004e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e32:	f004 fc27 	bl	8009684 <memcmp>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <lfs_dir_find+0x82>
            name += namelen;
 8004e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	4413      	add	r3, r2
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8004e44:	e7d9      	b.n	8004dfa <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8004e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	4413      	add	r3, r2
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8004e52:	4954      	ldr	r1, [pc, #336]	; (8004fa4 <lfs_dir_find+0x1e0>)
 8004e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e56:	f005 f84f 	bl	8009ef8 <strspn>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	4413      	add	r3, r2
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8004e62:	4950      	ldr	r1, [pc, #320]	; (8004fa4 <lfs_dir_find+0x1e0>)
 8004e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e66:	f005 f836 	bl	8009ed6 <strcspn>
 8004e6a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01d      	beq.n	8004eae <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d112      	bne.n	8004e9e <lfs_dir_find+0xda>
 8004e78:	2202      	movs	r2, #2
 8004e7a:	494c      	ldr	r1, [pc, #304]	; (8004fac <lfs_dir_find+0x1e8>)
 8004e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e7e:	f004 fc01 	bl	8009684 <memcmp>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <lfs_dir_find+0xda>
                depth -= 1;
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8004e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	4413      	add	r3, r2
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8004e9c:	e7ad      	b.n	8004dfa <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8004ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8004eac:	e7d1      	b.n	8004e52 <lfs_dir_find+0x8e>
                break;
 8004eae:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <lfs_dir_find+0xf8>
            return tag;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	e06c      	b.n	8004f96 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec0:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fa31 	bl	800332c <lfs_tag_type3>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d002      	beq.n	8004ed6 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8004ed0:	f06f 0313 	mvn.w	r3, #19
 8004ed4:	e05f      	b.n	8004f96 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe fa51 	bl	8003380 <lfs_tag_id>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d01c      	beq.n	8004f24 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe fa47 	bl	8003380 <lfs_tag_id>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004efa:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004f02:	9200      	str	r2, [sp, #0]
 8004f04:	4a2a      	ldr	r2, [pc, #168]	; (8004fb0 <lfs_dir_find+0x1ec>)
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7fe fe23 	bl	8003b54 <lfs_dir_get>
 8004f0e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	da01      	bge.n	8004f1a <lfs_dir_find+0x156>
                return res;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	e03d      	b.n	8004f96 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3318      	adds	r3, #24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe f99f 	bl	8003262 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8004f2a:	212f      	movs	r1, #47	; 0x2f
 8004f2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f2e:	f004 ffc5 	bl	8009ebc <strchr>
 8004f32:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <lfs_dir_find+0x178>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	e000      	b.n	8004f3e <lfs_dir_find+0x17a>
 8004f3c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	613a      	str	r2, [r7, #16]
 8004f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f44:	617a      	str	r2, [r7, #20]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004f4a:	f107 0210 	add.w	r2, r7, #16
 8004f4e:	9203      	str	r2, [sp, #12]
 8004f50:	4a18      	ldr	r2, [pc, #96]	; (8004fb4 <lfs_dir_find+0x1f0>)
 8004f52:	9202      	str	r2, [sp, #8]
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8004f5e:	4622      	mov	r2, r4
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff fb28 	bl	80045b8 <lfs_dir_fetchmatch>
 8004f68:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	da01      	bge.n	8004f74 <lfs_dir_find+0x1b0>
                return tag;
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	e010      	b.n	8004f96 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d004      	beq.n	8004f84 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8004f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	4413      	add	r3, r2
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8004f82:	e73a      	b.n	8004dfa <lfs_dir_find+0x36>
            if (!dir->split) {
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	7ddb      	ldrb	r3, [r3, #23]
 8004f88:	f083 0301 	eor.w	r3, r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0c8      	beq.n	8004f24 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8004f92:	f06f 0301 	mvn.w	r3, #1
    }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	373c      	adds	r7, #60	; 0x3c
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd90      	pop	{r4, r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	002ffc00 	.word	0x002ffc00
 8004fa4:	0800a868 	.word	0x0800a868
 8004fa8:	0800a86c 	.word	0x0800a86c
 8004fac:	0800a870 	.word	0x0800a870
 8004fb0:	700ffc00 	.word	0x700ffc00
 8004fb4:	08004d31 	.word	0x08004d31

08004fb8 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b08b      	sub	sp, #44	; 0x2c
 8004fbc:	af04      	add	r7, sp, #16
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f103 0010 	add.w	r0, r3, #16
 8004fcc:	68fc      	ldr	r4, [r7, #12]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	6852      	ldr	r2, [r2, #4]
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	9103      	str	r1, [sp, #12]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	9102      	str	r1, [sp, #8]
 8004fde:	9201      	str	r2, [sp, #4]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7fd ffd5 	bl	8002f98 <lfs_bd_prog>
 8004fee:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <lfs_dir_commitprog+0x42>
        return err;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	e010      	b.n	800501c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4618      	mov	r0, r3
 8005004:	f003 ff0c 	bl	8008e20 <lfs_crc>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	441a      	add	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	605a      	str	r2, [r3, #4]
    return 0;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd90      	pop	{r4, r7, pc}

08005024 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b08f      	sub	sp, #60	; 0x3c
 8005028:	af04      	add	r7, sp, #16
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fe f9c1 	bl	80033ba <lfs_tag_dsize>
 8005038:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	441a      	add	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	429a      	cmp	r2, r3
 8005048:	d902      	bls.n	8005050 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800504a:	f06f 031b 	mvn.w	r3, #27
 800504e:	e065      	b.n	800511c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4053      	eors	r3, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7fd fd0c 	bl	8002a7a <lfs_tobe32>
 8005062:	4603      	mov	r3, r0
 8005064:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8005066:	f107 0214 	add.w	r2, r7, #20
 800506a:	2304      	movs	r3, #4
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff ffa2 	bl	8004fb8 <lfs_dir_commitprog>
 8005074:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <lfs_dir_commitattr+0x5c>
        return err;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	e04d      	b.n	800511c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	db0c      	blt.n	80050a0 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	3b04      	subs	r3, #4
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ff92 	bl	8004fb8 <lfs_dir_commitprog>
 8005094:	61f8      	str	r0, [r7, #28]
        if (err) {
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d039      	beq.n	8005110 <lfs_dir_commitattr+0xec>
            return err;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	e03d      	b.n	800511c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
 80050a8:	e02d      	b.n	8005106 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80050aa:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80050ac:	6a3a      	ldr	r2, [r7, #32]
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80050b2:	1f1c      	subs	r4, r3, #4
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	440a      	add	r2, r1
 80050c0:	2101      	movs	r1, #1
 80050c2:	9103      	str	r1, [sp, #12]
 80050c4:	f107 0113 	add.w	r1, r7, #19
 80050c8:	9102      	str	r1, [sp, #8]
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	4623      	mov	r3, r4
 80050d0:	4602      	mov	r2, r0
 80050d2:	2100      	movs	r1, #0
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7fd fd19 	bl	8002b0c <lfs_bd_read>
 80050da:	61f8      	str	r0, [r7, #28]
            if (err) {
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <lfs_dir_commitattr+0xc2>
                return err;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	e01a      	b.n	800511c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80050e6:	f107 0213 	add.w	r2, r7, #19
 80050ea:	2301      	movs	r3, #1
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff62 	bl	8004fb8 <lfs_dir_commitprog>
 80050f4:	61f8      	str	r0, [r7, #28]
            if (err) {
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <lfs_dir_commitattr+0xdc>
                return err;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	e00d      	b.n	800511c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	3301      	adds	r3, #1
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	3b04      	subs	r3, #4
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	429a      	cmp	r2, r3
 800510e:	d3cc      	bcc.n	80050aa <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	609a      	str	r2, [r3, #8]
    return 0;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	372c      	adds	r7, #44	; 0x2c
 8005120:	46bd      	mov	sp, r7
 8005122:	bd90      	pop	{r4, r7, pc}

08005124 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8005124:	b590      	push	{r4, r7, lr}
 8005126:	b097      	sub	sp, #92	; 0x5c
 8005128:	af04      	add	r7, sp, #16
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7fd fc2d 	bl	800299e <lfs_alignup>
 8005144:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800514e:	e0a6      	b.n	800529e <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8005158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fbf6 	bl	8002954 <lfs_min>
 8005168:	4602      	mov	r2, r0
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	4413      	add	r3, r2
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8005170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	429a      	cmp	r2, r3
 8005176:	d206      	bcs.n	8005186 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	3b08      	subs	r3, #8
 800517c:	4619      	mov	r1, r3
 800517e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005180:	f7fd fbe8 	bl	8002954 <lfs_min>
 8005184:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8005186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800518a:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2204      	movs	r2, #4
 8005194:	9203      	str	r2, [sp, #12]
 8005196:	f107 0214 	add.w	r2, r7, #20
 800519a:	9202      	str	r2, [sp, #8]
 800519c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800519e:	9201      	str	r2, [sp, #4]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2304      	movs	r3, #4
 80051a4:	460a      	mov	r2, r1
 80051a6:	2100      	movs	r1, #0
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fd fcaf 	bl	8002b0c <lfs_bd_read>
 80051ae:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <lfs_dir_commitcrc+0x9e>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80051bc:	d001      	beq.n	80051c2 <lfs_dir_commitcrc+0x9e>
            return err;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	e0e8      	b.n	8005394 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fd fc4c 	bl	8002a62 <lfs_frombe32>
 80051ca:	4603      	mov	r3, r0
 80051cc:	43db      	mvns	r3, r3
 80051ce:	0fdb      	lsrs	r3, r3, #31
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf14      	ite	ne
 80051d4:	2301      	movne	r3, #1
 80051d6:	2300      	moveq	r3, #0
 80051d8:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 80051da:	7efb      	ldrb	r3, [r7, #27]
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	051a      	lsls	r2, r3, #20
 80051e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	1acb      	subs	r3, r1, r3
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80051ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80051f2:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	4053      	eors	r3, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fd fc3c 	bl	8002a7a <lfs_tobe32>
 8005202:	4603      	mov	r3, r0
 8005204:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f107 010c 	add.w	r1, r7, #12
 800520e:	2204      	movs	r2, #4
 8005210:	4618      	mov	r0, r3
 8005212:	f003 fe05 	bl	8008e20 <lfs_crc>
 8005216:	4602      	mov	r2, r0
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4618      	mov	r0, r3
 8005222:	f7fd fc12 	bl	8002a4a <lfs_tole32>
 8005226:	4603      	mov	r3, r0
 8005228:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f103 0010 	add.w	r0, r3, #16
 8005230:	687c      	ldr	r4, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	6852      	ldr	r2, [r2, #4]
 800523a:	2108      	movs	r1, #8
 800523c:	9103      	str	r1, [sp, #12]
 800523e:	f107 010c 	add.w	r1, r7, #12
 8005242:	9102      	str	r1, [sp, #8]
 8005244:	9201      	str	r2, [sp, #4]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2300      	movs	r3, #0
 800524a:	4622      	mov	r2, r4
 800524c:	4601      	mov	r1, r0
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fd fea2 	bl	8002f98 <lfs_bd_prog>
 8005254:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <lfs_dir_commitcrc+0x13c>
            return err;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	e099      	b.n	8005394 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8005260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe f892 	bl	80033a0 <lfs_tag_size>
 800527c:	4603      	mov	r3, r0
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	441a      	add	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800528a:	7efb      	ldrb	r3, [r7, #27]
 800528c:	07da      	lsls	r2, r3, #31
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	405a      	eors	r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800529c:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a4:	429a      	cmp	r2, r3
 80052a6:	f63f af53 	bhi.w	8005150 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f103 0110 	add.w	r1, r3, #16
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	2300      	movs	r3, #0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fd fe3b 	bl	8002f30 <lfs_bd_sync>
 80052ba:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <lfs_dir_commitcrc+0x1a2>
        return err;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	e066      	b.n	8005394 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 80052cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80052d0:	e05b      	b.n	800538a <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 80052d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052d6:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052dc:	e030      	b.n	8005340 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 80052de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d106      	bne.n	80052f4 <lfs_dir_commitcrc+0x1d0>
 80052e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d002      	beq.n	80052f4 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 80052ee:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80052f2:	e04f      	b.n	8005394 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80052f4:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 80052f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80052fc:	1d18      	adds	r0, r3, #4
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2201      	movs	r2, #1
 8005304:	9203      	str	r2, [sp, #12]
 8005306:	f107 020b 	add.w	r2, r7, #11
 800530a:	9202      	str	r2, [sp, #8]
 800530c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800530e:	9201      	str	r2, [sp, #4]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4603      	mov	r3, r0
 8005314:	460a      	mov	r2, r1
 8005316:	2100      	movs	r1, #0
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fd fbf7 	bl	8002b0c <lfs_bd_read>
 800531e:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <lfs_dir_commitcrc+0x206>
                return err;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	e034      	b.n	8005394 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800532a:	f107 030b 	add.w	r3, r7, #11
 800532e:	2201      	movs	r2, #1
 8005330:	4619      	mov	r1, r3
 8005332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005334:	f003 fd74 	bl	8008e20 <lfs_crc>
 8005338:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	3301      	adds	r3, #1
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	3304      	adds	r3, #4
 8005344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005346:	429a      	cmp	r2, r3
 8005348:	d3c9      	bcc.n	80052de <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8005350:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005354:	e01e      	b.n	8005394 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005360:	4618      	mov	r0, r3
 8005362:	f7fd faf7 	bl	8002954 <lfs_min>
 8005366:	4602      	mov	r2, r0
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	4413      	add	r3, r2
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800536e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	429a      	cmp	r2, r3
 8005374:	d206      	bcs.n	8005384 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	3b08      	subs	r3, #8
 800537a:	4619      	mov	r1, r3
 800537c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800537e:	f7fd fae9 	bl	8002954 <lfs_min>
 8005382:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	3304      	adds	r3, #4
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800538a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	429a      	cmp	r2, r3
 8005390:	d39f      	bcc.n	80052d2 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	374c      	adds	r7, #76	; 0x4c
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}

0800539c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28
 80053a0:	af04      	add	r7, sp, #16
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e016      	b.n	80053da <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	3301      	adds	r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	bfb8      	it	lt
 80053b8:	425b      	neglt	r3, r3
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fe fa2c 	bl	8003820 <lfs_alloc>
 80053c8:	60f8      	str	r0, [r7, #12]
        if (err) {
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <lfs_dir_alloc+0x38>
            return err;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	e058      	b.n	8005486 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3301      	adds	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	dde5      	ble.n	80053ac <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2200      	movs	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80053f0:	2004      	movs	r0, #4
 80053f2:	9003      	str	r0, [sp, #12]
 80053f4:	9202      	str	r2, [sp, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	9201      	str	r2, [sp, #4]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	2304      	movs	r3, #4
 80053fe:	460a      	mov	r2, r1
 8005400:	2100      	movs	r1, #0
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fd fb82 	bl	8002b0c <lfs_bd_read>
 8005408:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fd fb10 	bl	8002a34 <lfs_fromle32>
 8005414:	4602      	mov	r2, r0
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <lfs_dir_alloc+0x90>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005426:	d001      	beq.n	800542c <lfs_dir_alloc+0x90>
        return err;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	e02c      	b.n	8005486 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	dd0e      	ble.n	8005454 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	3301      	adds	r3, #1
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f7fd faa8 	bl	800299e <lfs_alignup>
 800544e:	4602      	mov	r2, r0
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2204      	movs	r2, #4
 8005458:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005460:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2200      	movs	r2, #0
 8005466:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005476:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2200      	movs	r2, #0
 8005482:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800548e:	b580      	push	{r7, lr}
 8005490:	b092      	sub	sp, #72	; 0x48
 8005492:	af04      	add	r7, sp, #16
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff7a 	bl	800539c <lfs_dir_alloc>
 80054a8:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <lfs_dir_split+0x26>
        return err;
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	e03c      	b.n	800552e <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	7ddb      	ldrb	r3, [r3, #23]
 80054b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80054c8:	f107 0110 	add.w	r1, r7, #16
 80054cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f879 	bl	80055d8 <lfs_dir_compact>
 80054e6:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da01      	bge.n	80054f2 <lfs_dir_split+0x64>
        return res;
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	e01d      	b.n	800552e <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2201      	movs	r2, #1
 8005502:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3320      	adds	r3, #32
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fd fe51 	bl	80031b4 <lfs_pair_cmp>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <lfs_dir_split+0x9e>
 8005518:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3738      	adds	r7, #56	; 0x38
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8005546:	68b8      	ldr	r0, [r7, #8]
 8005548:	f7fd ff37 	bl	80033ba <lfs_tag_dsize>
 800554c:	4602      	mov	r2, r0
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	441a      	add	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	601a      	str	r2, [r3, #0]
    return 0;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	f7ff fd51 	bl	8005024 <lfs_dir_commitattr>
 8005582:	4603      	mov	r3, r0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800559c:	2b00      	cmp	r3, #0
 800559e:	dd11      	ble.n	80055c4 <lfs_dir_needsrelocation+0x38>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	3301      	adds	r3, #1
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055ac:	3201      	adds	r2, #1
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80055b6:	fb01 f202 	mul.w	r2, r1, r2
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <lfs_dir_needsrelocation+0x38>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <lfs_dir_needsrelocation+0x3a>
 80055c4:	2300      	movs	r3, #0
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b0a4      	sub	sp, #144	; 0x90
 80055dc:	af0a      	add	r7, sp, #40	; 0x28
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff ffcc 	bl	800558c <lfs_dir_needsrelocation>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8005604:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00e      	beq.n	800562a <lfs_dir_compact+0x52>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	657a      	str	r2, [r7, #84]	; 0x54
 8005612:	2201      	movs	r2, #1
 8005614:	65ba      	str	r2, [r7, #88]	; 0x58
 8005616:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800561a:	4611      	mov	r1, r2
 800561c:	4618      	mov	r0, r3
 800561e:	f7fd fdc9 	bl	80031b4 <lfs_pair_cmp>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	f040 8155 	bne.w	80058d4 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005630:	2300      	movs	r3, #0
 8005632:	643b      	str	r3, [r7, #64]	; 0x40
 8005634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
 800563a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800563e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005640:	2300      	movs	r3, #0
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <lfs_dir_compact+0x80>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005654:	3b08      	subs	r3, #8
 8005656:	e003      	b.n	8005660 <lfs_dir_compact+0x88>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8005660:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4619      	mov	r1, r3
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7fd fd41 	bl	80030f0 <lfs_bd_erase>
 800566e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d006      	beq.n	8005684 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8005676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005678:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800567c:	f000 812c 	beq.w	80058d8 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8005680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005682:	e187      	b.n	8005994 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f7fd f9de 	bl	8002a4a <lfs_tole32>
 800568e:	4602      	mov	r2, r0
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800569a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800569e:	2304      	movs	r3, #4
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fc89 	bl	8004fb8 <lfs_dir_commitprog>
 80056a6:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fd f9c1 	bl	8002a34 <lfs_fromle32>
 80056b2:	4602      	mov	r2, r0
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]
            if (err) {
 80056b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d006      	beq.n	80056cc <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80056be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80056c4:	f000 810a 	beq.w	80058dc <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80056c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ca:	e163      	b.n	8005994 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80056cc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80056d0:	425b      	negs	r3, r3
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	637a      	str	r2, [r7, #52]	; 0x34
 80056da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056de:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80056e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056e4:	9208      	str	r2, [sp, #32]
 80056e6:	4aad      	ldr	r2, [pc, #692]	; (800599c <lfs_dir_compact+0x3c4>)
 80056e8:	9207      	str	r2, [sp, #28]
 80056ea:	9306      	str	r3, [sp, #24]
 80056ec:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	2300      	movs	r3, #0
 80056fa:	9303      	str	r3, [sp, #12]
 80056fc:	4ba8      	ldr	r3, [pc, #672]	; (80059a0 <lfs_dir_compact+0x3c8>)
 80056fe:	9302      	str	r3, [sp, #8]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800570c:	2200      	movs	r2, #0
 800570e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7fe fb71 	bl	8003df8 <lfs_dir_traverse>
 8005716:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8005718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800571e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005720:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005724:	f000 80dc 	beq.w	80058e0 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8005728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572a:	e133      	b.n	8005994 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3318      	adds	r3, #24
 8005730:	4618      	mov	r0, r3
 8005732:	f7fd fd24 	bl	800317e <lfs_pair_isnull>
 8005736:	4603      	mov	r3, r0
 8005738:	f083 0301 	eor.w	r3, r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d022      	beq.n	8005788 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	3318      	adds	r3, #24
 8005746:	4618      	mov	r0, r3
 8005748:	f7fd fda5 	bl	8003296 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	7ddb      	ldrb	r3, [r3, #23]
 8005750:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005754:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8005756:	4a93      	ldr	r2, [pc, #588]	; (80059a4 <lfs_dir_compact+0x3cc>)
 8005758:	431a      	orrs	r2, r3
                        dir->tail);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800575e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fc5e 	bl	8005024 <lfs_dir_commitattr>
 8005768:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	3318      	adds	r3, #24
 800576e:	4618      	mov	r0, r3
 8005770:	f7fd fd77 	bl	8003262 <lfs_pair_fromle32>
                if (err) {
 8005774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d006      	beq.n	8005788 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800577a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005780:	f000 80b0 	beq.w	80058e4 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8005784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005786:	e105      	b.n	8005994 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8005788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8005794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005798:	f083 0301 	eor.w	r3, r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d011      	beq.n	80057c6 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80057a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fd fe17 	bl	80033e2 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80057ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fd fe0e 	bl	80033e2 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80057cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fd fe05 	bl	80033e2 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80057e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057e8:	461a      	mov	r2, r3
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff fa6d 	bl	8004ccc <lfs_dir_getgstate>
 80057f2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80057f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <lfs_dir_compact+0x226>
                return err;
 80057fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fc:	e0ca      	b.n	8005994 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80057fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005802:	4618      	mov	r0, r3
 8005804:	f7fd fe12 	bl	800342c <lfs_gstate_iszero>
 8005808:	4603      	mov	r3, r0
 800580a:	f083 0301 	eor.w	r3, r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d016      	beq.n	8005842 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8005814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd fe99 	bl	8003550 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800581e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005822:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005826:	4a60      	ldr	r2, [pc, #384]	; (80059a8 <lfs_dir_compact+0x3d0>)
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fbfb 	bl	8005024 <lfs_dir_commitattr>
 800582e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8005830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8005836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005838:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800583c:	d054      	beq.n	80058e8 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800583e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005840:	e0a8      	b.n	8005994 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8005842:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005846:	4619      	mov	r1, r3
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff fc6b 	bl	8005124 <lfs_dir_commitcrc>
 800584e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8005850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8005856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005858:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800585c:	d046      	beq.n	80058ec <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800585e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005860:	e098      	b.n	8005994 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005868:	6992      	ldr	r2, [r2, #24]
 800586a:	fbb3 f1f2 	udiv	r1, r3, r2
 800586e:	fb01 f202 	mul.w	r2, r1, r2
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <lfs_dir_compact+0x2ae>
 8005878:	4b4c      	ldr	r3, [pc, #304]	; (80059ac <lfs_dir_compact+0x3d4>)
 800587a:	4a4d      	ldr	r2, [pc, #308]	; (80059b0 <lfs_dir_compact+0x3d8>)
 800587c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8005880:	484c      	ldr	r0, [pc, #304]	; (80059b4 <lfs_dir_compact+0x3dc>)
 8005882:	f003 fe95 	bl	80095b0 <__assert_func>
            lfs_pair_swap(dir->pair);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f7fd fc63 	bl	8003154 <lfs_pair_swap>
            dir->count = end - begin;
 800588e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005892:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	b29a      	uxth	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800589e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80058a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3348      	adds	r3, #72	; 0x48
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
 80058b4:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80058b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d064      	beq.n	800598e <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	333c      	adds	r3, #60	; 0x3c
 80058ca:	3230      	adds	r2, #48	; 0x30
 80058cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80058ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80058d2:	e05c      	b.n	800598e <lfs_dir_compact+0x3b6>
        goto relocate;
 80058d4:	bf00      	nop
 80058d6:	e00a      	b.n	80058ee <lfs_dir_compact+0x316>
                    goto relocate;
 80058d8:	bf00      	nop
 80058da:	e008      	b.n	80058ee <lfs_dir_compact+0x316>
                    goto relocate;
 80058dc:	bf00      	nop
 80058de:	e006      	b.n	80058ee <lfs_dir_compact+0x316>
                    goto relocate;
 80058e0:	bf00      	nop
 80058e2:	e004      	b.n	80058ee <lfs_dir_compact+0x316>
                        goto relocate;
 80058e4:	bf00      	nop
 80058e6:	e002      	b.n	80058ee <lfs_dir_compact+0x316>
                        goto relocate;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <lfs_dir_compact+0x316>
                    goto relocate;
 80058ec:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3310      	adds	r3, #16
 80058f8:	4619      	mov	r1, r3
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7fd f8e0 	bl	8002ac0 <lfs_cache_drop>
        if (!tired) {
 8005900:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005904:	f083 0301 	eor.w	r3, r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <lfs_dir_compact+0x3e0>)
 8005914:	9200      	str	r2, [sp, #0]
 8005916:	f240 725a 	movw	r2, #1882	; 0x75a
 800591a:	4926      	ldr	r1, [pc, #152]	; (80059b4 <lfs_dir_compact+0x3dc>)
 800591c:	4827      	ldr	r0, [pc, #156]	; (80059bc <lfs_dir_compact+0x3e4>)
 800591e:	f004 faa5 	bl	8009e6c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2200      	movs	r2, #0
 8005926:	617a      	str	r2, [r7, #20]
 8005928:	2201      	movs	r2, #1
 800592a:	61ba      	str	r2, [r7, #24]
 800592c:	f107 0214 	add.w	r2, r7, #20
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd fc3e 	bl	80031b4 <lfs_pair_cmp>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10c      	bne.n	8005958 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <lfs_dir_compact+0x3e0>)
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	f240 725f 	movw	r2, #1887	; 0x75f
 800594a:	491a      	ldr	r1, [pc, #104]	; (80059b4 <lfs_dir_compact+0x3dc>)
 800594c:	481c      	ldr	r0, [pc, #112]	; (80059c0 <lfs_dir_compact+0x3e8>)
 800594e:	f004 fa8d 	bl	8009e6c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8005952:	f06f 031b 	mvn.w	r3, #27
 8005956:	e01d      	b.n	8005994 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7fd ff5e 	bl	8003820 <lfs_alloc>
 8005964:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8005966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00c      	beq.n	8005986 <lfs_dir_compact+0x3ae>
 800596c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800596e:	f113 0f1c 	cmn.w	r3, #28
 8005972:	d106      	bne.n	8005982 <lfs_dir_compact+0x3aa>
 8005974:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005978:	f083 0301 	eor.w	r3, r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <lfs_dir_compact+0x3ae>
            return err;
 8005982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005984:	e006      	b.n	8005994 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 800598c:	e64d      	b.n	800562a <lfs_dir_compact+0x52>
        break;
 800598e:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8005990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005994:	4618      	mov	r0, r3
 8005996:	3768      	adds	r7, #104	; 0x68
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	08005563 	.word	0x08005563
 80059a0:	400ffc00 	.word	0x400ffc00
 80059a4:	000ffc08 	.word	0x000ffc08
 80059a8:	7ffffc0c 	.word	0x7ffffc0c
 80059ac:	0800a874 	.word	0x0800a874
 80059b0:	0800b0c8 	.word	0x0800b0c8
 80059b4:	0800a718 	.word	0x0800a718
 80059b8:	0800a81c 	.word	0x0800a81c
 80059bc:	0800a89c 	.word	0x0800a89c
 80059c0:	0800a8c0 	.word	0x0800a8c0

080059c4 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b097      	sub	sp, #92	; 0x5c
 80059c8:	af0a      	add	r7, sp, #40	; 0x28
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80059d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80059d8:	e058      	b.n	8005a8c <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e4:	b292      	uxth	r2, r2
 80059e6:	4252      	negs	r2, r2
 80059e8:	b292      	uxth	r2, r2
 80059ea:	b212      	sxth	r2, r2
 80059ec:	f107 0118 	add.w	r1, r7, #24
 80059f0:	9108      	str	r1, [sp, #32]
 80059f2:	4979      	ldr	r1, [pc, #484]	; (8005bd8 <lfs_dir_splittingcompact+0x214>)
 80059f4:	9107      	str	r1, [sp, #28]
 80059f6:	9206      	str	r2, [sp, #24]
 80059f8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80059fc:	9205      	str	r2, [sp, #20]
 80059fe:	9304      	str	r3, [sp, #16]
 8005a00:	2300      	movs	r3, #0
 8005a02:	9303      	str	r3, [sp, #12]
 8005a04:	4b75      	ldr	r3, [pc, #468]	; (8005bdc <lfs_dir_splittingcompact+0x218>)
 8005a06:	9302      	str	r3, [sp, #8]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a14:	2200      	movs	r2, #0
 8005a16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7fe f9ed 	bl	8003df8 <lfs_dir_traverse>
 8005a1e:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <lfs_dir_splittingcompact+0x66>
                return err;
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	e0d1      	b.n	8005bce <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8005a2a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2bfe      	cmp	r3, #254	; 0xfe
 8005a34:	d822      	bhi.n	8005a7c <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	e003      	b.n	8005a5c <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a58:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005a5a:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005a60:	6992      	ldr	r2, [r2, #24]
 8005a62:	4611      	mov	r1, r2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fc ff9a 	bl	800299e <lfs_alignup>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7fc ff70 	bl	8002954 <lfs_min>
 8005a74:	4602      	mov	r2, r0
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d20e      	bcs.n	8005a9a <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8005a7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a88:	4413      	add	r3, r2
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8005a8c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d8a0      	bhi.n	80059da <lfs_dir_splittingcompact+0x16>
 8005a98:	e000      	b.n	8005a9c <lfs_dir_splittingcompact+0xd8>
                break;
 8005a9a:	bf00      	nop
        }

        if (split == begin) {
 8005a9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d02d      	beq.n	8005b02 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005aae:	9202      	str	r2, [sp, #8]
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fce6 	bl	800548e <lfs_dir_split>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <lfs_dir_splittingcompact+0x112>
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	f113 0f1c 	cmn.w	r3, #28
 8005ad0:	d001      	beq.n	8005ad6 <lfs_dir_splittingcompact+0x112>
            return err;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	e07b      	b.n	8005bce <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00e      	beq.n	8005afa <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	493e      	ldr	r1, [pc, #248]	; (8005be0 <lfs_dir_splittingcompact+0x21c>)
 8005ae6:	9101      	str	r1, [sp, #4]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	4613      	mov	r3, r2
 8005aec:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8005af0:	493c      	ldr	r1, [pc, #240]	; (8005be4 <lfs_dir_splittingcompact+0x220>)
 8005af2:	483d      	ldr	r0, [pc, #244]	; (8005be8 <lfs_dir_splittingcompact+0x224>)
 8005af4:	f004 f9ba 	bl	8009e6c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8005af8:	e004      	b.n	8005b04 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8005b00:	e767      	b.n	80059d2 <lfs_dir_splittingcompact+0xe>
            break;
 8005b02:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fd40 	bl	800558c <lfs_dir_needsrelocation>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04e      	beq.n	8005bb0 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	613a      	str	r2, [r7, #16]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	617a      	str	r2, [r7, #20]
 8005b1c:	f107 0210 	add.w	r2, r7, #16
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fd fb46 	bl	80031b4 <lfs_pair_cmp>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d140      	bne.n	8005bb0 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f003 f85c 	bl	8008bec <lfs_fs_rawsize>
 8005b34:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	da01      	bge.n	8005b40 <lfs_dir_splittingcompact+0x17c>
            return size;
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	e046      	b.n	8005bce <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	085a      	lsrs	r2, r3, #1
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d930      	bls.n	8005bb0 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <lfs_dir_splittingcompact+0x21c>)
 8005b54:	9200      	str	r2, [sp, #0]
 8005b56:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005b5a:	4922      	ldr	r1, [pc, #136]	; (8005be4 <lfs_dir_splittingcompact+0x220>)
 8005b5c:	4823      	ldr	r0, [pc, #140]	; (8005bec <lfs_dir_splittingcompact+0x228>)
 8005b5e:	f004 f985 	bl	8009e6c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005b62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b66:	9302      	str	r3, [sp, #8]
 8005b68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fc88 	bl	800548e <lfs_dir_split>
 8005b7e:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <lfs_dir_splittingcompact+0x1ce>
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f113 0f1c 	cmn.w	r3, #28
 8005b8c:	d001      	beq.n	8005b92 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	e01d      	b.n	8005bce <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d007      	beq.n	8005ba8 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8005b98:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <lfs_dir_splittingcompact+0x21c>)
 8005b9a:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8005b9e:	4911      	ldr	r1, [pc, #68]	; (8005be4 <lfs_dir_splittingcompact+0x220>)
 8005ba0:	4813      	ldr	r0, [pc, #76]	; (8005bf0 <lfs_dir_splittingcompact+0x22c>)
 8005ba2:	f004 f963 	bl	8009e6c <iprintf>
 8005ba6:	e003      	b.n	8005bb0 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8005ba8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005bac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8005bb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005bb4:	9302      	str	r3, [sp, #8]
 8005bb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff fd06 	bl	80055d8 <lfs_dir_compact>
 8005bcc:	4603      	mov	r3, r0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3734      	adds	r7, #52	; 0x34
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd90      	pop	{r4, r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	08005537 	.word	0x08005537
 8005bdc:	400ffc00 	.word	0x400ffc00
 8005be0:	0800a81c 	.word	0x0800a81c
 8005be4:	0800a718 	.word	0x0800a718
 8005be8:	0800a8f8 	.word	0x0800a8f8
 8005bec:	0800a928 	.word	0x0800a928
 8005bf0:	0800a958 	.word	0x0800a958

08005bf4 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8005bf4:	b5b0      	push	{r4, r5, r7, lr}
 8005bf6:	b0a6      	sub	sp, #152	; 0x98
 8005bf8:	af0a      	add	r7, sp, #40	; 0x28
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
    int state = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8005c10:	e06d      	b.n	8005cee <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8005c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4413      	add	r3, r2
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fd fb85 	bl	800332c <lfs_tag_type3>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	f240 4301 	movw	r3, #1025	; 0x401
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d106      	bne.n	8005c3c <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	8a9b      	ldrh	r3, [r3, #20]
 8005c32:	3301      	adds	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	829a      	strh	r2, [r3, #20]
 8005c3a:	e055      	b.n	8005ce8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	4413      	add	r3, r2
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd fb70 	bl	800332c <lfs_tag_type3>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d114      	bne.n	8005c82 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	8a9b      	ldrh	r3, [r3, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <lfs_dir_relocatingcommit+0x7a>
 8005c60:	4ba4      	ldr	r3, [pc, #656]	; (8005ef4 <lfs_dir_relocatingcommit+0x300>)
 8005c62:	4aa5      	ldr	r2, [pc, #660]	; (8005ef8 <lfs_dir_relocatingcommit+0x304>)
 8005c64:	f240 71df 	movw	r1, #2015	; 0x7df
 8005c68:	48a4      	ldr	r0, [pc, #656]	; (8005efc <lfs_dir_relocatingcommit+0x308>)
 8005c6a:	f003 fca1 	bl	80095b0 <__assert_func>
            dir->count -= 1;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	8a9b      	ldrh	r3, [r3, #20]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005c80:	e032      	b.n	8005ce8 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8005c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4413      	add	r3, r2
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fd fb3d 	bl	800330c <lfs_tag_type1>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c98:	d126      	bne.n	8005ce8 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8005caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fd fb41 	bl	800334c <lfs_tag_chunk>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3318      	adds	r3, #24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fd fabd 	bl	8003262 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8005ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cea:	3301      	adds	r3, #1
 8005cec:	667b      	str	r3, [r7, #100]	; 0x64
 8005cee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	db8c      	blt.n	8005c12 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8005cf8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d02b      	beq.n	8005d58 <lfs_dir_relocatingcommit+0x164>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	8a9b      	ldrh	r3, [r3, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d127      	bne.n	8005d58 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8005d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <lfs_dir_relocatingcommit+0x12a>
 8005d10:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <lfs_dir_relocatingcommit+0x30c>)
 8005d12:	4a79      	ldr	r2, [pc, #484]	; (8005ef8 <lfs_dir_relocatingcommit+0x304>)
 8005d14:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8005d18:	4878      	ldr	r0, [pc, #480]	; (8005efc <lfs_dir_relocatingcommit+0x308>)
 8005d1a:	f003 fc49 	bl	80095b0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005d24:	4619      	mov	r1, r3
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f002 fbd4 	bl	80084d4 <lfs_fs_pred>
 8005d2c:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8005d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <lfs_dir_relocatingcommit+0x14c>
 8005d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d36:	f113 0f02 	cmn.w	r3, #2
 8005d3a:	d001      	beq.n	8005d40 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8005d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d3e:	e203      	b.n	8006148 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8005d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d42:	f113 0f02 	cmn.w	r3, #2
 8005d46:	d007      	beq.n	8005d58 <lfs_dir_relocatingcommit+0x164>
 8005d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4c:	7ddb      	ldrb	r3, [r3, #23]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8005d52:	2302      	movs	r3, #2
 8005d54:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8005d56:	e121      	b.n	8005f9c <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	7d9b      	ldrb	r3, [r3, #22]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80fb 	beq.w	8005f58 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8005d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <lfs_dir_relocatingcommit+0x1a0>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d90:	3b08      	subs	r3, #8
 8005d92:	e003      	b.n	8005d9c <lfs_dir_relocatingcommit+0x1a8>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005d9c:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	3318      	adds	r3, #24
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fd fa77 	bl	8003296 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8005dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dbe:	9308      	str	r3, [sp, #32]
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <lfs_dir_relocatingcommit+0x310>)
 8005dc2:	9307      	str	r3, [sp, #28]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9306      	str	r3, [sp, #24]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9305      	str	r3, [sp, #20]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9303      	str	r3, [sp, #12]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9302      	str	r3, [sp, #8]
 8005dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	460b      	mov	r3, r1
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7fe f806 	bl	8003df8 <lfs_dir_traverse>
 8005dec:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3318      	adds	r3, #24
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fd fa35 	bl	8003262 <lfs_pair_fromle32>
        if (err) {
 8005df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e00:	f113 0f1c 	cmn.w	r3, #28
 8005e04:	f000 80aa 	beq.w	8005f5c <lfs_dir_relocatingcommit+0x368>
 8005e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005e0e:	f000 80a5 	beq.w	8005f5c <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8005e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e14:	e198      	b.n	8006148 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8005e16:	f107 031c 	add.w	r3, r7, #28
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	605a      	str	r2, [r3, #4]
 8005e20:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e28:	f107 031c 	add.w	r3, r7, #28
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fd fad7 	bl	80033e2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005e3a:	f107 031c 	add.w	r3, r7, #28
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fd face 	bl	80033e2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005e4c:	f107 031c 	add.w	r3, r7, #28
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fd fac5 	bl	80033e2 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005e64:	f107 031c 	add.w	r3, r7, #28
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fd fadf 	bl	800342c <lfs_gstate_iszero>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f083 0301 	eor.w	r3, r3, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d027      	beq.n	8005eca <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005e7a:	f107 031c 	add.w	r3, r7, #28
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7fe ff22 	bl	8004ccc <lfs_dir_getgstate>
 8005e88:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e92:	e159      	b.n	8006148 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8005e94:	f107 031c 	add.w	r3, r7, #28
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fd fb59 	bl	8003550 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8005e9e:	f107 031c 	add.w	r3, r7, #28
 8005ea2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <lfs_dir_relocatingcommit+0x314>)
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff f8bb 	bl	8005024 <lfs_dir_commitattr>
 8005eae:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb8:	f113 0f1c 	cmn.w	r3, #28
 8005ebc:	d050      	beq.n	8005f60 <lfs_dir_relocatingcommit+0x36c>
 8005ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ec4:	d04c      	beq.n	8005f60 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec8:	e13e      	b.n	8006148 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8005eca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff f927 	bl	8005124 <lfs_dir_commitcrc>
 8005ed6:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8005ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee0:	f113 0f1c 	cmn.w	r3, #28
 8005ee4:	d03e      	beq.n	8005f64 <lfs_dir_relocatingcommit+0x370>
 8005ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005eec:	d03a      	beq.n	8005f64 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8005eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef0:	e12a      	b.n	8006148 <lfs_dir_relocatingcommit+0x554>
 8005ef2:	bf00      	nop
 8005ef4:	0800a984 	.word	0x0800a984
 8005ef8:	0800b0d8 	.word	0x0800b0d8
 8005efc:	0800a718 	.word	0x0800a718
 8005f00:	0800a994 	.word	0x0800a994
 8005f04:	08005563 	.word	0x08005563
 8005f08:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f12:	6992      	ldr	r2, [r2, #24]
 8005f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f18:	fb01 f202 	mul.w	r2, r1, r2
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <lfs_dir_relocatingcommit+0x33c>
 8005f22:	4b8b      	ldr	r3, [pc, #556]	; (8006150 <lfs_dir_relocatingcommit+0x55c>)
 8005f24:	4a8b      	ldr	r2, [pc, #556]	; (8006154 <lfs_dir_relocatingcommit+0x560>)
 8005f26:	f640 0136 	movw	r1, #2102	; 0x836
 8005f2a:	488b      	ldr	r0, [pc, #556]	; (8006158 <lfs_dir_relocatingcommit+0x564>)
 8005f2c:	f003 fb40 	bl	80095b0 <__assert_func>
        dir->off = commit.off;
 8005f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8005f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	333c      	adds	r3, #60	; 0x3c
 8005f42:	3230      	adds	r2, #48	; 0x30
 8005f44:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3348      	adds	r3, #72	; 0x48
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	609a      	str	r2, [r3, #8]
 8005f56:	e021      	b.n	8005f9c <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8005f58:	bf00      	nop
 8005f5a:	e004      	b.n	8005f66 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005f5c:	bf00      	nop
 8005f5e:	e002      	b.n	8005f66 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005f60:	bf00      	nop
 8005f62:	e000      	b.n	8005f66 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005f64:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3310      	adds	r3, #16
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7fc fda7 	bl	8002ac0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	8a9b      	ldrh	r3, [r3, #20]
 8005f76:	9302      	str	r3, [sp, #8]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff fd1b 	bl	80059c4 <lfs_dir_splittingcompact>
 8005f8e:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	da01      	bge.n	8005f9a <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	e0d6      	b.n	8006148 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8005f9a:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	663b      	str	r3, [r7, #96]	; 0x60
 8005fae:	e0c6      	b.n	800613e <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fd f8fa 	bl	80031b4 <lfs_pair_cmp>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 80b8 	bne.w	8006138 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8005fc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	f103 0408 	add.w	r4, r3, #8
 8005fd0:	4615      	mov	r5, r2
 8005fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	f000 809d 	beq.w	8006124 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8005fea:	2300      	movs	r3, #0
 8005fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fee:	e07b      	b.n	80060e8 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd f996 	bl	800332c <lfs_tag_type3>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006008:	429a      	cmp	r2, r3
 800600a:	d115      	bne.n	8006038 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 800600c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800600e:	889c      	ldrh	r4, [r3, #4]
 8006010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	4413      	add	r3, r2
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f7fd f9b0 	bl	8003380 <lfs_tag_id>
 8006020:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006022:	429c      	cmp	r4, r3
 8006024:	d108      	bne.n	8006038 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8006026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800602c:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800602e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	e054      	b.n	80060e2 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	4413      	add	r3, r2
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fd f972 	bl	800332c <lfs_tag_type3>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006050:	429a      	cmp	r2, r3
 8006052:	d11c      	bne.n	800608e <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8006054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006056:	889c      	ldrh	r4, [r3, #4]
 8006058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	4413      	add	r3, r2
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd f98c 	bl	8003380 <lfs_tag_id>
 8006068:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800606a:	429c      	cmp	r4, r3
 800606c:	d90f      	bls.n	800608e <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 800606e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006070:	889b      	ldrh	r3, [r3, #4]
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006078:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800607a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607c:	799b      	ldrb	r3, [r3, #6]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d12f      	bne.n	80060e2 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8006082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	1e5a      	subs	r2, r3, #1
 8006088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608a:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800608c:	e029      	b.n	80060e2 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800608e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4413      	add	r3, r2
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f7fd f947 	bl	800332c <lfs_tag_type3>
 800609e:	4603      	mov	r3, r0
 80060a0:	461a      	mov	r2, r3
 80060a2:	f240 4301 	movw	r3, #1025	; 0x401
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d11b      	bne.n	80060e2 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80060aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ac:	889c      	ldrh	r4, [r3, #4]
 80060ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4413      	add	r3, r2
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fd f961 	bl	8003380 <lfs_tag_id>
 80060be:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80060c0:	429c      	cmp	r4, r3
 80060c2:	d30e      	bcc.n	80060e2 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 80060c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c6:	889b      	ldrh	r3, [r3, #4]
 80060c8:	3301      	adds	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ce:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80060d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d2:	799b      	ldrb	r3, [r3, #6]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d104      	bne.n	80060e2 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 80060d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e0:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80060e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e4:	3301      	adds	r3, #1
 80060e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060ee:	429a      	cmp	r2, r3
 80060f0:	f6ff af7e 	blt.w	8005ff0 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80060f4:	e016      	b.n	8006124 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 80060f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f8:	889a      	ldrh	r2, [r3, #4]
 80060fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060fc:	8b9b      	ldrh	r3, [r3, #28]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	b29a      	uxth	r2, r3
 8006102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006104:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8006106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006108:	f103 0108 	add.w	r1, r3, #8
 800610c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610e:	3320      	adds	r3, #32
 8006110:	461a      	mov	r2, r3
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7fe fdbe 	bl	8004c94 <lfs_dir_fetch>
 8006118:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 800611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8006120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006122:	e011      	b.n	8006148 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8006124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006126:	889a      	ldrh	r2, [r3, #4]
 8006128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612a:	8b9b      	ldrh	r3, [r3, #28]
 800612c:	429a      	cmp	r2, r3
 800612e:	d303      	bcc.n	8006138 <lfs_dir_relocatingcommit+0x544>
 8006130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006132:	7fdb      	ldrb	r3, [r3, #31]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1de      	bne.n	80060f6 <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	663b      	str	r3, [r7, #96]	; 0x60
 800613e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f af35 	bne.w	8005fb0 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8006146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8006148:	4618      	mov	r0, r3
 800614a:	3770      	adds	r7, #112	; 0x70
 800614c:	46bd      	mov	sp, r7
 800614e:	bdb0      	pop	{r4, r5, r7, pc}
 8006150:	0800a874 	.word	0x0800a874
 8006154:	0800b0d8 	.word	0x0800b0d8
 8006158:	0800a718 	.word	0x0800a718

0800615c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800615c:	b5b0      	push	{r4, r5, r7, lr}
 800615e:	b0bc      	sub	sp, #240	; 0xf0
 8006160:	af04      	add	r7, sp, #16
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006172:	e045      	b.n	8006200 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8006174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006178:	3308      	adds	r3, #8
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d03a      	beq.n	80061f6 <lfs_dir_orphaningcommit+0x9a>
 8006180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006184:	3308      	adds	r3, #8
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f7fd f812 	bl	80031b4 <lfs_pair_cmp>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d12f      	bne.n	80061f6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8006196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800619c:	2b01      	cmp	r3, #1
 800619e:	d12a      	bne.n	80061f6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80061a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d023      	beq.n	80061f6 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80061ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d91b      	bls.n	80061f6 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80061be:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fff0 	bl	80071a8 <lfs_file_outline>
 80061c8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80061cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <lfs_dir_orphaningcommit+0x7e>
                return err;
 80061d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061d8:	e2ad      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80061da:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f001 f804 	bl	80071ec <lfs_file_flush>
 80061e4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80061e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <lfs_dir_orphaningcommit+0x9a>
                return err;
 80061f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061f4:	e29f      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80061f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1b5      	bne.n	8006174 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800621e:	461d      	mov	r5, r3
 8006220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006224:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8006232:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7ff fcd8 	bl	8005bf4 <lfs_dir_relocatingcommit>
 8006244:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8006248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800624c:	2b00      	cmp	r3, #0
 800624e:	da02      	bge.n	8006256 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8006250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006254:	e26f      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f7fc ffa8 	bl	80031b4 <lfs_pair_cmp>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	461d      	mov	r5, r3
 800626e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006276:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800627a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800627e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006282:	2b02      	cmp	r3, #2
 8006284:	d14a      	bne.n	800631c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3348      	adds	r3, #72	; 0x48
 800628a:	461a      	mov	r2, r3
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7fe fd1c 	bl	8004ccc <lfs_dir_getgstate>
 8006294:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8006298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <lfs_dir_orphaningcommit+0x14a>
            return err;
 80062a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062a4:	e247      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80062a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80062ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	3318      	adds	r3, #24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fc ffed 	bl	8003296 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	7ddb      	ldrb	r3, [r3, #23]
 80062c0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80062c4:	051a      	lsls	r2, r3, #20
 80062c6:	4bc2      	ldr	r3, [pc, #776]	; (80065d0 <lfs_dir_orphaningcommit+0x474>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	667b      	str	r3, [r7, #100]	; 0x64
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	3318      	adds	r3, #24
 80062d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80062d6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80062da:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80062de:	2000      	movs	r0, #0
 80062e0:	9001      	str	r0, [sp, #4]
 80062e2:	2001      	movs	r0, #1
 80062e4:	9000      	str	r0, [sp, #0]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff fc84 	bl	8005bf4 <lfs_dir_relocatingcommit>
 80062ec:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	3318      	adds	r3, #24
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fc ffb4 	bl	8003262 <lfs_pair_fromle32>
        if (state < 0) {
 80062fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da02      	bge.n	8006308 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8006302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006306:	e216      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8006308:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800630c:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006314:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800631c:	2300      	movs	r3, #0
 800631e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8006322:	e1fc      	b.n	800671e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8006324:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8006328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800632c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006330:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006334:	4ca7      	ldr	r4, [pc, #668]	; (80065d4 <lfs_dir_orphaningcommit+0x478>)
 8006336:	9403      	str	r4, [sp, #12]
 8006338:	9102      	str	r1, [sp, #8]
 800633a:	9201      	str	r2, [sp, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4603      	mov	r3, r0
 8006340:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8006344:	49a4      	ldr	r1, [pc, #656]	; (80065d8 <lfs_dir_orphaningcommit+0x47c>)
 8006346:	48a5      	ldr	r0, [pc, #660]	; (80065dc <lfs_dir_orphaningcommit+0x480>)
 8006348:	f003 fd90 	bl	8009e6c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f103 0220 	add.w	r2, r3, #32
 8006358:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800635c:	4611      	mov	r1, r2
 800635e:	4618      	mov	r0, r3
 8006360:	f7fc ff28 	bl	80031b4 <lfs_pair_cmp>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d107      	bne.n	800637a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800636a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8006372:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006382:	e037      	b.n	80063f4 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8006384:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006388:	f103 0208 	add.w	r2, r3, #8
 800638c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f7fc ff0e 	bl	80031b4 <lfs_pair_cmp>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800639e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80063a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063a6:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80063a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80063ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063b0:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80063b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063b6:	799b      	ldrb	r3, [r3, #6]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d116      	bne.n	80063ea <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80063bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063c0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80063c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fc fef2 	bl	80031b4 <lfs_pair_cmp>
 80063d0:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80063d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80063da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063de:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80063e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80063e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80063ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1c3      	bne.n	8006384 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80063fc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006400:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006404:	4619      	mov	r1, r3
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f002 f8ec 	bl	80085e4 <lfs_fs_parent>
 800640c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006410:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006414:	2b00      	cmp	r3, #0
 8006416:	da07      	bge.n	8006428 <lfs_dir_orphaningcommit+0x2cc>
 8006418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800641c:	f113 0f02 	cmn.w	r3, #2
 8006420:	d002      	beq.n	8006428 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8006422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006426:	e186      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8006428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800642c:	f113 0f02 	cmn.w	r3, #2
 8006430:	bf14      	ite	ne
 8006432:	2301      	movne	r3, #1
 8006434:	2300      	moveq	r3, #0
 8006436:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800643a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800643e:	f113 0f02 	cmn.w	r3, #2
 8006442:	f000 809e 	beq.w	8006582 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8006446:	2101      	movs	r1, #1
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f002 f921 	bl	8008690 <lfs_fs_preporphans>
 800644e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8006452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <lfs_dir_orphaningcommit+0x304>
                return err;
 800645a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800645e:	e16a      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8006460:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006464:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3330      	adds	r3, #48	; 0x30
 800646c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd f82c 	bl	80034d0 <lfs_gstate_hasmovehere>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d02d      	beq.n	80064da <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	4618      	mov	r0, r3
 8006484:	f7fc ff7c 	bl	8003380 <lfs_tag_id>
 8006488:	4603      	mov	r3, r0
 800648a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 800648e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006492:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8006496:	484f      	ldr	r0, [pc, #316]	; (80065d4 <lfs_dir_orphaningcommit+0x478>)
 8006498:	9002      	str	r0, [sp, #8]
 800649a:	9201      	str	r2, [sp, #4]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	460b      	mov	r3, r1
 80064a0:	f640 02ed 	movw	r2, #2285	; 0x8ed
 80064a4:	494c      	ldr	r1, [pc, #304]	; (80065d8 <lfs_dir_orphaningcommit+0x47c>)
 80064a6:	484e      	ldr	r0, [pc, #312]	; (80065e0 <lfs_dir_orphaningcommit+0x484>)
 80064a8:	f003 fce0 	bl	8009e6c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80064ac:	2200      	movs	r2, #0
 80064ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f002 f926 	bl	8008704 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80064b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fc ff5f 	bl	8003380 <lfs_tag_id>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d205      	bcs.n	80064da <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80064ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064d2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80064d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	657b      	str	r3, [r7, #84]	; 0x54
 80064de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e0:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80064e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fc fed5 	bl	8003296 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80064ec:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80064f0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <lfs_dir_orphaningcommit+0x3ac>
 80064f8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006502:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006506:	e000      	b.n	800650a <lfs_dir_orphaningcommit+0x3ae>
 8006508:	2300      	movs	r3, #0
 800650a:	647b      	str	r3, [r7, #68]	; 0x44
 800650c:	2300      	movs	r3, #0
 800650e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006516:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800651a:	653b      	str	r3, [r7, #80]	; 0x50
 800651c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006520:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006524:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006528:	2000      	movs	r0, #0
 800652a:	9001      	str	r0, [sp, #4]
 800652c:	2002      	movs	r0, #2
 800652e:	9000      	str	r0, [sp, #0]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff fb5f 	bl	8005bf4 <lfs_dir_relocatingcommit>
 8006536:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800653a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800653e:	4618      	mov	r0, r3
 8006540:	f7fc fe8f 	bl	8003262 <lfs_pair_fromle32>
            if (state < 0) {
 8006544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006548:	2b00      	cmp	r3, #0
 800654a:	da02      	bge.n	8006552 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 800654c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006550:	e0f1      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8006552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006556:	2b01      	cmp	r3, #1
 8006558:	d113      	bne.n	8006582 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800655a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800655c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8006560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8006566:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800656a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800656e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006572:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006580:	e0cd      	b.n	800671e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8006582:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006586:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800658a:	4619      	mov	r1, r3
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f001 ffa1 	bl	80084d4 <lfs_fs_pred>
 8006592:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8006596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <lfs_dir_orphaningcommit+0x452>
 800659e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065a2:	f113 0f02 	cmn.w	r3, #2
 80065a6:	d002      	beq.n	80065ae <lfs_dir_orphaningcommit+0x452>
            return err;
 80065a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ac:	e0c3      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80065ae:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01a      	beq.n	80065ec <lfs_dir_orphaningcommit+0x490>
 80065b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ba:	f113 0f02 	cmn.w	r3, #2
 80065be:	d115      	bne.n	80065ec <lfs_dir_orphaningcommit+0x490>
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <lfs_dir_orphaningcommit+0x488>)
 80065c2:	4a09      	ldr	r2, [pc, #36]	; (80065e8 <lfs_dir_orphaningcommit+0x48c>)
 80065c4:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80065c8:	4803      	ldr	r0, [pc, #12]	; (80065d8 <lfs_dir_orphaningcommit+0x47c>)
 80065ca:	f002 fff1 	bl	80095b0 <__assert_func>
 80065ce:	bf00      	nop
 80065d0:	000ffc08 	.word	0x000ffc08
 80065d4:	0800a81c 	.word	0x0800a81c
 80065d8:	0800a718 	.word	0x0800a718
 80065dc:	0800a99c 	.word	0x0800a99c
 80065e0:	0800a9d8 	.word	0x0800a9d8
 80065e4:	0800aa1c 	.word	0x0800aa1c
 80065e8:	0800b0f4 	.word	0x0800b0f4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80065ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065f0:	f113 0f02 	cmn.w	r3, #2
 80065f4:	f000 8093 	beq.w	800671e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3330      	adds	r3, #48	; 0x30
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fc ff32 	bl	8003466 <lfs_gstate_hasorphans>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d011      	beq.n	800662c <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8006608:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800660c:	425b      	negs	r3, r3
 800660e:	b2db      	uxtb	r3, r3
 8006610:	b25b      	sxtb	r3, r3
 8006612:	4619      	mov	r1, r3
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f002 f83b 	bl	8008690 <lfs_fs_preporphans>
 800661a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 800661e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8006626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800662a:	e084      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800662c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006630:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3330      	adds	r3, #48	; 0x30
 8006638:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800663c:	4611      	mov	r1, r2
 800663e:	4618      	mov	r0, r3
 8006640:	f7fc ff46 	bl	80034d0 <lfs_gstate_hasmovehere>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01c      	beq.n	8006684 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	4618      	mov	r0, r3
 8006650:	f7fc fe96 	bl	8003380 <lfs_tag_id>
 8006654:	4603      	mov	r3, r0
 8006656:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800665a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800665c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800665e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8006662:	4837      	ldr	r0, [pc, #220]	; (8006740 <lfs_dir_orphaningcommit+0x5e4>)
 8006664:	9002      	str	r0, [sp, #8]
 8006666:	9201      	str	r2, [sp, #4]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	460b      	mov	r3, r1
 800666c:	f640 1221 	movw	r2, #2337	; 0x921
 8006670:	4934      	ldr	r1, [pc, #208]	; (8006744 <lfs_dir_orphaningcommit+0x5e8>)
 8006672:	4835      	ldr	r0, [pc, #212]	; (8006748 <lfs_dir_orphaningcommit+0x5ec>)
 8006674:	f003 fbfa 	bl	8009e6c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006678:	2200      	movs	r2, #0
 800667a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f002 f840 	bl	8008704 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800668a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800668c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8006690:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006694:	4618      	mov	r0, r3
 8006696:	f7fc fdfe 	bl	8003296 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800669a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800669e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <lfs_dir_orphaningcommit+0x55a>
 80066a6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80066aa:	029b      	lsls	r3, r3, #10
 80066ac:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80066b0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80066b4:	e000      	b.n	80066b8 <lfs_dir_orphaningcommit+0x55c>
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ba:	2300      	movs	r3, #0
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80066c2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80066c6:	051a      	lsls	r2, r3, #20
 80066c8:	4b20      	ldr	r3, [pc, #128]	; (800674c <lfs_dir_orphaningcommit+0x5f0>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80066d2:	633b      	str	r3, [r7, #48]	; 0x30
 80066d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80066dc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80066e0:	2000      	movs	r0, #0
 80066e2:	9001      	str	r0, [sp, #4]
 80066e4:	2002      	movs	r0, #2
 80066e6:	9000      	str	r0, [sp, #0]
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff fa83 	bl	8005bf4 <lfs_dir_relocatingcommit>
 80066ee:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80066f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fc fdb3 	bl	8003262 <lfs_pair_fromle32>
            if (state < 0) {
 80066fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006700:	2b00      	cmp	r3, #0
 8006702:	da02      	bge.n	800670a <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8006704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006708:	e015      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800670a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800670e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8006712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006716:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800671a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800671e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006722:	2b01      	cmp	r3, #1
 8006724:	f43f adfe 	beq.w	8006324 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8006728:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <lfs_dir_orphaningcommit+0x5d8>
 8006730:	2303      	movs	r3, #3
 8006732:	e000      	b.n	8006736 <lfs_dir_orphaningcommit+0x5da>
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	37e0      	adds	r7, #224	; 0xe0
 800673a:	46bd      	mov	sp, r7
 800673c:	bdb0      	pop	{r4, r5, r7, pc}
 800673e:	bf00      	nop
 8006740:	0800a81c 	.word	0x0800a81c
 8006744:	0800a718 	.word	0x0800a718
 8006748:	0800a9d8 	.word	0x0800a9d8
 800674c:	000ffc08 	.word	0x000ffc08

08006750 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff fcf9 	bl	800615c <lfs_dir_orphaningcommit>
 800676a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	da01      	bge.n	8006776 <lfs_dir_commit+0x26>
        return orphans;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	e00d      	b.n	8006792 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 800677c:	2100      	movs	r1, #0
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f002 f860 	bl	8008844 <lfs_fs_deorphan>
 8006784:	6138      	str	r0, [r7, #16]
        if (err) {
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <lfs_dir_commit+0x40>
            return err;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	e000      	b.n	8006792 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800679a:	b590      	push	{r4, r7, lr}
 800679c:	b087      	sub	sp, #28
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	3b08      	subs	r3, #8
 80067b2:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067bc:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <lfs_ctz_index+0x2e>
        return 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e01c      	b.n	8006802 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fc f917 	bl	8002a00 <lfs_popc>
 80067d2:	4603      	mov	r3, r0
 80067d4:	3302      	adds	r3, #2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e2:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	1ad4      	subs	r4, r2, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7fc f905 	bl	8002a00 <lfs_popc>
 80067f6:	4603      	mov	r3, r0
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	1ae2      	subs	r2, r4, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	601a      	str	r2, [r3, #0]
    return i;
 8006800:	68fb      	ldr	r3, [r7, #12]
}
 8006802:	4618      	mov	r0, r3
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	bd90      	pop	{r4, r7, pc}

0800680a <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800680a:	b590      	push	{r4, r7, lr}
 800680c:	b08f      	sub	sp, #60	; 0x3c
 800680e:	af04      	add	r7, sp, #16
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800681e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006824:	601a      	str	r2, [r3, #0]
        *off = 0;
 8006826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
        return 0;
 800682c:	2300      	movs	r3, #0
 800682e:	e053      	b.n	80068d8 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	3b01      	subs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	f107 0314 	add.w	r3, r7, #20
 800683a:	4619      	mov	r1, r3
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff ffac 	bl	800679a <lfs_ctz_index>
 8006842:	4603      	mov	r3, r0
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8006846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800684a:	4619      	mov	r1, r3
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff ffa4 	bl	800679a <lfs_ctz_index>
 8006852:	4603      	mov	r3, r0
 8006854:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8006856:	e034      	b.n	80068c2 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	3301      	adds	r3, #1
 8006860:	4618      	mov	r0, r3
 8006862:	f7fc f8ae 	bl	80029c2 <lfs_npw2>
 8006866:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8006868:	1e5c      	subs	r4, r3, #1
 800686a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800686c:	f7fc f8b9 	bl	80029e2 <lfs_ctz>
 8006870:	4603      	mov	r3, r0
 8006872:	4619      	mov	r1, r3
 8006874:	4620      	mov	r0, r4
 8006876:	f7fc f86d 	bl	8002954 <lfs_min>
 800687a:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	0092      	lsls	r2, r2, #2
 8006882:	2104      	movs	r1, #4
 8006884:	9103      	str	r1, [sp, #12]
 8006886:	4639      	mov	r1, r7
 8006888:	9102      	str	r1, [sp, #8]
 800688a:	9201      	str	r2, [sp, #4]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	2304      	movs	r3, #4
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7fc f939 	bl	8002b0c <lfs_bd_read>
 800689a:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fc f8c8 	bl	8002a34 <lfs_fromle32>
 80068a4:	4603      	mov	r3, r0
 80068a6:	603b      	str	r3, [r7, #0]
        if (err) {
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <lfs_ctz_find+0xa8>
            return err;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	e012      	b.n	80068d8 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80068b2:	2201      	movs	r2, #1
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 80068c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d8c6      	bhi.n	8006858 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ce:	601a      	str	r2, [r3, #0]
    *off = pos;
 80068d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d4:	601a      	str	r2, [r3, #0]
    return 0;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	372c      	adds	r7, #44	; 0x2c
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd90      	pop	{r4, r7, pc}

080068e0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b092      	sub	sp, #72	; 0x48
 80068e4:	af04      	add	r7, sp, #16
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80068ee:	f107 0320 	add.w	r3, r7, #32
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7fc ff93 	bl	8003820 <lfs_alloc>
 80068fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <lfs_ctz_extend+0x26>
            return err;
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	e0e9      	b.n	8006ada <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7fc fbf0 	bl	80030f0 <lfs_bd_erase>
 8006910:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d006      	beq.n	8006926 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800691e:	f000 80cb 	beq.w	8006ab8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	e0d9      	b.n	8006ada <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8006926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d107      	bne.n	800693c <lfs_ctz_extend+0x5c>
                *block = nblock;
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006930:	601a      	str	r2, [r3, #0]
                *off = 0;
 8006932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
                return 0;
 8006938:	2300      	movs	r3, #0
 800693a:	e0ce      	b.n	8006ada <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693e:	3b01      	subs	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8006942:	f107 031c 	add.w	r3, r7, #28
 8006946:	4619      	mov	r1, r3
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff ff26 	bl	800679a <lfs_ctz_index>
 800694e:	4603      	mov	r3, r0
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3301      	adds	r3, #1
 8006956:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	429a      	cmp	r2, r3
 8006962:	d044      	beq.n	80069ee <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8006964:	2300      	movs	r3, #0
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
 8006968:	e035      	b.n	80069d6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	2301      	movs	r3, #1
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	f107 0317 	add.w	r3, r7, #23
 8006978:	9302      	str	r3, [sp, #8]
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	4613      	mov	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	2100      	movs	r1, #0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7fc f8bf 	bl	8002b0c <lfs_bd_read>
 800698e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <lfs_ctz_extend+0xba>
                        return err;
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	e09f      	b.n	8006ada <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	2201      	movs	r2, #1
 800699e:	9203      	str	r2, [sp, #12]
 80069a0:	f107 0217 	add.w	r2, r7, #23
 80069a4:	9202      	str	r2, [sp, #8]
 80069a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a8:	9201      	str	r2, [sp, #4]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	2301      	movs	r3, #1
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7fc faf0 	bl	8002f98 <lfs_bd_prog>
 80069b8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80069c6:	d101      	bne.n	80069cc <lfs_ctz_extend+0xec>
                            goto relocate;
 80069c8:	bf00      	nop
                    goto relocate;
 80069ca:	e075      	b.n	8006ab8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 80069ce:	e084      	b.n	8006ada <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	3301      	adds	r3, #1
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069da:	429a      	cmp	r2, r3
 80069dc:	d3c5      	bcc.n	800696a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e2:	601a      	str	r2, [r3, #0]
                *off = noff;
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e8:	601a      	str	r2, [r3, #0]
                return 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e075      	b.n	8006ada <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	3301      	adds	r3, #1
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80069f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f6:	f7fb fff4 	bl	80029e2 <lfs_ctz>
 80069fa:	4603      	mov	r3, r0
 80069fc:	3301      	adds	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8006a04:	2300      	movs	r3, #0
 8006a06:	633b      	str	r3, [r7, #48]	; 0x30
 8006a08:	e049      	b.n	8006a9e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fc f81c 	bl	8002a4a <lfs_tole32>
 8006a12:	4603      	mov	r3, r0
 8006a14:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	0092      	lsls	r2, r2, #2
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	9103      	str	r1, [sp, #12]
 8006a20:	f107 0118 	add.w	r1, r7, #24
 8006a24:	9102      	str	r1, [sp, #8]
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7fc fab1 	bl	8002f98 <lfs_bd_prog>
 8006a36:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fb fffa 	bl	8002a34 <lfs_fromle32>
 8006a40:	4603      	mov	r3, r0
 8006a42:	61bb      	str	r3, [r7, #24]
                if (err) {
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006a50:	d034      	beq.n	8006abc <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	e041      	b.n	8006ada <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d01b      	beq.n	8006a98 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a64:	0092      	lsls	r2, r2, #2
 8006a66:	2104      	movs	r1, #4
 8006a68:	9103      	str	r1, [sp, #12]
 8006a6a:	f107 0118 	add.w	r1, r7, #24
 8006a6e:	9102      	str	r1, [sp, #8]
 8006a70:	9201      	str	r2, [sp, #4]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2304      	movs	r3, #4
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7fc f846 	bl	8002b0c <lfs_bd_read>
 8006a80:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fb ffd5 	bl	8002a34 <lfs_fromle32>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <lfs_ctz_extend+0x1b8>
                        return err;
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	e020      	b.n	8006ada <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d3b1      	bcc.n	8006a0a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8006aa6:	6a3a      	ldr	r2, [r7, #32]
 8006aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aaa:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	009a      	lsls	r2, r3, #2
 8006ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab2:	601a      	str	r2, [r3, #0]
            return 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e010      	b.n	8006ada <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8006ab8:	bf00      	nop
 8006aba:	e000      	b.n	8006abe <lfs_ctz_extend+0x1de>
                        goto relocate;
 8006abc:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <lfs_ctz_extend+0x204>)
 8006ac2:	9200      	str	r2, [sp, #0]
 8006ac4:	f640 22da 	movw	r2, #2778	; 0xada
 8006ac8:	4907      	ldr	r1, [pc, #28]	; (8006ae8 <lfs_ctz_extend+0x208>)
 8006aca:	4808      	ldr	r0, [pc, #32]	; (8006aec <lfs_ctz_extend+0x20c>)
 8006acc:	f003 f9ce 	bl	8009e6c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7fb fff4 	bl	8002ac0 <lfs_cache_drop>
    while (true) {
 8006ad8:	e709      	b.n	80068ee <lfs_ctz_extend+0xe>
    }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3738      	adds	r7, #56	; 0x38
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	0800a81c 	.word	0x0800a81c
 8006ae8:	0800a718 	.word	0x0800a718
 8006aec:	0800a89c 	.word	0x0800a89c

08006af0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b090      	sub	sp, #64	; 0x40
 8006af4:	af04      	add	r7, sp, #16
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <lfs_ctz_traverse+0x18>
        return 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e06b      	b.n	8006be0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	f107 031c 	add.w	r3, r7, #28
 8006b12:	4619      	mov	r1, r3
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fe40 	bl	800679a <lfs_ctz_index>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006b24:	4798      	blx	r3
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <lfs_ctz_traverse+0x42>
            return err;
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	e056      	b.n	8006be0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <lfs_ctz_traverse+0x4c>
            return 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e051      	b.n	8006be0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	f1c3 0302 	rsb	r3, r3, #2
 8006b46:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8006b48:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8006b4a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8006b4e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	f107 0314 	add.w	r3, r7, #20
 8006b56:	9302      	str	r3, [sp, #8]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7fb ffd0 	bl	8002b0c <lfs_bd_read>
 8006b6c:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fb ff5f 	bl	8002a34 <lfs_fromle32>
 8006b76:	4603      	mov	r3, r0
 8006b78:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fb ff59 	bl	8002a34 <lfs_fromle32>
 8006b82:	4603      	mov	r3, r0
 8006b84:	61bb      	str	r3, [r7, #24]
        if (err) {
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <lfs_ctz_traverse+0xa0>
            return err;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	e027      	b.n	8006be0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8006b90:	2300      	movs	r3, #0
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b94:	e012      	b.n	8006bbc <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	3330      	adds	r3, #48	; 0x30
 8006b9c:	443b      	add	r3, r7
 8006b9e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006ba8:	4798      	blx	r3
 8006baa:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <lfs_ctz_traverse+0xc6>
                return err;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	e014      	b.n	8006be0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	3301      	adds	r3, #1
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	dbe7      	blt.n	8006b96 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	3330      	adds	r3, #48	; 0x30
 8006bce:	443b      	add	r3, r7
 8006bd0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006bd4:	603b      	str	r3, [r7, #0]
        index -= count;
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8006bde:	e79e      	b.n	8006b1e <lfs_ctz_traverse+0x2e>
    }
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3730      	adds	r7, #48	; 0x30
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8006be8:	b5b0      	push	{r4, r5, r7, lr}
 8006bea:	b09a      	sub	sp, #104	; 0x68
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f001 ffc3 	bl	8008b8c <lfs_fs_forceconsistency>
 8006c06:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8006c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <lfs_file_rawopencfg+0x2a>
            return err;
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c10:	e1b0      	b.n	8006f74 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c16:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f103 0108 	add.w	r1, r3, #8
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	1d3a      	adds	r2, r7, #4
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7fe f8c1 	bl	8004dc4 <lfs_dir_find>
 8006c42:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8006c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da0c      	bge.n	8006c64 <lfs_file_rawopencfg+0x7c>
 8006c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c4c:	f113 0f02 	cmn.w	r3, #2
 8006c50:	d105      	bne.n	8006c5e <lfs_file_rawopencfg+0x76>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	889b      	ldrh	r3, [r3, #4]
 8006c56:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d102      	bne.n	8006c64 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8006c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c60:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006c62:	e17c      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2201      	movs	r2, #1
 8006c68:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7fc fd6e 	bl	800374e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8006c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c74:	f113 0f02 	cmn.w	r3, #2
 8006c78:	d14e      	bne.n	8006d18 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8006c84:	f06f 0301 	mvn.w	r3, #1
 8006c88:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006c8a:	e168      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7f9 faae 	bl	80001f0 <strlen>
 8006c94:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d903      	bls.n	8006ca8 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8006ca0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006ca6:	e15a      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f103 0108 	add.w	r1, r3, #8
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	889b      	ldrh	r3, [r3, #4]
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	889b      	ldrh	r3, [r3, #4]
 8006cc6:	029a      	lsls	r2, r3, #10
 8006cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	889b      	ldrh	r3, [r3, #4]
 8006cda:	029b      	lsls	r3, r3, #10
 8006cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006cee:	2303      	movs	r3, #3
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff fd2d 	bl	8006750 <lfs_dir_commit>
 8006cf6:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8006cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cfa:	f113 0f1c 	cmn.w	r3, #28
 8006cfe:	d001      	beq.n	8006d04 <lfs_file_rawopencfg+0x11c>
 8006d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d02:	e001      	b.n	8006d08 <lfs_file_rawopencfg+0x120>
 8006d04:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006d08:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8006d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f040 8125 	bne.w	8006f5c <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8006d12:	4b9a      	ldr	r3, [pc, #616]	; (8006f7c <lfs_file_rawopencfg+0x394>)
 8006d14:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d16:	e044      	b.n	8006da2 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8006d22:	f06f 0310 	mvn.w	r3, #16
 8006d26:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006d28:	e119      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8006d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fc fafd 	bl	800332c <lfs_tag_type3>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d003      	beq.n	8006d40 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8006d38:	f06f 0314 	mvn.w	r3, #20
 8006d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006d3e:	e10e      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	889b      	ldrh	r3, [r3, #4]
 8006d4e:	029b      	lsls	r3, r3, #10
 8006d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d58:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
 8006d66:	e01c      	b.n	8006da2 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	889b      	ldrh	r3, [r3, #4]
 8006d72:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d78:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006d80:	9200      	str	r2, [sp, #0]
 8006d82:	4a7f      	ldr	r2, [pc, #508]	; (8006f80 <lfs_file_rawopencfg+0x398>)
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7fc fee5 	bl	8003b54 <lfs_dir_get>
 8006d8a:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8006d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da02      	bge.n	8006d98 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8006d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d94:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006d96:	e0e2      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	3328      	adds	r3, #40	; 0x28
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fc fbf7 	bl	8003590 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006da2:	2300      	movs	r3, #0
 8006da4:	657b      	str	r3, [r7, #84]	; 0x54
 8006da6:	e063      	b.n	8006e70 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d03c      	beq.n	8006e2e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbe:	6859      	ldr	r1, [r3, #4]
 8006dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006dd2:	051a      	lsls	r2, r3, #20
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	889b      	ldrh	r3, [r3, #4]
 8006dd8:	029b      	lsls	r3, r3, #10
 8006dda:	ea42 0103 	orr.w	r1, r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de2:	6858      	ldr	r0, [r3, #4]
 8006de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006de6:	4613      	mov	r3, r2
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4403      	add	r3, r0
 8006df0:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006df2:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dfe:	4613      	mov	r3, r2
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4a5d      	ldr	r2, [pc, #372]	; (8006f84 <lfs_file_rawopencfg+0x39c>)
 8006e10:	4621      	mov	r1, r4
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7fc fe9e 	bl	8003b54 <lfs_dir_get>
 8006e18:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8006e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da06      	bge.n	8006e2e <lfs_file_rawopencfg+0x246>
 8006e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e22:	f113 0f02 	cmn.w	r3, #2
 8006e26:	d002      	beq.n	8006e2e <lfs_file_rawopencfg+0x246>
                err = res;
 8006e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006e2c:	e097      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d017      	beq.n	8006e6a <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3e:	6859      	ldr	r1, [r3, #4]
 8006e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e42:	4613      	mov	r3, r2
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d903      	bls.n	8006e5e <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8006e56:	f06f 031b 	mvn.w	r3, #27
 8006e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006e5c:	e07f      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d395      	bcc.n	8006da8 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e90:	e010      	b.n	8006eb4 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fb fdfa 	bl	8002a92 <lfs_malloc>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8006eac:	f06f 030b 	mvn.w	r3, #11
 8006eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006eb2:	e054      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3340      	adds	r3, #64	; 0x40
 8006eb8:	4619      	mov	r1, r3
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7fb fe0f 	bl	8002ade <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fc fa32 	bl	800332c <lfs_tag_type3>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f240 2301 	movw	r3, #513	; 0x201
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d141      	bne.n	8006f58 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f06f 0201 	mvn.w	r2, #1
 8006eda:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fc fa5e 	bl	80033a0 <lfs_tag_size>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d020      	beq.n	8006f58 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	889b      	ldrh	r3, [r3, #4]
 8006f20:	029c      	lsls	r4, r3, #10
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f26:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fb fd12 	bl	8002954 <lfs_min>
 8006f30:	4603      	mov	r3, r0
 8006f32:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006f34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	4a0f      	ldr	r2, [pc, #60]	; (8006f80 <lfs_file_rawopencfg+0x398>)
 8006f42:	4629      	mov	r1, r5
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7fc fe05 	bl	8003b54 <lfs_dir_get>
 8006f4a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8006f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da02      	bge.n	8006f58 <lfs_file_rawopencfg+0x370>
                err = res;
 8006f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f54:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006f56:	e002      	b.n	8006f5e <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e00b      	b.n	8006f74 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8006f5c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f823 	bl	8006fb8 <lfs_file_rawclose>
    return err;
 8006f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3760      	adds	r7, #96	; 0x60
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7c:	20100000 	.word	0x20100000
 8006f80:	700ffc00 	.word	0x700ffc00
 8006f84:	7ffffc00 	.word	0x7ffffc00

08006f88 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <lfs_file_rawopen+0x2c>)
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7ff fe21 	bl	8006be8 <lfs_file_rawopencfg>
 8006fa6:	6178      	str	r0, [r7, #20]
    return err;
 8006fa8:	697b      	ldr	r3, [r7, #20]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	0800b10c 	.word	0x0800b10c

08006fb8 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f9e5 	bl	8007394 <lfs_file_rawsync>
 8006fca:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fc fb9b 	bl	800370a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d104      	bne.n	8006fe8 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fb fd61 	bl	8002aaa <lfs_free>
    }

    return err;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006ff4:	b590      	push	{r4, r7, lr}
 8006ff6:	b08d      	sub	sp, #52	; 0x34
 8006ff8:	af06      	add	r7, sp, #24
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8006ffe:	f107 030c 	add.w	r3, r7, #12
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fc fc0b 	bl	8003820 <lfs_alloc>
 800700a:	6138      	str	r0, [r7, #16]
        if (err) {
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <lfs_file_relocate+0x22>
            return err;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	e0bb      	b.n	800718e <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fc f868 	bl	80030f0 <lfs_bd_erase>
 8007020:	6138      	str	r0, [r7, #16]
        if (err) {
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800702e:	f000 809b 	beq.w	8007168 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	e0ab      	b.n	800718e <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e069      	b.n	8007110 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d027      	beq.n	8007098 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	f103 0008 	add.w	r0, r3, #8
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	889b      	ldrh	r3, [r3, #4]
 8007060:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8007062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800706a:	2101      	movs	r1, #1
 800706c:	9105      	str	r1, [sp, #20]
 800706e:	f107 010b 	add.w	r1, r7, #11
 8007072:	9104      	str	r1, [sp, #16]
 8007074:	6979      	ldr	r1, [r7, #20]
 8007076:	9103      	str	r1, [sp, #12]
 8007078:	9302      	str	r3, [sp, #8]
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <lfs_file_relocate+0x1a4>)
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	9200      	str	r2, [sp, #0]
 8007080:	4623      	mov	r3, r4
 8007082:	2200      	movs	r2, #0
 8007084:	4601      	mov	r1, r0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fc fd7f 	bl	8003b8a <lfs_dir_getread>
 800708c:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01e      	beq.n	80070d2 <lfs_file_relocate+0xde>
                    return err;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	e07a      	b.n	800718e <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800709e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	1ad4      	subs	r4, r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	2201      	movs	r2, #1
 80070ae:	9203      	str	r2, [sp, #12]
 80070b0:	f107 020b 	add.w	r2, r7, #11
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	9201      	str	r2, [sp, #4]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4623      	mov	r3, r4
 80070be:	4602      	mov	r2, r0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7fb fd23 	bl	8002b0c <lfs_bd_read>
 80070c6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <lfs_file_relocate+0xde>
                    return err;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	e05d      	b.n	800718e <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f103 0110 	add.w	r1, r3, #16
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	9203      	str	r2, [sp, #12]
 80070e0:	f107 020b 	add.w	r2, r7, #11
 80070e4:	9202      	str	r2, [sp, #8]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	9201      	str	r2, [sp, #4]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2301      	movs	r3, #1
 80070ee:	4602      	mov	r2, r0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fb ff51 	bl	8002f98 <lfs_bd_prog>
 80070f6:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007104:	d032      	beq.n	800716c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	e041      	b.n	800718e <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	3301      	adds	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	429a      	cmp	r2, r3
 8007118:	d390      	bcc.n	800703c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69d9      	ldr	r1, [r3, #28]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	461a      	mov	r2, r3
 800712a:	f002 fabb 	bl	80096a4 <memcpy>
        file->cache.block = lfs->pcache.block;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691a      	ldr	r2, [r3, #16]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3310      	adds	r3, #16
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fb fcc6 	bl	8002ade <lfs_cache_zero>

        file->block = nblock;
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8007164:	2300      	movs	r3, #0
 8007166:	e012      	b.n	800718e <lfs_file_relocate+0x19a>
                goto relocate;
 8007168:	bf00      	nop
 800716a:	e000      	b.n	800716e <lfs_file_relocate+0x17a>
                    goto relocate;
 800716c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4a0a      	ldr	r2, [pc, #40]	; (800719c <lfs_file_relocate+0x1a8>)
 8007172:	9200      	str	r2, [sp, #0]
 8007174:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 8007178:	4909      	ldr	r1, [pc, #36]	; (80071a0 <lfs_file_relocate+0x1ac>)
 800717a:	480a      	ldr	r0, [pc, #40]	; (80071a4 <lfs_file_relocate+0x1b0>)
 800717c:	f002 fe76 	bl	8009e6c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3310      	adds	r3, #16
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fb fc9a 	bl	8002ac0 <lfs_cache_drop>
    while (true) {
 800718c:	e737      	b.n	8006ffe <lfs_file_relocate+0xa>
    }
}
 800718e:	4618      	mov	r0, r3
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	bd90      	pop	{r4, r7, pc}
 8007196:	bf00      	nop
 8007198:	fff7fc00 	.word	0xfff7fc00
 800719c:	0800a81c 	.word	0x0800a81c
 80071a0:	0800a718 	.word	0x0800a718
 80071a4:	0800a89c 	.word	0x0800a89c

080071a8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fc fb10 	bl	80037e0 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff ff16 	bl	8006ff4 <lfs_file_relocate>
 80071c8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <lfs_file_outline+0x2c>
        return err;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e006      	b.n	80071e2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b09f      	sub	sp, #124	; 0x7c
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	3340      	adds	r3, #64	; 0x40
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fb fc53 	bl	8002ac0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80a4 	beq.w	800737c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d176      	bne.n	8007334 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	2254      	movs	r2, #84	; 0x54
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f002 fa36 	bl	80096c0 <memset>
                .ctz.head = file->ctz.head,
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800725e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007260:	2301      	movs	r3, #1
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8007268:	643b      	str	r3, [r7, #64]	; 0x40
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8007270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fb fc20 	bl	8002ac0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8007280:	e02b      	b.n	80072da <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8007282:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8007286:	f107 010c 	add.w	r1, r7, #12
 800728a:	2301      	movs	r3, #1
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f90d 	bl	80074ac <lfs_file_flushedread>
 8007292:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8007294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007296:	2b00      	cmp	r3, #0
 8007298:	da01      	bge.n	800729e <lfs_file_flush+0xb2>
                    return res;
 800729a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729c:	e06f      	b.n	800737e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800729e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80072a2:	2301      	movs	r3, #1
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa08 	bl	80076bc <lfs_file_flushedwrite>
 80072ac:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80072ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da01      	bge.n	80072b8 <lfs_file_flush+0xcc>
                    return res;
 80072b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b6:	e062      	b.n	800737e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c0:	d00b      	beq.n	80072da <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80072c2:	f107 030c 	add.w	r3, r7, #12
 80072c6:	3340      	adds	r3, #64	; 0x40
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fb fbf8 	bl	8002ac0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fb fbf3 	bl	8002ac0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d3cd      	bcc.n	8007282 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	2301      	movs	r3, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fb fda1 	bl	8002e38 <lfs_bd_flush>
 80072f6:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80072f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d026      	beq.n	800734c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80072fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007300:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007304:	d001      	beq.n	800730a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8007306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007308:	e039      	b.n	800737e <lfs_file_flush+0x192>
                        goto relocate;
 800730a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <lfs_file_flush+0x19c>)
 8007312:	9200      	str	r2, [sp, #0]
 8007314:	f640 425f 	movw	r2, #3167	; 0xc5f
 8007318:	491c      	ldr	r1, [pc, #112]	; (800738c <lfs_file_flush+0x1a0>)
 800731a:	481d      	ldr	r0, [pc, #116]	; (8007390 <lfs_file_flush+0x1a4>)
 800731c:	f002 fda6 	bl	8009e6c <iprintf>
                err = lfs_file_relocate(lfs, file);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fe66 	bl	8006ff4 <lfs_file_relocate>
 8007328:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800732a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0da      	beq.n	80072e6 <lfs_file_flush+0xfa>
                    return err;
 8007330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007332:	e024      	b.n	800737e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f7fb faf8 	bl	8002934 <lfs_max>
 8007344:	4602      	mov	r2, r0
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	635a      	str	r2, [r3, #52]	; 0x34
 800734a:	e000      	b.n	800734e <lfs_file_flush+0x162>
                break;
 800734c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800737a:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3774      	adds	r7, #116	; 0x74
 8007382:	46bd      	mov	sp, r7
 8007384:	bd90      	pop	{r4, r7, pc}
 8007386:	bf00      	nop
 8007388:	0800a81c 	.word	0x0800a81c
 800738c:	0800a718 	.word	0x0800a718
 8007390:	0800a89c 	.word	0x0800a89c

08007394 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b090      	sub	sp, #64	; 0x40
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e07a      	b.n	80074a4 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff1b 	bl	80071ec <lfs_file_flush>
 80073b6:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	e06a      	b.n	80074a4 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d063      	beq.n	80074a2 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fb fecd 	bl	800317e <lfs_pair_isnull>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f083 0301 	eor.w	r3, r3, #1
 80073ea:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d058      	beq.n	80074a2 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80073fc:	f240 2301 	movw	r3, #513	; 0x201
 8007400:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
 800740e:	e014      	b.n	800743a <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8007410:	f240 2302 	movw	r3, #514	; 0x202
 8007414:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800741c:	3228      	adds	r2, #40	; 0x28
 800741e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007422:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8007426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800742a:	4618      	mov	r0, r3
 800742c:	f7fc f8c8 	bl	80035c0 <lfs_ctz_tole32>
            buffer = &ctz;
 8007430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007434:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8007436:	2308      	movs	r3, #8
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	f103 0108 	add.w	r1, r3, #8
 8007440:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007442:	051a      	lsls	r2, r3, #20
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	889b      	ldrh	r3, [r3, #4]
 8007448:	029b      	lsls	r3, r3, #10
 800744a:	431a      	orrs	r2, r3
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	4313      	orrs	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	889b      	ldrh	r3, [r3, #4]
 800745a:	029a      	lsls	r2, r3, #10
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	4313      	orrs	r3, r2
 8007464:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8007468:	623b      	str	r3, [r7, #32]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
 8007472:	f107 0218 	add.w	r2, r7, #24
 8007476:	2302      	movs	r3, #2
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff f969 	bl	8006750 <lfs_dir_commit>
 800747e:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	e006      	b.n	80074a4 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3740      	adds	r7, #64	; 0x40
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80074ac:	b5b0      	push	{r4, r5, r7, lr}
 80074ae:	b090      	sub	sp, #64	; 0x40
 80074b0:	af06      	add	r7, sp, #24
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d301      	bcc.n	80074d2 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	e0b7      	b.n	8007642 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	4619      	mov	r1, r3
 80074de:	6838      	ldr	r0, [r7, #0]
 80074e0:	f7fb fa38 	bl	8002954 <lfs_min>
 80074e4:	6038      	str	r0, [r7, #0]
    nsize = size;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80074ea:	e0a5      	b.n	8007638 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007500:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8007502:	429a      	cmp	r2, r3
 8007504:	d130      	bne.n	8007568 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11c      	bne.n	800754c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	3138      	adds	r1, #56	; 0x38
 8007528:	68b8      	ldr	r0, [r7, #8]
 800752a:	303c      	adds	r0, #60	; 0x3c
 800752c:	9003      	str	r0, [sp, #12]
 800752e:	9102      	str	r1, [sp, #8]
 8007530:	9201      	str	r2, [sp, #4]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	462b      	mov	r3, r5
 8007536:	4622      	mov	r2, r4
 8007538:	2100      	movs	r1, #0
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff f965 	bl	800680a <lfs_ctz_find>
 8007540:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <lfs_file_flushedread+0xb0>
                    return err;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	e07a      	b.n	8007642 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f06f 0201 	mvn.w	r2, #1
 8007552:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756c:	69da      	ldr	r2, [r3, #28]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	4619      	mov	r1, r3
 8007576:	6a38      	ldr	r0, [r7, #32]
 8007578:	f7fb f9ec 	bl	8002954 <lfs_min>
 800757c:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d026      	beq.n	80075d8 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f103 0408 	add.w	r4, r3, #8
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 800759a:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	889b      	ldrh	r3, [r3, #4]
 80075a0:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80075a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80075ae:	69b8      	ldr	r0, [r7, #24]
 80075b0:	9005      	str	r0, [sp, #20]
 80075b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075b4:	9004      	str	r0, [sp, #16]
 80075b6:	9103      	str	r1, [sp, #12]
 80075b8:	9302      	str	r3, [sp, #8]
 80075ba:	4b24      	ldr	r3, [pc, #144]	; (800764c <lfs_file_flushedread+0x1a0>)
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	9200      	str	r2, [sp, #0]
 80075c0:	462b      	mov	r3, r5
 80075c2:	2200      	movs	r2, #0
 80075c4:	4621      	mov	r1, r4
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7fc fadf 	bl	8003b8a <lfs_dir_getread>
 80075cc:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01d      	beq.n	8007610 <lfs_file_flushedread+0x164>
                return err;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	e034      	b.n	8007642 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80075e2:	69dc      	ldr	r4, [r3, #28]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80075ec:	69b9      	ldr	r1, [r7, #24]
 80075ee:	9103      	str	r1, [sp, #12]
 80075f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075f2:	9102      	str	r1, [sp, #8]
 80075f4:	9201      	str	r2, [sp, #4]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	4623      	mov	r3, r4
 80075fa:	4602      	mov	r2, r0
 80075fc:	2100      	movs	r1, #0
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7fb fa84 	bl	8002b0c <lfs_bd_read>
 8007604:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <lfs_file_flushedread+0x164>
                return err;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	e018      	b.n	8007642 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	441a      	add	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	441a      	add	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8007628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	4413      	add	r3, r2
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8007630:	6a3a      	ldr	r2, [r7, #32]
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f47f af56 	bne.w	80074ec <lfs_file_flushedread+0x40>
    }

    return size;
 8007640:	683b      	ldr	r3, [r7, #0]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3728      	adds	r7, #40	; 0x28
 8007646:	46bd      	mov	sp, r7
 8007648:	bdb0      	pop	{r4, r5, r7, pc}
 800764a:	bf00      	nop
 800764c:	fff7fc00 	.word	0xfff7fc00

08007650 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <lfs_file_rawread+0x28>
 800766a:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <lfs_file_rawread+0x60>)
 800766c:	4a11      	ldr	r2, [pc, #68]	; (80076b4 <lfs_file_rawread+0x64>)
 800766e:	f640 41ea 	movw	r1, #3306	; 0xcea
 8007672:	4811      	ldr	r0, [pc, #68]	; (80076b8 <lfs_file_rawread+0x68>)
 8007674:	f001 ff9c 	bl	80095b0 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fdb0 	bl	80071ec <lfs_file_flush>
 800768c:	6178      	str	r0, [r7, #20]
        if (err) {
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <lfs_file_rawread+0x48>
            return err;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	e006      	b.n	80076a6 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff ff04 	bl	80074ac <lfs_file_flushedread>
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	0800aa44 	.word	0x0800aa44
 80076b4:	0800b118 	.word	0x0800b118
 80076b8:	0800a718 	.word	0x0800a718

080076bc <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80076bc:	b5b0      	push	{r4, r5, r7, lr}
 80076be:	b090      	sub	sp, #64	; 0x40
 80076c0:	af04      	add	r7, sp, #16
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 810c 	beq.w	80078f8 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	441a      	add	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f7fb f920 	bl	8002934 <lfs_max>
 80076f4:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80076fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800770a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800770c:	08db      	lsrs	r3, r3, #3
 800770e:	e003      	b.n	8007718 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007714:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8007716:	08db      	lsrs	r3, r3, #3
 8007718:	4619      	mov	r1, r3
 800771a:	4610      	mov	r0, r2
 800771c:	f7fb f91a 	bl	8002954 <lfs_min>
 8007720:	4603      	mov	r3, r0
 8007722:	4619      	mov	r1, r3
 8007724:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8007728:	f7fb f914 	bl	8002954 <lfs_min>
 800772c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800772e:	429c      	cmp	r4, r3
 8007730:	f240 80e2 	bls.w	80078f8 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fd36 	bl	80071a8 <lfs_file_outline>
 800773c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80d9 	beq.w	80078f8 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	e0d5      	b.n	8007902 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d006      	beq.n	8007770 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800776a:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800776c:	429a      	cmp	r2, r3
 800776e:	d16b      	bne.n	8007848 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d157      	bne.n	800782c <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d12d      	bne.n	80077e4 <lfs_file_flushedwrite+0x128>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778c:	2b00      	cmp	r3, #0
 800778e:	d029      	beq.n	80077e4 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80077a2:	3a01      	subs	r2, #1
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	3138      	adds	r1, #56	; 0x38
 80077a8:	68b8      	ldr	r0, [r7, #8]
 80077aa:	303c      	adds	r0, #60	; 0x3c
 80077ac:	9003      	str	r0, [sp, #12]
 80077ae:	9102      	str	r1, [sp, #8]
 80077b0:	9201      	str	r2, [sp, #4]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	462b      	mov	r3, r5
 80077b6:	4622      	mov	r2, r4
 80077b8:	2100      	movs	r1, #0
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff f825 	bl	800680a <lfs_ctz_find>
 80077c0:	6238      	str	r0, [r7, #32]
                    if (err) {
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	e094      	b.n	8007902 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3340      	adds	r3, #64	; 0x40
 80077dc:	4619      	mov	r1, r3
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7fb f97d 	bl	8002ade <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7fb fffb 	bl	80037e0 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80077f0:	68fc      	ldr	r4, [r7, #12]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	3238      	adds	r2, #56	; 0x38
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	313c      	adds	r1, #60	; 0x3c
 8007802:	9102      	str	r1, [sp, #8]
 8007804:	9201      	str	r2, [sp, #4]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	462b      	mov	r3, r5
 800780a:	4622      	mov	r2, r4
 800780c:	4601      	mov	r1, r0
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff f866 	bl	80068e0 <lfs_ctz_extend>
 8007814:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00f      	beq.n	800783c <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	e06a      	b.n	8007902 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f06f 0201 	mvn.w	r2, #1
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800784c:	69da      	ldr	r2, [r3, #28]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007858:	f7fb f87c 	bl	8002954 <lfs_min>
 800785c:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007864:	68fc      	ldr	r4, [r7, #12]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800786e:	69b9      	ldr	r1, [r7, #24]
 8007870:	9103      	str	r1, [sp, #12]
 8007872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007874:	9102      	str	r1, [sp, #8]
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	2301      	movs	r3, #1
 800787c:	4622      	mov	r2, r4
 800787e:	4601      	mov	r1, r0
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7fb fb89 	bl	8002f98 <lfs_bd_prog>
 8007886:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d01c      	beq.n	80078c8 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007894:	d007      	beq.n	80078a6 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	e02d      	b.n	8007902 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 80078a6:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff fba2 	bl	8006ff4 <lfs_file_relocate>
 80078b0:	6178      	str	r0, [r7, #20]
            if (err) {
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0d2      	beq.n	800785e <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	e01c      	b.n	8007902 <lfs_file_flushedwrite+0x246>
            break;
 80078c8:	bf00      	nop
            }
        }

        file->pos += diff;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	441a      	add	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	441a      	add	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80078e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	4413      	add	r3, r2
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80078ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7fb ff74 	bl	80037e0 <lfs_alloc_ack>
    while (nsize > 0) {
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f47f af2b 	bne.w	8007756 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8007900:	683b      	ldr	r3, [r7, #0]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3730      	adds	r7, #48	; 0x30
 8007906:	46bd      	mov	sp, r7
 8007908:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800790c <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	; 0x28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <lfs_file_rawwrite+0x28>
 8007926:	4b38      	ldr	r3, [pc, #224]	; (8007a08 <lfs_file_rawwrite+0xfc>)
 8007928:	4a38      	ldr	r2, [pc, #224]	; (8007a0c <lfs_file_rawwrite+0x100>)
 800792a:	f640 5155 	movw	r1, #3413	; 0xd55
 800792e:	4838      	ldr	r0, [pc, #224]	; (8007a10 <lfs_file_rawwrite+0x104>)
 8007930:	f001 fe3e 	bl	80095b0 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fc52 	bl	80071ec <lfs_file_flush>
 8007948:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <lfs_file_rawwrite+0x48>
            return err;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	e055      	b.n	8007a00 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <lfs_file_rawwrite+0x68>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	429a      	cmp	r2, r3
 800796a:	d203      	bcs.n	8007974 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	441a      	add	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007980:	429a      	cmp	r2, r3
 8007982:	d902      	bls.n	800798a <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8007984:	f06f 031a 	mvn.w	r3, #26
 8007988:	e03a      	b.n	8007a00 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d121      	bne.n	80079da <lfs_file_rawwrite+0xce>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	429a      	cmp	r2, r3
 80079a0:	d91b      	bls.n	80079da <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 80079b0:	e00e      	b.n	80079d0 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80079b2:	2300      	movs	r3, #0
 80079b4:	75fb      	strb	r3, [r7, #23]
 80079b6:	f107 0217 	add.w	r2, r7, #23
 80079ba:	2301      	movs	r3, #1
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff fe7c 	bl	80076bc <lfs_file_flushedwrite>
 80079c4:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	da01      	bge.n	80079d0 <lfs_file_rawwrite+0xc4>
                return res;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	e017      	b.n	8007a00 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	6a3a      	ldr	r2, [r7, #32]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d8eb      	bhi.n	80079b2 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7ff fe6b 	bl	80076bc <lfs_file_flushedwrite>
 80079e6:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	da01      	bge.n	80079f2 <lfs_file_rawwrite+0xe6>
        return nsize;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	e006      	b.n	8007a00 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 80079fe:	69bb      	ldr	r3, [r7, #24]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3728      	adds	r7, #40	; 0x28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	0800aa74 	.word	0x0800aa74
 8007a0c:	0800b12c 	.word	0x0800b12c
 8007a10:	0800a718 	.word	0x0800a718

08007a14 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	; 0x30
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <lfs_init+0x2c>
 8007a32:	4b92      	ldr	r3, [pc, #584]	; (8007c7c <lfs_init+0x268>)
 8007a34:	4a92      	ldr	r2, [pc, #584]	; (8007c80 <lfs_init+0x26c>)
 8007a36:	f640 7146 	movw	r1, #3910	; 0xf46
 8007a3a:	4892      	ldr	r0, [pc, #584]	; (8007c84 <lfs_init+0x270>)
 8007a3c:	f001 fdb8 	bl	80095b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d106      	bne.n	8007a58 <lfs_init+0x44>
 8007a4a:	4b8f      	ldr	r3, [pc, #572]	; (8007c88 <lfs_init+0x274>)
 8007a4c:	4a8c      	ldr	r2, [pc, #560]	; (8007c80 <lfs_init+0x26c>)
 8007a4e:	f640 7147 	movw	r1, #3911	; 0xf47
 8007a52:	488c      	ldr	r0, [pc, #560]	; (8007c84 <lfs_init+0x270>)
 8007a54:	f001 fdac 	bl	80095b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <lfs_init+0x5c>
 8007a62:	4b8a      	ldr	r3, [pc, #552]	; (8007c8c <lfs_init+0x278>)
 8007a64:	4a86      	ldr	r2, [pc, #536]	; (8007c80 <lfs_init+0x26c>)
 8007a66:	f640 7148 	movw	r1, #3912	; 0xf48
 8007a6a:	4886      	ldr	r0, [pc, #536]	; (8007c84 <lfs_init+0x270>)
 8007a6c:	f001 fda0 	bl	80095b0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a7a:	6952      	ldr	r2, [r2, #20]
 8007a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a80:	fb01 f202 	mul.w	r2, r1, r2
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d006      	beq.n	8007a98 <lfs_init+0x84>
 8007a8a:	4b81      	ldr	r3, [pc, #516]	; (8007c90 <lfs_init+0x27c>)
 8007a8c:	4a7c      	ldr	r2, [pc, #496]	; (8007c80 <lfs_init+0x26c>)
 8007a8e:	f640 714c 	movw	r1, #3916	; 0xf4c
 8007a92:	487c      	ldr	r0, [pc, #496]	; (8007c84 <lfs_init+0x270>)
 8007a94:	f001 fd8c 	bl	80095b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007aa2:	6992      	ldr	r2, [r2, #24]
 8007aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007aa8:	fb01 f202 	mul.w	r2, r1, r2
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d006      	beq.n	8007ac0 <lfs_init+0xac>
 8007ab2:	4b78      	ldr	r3, [pc, #480]	; (8007c94 <lfs_init+0x280>)
 8007ab4:	4a72      	ldr	r2, [pc, #456]	; (8007c80 <lfs_init+0x26c>)
 8007ab6:	f640 714d 	movw	r1, #3917	; 0xf4d
 8007aba:	4872      	ldr	r0, [pc, #456]	; (8007c84 <lfs_init+0x270>)
 8007abc:	f001 fd78 	bl	80095b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007aca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ad0:	fb01 f202 	mul.w	r2, r1, r2
 8007ad4:	1a9b      	subs	r3, r3, r2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d006      	beq.n	8007ae8 <lfs_init+0xd4>
 8007ada:	4b6f      	ldr	r3, [pc, #444]	; (8007c98 <lfs_init+0x284>)
 8007adc:	4a68      	ldr	r2, [pc, #416]	; (8007c80 <lfs_init+0x26c>)
 8007ade:	f640 714e 	movw	r1, #3918	; 0xf4e
 8007ae2:	4868      	ldr	r0, [pc, #416]	; (8007c84 <lfs_init+0x270>)
 8007ae4:	f001 fd64 	bl	80095b0 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	3b08      	subs	r3, #8
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fa ff62 	bl	80029c2 <lfs_npw2>
 8007afe:	4603      	mov	r3, r0
 8007b00:	009a      	lsls	r2, r3, #2
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d906      	bls.n	8007b1a <lfs_init+0x106>
 8007b0c:	4b63      	ldr	r3, [pc, #396]	; (8007c9c <lfs_init+0x288>)
 8007b0e:	4a5c      	ldr	r2, [pc, #368]	; (8007c80 <lfs_init+0x26c>)
 8007b10:	f640 7151 	movw	r1, #3921	; 0xf51
 8007b14:	485b      	ldr	r0, [pc, #364]	; (8007c84 <lfs_init+0x270>)
 8007b16:	f001 fd4b 	bl	80095b0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <lfs_init+0x11e>
 8007b24:	4b5e      	ldr	r3, [pc, #376]	; (8007ca0 <lfs_init+0x28c>)
 8007b26:	4a56      	ldr	r2, [pc, #344]	; (8007c80 <lfs_init+0x26c>)
 8007b28:	f640 715a 	movw	r1, #3930	; 0xf5a
 8007b2c:	4855      	ldr	r0, [pc, #340]	; (8007c84 <lfs_init+0x270>)
 8007b2e:	f001 fd3f 	bl	80095b0 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	60da      	str	r2, [r3, #12]
 8007b46:	e010      	b.n	8007b6a <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fa ff9f 	bl	8002a92 <lfs_malloc>
 8007b54:	4602      	mov	r2, r0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8007b62:	f06f 030b 	mvn.w	r3, #11
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007b68:	e0fd      	b.n	8007d66 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	61da      	str	r2, [r3, #28]
 8007b7e:	e010      	b.n	8007ba2 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fa ff83 	bl	8002a92 <lfs_malloc>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8007b9a:	f06f 030b 	mvn.w	r3, #11
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007ba0:	e0e1      	b.n	8007d66 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fa ff99 	bl	8002ade <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3310      	adds	r3, #16
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fa ff93 	bl	8002ade <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <lfs_init+0x1bc>
 8007bc2:	4b38      	ldr	r3, [pc, #224]	; (8007ca4 <lfs_init+0x290>)
 8007bc4:	4a2e      	ldr	r2, [pc, #184]	; (8007c80 <lfs_init+0x26c>)
 8007bc6:	f640 7178 	movw	r1, #3960	; 0xf78
 8007bca:	482e      	ldr	r0, [pc, #184]	; (8007c84 <lfs_init+0x270>)
 8007bcc:	f001 fcf0 	bl	80095b0 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <lfs_init+0x1d8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d006      	beq.n	8007bfa <lfs_init+0x1e6>
 8007bec:	4b2e      	ldr	r3, [pc, #184]	; (8007ca8 <lfs_init+0x294>)
 8007bee:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <lfs_init+0x26c>)
 8007bf0:	f640 7179 	movw	r1, #3961	; 0xf79
 8007bf4:	4823      	ldr	r0, [pc, #140]	; (8007c84 <lfs_init+0x270>)
 8007bf6:	f001 fcdb 	bl	80095b0 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	665a      	str	r2, [r3, #100]	; 0x64
 8007c0e:	e010      	b.n	8007c32 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fa ff3b 	bl	8002a92 <lfs_malloc>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8007c2a:	f06f 030b 	mvn.w	r3, #11
 8007c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007c30:	e099      	b.n	8007d66 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c38:	2bff      	cmp	r3, #255	; 0xff
 8007c3a:	d906      	bls.n	8007c4a <lfs_init+0x236>
 8007c3c:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <lfs_init+0x298>)
 8007c3e:	4a10      	ldr	r2, [pc, #64]	; (8007c80 <lfs_init+0x26c>)
 8007c40:	f640 7186 	movw	r1, #3974	; 0xf86
 8007c44:	480f      	ldr	r0, [pc, #60]	; (8007c84 <lfs_init+0x270>)
 8007c46:	f001 fcb3 	bl	80095b0 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	22ff      	movs	r2, #255	; 0xff
 8007c60:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da23      	bge.n	8007cb4 <lfs_init+0x2a0>
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <lfs_init+0x29c>)
 8007c6e:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <lfs_init+0x26c>)
 8007c70:	f640 718c 	movw	r1, #3980	; 0xf8c
 8007c74:	4803      	ldr	r0, [pc, #12]	; (8007c84 <lfs_init+0x270>)
 8007c76:	f001 fc9b 	bl	80095b0 <__assert_func>
 8007c7a:	bf00      	nop
 8007c7c:	0800aaa4 	.word	0x0800aaa4
 8007c80:	0800b140 	.word	0x0800b140
 8007c84:	0800a718 	.word	0x0800a718
 8007c88:	0800aac0 	.word	0x0800aac0
 8007c8c:	0800aadc 	.word	0x0800aadc
 8007c90:	0800aaf8 	.word	0x0800aaf8
 8007c94:	0800ab28 	.word	0x0800ab28
 8007c98:	0800ab58 	.word	0x0800ab58
 8007c9c:	0800ab8c 	.word	0x0800ab8c
 8007ca0:	0800abd8 	.word	0x0800abd8
 8007ca4:	0800abf4 	.word	0x0800abf4
 8007ca8:	0800ac14 	.word	0x0800ac14
 8007cac:	0800ac68 	.word	0x0800ac68
 8007cb0:	0800ac84 	.word	0x0800ac84
    lfs->file_max = lfs->cfg->file_max;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d103      	bne.n	8007cce <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007ccc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d906      	bls.n	8007cea <lfs_init+0x2d6>
 8007cdc:	4b26      	ldr	r3, [pc, #152]	; (8007d78 <lfs_init+0x364>)
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <lfs_init+0x368>)
 8007ce0:	f640 7192 	movw	r1, #3986	; 0xf92
 8007ce4:	4826      	ldr	r0, [pc, #152]	; (8007d80 <lfs_init+0x36c>)
 8007ce6:	f001 fc63 	bl	80095b0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d103      	bne.n	8007d04 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007d02:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d906      	bls.n	8007d22 <lfs_init+0x30e>
 8007d14:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <lfs_init+0x370>)
 8007d16:	4a19      	ldr	r2, [pc, #100]	; (8007d7c <lfs_init+0x368>)
 8007d18:	f640 7198 	movw	r1, #3992	; 0xf98
 8007d1c:	4818      	ldr	r0, [pc, #96]	; (8007d80 <lfs_init+0x36c>)
 8007d1e:	f001 fc47 	bl	80095b0 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d28:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d30:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	333c      	adds	r3, #60	; 0x3c
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	605a      	str	r2, [r3, #4]
 8007d48:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3330      	adds	r3, #48	; 0x30
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3348      	adds	r3, #72	; 0x48
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	605a      	str	r2, [r3, #4]
 8007d60:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e003      	b.n	8007d6e <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f80e 	bl	8007d88 <lfs_deinit>
    return err;
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3730      	adds	r7, #48	; 0x30
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	0800aca8 	.word	0x0800aca8
 8007d7c:	0800b140 	.word	0x0800b140
 8007d80:	0800a718 	.word	0x0800a718
 8007d84:	0800acc4 	.word	0x0800acc4

08007d88 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fa fe83 	bl	8002aaa <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d104      	bne.n	8007db8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fa fe79 	bl	8002aaa <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d104      	bne.n	8007dcc <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fa fe6f 	bl	8002aaa <lfs_free>
    }

    return 0;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b0a0      	sub	sp, #128	; 0x80
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
    int err = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff fe13 	bl	8007a14 <lfs_init>
 8007dee:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007df0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <lfs_rawformat+0x22>
            return err;
 8007df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007df8:	e082      	b.n	8007f00 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	461a      	mov	r2, r3
 8007e06:	2100      	movs	r1, #0
 8007e08:	f001 fc5a 	bl	80096c0 <memset>
        lfs->free.off = 0;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fa fd96 	bl	8002954 <lfs_min>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fb fcd3 	bl	80037e0 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8007e3a:	f107 030c 	add.w	r3, r7, #12
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fd faab 	bl	800539c <lfs_dir_alloc>
 8007e46:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d14f      	bne.n	8007eee <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8007e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e52:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e58:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8007e5a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e60:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8007e62:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8007e68:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8007e6e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8007e74:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007e76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fb fbf0 	bl	8003660 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007e80:	4b21      	ldr	r3, [pc, #132]	; (8007f08 <lfs_rawformat+0x130>)
 8007e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e84:	2300      	movs	r3, #0
 8007e86:	653b      	str	r3, [r7, #80]	; 0x50
 8007e88:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <lfs_rawformat+0x134>)
 8007e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e8c:	4b20      	ldr	r3, [pc, #128]	; (8007f10 <lfs_rawformat+0x138>)
 8007e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e90:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <lfs_rawformat+0x13c>)
 8007e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e98:	663b      	str	r3, [r7, #96]	; 0x60
 8007e9a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007e9e:	f107 010c 	add.w	r1, r7, #12
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7fe fc53 	bl	8006750 <lfs_dir_commit>
 8007eaa:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8007eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d11f      	bne.n	8007ef2 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007eb8:	f107 010c 	add.w	r1, r7, #12
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fe fc45 	bl	8006750 <lfs_dir_commit>
 8007ec6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d113      	bne.n	8007ef6 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007ece:	2300      	movs	r3, #0
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007eda:	f107 030c 	add.w	r3, r7, #12
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7fc fed7 	bl	8004c94 <lfs_dir_fetch>
 8007ee6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007ee8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	e004      	b.n	8007ef8 <lfs_rawformat+0x120>
            goto cleanup;
 8007eee:	bf00      	nop
 8007ef0:	e002      	b.n	8007ef8 <lfs_rawformat+0x120>
            goto cleanup;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <lfs_rawformat+0x120>
            goto cleanup;
 8007ef6:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ff45 	bl	8007d88 <lfs_deinit>
    return err;
 8007efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3780      	adds	r7, #128	; 0x80
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40100000 	.word	0x40100000
 8007f0c:	0ff00008 	.word	0x0ff00008
 8007f10:	0800acf4 	.word	0x0800acf4
 8007f14:	20100018 	.word	0x20100018

08007f18 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b09c      	sub	sp, #112	; 0x70
 8007f1c:	af04      	add	r7, sp, #16
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff fd75 	bl	8007a14 <lfs_init>
 8007f2a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8007f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <lfs_rawmount+0x1e>
        return err;
 8007f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f34:	e192      	b.n	800825c <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f001 fbbe 	bl	80096c0 <memset>
 8007f44:	2301      	movs	r3, #1
 8007f46:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8007f4c:	e10b      	b.n	8008166 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d303      	bcc.n	8007f64 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8007f5c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007f60:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007f62:	e177      	b.n	8008254 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8007f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f66:	3301      	adds	r3, #1
 8007f68:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6e:	4b8a      	ldr	r3, [pc, #552]	; (8008198 <lfs_rawmount+0x280>)
 8007f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f72:	2308      	movs	r3, #8
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8007f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f7a:	f103 0218 	add.w	r2, r3, #24
 8007f7e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f86:	9303      	str	r3, [sp, #12]
 8007f88:	4b84      	ldr	r3, [pc, #528]	; (800819c <lfs_rawmount+0x284>)
 8007f8a:	9302      	str	r3, [sp, #8]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	4b83      	ldr	r3, [pc, #524]	; (80081a0 <lfs_rawmount+0x288>)
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4b83      	ldr	r3, [pc, #524]	; (80081a4 <lfs_rawmount+0x28c>)
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fc fb0e 	bl	80045b8 <lfs_dir_fetchmatch>
 8007f9c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8007f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	da02      	bge.n	8007faa <lfs_rawmount+0x92>
            err = tag;
 8007fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007fa8:	e154      	b.n	8008254 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8007faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80cd 	beq.w	800814c <lfs_rawmount+0x234>
 8007fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fb f996 	bl	80032e6 <lfs_tag_isdelete>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f083 0301 	eor.w	r3, r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80c2 	beq.w	800814c <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8007fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007fd4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007fd8:	f107 030c 	add.w	r3, r7, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4b72      	ldr	r3, [pc, #456]	; (80081a8 <lfs_rawmount+0x290>)
 8007fe0:	4a70      	ldr	r2, [pc, #448]	; (80081a4 <lfs_rawmount+0x28c>)
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7fb fdb6 	bl	8003b54 <lfs_dir_get>
 8007fe8:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8007fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	da02      	bge.n	8007ff6 <lfs_rawmount+0xde>
                err = tag;
 8007ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007ff4:	e12e      	b.n	8008254 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8007ff6:	f107 030c 	add.w	r3, r7, #12
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fb faf8 	bl	80035f0 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	0c1b      	lsrs	r3, r3, #16
 8008004:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800800e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008012:	2b02      	cmp	r3, #2
 8008014:	d103      	bne.n	800801e <lfs_rawmount+0x106>
 8008016:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800801a:	2b00      	cmp	r3, #0
 800801c:	d011      	beq.n	8008042 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800801e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8008022:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008026:	4961      	ldr	r1, [pc, #388]	; (80081ac <lfs_rawmount+0x294>)
 8008028:	9101      	str	r1, [sp, #4]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	f241 0233 	movw	r2, #4147	; 0x1033
 8008032:	495f      	ldr	r1, [pc, #380]	; (80081b0 <lfs_rawmount+0x298>)
 8008034:	485f      	ldr	r0, [pc, #380]	; (80081b4 <lfs_rawmount+0x29c>)
 8008036:	f001 ff19 	bl	8009e6c <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800803a:	f06f 0315 	mvn.w	r3, #21
 800803e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008040:	e083      	b.n	800814a <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d018      	beq.n	800807a <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804e:	429a      	cmp	r2, r3
 8008050:	d910      	bls.n	8008074 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008058:	4954      	ldr	r1, [pc, #336]	; (80081ac <lfs_rawmount+0x294>)
 800805a:	9101      	str	r1, [sp, #4]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	f241 023c 	movw	r2, #4156	; 0x103c
 8008064:	4952      	ldr	r1, [pc, #328]	; (80081b0 <lfs_rawmount+0x298>)
 8008066:	4854      	ldr	r0, [pc, #336]	; (80081b8 <lfs_rawmount+0x2a0>)
 8008068:	f001 ff00 	bl	8009e6c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800806c:	f06f 0315 	mvn.w	r3, #21
 8008070:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8008072:	e06a      	b.n	800814a <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d018      	beq.n	80080b2 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	429a      	cmp	r2, r3
 8008088:	d910      	bls.n	80080ac <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008090:	4946      	ldr	r1, [pc, #280]	; (80081ac <lfs_rawmount+0x294>)
 8008092:	9101      	str	r1, [sp, #4]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4613      	mov	r3, r2
 8008098:	f241 0247 	movw	r2, #4167	; 0x1047
 800809c:	4944      	ldr	r1, [pc, #272]	; (80081b0 <lfs_rawmount+0x298>)
 800809e:	4847      	ldr	r0, [pc, #284]	; (80081bc <lfs_rawmount+0x2a4>)
 80080a0:	f001 fee4 	bl	8009e6c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80080a4:	f06f 0315 	mvn.w	r3, #21
 80080a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80080aa:	e04e      	b.n	800814a <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d018      	beq.n	80080ea <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080be:	429a      	cmp	r2, r3
 80080c0:	d910      	bls.n	80080e4 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c8:	4938      	ldr	r1, [pc, #224]	; (80081ac <lfs_rawmount+0x294>)
 80080ca:	9101      	str	r1, [sp, #4]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	4613      	mov	r3, r2
 80080d0:	f241 0252 	movw	r2, #4178	; 0x1052
 80080d4:	4936      	ldr	r1, [pc, #216]	; (80081b0 <lfs_rawmount+0x298>)
 80080d6:	483a      	ldr	r0, [pc, #232]	; (80081c0 <lfs_rawmount+0x2a8>)
 80080d8:	f001 fec8 	bl	8009e6c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80080dc:	f06f 0315 	mvn.w	r3, #21
 80080e0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80080e2:	e032      	b.n	800814a <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 80080e4:	6a3a      	ldr	r2, [r7, #32]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d011      	beq.n	800811a <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	492b      	ldr	r1, [pc, #172]	; (80081ac <lfs_rawmount+0x294>)
 8008100:	9101      	str	r1, [sp, #4]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	f241 025c 	movw	r2, #4188	; 0x105c
 800810a:	4929      	ldr	r1, [pc, #164]	; (80081b0 <lfs_rawmount+0x298>)
 800810c:	482d      	ldr	r0, [pc, #180]	; (80081c4 <lfs_rawmount+0x2ac>)
 800810e:	f001 fead 	bl	8009e6c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8008112:	f06f 0315 	mvn.w	r3, #21
 8008116:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008118:	e017      	b.n	800814a <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	429a      	cmp	r2, r3
 8008124:	d012      	beq.n	800814c <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	491f      	ldr	r1, [pc, #124]	; (80081ac <lfs_rawmount+0x294>)
 8008130:	9101      	str	r1, [sp, #4]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4613      	mov	r3, r2
 8008136:	f241 0263 	movw	r2, #4195	; 0x1063
 800813a:	491d      	ldr	r1, [pc, #116]	; (80081b0 <lfs_rawmount+0x298>)
 800813c:	4822      	ldr	r0, [pc, #136]	; (80081c8 <lfs_rawmount+0x2b0>)
 800813e:	f001 fe95 	bl	8009e6c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8008142:	f06f 0315 	mvn.w	r3, #21
 8008146:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008148:	bf00      	nop
            goto cleanup;
 800814a:	e083      	b.n	8008254 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7fc fdb7 	bl	8004ccc <lfs_dir_getgstate>
 800815e:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8008160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d175      	bne.n	8008252 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8008166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800816a:	3318      	adds	r3, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f7fb f806 	bl	800317e <lfs_pair_isnull>
 8008172:	4603      	mov	r3, r0
 8008174:	f083 0301 	eor.w	r3, r3, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	f47f aee7 	bne.w	8007f4e <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3320      	adds	r3, #32
 8008184:	4618      	mov	r0, r3
 8008186:	f7fa fffa 	bl	800317e <lfs_pair_isnull>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01d      	beq.n	80081cc <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8008190:	f06f 0315 	mvn.w	r3, #21
 8008194:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8008196:	e05d      	b.n	8008254 <lfs_rawmount+0x33c>
 8008198:	0800acf4 	.word	0x0800acf4
 800819c:	08004d31 	.word	0x08004d31
 80081a0:	0ff00008 	.word	0x0ff00008
 80081a4:	7ffffc00 	.word	0x7ffffc00
 80081a8:	20100018 	.word	0x20100018
 80081ac:	0800a81c 	.word	0x0800a81c
 80081b0:	0800a718 	.word	0x0800a718
 80081b4:	0800ad00 	.word	0x0800ad00
 80081b8:	0800ad2c 	.word	0x0800ad2c
 80081bc:	0800ad60 	.word	0x0800ad60
 80081c0:	0800ad94 	.word	0x0800ad94
 80081c4:	0800adc8 	.word	0x0800adc8
 80081c8:	0800adfc 	.word	0x0800adfc
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3330      	adds	r3, #48	; 0x30
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fb f92b 	bl	800342c <lfs_gstate_iszero>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f083 0301 	eor.w	r3, r3, #1
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d010      	beq.n	8008204 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081ee:	481d      	ldr	r0, [pc, #116]	; (8008264 <lfs_rawmount+0x34c>)
 80081f0:	9002      	str	r0, [sp, #8]
 80081f2:	9201      	str	r2, [sp, #4]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	460b      	mov	r3, r1
 80081f8:	f241 0279 	movw	r2, #4217	; 0x1079
 80081fc:	491a      	ldr	r1, [pc, #104]	; (8008268 <lfs_rawmount+0x350>)
 80081fe:	481b      	ldr	r0, [pc, #108]	; (800826c <lfs_rawmount+0x354>)
 8008200:	f001 fe34 	bl	8009e6c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	4618      	mov	r0, r3
 800820a:	f7fb f85e 	bl	80032ca <lfs_tag_isvalid>
 800820e:	4603      	mov	r3, r0
 8008210:	f083 0301 	eor.w	r3, r3, #1
 8008214:	b2db      	uxtb	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	441a      	add	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	333c      	adds	r3, #60	; 0x3c
 8008228:	3230      	adds	r2, #48	; 0x30
 800822a:	ca07      	ldmia	r2, {r0, r1, r2}
 800822c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008238:	6a12      	ldr	r2, [r2, #32]
 800823a:	fbb3 f1f2 	udiv	r1, r3, r2
 800823e:	fb01 f202 	mul.w	r2, r1, r2
 8008242:	1a9a      	subs	r2, r3, r2
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7fb fad8 	bl	80037fe <lfs_alloc_drop>

    return 0;
 800824e:	2300      	movs	r3, #0
 8008250:	e004      	b.n	800825c <lfs_rawmount+0x344>
            goto cleanup;
 8008252:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f80b 	bl	8008270 <lfs_rawunmount>
    return err;
 800825a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800825c:	4618      	mov	r0, r3
 800825e:	3760      	adds	r7, #96	; 0x60
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	0800a81c 	.word	0x0800a81c
 8008268:	0800a718 	.word	0x0800a718
 800826c:	0800ae2c 	.word	0x0800ae2c

08008270 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff fd85 	bl	8007d88 <lfs_deinit>
 800827e:	4603      	mov	r3, r0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8008288:	b590      	push	{r4, r7, lr}
 800828a:	b09d      	sub	sp, #116	; 0x74
 800828c:	af04      	add	r7, sp, #16
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8008296:	f107 0318 	add.w	r3, r7, #24
 800829a:	2220      	movs	r2, #32
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fa0e 	bl	80096c0 <memset>
 80082a4:	2301      	movs	r3, #1
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80082ac:	e0a7      	b.n	80083fe <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	085b      	lsrs	r3, r3, #1
 80082b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d302      	bcc.n	80082c2 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 80082bc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80082c0:	e102      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 80082c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082c4:	3301      	adds	r3, #1
 80082c6:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 80082c8:	2300      	movs	r3, #0
 80082ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80082cc:	e013      	b.n	80082f6 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 80082ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d0:	3306      	adds	r3, #6
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	3360      	adds	r3, #96	; 0x60
 80082d6:	443b      	add	r3, r7
 80082d8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4611      	mov	r1, r2
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
 80082e4:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <lfs_fs_rawtraverse+0x68>
                return err;
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	e0eb      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 80082f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082f2:	3301      	adds	r3, #1
 80082f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80082f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	dde8      	ble.n	80082ce <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80082fc:	f107 0318 	add.w	r3, r7, #24
 8008300:	f103 0218 	add.w	r2, r3, #24
 8008304:	f107 0318 	add.w	r3, r7, #24
 8008308:	4619      	mov	r1, r3
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7fc fcc2 	bl	8004c94 <lfs_dir_fetch>
 8008310:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8008312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <lfs_fs_rawtraverse+0x94>
            return err;
 8008318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831a:	e0d5      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800831c:	2300      	movs	r3, #0
 800831e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008322:	e067      	b.n	80083f4 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8008324:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008328:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800832a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800832e:	f043 0308 	orr.w	r3, r3, #8
 8008332:	f107 0118 	add.w	r1, r7, #24
 8008336:	f107 0210 	add.w	r2, r7, #16
 800833a:	9200      	str	r2, [sp, #0]
 800833c:	4a64      	ldr	r2, [pc, #400]	; (80084d0 <lfs_fs_rawtraverse+0x248>)
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7fb fc08 	bl	8003b54 <lfs_dir_get>
 8008344:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8008346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008348:	2b00      	cmp	r3, #0
 800834a:	da05      	bge.n	8008358 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	f113 0f02 	cmn.w	r3, #2
 8008352:	d049      	beq.n	80083e8 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8008354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008356:	e0b7      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8008358:	f107 0310 	add.w	r3, r7, #16
 800835c:	4618      	mov	r0, r3
 800835e:	f7fb f917 	bl	8003590 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8008362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008364:	4618      	mov	r0, r3
 8008366:	f7fa ffe1 	bl	800332c <lfs_tag_type3>
 800836a:	4603      	mov	r3, r0
 800836c:	461a      	mov	r2, r3
 800836e:	f240 2302 	movw	r3, #514	; 0x202
 8008372:	429a      	cmp	r2, r3
 8008374:	d113      	bne.n	800839e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8008376:	68f9      	ldr	r1, [r7, #12]
 8008378:	6938      	ldr	r0, [r7, #16]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	9202      	str	r2, [sp, #8]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	9201      	str	r2, [sp, #4]
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	4603      	mov	r3, r0
 8008388:	460a      	mov	r2, r1
 800838a:	2100      	movs	r1, #0
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7fe fbaf 	bl	8006af0 <lfs_ctz_traverse>
 8008392:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8008394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008396:	2b00      	cmp	r3, #0
 8008398:	d027      	beq.n	80083ea <lfs_fs_rawtraverse+0x162>
                    return err;
 800839a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839c:	e094      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d022      	beq.n	80083ea <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80083a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fa ffc0 	bl	800332c <lfs_tag_type3>
 80083ac:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80083ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b2:	d11a      	bne.n	80083ea <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 80083b4:	2300      	movs	r3, #0
 80083b6:	653b      	str	r3, [r7, #80]	; 0x50
 80083b8:	e012      	b.n	80083e0 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 80083ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	f107 0210 	add.w	r2, r7, #16
 80083c2:	4413      	add	r3, r2
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4611      	mov	r1, r2
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
 80083ce:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 80083d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <lfs_fs_rawtraverse+0x152>
                        return err;
 80083d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d8:	e076      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 80083da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083dc:	3301      	adds	r3, #1
 80083de:	653b      	str	r3, [r7, #80]	; 0x50
 80083e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	dde9      	ble.n	80083ba <lfs_fs_rawtraverse+0x132>
 80083e6:	e000      	b.n	80083ea <lfs_fs_rawtraverse+0x162>
                    continue;
 80083e8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80083ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083ee:	3301      	adds	r3, #1
 80083f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80083f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083f6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d392      	bcc.n	8008324 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 80083fe:	f107 0318 	add.w	r3, r7, #24
 8008402:	3318      	adds	r3, #24
 8008404:	4618      	mov	r0, r3
 8008406:	f7fa feba 	bl	800317e <lfs_pair_isnull>
 800840a:	4603      	mov	r3, r0
 800840c:	f083 0301 	eor.w	r3, r3, #1
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	f47f af4b 	bne.w	80082ae <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800841e:	e04f      	b.n	80084c0 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8008420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008422:	799b      	ldrb	r3, [r3, #6]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d147      	bne.n	80084b8 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8008428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01d      	beq.n	8008470 <lfs_fs_rawtraverse+0x1e8>
 8008434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d117      	bne.n	8008470 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8008440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008442:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800844c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	9202      	str	r2, [sp, #8]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	9201      	str	r2, [sp, #4]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4623      	mov	r3, r4
 800845c:	4602      	mov	r2, r0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7fe fb46 	bl	8006af0 <lfs_ctz_traverse>
 8008464:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8008466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <lfs_fs_rawtraverse+0x1e8>
                return err;
 800846c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800846e:	e02b      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8008470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01e      	beq.n	80084ba <lfs_fs_rawtraverse+0x232>
 800847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d118      	bne.n	80084ba <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8008488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008492:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	9202      	str	r2, [sp, #8]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	9201      	str	r2, [sp, #4]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4623      	mov	r3, r4
 80084a4:	4602      	mov	r2, r0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7fe fb22 	bl	8006af0 <lfs_ctz_traverse>
 80084ac:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 80084ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <lfs_fs_rawtraverse+0x232>
                return err;
 80084b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b6:	e007      	b.n	80084c8 <lfs_fs_rawtraverse+0x240>
            continue;
 80084b8:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80084ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1ac      	bne.n	8008420 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3764      	adds	r7, #100	; 0x64
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}
 80084d0:	700ffc00 	.word	0x700ffc00

080084d4 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 80084f0:	e024      	b.n	800853c <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d302      	bcc.n	8008506 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8008500:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008504:	e027      	b.n	8008556 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	3301      	adds	r3, #1
 800850a:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3318      	adds	r3, #24
 8008510:	68b9      	ldr	r1, [r7, #8]
 8008512:	4618      	mov	r0, r3
 8008514:	f7fa fe4e 	bl	80031b4 <lfs_pair_cmp>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <lfs_fs_pred+0x4e>
            return 0;
 800851e:	2300      	movs	r3, #0
 8008520:	e019      	b.n	8008556 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3318      	adds	r3, #24
 8008526:	461a      	mov	r2, r3
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7fc fbb2 	bl	8004c94 <lfs_dir_fetch>
 8008530:	6138      	str	r0, [r7, #16]
        if (err) {
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <lfs_fs_pred+0x68>
            return err;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	e00c      	b.n	8008556 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3318      	adds	r3, #24
 8008540:	4618      	mov	r0, r3
 8008542:	f7fa fe1c 	bl	800317e <lfs_pair_isnull>
 8008546:	4603      	mov	r3, r0
 8008548:	f083 0301 	eor.w	r3, r3, #1
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1cf      	bne.n	80084f2 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8008552:	f06f 0301 	mvn.w	r3, #1
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800855e:	b5b0      	push	{r4, r5, r7, lr}
 8008560:	b08e      	sub	sp, #56	; 0x38
 8008562:	af04      	add	r7, sp, #16
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800857e:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8008584:	69dd      	ldr	r5, [r3, #28]
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	6852      	ldr	r2, [r2, #4]
 800858e:	2108      	movs	r1, #8
 8008590:	9103      	str	r1, [sp, #12]
 8008592:	f107 0110 	add.w	r1, r7, #16
 8008596:	9102      	str	r1, [sp, #8]
 8008598:	9201      	str	r2, [sp, #4]
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	462b      	mov	r3, r5
 800859e:	4622      	mov	r2, r4
 80085a0:	4601      	mov	r1, r0
 80085a2:	6a38      	ldr	r0, [r7, #32]
 80085a4:	f7fa fab2 	bl	8002b0c <lfs_bd_read>
 80085a8:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <lfs_fs_parent_match+0x56>
        return err;
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	e012      	b.n	80085da <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 80085b4:	f107 0310 	add.w	r3, r7, #16
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fa fe52 	bl	8003262 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	1d1a      	adds	r2, r3, #4
 80085c2:	f107 0310 	add.w	r3, r7, #16
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fa fdf3 	bl	80031b4 <lfs_pair_cmp>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bf14      	ite	ne
 80085d4:	2301      	movne	r3, #1
 80085d6:	2300      	moveq	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3728      	adds	r7, #40	; 0x28
 80085de:	46bd      	mov	sp, r7
 80085e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085e4 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08e      	sub	sp, #56	; 0x38
 80085e8:	af04      	add	r7, sp, #16
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8008600:	e02f      	b.n	8008662 <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860c:	429a      	cmp	r2, r3
 800860e:	d302      	bcc.n	8008616 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8008610:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008614:	e032      	b.n	800867c <lfs_fs_parent+0x98>
        }
        cycle += 1;
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	3301      	adds	r3, #1
 800861a:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8008632:	f107 0314 	add.w	r3, r7, #20
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	4b12      	ldr	r3, [pc, #72]	; (8008684 <lfs_fs_parent+0xa0>)
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	2300      	movs	r3, #0
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	4b11      	ldr	r3, [pc, #68]	; (8008688 <lfs_fs_parent+0xa4>)
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4b11      	ldr	r3, [pc, #68]	; (800868c <lfs_fs_parent+0xa8>)
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7fb ffb5 	bl	80045b8 <lfs_dir_fetchmatch>
 800864e:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <lfs_fs_parent+0x7e>
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	f113 0f02 	cmn.w	r3, #2
 800865c:	d001      	beq.n	8008662 <lfs_fs_parent+0x7e>
            return tag;
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	e00c      	b.n	800867c <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3318      	adds	r3, #24
 8008666:	4618      	mov	r0, r3
 8008668:	f7fa fd89 	bl	800317e <lfs_pair_isnull>
 800866c:	4603      	mov	r3, r0
 800866e:	f083 0301 	eor.w	r3, r3, #1
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1c4      	bne.n	8008602 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8008678:	f06f 0301 	mvn.w	r3, #1
}
 800867c:	4618      	mov	r0, r3
 800867e:	3728      	adds	r7, #40	; 0x28
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	0800855f 	.word	0x0800855f
 8008688:	20000008 	.word	0x20000008
 800868c:	7ff003ff 	.word	0x7ff003ff

08008690 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fa fe7d 	bl	80033a0 <lfs_tag_size>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <lfs_fs_preporphans+0x32>
 80086ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da06      	bge.n	80086c2 <lfs_fs_preporphans+0x32>
 80086b4:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <lfs_fs_preporphans+0x68>)
 80086b6:	4a11      	ldr	r2, [pc, #68]	; (80086fc <lfs_fs_preporphans+0x6c>)
 80086b8:	f241 114c 	movw	r1, #4428	; 0x114c
 80086bc:	4810      	ldr	r0, [pc, #64]	; (8008700 <lfs_fs_preporphans+0x70>)
 80086be:	f000 ff77 	bl	80095b0 <__assert_func>
    lfs->gstate.tag += orphans;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ca:	441a      	add	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3330      	adds	r3, #48	; 0x30
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fa fec2 	bl	8003466 <lfs_gstate_hasorphans>
 80086e2:	4603      	mov	r3, r0
 80086e4:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80086e6:	ea44 0203 	orr.w	r2, r4, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd90      	pop	{r4, r7, pc}
 80086f8:	0800ae64 	.word	0x0800ae64
 80086fc:	0800b14c 	.word	0x0800b14c
 8008700:	0800a718 	.word	0x0800a718

08008704 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	460b      	mov	r3, r1
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	4a17      	ldr	r2, [pc, #92]	; (8008774 <lfs_fs_prepmove+0x70>)
 8008718:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800871a:	897b      	ldrh	r3, [r7, #10]
 800871c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008720:	428b      	cmp	r3, r1
 8008722:	d006      	beq.n	8008732 <lfs_fs_prepmove+0x2e>
 8008724:	897b      	ldrh	r3, [r7, #10]
 8008726:	029b      	lsls	r3, r3, #10
 8008728:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800872c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008730:	e000      	b.n	8008734 <lfs_fs_prepmove+0x30>
 8008732:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8008734:	431a      	orrs	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800873a:	897b      	ldrh	r3, [r7, #10]
 800873c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008740:	4293      	cmp	r3, r2
 8008742:	d002      	beq.n	800874a <lfs_fs_prepmove+0x46>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	e000      	b.n	800874c <lfs_fs_prepmove+0x48>
 800874a:	2300      	movs	r3, #0
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8008750:	897b      	ldrh	r3, [r7, #10]
 8008752:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008756:	4293      	cmp	r3, r2
 8008758:	d003      	beq.n	8008762 <lfs_fs_prepmove+0x5e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3304      	adds	r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	e000      	b.n	8008764 <lfs_fs_prepmove+0x60>
 8008762:	2300      	movs	r3, #0
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008768:	bf00      	nop
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	800003ff 	.word	0x800003ff

08008778 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8008778:	b5b0      	push	{r4, r5, r7, lr}
 800877a:	b094      	sub	sp, #80	; 0x50
 800877c:	af04      	add	r7, sp, #16
 800877e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	333c      	adds	r3, #60	; 0x3c
 8008784:	4618      	mov	r0, r3
 8008786:	f7fa fe90 	bl	80034aa <lfs_gstate_hasmove>
 800878a:	4603      	mov	r3, r0
 800878c:	f083 0301 	eor.w	r3, r3, #1
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <lfs_fs_demove+0x22>
        return 0;
 8008796:	2300      	movs	r3, #0
 8008798:	e049      	b.n	800882e <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fa fdea 	bl	8003380 <lfs_tag_id>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	4b21      	ldr	r3, [pc, #132]	; (8008838 <lfs_fs_demove+0xc0>)
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	9201      	str	r2, [sp, #4]
 80087b6:	9400      	str	r4, [sp, #0]
 80087b8:	462b      	mov	r3, r5
 80087ba:	f241 1266 	movw	r2, #4454	; 0x1166
 80087be:	491f      	ldr	r1, [pc, #124]	; (800883c <lfs_fs_demove+0xc4>)
 80087c0:	481f      	ldr	r0, [pc, #124]	; (8008840 <lfs_fs_demove+0xc8>)
 80087c2:	f001 fb53 	bl	8009e6c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80087cc:	f107 0318 	add.w	r3, r7, #24
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7fc fa5e 	bl	8004c94 <lfs_dir_fetch>
 80087d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80087da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <lfs_fs_demove+0x6c>
        return err;
 80087e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e2:	e024      	b.n	800882e <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fa fdc9 	bl	8003380 <lfs_tag_id>
 80087ee:	4603      	mov	r3, r0
 80087f0:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80087f2:	2200      	movs	r2, #0
 80087f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff ff83 	bl	8008704 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80087fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008800:	029b      	lsls	r3, r3, #10
 8008802:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008806:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800880a:	613b      	str	r3, [r7, #16]
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	f107 0210 	add.w	r2, r7, #16
 8008814:	f107 0118 	add.w	r1, r7, #24
 8008818:	2301      	movs	r3, #1
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fd ff98 	bl	8006750 <lfs_dir_commit>
 8008820:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <lfs_fs_demove+0xb4>
        return err;
 8008828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882a:	e000      	b.n	800882e <lfs_fs_demove+0xb6>
    }

    return 0;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3740      	adds	r7, #64	; 0x40
 8008832:	46bd      	mov	sp, r7
 8008834:	bdb0      	pop	{r4, r5, r7, pc}
 8008836:	bf00      	nop
 8008838:	0800a81c 	.word	0x0800a81c
 800883c:	0800a718 	.word	0x0800a718
 8008840:	0800ae98 	.word	0x0800ae98

08008844 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8008844:	b5b0      	push	{r4, r5, r7, lr}
 8008846:	b0b2      	sub	sp, #200	; 0xc8
 8008848:	af04      	add	r7, sp, #16
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3330      	adds	r3, #48	; 0x30
 8008854:	4618      	mov	r0, r3
 8008856:	f7fa fe06 	bl	8003466 <lfs_gstate_hasorphans>
 800885a:	4603      	mov	r3, r0
 800885c:	f083 0301 	eor.w	r3, r3, #1
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <lfs_fs_deorphan+0x26>
        return 0;
 8008866:	2300      	movs	r3, #0
 8008868:	e17c      	b.n	8008b64 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8008870:	f107 030c 	add.w	r3, r7, #12
 8008874:	2220      	movs	r2, #32
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f000 ff21 	bl	80096c0 <memset>
 800887e:	2301      	movs	r3, #1
 8008880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008884:	2301      	movs	r3, #1
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8008888:	e148      	b.n	8008b1c <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800888a:	f107 030c 	add.w	r3, r7, #12
 800888e:	f103 0218 	add.w	r2, r3, #24
 8008892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fc f9fb 	bl	8004c94 <lfs_dir_fetch>
 800889e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 80088a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <lfs_fs_deorphan+0x6c>
                return err;
 80088aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088ae:	e159      	b.n	8008b64 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80088b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088b4:	f083 0301 	eor.w	r3, r3, #1
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8124 	beq.w	8008b08 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80088c0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80088c4:	f107 030c 	add.w	r3, r7, #12
 80088c8:	3318      	adds	r3, #24
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fe89 	bl	80085e4 <lfs_fs_parent>
 80088d2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80088d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da07      	bge.n	80088ee <lfs_fs_deorphan+0xaa>
 80088de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088e2:	f113 0f02 	cmn.w	r3, #2
 80088e6:	d002      	beq.n	80088ee <lfs_fs_deorphan+0xaa>
                    return tag;
 80088e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ec:	e13a      	b.n	8008b64 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 80088ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088f2:	f113 0f02 	cmn.w	r3, #2
 80088f6:	d157      	bne.n	80089a8 <lfs_fs_deorphan+0x164>
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d054      	beq.n	80089a8 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80088fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	499a      	ldr	r1, [pc, #616]	; (8008b6c <lfs_fs_deorphan+0x328>)
 8008904:	9101      	str	r1, [sp, #4]
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	f241 12a1 	movw	r2, #4513	; 0x11a1
 800890e:	4998      	ldr	r1, [pc, #608]	; (8008b70 <lfs_fs_deorphan+0x32c>)
 8008910:	4898      	ldr	r0, [pc, #608]	; (8008b74 <lfs_fs_deorphan+0x330>)
 8008912:	f001 faab 	bl	8009e6c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800891c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fc f9d2 	bl	8004ccc <lfs_dir_getgstate>
 8008928:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 800892c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <lfs_fs_deorphan+0xf6>
                        return err;
 8008934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008938:	e114      	b.n	8008b64 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800893a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800893e:	3318      	adds	r3, #24
 8008940:	4618      	mov	r0, r3
 8008942:	f7fa fca8 	bl	8003296 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008946:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800894a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800894e:	051a      	lsls	r2, r3, #20
 8008950:	4b89      	ldr	r3, [pc, #548]	; (8008b78 <lfs_fs_deorphan+0x334>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800895c:	3318      	adds	r3, #24
 800895e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008962:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008966:	f107 010c 	add.w	r1, r7, #12
 800896a:	2301      	movs	r3, #1
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fd fbf5 	bl	800615c <lfs_dir_orphaningcommit>
 8008972:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8008976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800897a:	3318      	adds	r3, #24
 800897c:	4618      	mov	r0, r3
 800897e:	f7fa fc70 	bl	8003262 <lfs_pair_fromle32>
                    if (state < 0) {
 8008982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008986:	2b00      	cmp	r3, #0
 8008988:	da02      	bge.n	8008990 <lfs_fs_deorphan+0x14c>
                        return state;
 800898a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 800898e:	e0e9      	b.n	8008b64 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8008990:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008994:	3301      	adds	r3, #1
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800899c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	f040 80af 	bne.w	8008b04 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 80089a6:	e763      	b.n	8008870 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 80089a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089ac:	f113 0f02 	cmn.w	r3, #2
 80089b0:	f000 80aa 	beq.w	8008b08 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80089b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089b8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80089bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	4a6d      	ldr	r2, [pc, #436]	; (8008b7c <lfs_fs_deorphan+0x338>)
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fb f8c4 	bl	8003b54 <lfs_dir_get>
 80089cc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80089d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	da02      	bge.n	80089de <lfs_fs_deorphan+0x19a>
                        return state;
 80089d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089dc:	e0c2      	b.n	8008b64 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 80089de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fa fc3d 	bl	8003262 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80089e8:	f107 030c 	add.w	r3, r7, #12
 80089ec:	f103 0218 	add.w	r2, r3, #24
 80089f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089f4:	4611      	mov	r1, r2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fa fc06 	bl	8003208 <lfs_pair_sync>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f083 0301 	eor.w	r3, r3, #1
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d07f      	beq.n	8008b08 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8008a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008a10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a14:	4c55      	ldr	r4, [pc, #340]	; (8008b6c <lfs_fs_deorphan+0x328>)
 8008a16:	9403      	str	r4, [sp, #12]
 8008a18:	9102      	str	r1, [sp, #8]
 8008a1a:	9201      	str	r2, [sp, #4]
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	4603      	mov	r3, r0
 8008a20:	f241 12ca 	movw	r2, #4554	; 0x11ca
 8008a24:	4952      	ldr	r1, [pc, #328]	; (8008b70 <lfs_fs_deorphan+0x32c>)
 8008a26:	4856      	ldr	r0, [pc, #344]	; (8008b80 <lfs_fs_deorphan+0x33c>)
 8008a28:	f001 fa20 	bl	8009e6c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8008a2c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008a30:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3330      	adds	r3, #48	; 0x30
 8008a38:	f107 020c 	add.w	r2, r7, #12
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fa fd46 	bl	80034d0 <lfs_gstate_hasmovehere>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01c      	beq.n	8008a84 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fa fc96 	bl	8003380 <lfs_tag_id>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8008a62:	4842      	ldr	r0, [pc, #264]	; (8008b6c <lfs_fs_deorphan+0x328>)
 8008a64:	9002      	str	r0, [sp, #8]
 8008a66:	9201      	str	r2, [sp, #4]
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	f241 12d5 	movw	r2, #4565	; 0x11d5
 8008a70:	493f      	ldr	r1, [pc, #252]	; (8008b70 <lfs_fs_deorphan+0x32c>)
 8008a72:	4844      	ldr	r0, [pc, #272]	; (8008b84 <lfs_fs_deorphan+0x340>)
 8008a74:	f001 f9fa 	bl	8009e6c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fe40 	bl	8008704 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8008a84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fa fc04 	bl	8003296 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008a8e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008a92:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d007      	beq.n	8008aaa <lfs_fs_deorphan+0x266>
 8008a9a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008a9e:	029b      	lsls	r3, r3, #10
 8008aa0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008aa4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008aa8:	e000      	b.n	8008aac <lfs_fs_deorphan+0x268>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ab4:	4b34      	ldr	r3, [pc, #208]	; (8008b88 <lfs_fs_deorphan+0x344>)
 8008ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008aba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ac2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008ac6:	f107 010c 	add.w	r1, r7, #12
 8008aca:	2302      	movs	r3, #2
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7fd fb45 	bl	800615c <lfs_dir_orphaningcommit>
 8008ad2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8008ad6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fa fbc1 	bl	8003262 <lfs_pair_fromle32>
                        if (state < 0) {
 8008ae0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da02      	bge.n	8008aee <lfs_fs_deorphan+0x2aa>
                            return state;
 8008ae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8008aec:	e03a      	b.n	8008b64 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 8008aee:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008af2:	3301      	adds	r3, #1
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8008afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d10c      	bne.n	8008b1c <lfs_fs_deorphan+0x2d8>
 8008b02:	e6b5      	b.n	8008870 <lfs_fs_deorphan+0x2c>
                    continue;
 8008b04:	bf00      	nop
 8008b06:	e009      	b.n	8008b1c <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 8008b08:	f107 040c 	add.w	r4, r7, #12
 8008b0c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8008b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8008b1c:	f107 030c 	add.w	r3, r7, #12
 8008b20:	3318      	adds	r3, #24
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fa fb2b 	bl	800317e <lfs_pair_isnull>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f083 0301 	eor.w	r3, r3, #1
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f47f aeaa 	bne.w	800888a <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3330      	adds	r3, #48	; 0x30
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fa fca6 	bl	800348c <lfs_gstate_getorphans>
 8008b40:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8008b42:	461a      	mov	r2, r3
 8008b44:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7f9 ff02 	bl	8002954 <lfs_min>
 8008b50:	4603      	mov	r3, r0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	425b      	negs	r3, r3
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff fd97 	bl	8008690 <lfs_fs_preporphans>
 8008b62:	4603      	mov	r3, r0
            found));
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	37b8      	adds	r7, #184	; 0xb8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6c:	0800a81c 	.word	0x0800a81c
 8008b70:	0800a718 	.word	0x0800a718
 8008b74:	0800aecc 	.word	0x0800aecc
 8008b78:	000ffc08 	.word	0x000ffc08
 8008b7c:	7ffffc00 	.word	0x7ffffc00
 8008b80:	0800aefc 	.word	0x0800aefc
 8008b84:	0800af40 	.word	0x0800af40
 8008b88:	600ffc08 	.word	0x600ffc08

08008b8c <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff fdef 	bl	8008778 <lfs_fs_demove>
 8008b9a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <lfs_fs_forceconsistency+0x1a>
        return err;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e00a      	b.n	8008bbc <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff fe4b 	bl	8008844 <lfs_fs_deorphan>
 8008bae:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <lfs_fs_forceconsistency+0x2e>
        return err;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	e000      	b.n	8008bbc <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	601a      	str	r2, [r3, #0]
    return 0;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8008bf8:	f107 0208 	add.w	r2, r7, #8
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4907      	ldr	r1, [pc, #28]	; (8008c1c <lfs_fs_rawsize+0x30>)
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff fb41 	bl	8008288 <lfs_fs_rawtraverse>
 8008c06:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <lfs_fs_rawsize+0x26>
        return err;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	e000      	b.n	8008c14 <lfs_fs_rawsize+0x28>
    }

    return size;
 8008c12:	68bb      	ldr	r3, [r7, #8]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	08008bc5 	.word	0x08008bc5

08008c20 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <lfs_format+0x18>
        return err;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e005      	b.n	8008c44 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff f8cc 	bl	8007dd8 <lfs_rawformat>
 8008c40:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <lfs_mount+0x18>
        return err;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	e005      	b.n	8008c70 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff f956 	bl	8007f18 <lfs_rawmount>
 8008c6c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8008c80:	2300      	movs	r3, #0
 8008c82:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <lfs_unmount+0x16>
        return err;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	e004      	b.n	8008c98 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff faee 	bl	8008270 <lfs_rawunmount>
 8008c94:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008c96:	68fb      	ldr	r3, [r7, #12]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	617b      	str	r3, [r7, #20]
    if (err) {
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <lfs_file_open+0x1c>
        return err;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	e01a      	b.n	8008cf2 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fa fd04 	bl	80036d0 <lfs_mlist_isopen>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f083 0301 	eor.w	r3, r3, #1
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <lfs_file_open+0x42>
 8008cd4:	4b09      	ldr	r3, [pc, #36]	; (8008cfc <lfs_file_open+0x5c>)
 8008cd6:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <lfs_file_open+0x60>)
 8008cd8:	f241 5166 	movw	r1, #5478	; 0x1566
 8008cdc:	4809      	ldr	r0, [pc, #36]	; (8008d04 <lfs_file_open+0x64>)
 8008cde:	f000 fc67 	bl	80095b0 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7fe f94d 	bl	8006f88 <lfs_file_rawopen>
 8008cee:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008cf0:	697b      	ldr	r3, [r7, #20]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	0800af88 	.word	0x0800af88
 8008d00:	0800b160 	.word	0x0800b160
 8008d04:	0800a718 	.word	0x0800a718

08008d08 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <lfs_file_close+0x18>
        return err;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	e015      	b.n	8008d4c <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fa fcd2 	bl	80036d0 <lfs_mlist_isopen>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <lfs_file_close+0x38>
 8008d32:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <lfs_file_close+0x4c>)
 8008d34:	4a08      	ldr	r2, [pc, #32]	; (8008d58 <lfs_file_close+0x50>)
 8008d36:	f241 518a 	movw	r1, #5514	; 0x158a
 8008d3a:	4808      	ldr	r0, [pc, #32]	; (8008d5c <lfs_file_close+0x54>)
 8008d3c:	f000 fc38 	bl	80095b0 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fe f938 	bl	8006fb8 <lfs_file_rawclose>
 8008d48:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	0800afc0 	.word	0x0800afc0
 8008d58:	0800b170 	.word	0x0800b170
 8008d5c:	0800a718 	.word	0x0800a718

08008d60 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
    if (err) {
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <lfs_file_read+0x1c>
        return err;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	e017      	b.n	8008dac <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fa fca4 	bl	80036d0 <lfs_mlist_isopen>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <lfs_file_read+0x3c>
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <lfs_file_read+0x54>)
 8008d90:	4a09      	ldr	r2, [pc, #36]	; (8008db8 <lfs_file_read+0x58>)
 8008d92:	f241 51ac 	movw	r1, #5548	; 0x15ac
 8008d96:	4809      	ldr	r0, [pc, #36]	; (8008dbc <lfs_file_read+0x5c>)
 8008d98:	f000 fc0a 	bl	80095b0 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7fe fc54 	bl	8007650 <lfs_file_rawread>
 8008da8:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008daa:	693b      	ldr	r3, [r7, #16]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	0800afc0 	.word	0x0800afc0
 8008db8:	0800b180 	.word	0x0800b180
 8008dbc:	0800a718 	.word	0x0800a718

08008dc0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
    if (err) {
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <lfs_file_write+0x1c>
        return err;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	e017      	b.n	8008e0c <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa fc74 	bl	80036d0 <lfs_mlist_isopen>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d106      	bne.n	8008dfc <lfs_file_write+0x3c>
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <lfs_file_write+0x54>)
 8008df0:	4a09      	ldr	r2, [pc, #36]	; (8008e18 <lfs_file_write+0x58>)
 8008df2:	f241 51be 	movw	r1, #5566	; 0x15be
 8008df6:	4809      	ldr	r0, [pc, #36]	; (8008e1c <lfs_file_write+0x5c>)
 8008df8:	f000 fbda 	bl	80095b0 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	68b9      	ldr	r1, [r7, #8]
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7fe fd82 	bl	800790c <lfs_file_rawwrite>
 8008e08:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008e0a:	693b      	ldr	r3, [r7, #16]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	0800afc0 	.word	0x0800afc0
 8008e18:	0800b190 	.word	0x0800b190
 8008e1c:	0800a718 	.word	0x0800a718

08008e20 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e024      	b.n	8008e80 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	091a      	lsrs	r2, r3, #4
 8008e3a:	6939      	ldr	r1, [r7, #16]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	440b      	add	r3, r1
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	4619      	mov	r1, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	404b      	eors	r3, r1
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	4912      	ldr	r1, [pc, #72]	; (8008e98 <lfs_crc+0x78>)
 8008e4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e52:	4053      	eors	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	091a      	lsrs	r2, r3, #4
 8008e5a:	6939      	ldr	r1, [r7, #16]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	440b      	add	r3, r1
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	091b      	lsrs	r3, r3, #4
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	4619      	mov	r1, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	404b      	eors	r3, r1
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	4909      	ldr	r1, [pc, #36]	; (8008e98 <lfs_crc+0x78>)
 8008e72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e76:	4053      	eors	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3d6      	bcc.n	8008e36 <lfs_crc+0x16>
    }

    return crc;
 8008e88:	68fb      	ldr	r3, [r7, #12]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	0800b1a0 	.word	0x0800b1a0

08008e9c <_ZN6W25Q64C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
constexpr uint8_t CMD_READ_JDEC          = 0x9F;

constexpr uint8_t STATUS_BUSY_MASK = 0x01;

/* Constructor */
W25Q64::W25Q64(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_gpio_port, uint16_t cs_pin)
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	807b      	strh	r3, [r7, #2]
	: mySPIPort(hspi, cs_pin, cs_gpio_port)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f103 000c 	add.w	r0, r3, #12
 8008eb0:	887a      	ldrh	r2, [r7, #2]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	f000 fa0d 	bl	80092d4 <_ZN3SPIC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDef>
{
	this->hspi = hspi;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	601a      	str	r2, [r3, #0]
	this->csPin = cs_pin;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	887a      	ldrh	r2, [r7, #2]
 8008ec4:	811a      	strh	r2, [r3, #8]
	this->csGPIOPort = cs_gpio_port;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]
}
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <_ZN6W25Q644initEv>:

/* Public methods */
HAL_StatusTypeDef W25Q64::init()
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
	return mySPIPort.init();
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fa0e 	bl	8009304 <_ZN3SPI4initEv>
 8008ee8:	4603      	mov	r3, r0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <_ZN6W25Q6412write_enableEv>:

void W25Q64::write_enable()
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	cs_select();
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f8d9 	bl	80090b4 <_ZN6W25Q649cs_selectEv>
	mySPIPort.transmit((uint8_t *) &CMD_WRITE_ENABLE, 1);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	330c      	adds	r3, #12
 8008f06:	2201      	movs	r2, #1
 8008f08:	4905      	ldr	r1, [pc, #20]	; (8008f20 <_ZN6W25Q6412write_enableEv+0x2c>)
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fa6e 	bl	80093ec <_ZN3SPI8transmitEPht>
	cs_deselect();
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f8dc 	bl	80090ce <_ZN6W25Q6411cs_deselectEv>
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	0800b1e0 	.word	0x0800b1e0

08008f24 <_ZN6W25Q6420read_status_registerEv>:
	mySPIPort.transmit((uint8_t *) &CMD_WRITE_DISABLE, 1);
	cs_deselect();
}

uint8_t W25Q64::read_status_register()
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	cs_select();
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f8c1 	bl	80090b4 <_ZN6W25Q649cs_selectEv>
	mySPIPort.transmit((uint8_t *) &CMD_READ_STATUS_REG, 1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	330c      	adds	r3, #12
 8008f36:	2201      	movs	r2, #1
 8008f38:	4909      	ldr	r1, [pc, #36]	; (8008f60 <_ZN6W25Q6420read_status_registerEv+0x3c>)
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fa56 	bl	80093ec <_ZN3SPI8transmitEPht>
	mySPIPort.receive(&status, 1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	330c      	adds	r3, #12
 8008f44:	f107 010f 	add.w	r1, r7, #15
 8008f48:	2201      	movs	r2, #1
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fa62 	bl	8009414 <_ZN3SPI7receiveEPht>
	cs_deselect();
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8bc 	bl	80090ce <_ZN6W25Q6411cs_deselectEv>
	return status;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	0800b1e1 	.word	0x0800b1e1

08008f64 <_ZN6W25Q6411block_eraseEm>:
 * @brief Erase a block (64KB) of the W25Q64 flash memory.
 *
 * @param addr The starting address of the block to erase.
 */
void W25Q64::block_erase(uint32_t addr)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
    write_enable();
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff ffc0 	bl	8008ef4 <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f89d 	bl	80090b4 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_BLOCK_ERASE,
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	23d8      	movs	r3, #216	; 0xd8
 8008f80:	733b      	strb	r3, [r7, #12]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	737b      	strb	r3, [r7, #13]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	73bb      	strb	r3, [r7, #14]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	73fb      	strb	r3, [r7, #15]
    mySPIPort.transmit(cmd, 4);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	f107 010c 	add.w	r1, r7, #12
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 fa22 	bl	80093ec <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f890 	bl	80090ce <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f86d 	bl	800908e <_ZN6W25Q6416wait_until_readyEv>
}
 8008fb4:	bf00      	nop
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <_ZN6W25Q6412page_programEmPht>:
 * @param addr The starting address of the page to write.
 * @param data A pointer to the buffer containing the data to be written.
 * @param size The size of the data buffer (must be 256 bytes or less).
 */
void W25Q64::page_program(uint32_t addr, uint8_t *data, uint16_t size)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	807b      	strh	r3, [r7, #2]
    if (size > 256) return; // Ensure that the data size is within the page limit
 8008fca:	887b      	ldrh	r3, [r7, #2]
 8008fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd0:	d82a      	bhi.n	8009028 <_ZN6W25Q6412page_programEmPht+0x6c>

    write_enable();
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff ff8e 	bl	8008ef4 <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f86b 	bl	80090b4 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_PAGE_PROGRAM,
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	75bb      	strb	r3, [r7, #22]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	75fb      	strb	r3, [r7, #23]
    mySPIPort.transmit(cmd, 4);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	330c      	adds	r3, #12
 8009000:	f107 0114 	add.w	r1, r7, #20
 8009004:	2204      	movs	r2, #4
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f9f0 	bl	80093ec <_ZN3SPI8transmitEPht>
    mySPIPort.transmit(data, size);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	330c      	adds	r3, #12
 8009010:	887a      	ldrh	r2, [r7, #2]
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f9e9 	bl	80093ec <_ZN3SPI8transmitEPht>
    cs_deselect();
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 f857 	bl	80090ce <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 f834 	bl	800908e <_ZN6W25Q6416wait_until_readyEv>
 8009026:	e000      	b.n	800902a <_ZN6W25Q6412page_programEmPht+0x6e>
    if (size > 256) return; // Ensure that the data size is within the page limit
 8009028:	bf00      	nop
}
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <_ZN6W25Q649read_dataEmPht>:
 * @param addr The starting address to read from.
 * @param data A pointer to the buffer where the read data will be stored.
 * @param size The number of bytes to read.
 */
void W25Q64::read_data(uint32_t addr, uint8_t *data, uint16_t size)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	807b      	strh	r3, [r7, #2]
    cs_select();
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f838 	bl	80090b4 <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_READ_DATA,
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	2303      	movs	r3, #3
 800904a:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8009050:	b2db      	uxtb	r3, r3
 8009052:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8009058:	b2db      	uxtb	r3, r3
 800905a:	75bb      	strb	r3, [r7, #22]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	75fb      	strb	r3, [r7, #23]
 	mySPIPort.transmit(cmd, 4);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	330c      	adds	r3, #12
 8009066:	f107 0114 	add.w	r1, r7, #20
 800906a:	2204      	movs	r2, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f000 f9bd 	bl	80093ec <_ZN3SPI8transmitEPht>
    mySPIPort.receive(data, size);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	330c      	adds	r3, #12
 8009076:	887a      	ldrh	r2, [r7, #2]
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 f9ca 	bl	8009414 <_ZN3SPI7receiveEPht>
    cs_deselect();
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f824 	bl	80090ce <_ZN6W25Q6411cs_deselectEv>
}
 8009086:	bf00      	nop
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <_ZN6W25Q6416wait_until_readyEv>:
 * @brief Wait for the W25Q64 flash memory to become ready for the next operation.
 *
 * This method polls the status register and waits until the busy bit is cleared.
 */
void W25Q64::wait_until_ready()
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
    uint8_t status;
    do
    {
        status = read_status_register();
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff ff44 	bl	8008f24 <_ZN6W25Q6420read_status_registerEv>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]
    } while (status & STATUS_BUSY_MASK); // Wait until the busy bit (bit 0) is cleared
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d000      	beq.n	80090ac <_ZN6W25Q6416wait_until_readyEv+0x1e>
    do
 80090aa:	e7f4      	b.n	8009096 <_ZN6W25Q6416wait_until_readyEv+0x8>
}
 80090ac:	bf00      	nop
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <_ZN6W25Q649cs_selectEv>:

/* Private methods */
void W25Q64::cs_select()
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	mySPIPort.csLow();
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	330c      	adds	r3, #12
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 f9cb 	bl	800945c <_ZN3SPI5csLowEv>
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <_ZN6W25Q6411cs_deselectEv>:

void W25Q64::cs_deselect()
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
	mySPIPort.csHigh();
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	330c      	adds	r3, #12
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f9ae 	bl	800943c <_ZN3SPI6csHighEv>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <_Z10flash_initv>:

SPI_HandleTypeDef hspi1;
W25Q64 myFlash(&hspi1, GPIOF, GPIO_PIN_13);

int flash_init()
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
	myFlash.init();
 80090ec:	4802      	ldr	r0, [pc, #8]	; (80090f8 <_Z10flash_initv+0x10>)
 80090ee:	f7ff fef2 	bl	8008ed6 <_ZN6W25Q644initEv>
}
 80090f2:	bf00      	nop
 80090f4:	4618      	mov	r0, r3
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	200000ec 	.word	0x200000ec

080090fc <_Z11w25q64_readPK10lfs_configmmPvm>:

int w25q64_read(const struct lfs_config *c, lfs_block_t block,
                lfs_off_t off, void *buffer, lfs_size_t size)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	fb02 f303 	mul.w	r3, r2, r3
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	4413      	add	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
    myFlash.read_data(addr, static_cast<uint8_t *>(buffer), size);
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	b29b      	uxth	r3, r3
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	6979      	ldr	r1, [r7, #20]
 8009122:	4804      	ldr	r0, [pc, #16]	; (8009134 <_Z11w25q64_readPK10lfs_configmmPvm+0x38>)
 8009124:	f7ff ff84 	bl	8009030 <_ZN6W25Q649read_dataEmPht>
    return 0;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	200000ec 	.word	0x200000ec

08009138 <_Z11w25q64_progPK10lfs_configmmPKvm>:

int w25q64_prog(const struct lfs_config *c, lfs_block_t block,
                lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	4413      	add	r3, r2
 8009154:	617b      	str	r3, [r7, #20]
    myFlash.page_program(addr, const_cast<uint8_t *>(static_cast<const uint8_t *>(buffer)), size);
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	b29b      	uxth	r3, r3
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	6979      	ldr	r1, [r7, #20]
 800915e:	4804      	ldr	r0, [pc, #16]	; (8009170 <_Z11w25q64_progPK10lfs_configmmPKvm+0x38>)
 8009160:	f7ff ff2c 	bl	8008fbc <_ZN6W25Q6412page_programEmPht>
    return 0;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	200000ec 	.word	0x200000ec

08009174 <_Z12w25q64_erasePK10lfs_configm>:

int w25q64_erase(const struct lfs_config *c, lfs_block_t block)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
    uint32_t addr = block * c->block_size;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69da      	ldr	r2, [r3, #28]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	fb02 f303 	mul.w	r3, r2, r3
 8009188:	60fb      	str	r3, [r7, #12]
    myFlash.block_erase(addr);
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	4803      	ldr	r0, [pc, #12]	; (800919c <_Z12w25q64_erasePK10lfs_configm+0x28>)
 800918e:	f7ff fee9 	bl	8008f64 <_ZN6W25Q6411block_eraseEm>
    return 0;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	200000ec 	.word	0x200000ec

080091a0 <_Z11w25q64_syncPK10lfs_config>:

int w25q64_sync(const struct lfs_config *c)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
    // Nothing to do since we're not using any caching or buffering
    return 0;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
	...

080091b8 <_Z41__static_initialization_and_destruction_0ii>:
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d10b      	bne.n	80091e0 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d106      	bne.n	80091e0 <_Z41__static_initialization_and_destruction_0ii+0x28>
W25Q64 myFlash(&hspi1, GPIOF, GPIO_PIN_13);
 80091d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091d6:	4a04      	ldr	r2, [pc, #16]	; (80091e8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80091d8:	4904      	ldr	r1, [pc, #16]	; (80091ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80091da:	4805      	ldr	r0, [pc, #20]	; (80091f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80091dc:	f7ff fe5e 	bl	8008e9c <_ZN6W25Q64C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	40021400 	.word	0x40021400
 80091ec:	20000094 	.word	0x20000094
 80091f0:	200000ec 	.word	0x200000ec

080091f4 <_GLOBAL__sub_I_hspi1>:
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80091fc:	2001      	movs	r0, #1
 80091fe:	f7ff ffdb 	bl	80091b8 <_Z41__static_initialization_and_destruction_0ii>
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	; 0x28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800920c:	f107 0314 	add.w	r3, r7, #20
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	605a      	str	r2, [r3, #4]
 8009216:	609a      	str	r2, [r3, #8]
 8009218:	60da      	str	r2, [r3, #12]
 800921a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a28      	ldr	r2, [pc, #160]	; (80092c4 <HAL_SPI_MspInit+0xc0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d149      	bne.n	80092ba <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009226:	2300      	movs	r3, #0
 8009228:	613b      	str	r3, [r7, #16]
 800922a:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 800922c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922e:	4a26      	ldr	r2, [pc, #152]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 8009230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009234:	6453      	str	r3, [r2, #68]	; 0x44
 8009236:	4b24      	ldr	r3, [pc, #144]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 8009238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	4b20      	ldr	r3, [pc, #128]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	4a1f      	ldr	r2, [pc, #124]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 800924c:	f043 0301 	orr.w	r3, r3, #1
 8009250:	6313      	str	r3, [r2, #48]	; 0x30
 8009252:	4b1d      	ldr	r3, [pc, #116]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800925e:	2300      	movs	r3, #0
 8009260:	60bb      	str	r3, [r7, #8]
 8009262:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 8009264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009266:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 8009268:	f043 0302 	orr.w	r3, r3, #2
 800926c:	6313      	str	r3, [r2, #48]	; 0x30
 800926e:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <HAL_SPI_MspInit+0xc4>)
 8009270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800927a:	2360      	movs	r3, #96	; 0x60
 800927c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800927e:	2302      	movs	r3, #2
 8009280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009282:	2300      	movs	r3, #0
 8009284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009286:	2303      	movs	r3, #3
 8009288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800928a:	2305      	movs	r3, #5
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800928e:	f107 0314 	add.w	r3, r7, #20
 8009292:	4619      	mov	r1, r3
 8009294:	480d      	ldr	r0, [pc, #52]	; (80092cc <HAL_SPI_MspInit+0xc8>)
 8009296:	f7f7 ff7b 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800929a:	2320      	movs	r3, #32
 800929c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800929e:	2302      	movs	r3, #2
 80092a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a6:	2303      	movs	r3, #3
 80092a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80092aa:	2305      	movs	r3, #5
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092ae:	f107 0314 	add.w	r3, r7, #20
 80092b2:	4619      	mov	r1, r3
 80092b4:	4806      	ldr	r0, [pc, #24]	; (80092d0 <HAL_SPI_MspInit+0xcc>)
 80092b6:	f7f7 ff6b 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80092ba:	bf00      	nop
 80092bc:	3728      	adds	r7, #40	; 0x28
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40013000 	.word	0x40013000
 80092c8:	40023800 	.word	0x40023800
 80092cc:	40020000 	.word	0x40020000
 80092d0:	40020400 	.word	0x40020400

080092d4 <_ZN3SPIC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDef>:

SPI::SPI(SPI_HandleTypeDef *hspi, uint16_t pin, GPIO_TypeDef *port)
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	80fb      	strh	r3, [r7, #6]
{
	this->hspi_ = hspi;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	601a      	str	r2, [r3, #0]
	this->CSPin = pin;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	88fa      	ldrh	r2, [r7, #6]
 80092ee:	809a      	strh	r2, [r3, #4]
	this->CSPort = port;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	609a      	str	r2, [r3, #8]
}
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <_ZN3SPI4initEv>:

HAL_StatusTypeDef SPI::init()
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

	// Configure CS GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	609a      	str	r2, [r3, #8]
 8009318:	60da      	str	r2, [r3, #12]
 800931a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE(); //TODO add modularity
 800931c:	2300      	movs	r3, #0
 800931e:	60bb      	str	r3, [r7, #8]
 8009320:	4b30      	ldr	r3, [pc, #192]	; (80093e4 <_ZN3SPI4initEv+0xe0>)
 8009322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009324:	4a2f      	ldr	r2, [pc, #188]	; (80093e4 <_ZN3SPI4initEv+0xe0>)
 8009326:	f043 0320 	orr.w	r3, r3, #32
 800932a:	6313      	str	r3, [r2, #48]	; 0x30
 800932c:	4b2d      	ldr	r3, [pc, #180]	; (80093e4 <_ZN3SPI4initEv+0xe0>)
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	60bb      	str	r3, [r7, #8]
 8009336:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = this->CSPin;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	889b      	ldrh	r3, [r3, #4]
 800933c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800933e:	2301      	movs	r3, #1
 8009340:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009346:	2300      	movs	r3, #0
 8009348:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(this->CSPort, &GPIO_InitStruct);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f107 020c 	add.w	r2, r7, #12
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f7f7 ff1b 	bl	8001190 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(this->CSPort, this->CSPin, GPIO_PIN_SET);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6898      	ldr	r0, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	889b      	ldrh	r3, [r3, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	4619      	mov	r1, r3
 8009366:	f7f8 f8bf 	bl	80014e8 <HAL_GPIO_WritePin>

	this->hspi_->Instance = SPI1; //TODO add modularity
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1e      	ldr	r2, [pc, #120]	; (80093e8 <_ZN3SPI4initEv+0xe4>)
 8009370:	601a      	str	r2, [r3, #0]
	this->hspi_->Init.Mode = SPI_MODE_MASTER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f44f 7282 	mov.w	r2, #260	; 0x104
 800937a:	605a      	str	r2, [r3, #4]
	this->hspi_->Init.Direction = SPI_DIRECTION_2LINES;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
	this->hspi_->Init.DataSize = SPI_DATASIZE_8BIT;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2200      	movs	r2, #0
 800938a:	60da      	str	r2, [r3, #12]
	this->hspi_->Init.CLKPolarity = SPI_POLARITY_LOW;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2200      	movs	r2, #0
 8009392:	611a      	str	r2, [r3, #16]
	this->hspi_->Init.CLKPhase = SPI_PHASE_1EDGE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2200      	movs	r2, #0
 800939a:	615a      	str	r2, [r3, #20]
	this->hspi_->Init.NSS = SPI_NSS_SOFT;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093a4:	619a      	str	r2, [r3, #24]
	this->hspi_->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2218      	movs	r2, #24
 80093ac:	61da      	str	r2, [r3, #28]
	this->hspi_->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	621a      	str	r2, [r3, #32]
	this->hspi_->Init.TIMode = SPI_TIMODE_DISABLE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	625a      	str	r2, [r3, #36]	; 0x24
	this->hspi_->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2200      	movs	r2, #0
 80093c4:	629a      	str	r2, [r3, #40]	; 0x28
	this->hspi_->Init.CRCPolynomial = 10;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	220a      	movs	r2, #10
 80093cc:	62da      	str	r2, [r3, #44]	; 0x2c
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
	/* DMA2_Stream3_IRQn interrupt configuration */
	//HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);

	return HAL_SPI_Init(this->hspi_);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7f8 fd06 	bl	8001de4 <HAL_SPI_Init>
 80093d8:	4603      	mov	r3, r0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	40023800 	.word	0x40023800
 80093e8:	40013000 	.word	0x40013000

080093ec <_ZN3SPI8transmitEPht>:

HAL_StatusTypeDef SPI::transmit(uint8_t *pData, uint16_t size)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
	return HAL_SPI_Transmit(this->hspi_, pData, size, HAL_MAX_DELAY);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	88fa      	ldrh	r2, [r7, #6]
 8009400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	f7f8 fd76 	bl	8001ef6 <HAL_SPI_Transmit>
 800940a:	4603      	mov	r3, r0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <_ZN3SPI7receiveEPht>:

HAL_StatusTypeDef SPI::receive(uint8_t *pData, uint16_t size)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	80fb      	strh	r3, [r7, #6]
	return HAL_SPI_Receive(this->hspi_, pData, size, HAL_MAX_DELAY);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	88fa      	ldrh	r2, [r7, #6]
 8009428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800942c:	68b9      	ldr	r1, [r7, #8]
 800942e:	f7f8 fe9e 	bl	800216e <HAL_SPI_Receive>
 8009432:	4603      	mov	r3, r0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <_ZN3SPI6csHighEv>:
{
	return HAL_SPI_TransmitReceive(this->hspi_, pTxData, pRxData, size, HAL_MAX_DELAY);
}

void SPI::csHigh()
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CSPort, this->CSPin, GPIO_PIN_SET);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6898      	ldr	r0, [r3, #8]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	889b      	ldrh	r3, [r3, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	4619      	mov	r1, r3
 8009450:	f7f8 f84a 	bl	80014e8 <HAL_GPIO_WritePin>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_ZN3SPI5csLowEv>:

void SPI::csLow()
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->CSPort, this->CSPin, GPIO_PIN_RESET);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6898      	ldr	r0, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	889b      	ldrh	r3, [r3, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	4619      	mov	r1, r3
 8009470:	f7f8 f83a 	bl	80014e8 <HAL_GPIO_WritePin>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <main_cpp>:

//W25Q64 myFlash(&hspi1, GPIOF, GPIO_PIN_13);
//SPI mySPI(&hspi1, GPIO_PIN_13, GPIOF);

void main_cpp(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b0be      	sub	sp, #248	; 0xf8
 8009480:	af00      	add	r7, sp, #0
		mySPI.transmit(&dummy, 1);
		mySPI.transmit(&dummy, 1);
		mySPI.csHigh();
	}*/

	flash_init();
 8009482:	f7ff fe31 	bl	80090e8 <_Z10flash_initv>

    lfs_t lfs;
    int res = lfs_mount(&lfs, &cfg);
 8009486:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800948a:	4945      	ldr	r1, [pc, #276]	; (80095a0 <main_cpp+0x124>)
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff fbdd 	bl	8008c4c <lfs_mount>
 8009492:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 8009496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949a:	2b00      	cmp	r3, #0
 800949c:	da19      	bge.n	80094d2 <main_cpp+0x56>
        // If the mount fails, try formatting the filesystem
        res = lfs_format(&lfs, &cfg);
 800949e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80094a2:	493f      	ldr	r1, [pc, #252]	; (80095a0 <main_cpp+0x124>)
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff fbbb 	bl	8008c20 <lfs_format>
 80094aa:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
        if (res < 0) {
 80094ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da00      	bge.n	80094b8 <main_cpp+0x3c>
        	while(1);
 80094b6:	e7fe      	b.n	80094b6 <main_cpp+0x3a>
        }
        // Try mounting again
        res = lfs_mount(&lfs, &cfg);
 80094b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80094bc:	4938      	ldr	r1, [pc, #224]	; (80095a0 <main_cpp+0x124>)
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff fbc4 	bl	8008c4c <lfs_mount>
 80094c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
        if (res < 0) {
 80094c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da00      	bge.n	80094d2 <main_cpp+0x56>
        	while(1);
 80094d0:	e7fe      	b.n	80094d0 <main_cpp+0x54>
        }
    }

    // Open the file for writing
    lfs_file_t file;
    res = lfs_file_open(&lfs, &file, "example.txt", LFS_O_WRONLY | LFS_O_CREAT);
 80094d2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80094d6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80094da:	f44f 7381 	mov.w	r3, #258	; 0x102
 80094de:	4a31      	ldr	r2, [pc, #196]	; (80095a4 <main_cpp+0x128>)
 80094e0:	f7ff fbde 	bl	8008ca0 <lfs_file_open>
 80094e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da00      	bge.n	80094f2 <main_cpp+0x76>
    	while(1);
 80094f0:	e7fe      	b.n	80094f0 <main_cpp+0x74>
    }

    // Write some data to the file
    const char *data = "Hello, LittleFS!";
 80094f2:	4b2d      	ldr	r3, [pc, #180]	; (80095a8 <main_cpp+0x12c>)
 80094f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    res = lfs_file_write(&lfs, &file, data, strlen(data));
 80094f8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80094fc:	f7f6 fe78 	bl	80001f0 <strlen>
 8009500:	4603      	mov	r3, r0
 8009502:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009506:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800950a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800950e:	f7ff fc57 	bl	8008dc0 <lfs_file_write>
 8009512:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 8009516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951a:	2b00      	cmp	r3, #0
 800951c:	da00      	bge.n	8009520 <main_cpp+0xa4>
    	while(1);
 800951e:	e7fe      	b.n	800951e <main_cpp+0xa2>
    }

    // Close the file after writing
    lfs_file_close(&lfs, &file);
 8009520:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009524:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009528:	4611      	mov	r1, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff fbec 	bl	8008d08 <lfs_file_close>

    // Open the file for reading
    res = lfs_file_open(&lfs, &file, "example.txt", LFS_O_RDONLY);
 8009530:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009534:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8009538:	2301      	movs	r3, #1
 800953a:	4a1a      	ldr	r2, [pc, #104]	; (80095a4 <main_cpp+0x128>)
 800953c:	f7ff fbb0 	bl	8008ca0 <lfs_file_open>
 8009540:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	2b00      	cmp	r3, #0
 800954a:	da00      	bge.n	800954e <main_cpp+0xd2>
    	while(1);
 800954c:	e7fe      	b.n	800954c <main_cpp+0xd0>
    }

    // Read the data from the file
    char buffer[32];
    res = lfs_file_read(&lfs, &file, buffer, sizeof(buffer));
 800954e:	1d3a      	adds	r2, r7, #4
 8009550:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009554:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8009558:	2320      	movs	r3, #32
 800955a:	f7ff fc01 	bl	8008d60 <lfs_file_read>
 800955e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 8009562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009566:	2b00      	cmp	r3, #0
 8009568:	da00      	bge.n	800956c <main_cpp+0xf0>
        while(1);
 800956a:	e7fe      	b.n	800956a <main_cpp+0xee>
    }

    // Null-terminate the read data
    buffer[res] = '\0';
 800956c:	1d3a      	adds	r2, r7, #4
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009572:	4413      	add	r3, r2
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]

    // Print the read data
    printf("Read data: %s\n", buffer);
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	4619      	mov	r1, r3
 800957c:	480b      	ldr	r0, [pc, #44]	; (80095ac <main_cpp+0x130>)
 800957e:	f000 fc75 	bl	8009e6c <iprintf>

    // Close the file after reading
    lfs_file_close(&lfs, &file);
 8009582:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009586:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fbbb 	bl	8008d08 <lfs_file_close>

    // Unmount the filesystem
    lfs_unmount(&lfs);
 8009592:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fb6e 	bl	8008c78 <lfs_unmount>

    while(1);
 800959c:	e7fe      	b.n	800959c <main_cpp+0x120>
 800959e:	bf00      	nop
 80095a0:	0800b1e4 	.word	0x0800b1e4
 80095a4:	0800b030 	.word	0x0800b030
 80095a8:	0800b03c 	.word	0x0800b03c
 80095ac:	0800b050 	.word	0x0800b050

080095b0 <__assert_func>:
 80095b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095b2:	4614      	mov	r4, r2
 80095b4:	461a      	mov	r2, r3
 80095b6:	4b09      	ldr	r3, [pc, #36]	; (80095dc <__assert_func+0x2c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4605      	mov	r5, r0
 80095bc:	68d8      	ldr	r0, [r3, #12]
 80095be:	b14c      	cbz	r4, 80095d4 <__assert_func+0x24>
 80095c0:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <__assert_func+0x30>)
 80095c2:	9100      	str	r1, [sp, #0]
 80095c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095c8:	4906      	ldr	r1, [pc, #24]	; (80095e4 <__assert_func+0x34>)
 80095ca:	462b      	mov	r3, r5
 80095cc:	f000 f814 	bl	80095f8 <fiprintf>
 80095d0:	f000 fd62 	bl	800a098 <abort>
 80095d4:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <__assert_func+0x38>)
 80095d6:	461c      	mov	r4, r3
 80095d8:	e7f3      	b.n	80095c2 <__assert_func+0x12>
 80095da:	bf00      	nop
 80095dc:	2000000c 	.word	0x2000000c
 80095e0:	0800b230 	.word	0x0800b230
 80095e4:	0800b23d 	.word	0x0800b23d
 80095e8:	0800b26b 	.word	0x0800b26b

080095ec <__errno>:
 80095ec:	4b01      	ldr	r3, [pc, #4]	; (80095f4 <__errno+0x8>)
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	2000000c 	.word	0x2000000c

080095f8 <fiprintf>:
 80095f8:	b40e      	push	{r1, r2, r3}
 80095fa:	b503      	push	{r0, r1, lr}
 80095fc:	4601      	mov	r1, r0
 80095fe:	ab03      	add	r3, sp, #12
 8009600:	4805      	ldr	r0, [pc, #20]	; (8009618 <fiprintf+0x20>)
 8009602:	f853 2b04 	ldr.w	r2, [r3], #4
 8009606:	6800      	ldr	r0, [r0, #0]
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	f000 f96b 	bl	80098e4 <_vfiprintf_r>
 800960e:	b002      	add	sp, #8
 8009610:	f85d eb04 	ldr.w	lr, [sp], #4
 8009614:	b003      	add	sp, #12
 8009616:	4770      	bx	lr
 8009618:	2000000c 	.word	0x2000000c

0800961c <__libc_init_array>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	4d0d      	ldr	r5, [pc, #52]	; (8009654 <__libc_init_array+0x38>)
 8009620:	4c0d      	ldr	r4, [pc, #52]	; (8009658 <__libc_init_array+0x3c>)
 8009622:	1b64      	subs	r4, r4, r5
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	2600      	movs	r6, #0
 8009628:	42a6      	cmp	r6, r4
 800962a:	d109      	bne.n	8009640 <__libc_init_array+0x24>
 800962c:	4d0b      	ldr	r5, [pc, #44]	; (800965c <__libc_init_array+0x40>)
 800962e:	4c0c      	ldr	r4, [pc, #48]	; (8009660 <__libc_init_array+0x44>)
 8009630:	f001 f856 	bl	800a6e0 <_init>
 8009634:	1b64      	subs	r4, r4, r5
 8009636:	10a4      	asrs	r4, r4, #2
 8009638:	2600      	movs	r6, #0
 800963a:	42a6      	cmp	r6, r4
 800963c:	d105      	bne.n	800964a <__libc_init_array+0x2e>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	f855 3b04 	ldr.w	r3, [r5], #4
 8009644:	4798      	blx	r3
 8009646:	3601      	adds	r6, #1
 8009648:	e7ee      	b.n	8009628 <__libc_init_array+0xc>
 800964a:	f855 3b04 	ldr.w	r3, [r5], #4
 800964e:	4798      	blx	r3
 8009650:	3601      	adds	r6, #1
 8009652:	e7f2      	b.n	800963a <__libc_init_array+0x1e>
 8009654:	0800b30c 	.word	0x0800b30c
 8009658:	0800b30c 	.word	0x0800b30c
 800965c:	0800b30c 	.word	0x0800b30c
 8009660:	0800b314 	.word	0x0800b314

08009664 <malloc>:
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <malloc+0xc>)
 8009666:	4601      	mov	r1, r0
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f000 b89d 	b.w	80097a8 <_malloc_r>
 800966e:	bf00      	nop
 8009670:	2000000c 	.word	0x2000000c

08009674 <free>:
 8009674:	4b02      	ldr	r3, [pc, #8]	; (8009680 <free+0xc>)
 8009676:	4601      	mov	r1, r0
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	f000 b829 	b.w	80096d0 <_free_r>
 800967e:	bf00      	nop
 8009680:	2000000c 	.word	0x2000000c

08009684 <memcmp>:
 8009684:	b510      	push	{r4, lr}
 8009686:	3901      	subs	r1, #1
 8009688:	4402      	add	r2, r0
 800968a:	4290      	cmp	r0, r2
 800968c:	d101      	bne.n	8009692 <memcmp+0xe>
 800968e:	2000      	movs	r0, #0
 8009690:	e005      	b.n	800969e <memcmp+0x1a>
 8009692:	7803      	ldrb	r3, [r0, #0]
 8009694:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009698:	42a3      	cmp	r3, r4
 800969a:	d001      	beq.n	80096a0 <memcmp+0x1c>
 800969c:	1b18      	subs	r0, r3, r4
 800969e:	bd10      	pop	{r4, pc}
 80096a0:	3001      	adds	r0, #1
 80096a2:	e7f2      	b.n	800968a <memcmp+0x6>

080096a4 <memcpy>:
 80096a4:	440a      	add	r2, r1
 80096a6:	4291      	cmp	r1, r2
 80096a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096ac:	d100      	bne.n	80096b0 <memcpy+0xc>
 80096ae:	4770      	bx	lr
 80096b0:	b510      	push	{r4, lr}
 80096b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ba:	4291      	cmp	r1, r2
 80096bc:	d1f9      	bne.n	80096b2 <memcpy+0xe>
 80096be:	bd10      	pop	{r4, pc}

080096c0 <memset>:
 80096c0:	4402      	add	r2, r0
 80096c2:	4603      	mov	r3, r0
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d100      	bne.n	80096ca <memset+0xa>
 80096c8:	4770      	bx	lr
 80096ca:	f803 1b01 	strb.w	r1, [r3], #1
 80096ce:	e7f9      	b.n	80096c4 <memset+0x4>

080096d0 <_free_r>:
 80096d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096d2:	2900      	cmp	r1, #0
 80096d4:	d044      	beq.n	8009760 <_free_r+0x90>
 80096d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096da:	9001      	str	r0, [sp, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f1a1 0404 	sub.w	r4, r1, #4
 80096e2:	bfb8      	it	lt
 80096e4:	18e4      	addlt	r4, r4, r3
 80096e6:	f000 feff 	bl	800a4e8 <__malloc_lock>
 80096ea:	4a1e      	ldr	r2, [pc, #120]	; (8009764 <_free_r+0x94>)
 80096ec:	9801      	ldr	r0, [sp, #4]
 80096ee:	6813      	ldr	r3, [r2, #0]
 80096f0:	b933      	cbnz	r3, 8009700 <_free_r+0x30>
 80096f2:	6063      	str	r3, [r4, #4]
 80096f4:	6014      	str	r4, [r2, #0]
 80096f6:	b003      	add	sp, #12
 80096f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096fc:	f000 befa 	b.w	800a4f4 <__malloc_unlock>
 8009700:	42a3      	cmp	r3, r4
 8009702:	d908      	bls.n	8009716 <_free_r+0x46>
 8009704:	6825      	ldr	r5, [r4, #0]
 8009706:	1961      	adds	r1, r4, r5
 8009708:	428b      	cmp	r3, r1
 800970a:	bf01      	itttt	eq
 800970c:	6819      	ldreq	r1, [r3, #0]
 800970e:	685b      	ldreq	r3, [r3, #4]
 8009710:	1949      	addeq	r1, r1, r5
 8009712:	6021      	streq	r1, [r4, #0]
 8009714:	e7ed      	b.n	80096f2 <_free_r+0x22>
 8009716:	461a      	mov	r2, r3
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	b10b      	cbz	r3, 8009720 <_free_r+0x50>
 800971c:	42a3      	cmp	r3, r4
 800971e:	d9fa      	bls.n	8009716 <_free_r+0x46>
 8009720:	6811      	ldr	r1, [r2, #0]
 8009722:	1855      	adds	r5, r2, r1
 8009724:	42a5      	cmp	r5, r4
 8009726:	d10b      	bne.n	8009740 <_free_r+0x70>
 8009728:	6824      	ldr	r4, [r4, #0]
 800972a:	4421      	add	r1, r4
 800972c:	1854      	adds	r4, r2, r1
 800972e:	42a3      	cmp	r3, r4
 8009730:	6011      	str	r1, [r2, #0]
 8009732:	d1e0      	bne.n	80096f6 <_free_r+0x26>
 8009734:	681c      	ldr	r4, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	6053      	str	r3, [r2, #4]
 800973a:	4421      	add	r1, r4
 800973c:	6011      	str	r1, [r2, #0]
 800973e:	e7da      	b.n	80096f6 <_free_r+0x26>
 8009740:	d902      	bls.n	8009748 <_free_r+0x78>
 8009742:	230c      	movs	r3, #12
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	e7d6      	b.n	80096f6 <_free_r+0x26>
 8009748:	6825      	ldr	r5, [r4, #0]
 800974a:	1961      	adds	r1, r4, r5
 800974c:	428b      	cmp	r3, r1
 800974e:	bf04      	itt	eq
 8009750:	6819      	ldreq	r1, [r3, #0]
 8009752:	685b      	ldreq	r3, [r3, #4]
 8009754:	6063      	str	r3, [r4, #4]
 8009756:	bf04      	itt	eq
 8009758:	1949      	addeq	r1, r1, r5
 800975a:	6021      	streq	r1, [r4, #0]
 800975c:	6054      	str	r4, [r2, #4]
 800975e:	e7ca      	b.n	80096f6 <_free_r+0x26>
 8009760:	b003      	add	sp, #12
 8009762:	bd30      	pop	{r4, r5, pc}
 8009764:	200001c4 	.word	0x200001c4

08009768 <sbrk_aligned>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4e0e      	ldr	r6, [pc, #56]	; (80097a4 <sbrk_aligned+0x3c>)
 800976c:	460c      	mov	r4, r1
 800976e:	6831      	ldr	r1, [r6, #0]
 8009770:	4605      	mov	r5, r0
 8009772:	b911      	cbnz	r1, 800977a <sbrk_aligned+0x12>
 8009774:	f000 fb92 	bl	8009e9c <_sbrk_r>
 8009778:	6030      	str	r0, [r6, #0]
 800977a:	4621      	mov	r1, r4
 800977c:	4628      	mov	r0, r5
 800977e:	f000 fb8d 	bl	8009e9c <_sbrk_r>
 8009782:	1c43      	adds	r3, r0, #1
 8009784:	d00a      	beq.n	800979c <sbrk_aligned+0x34>
 8009786:	1cc4      	adds	r4, r0, #3
 8009788:	f024 0403 	bic.w	r4, r4, #3
 800978c:	42a0      	cmp	r0, r4
 800978e:	d007      	beq.n	80097a0 <sbrk_aligned+0x38>
 8009790:	1a21      	subs	r1, r4, r0
 8009792:	4628      	mov	r0, r5
 8009794:	f000 fb82 	bl	8009e9c <_sbrk_r>
 8009798:	3001      	adds	r0, #1
 800979a:	d101      	bne.n	80097a0 <sbrk_aligned+0x38>
 800979c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80097a0:	4620      	mov	r0, r4
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	200001c8 	.word	0x200001c8

080097a8 <_malloc_r>:
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	1ccd      	adds	r5, r1, #3
 80097ae:	f025 0503 	bic.w	r5, r5, #3
 80097b2:	3508      	adds	r5, #8
 80097b4:	2d0c      	cmp	r5, #12
 80097b6:	bf38      	it	cc
 80097b8:	250c      	movcc	r5, #12
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	4607      	mov	r7, r0
 80097be:	db01      	blt.n	80097c4 <_malloc_r+0x1c>
 80097c0:	42a9      	cmp	r1, r5
 80097c2:	d905      	bls.n	80097d0 <_malloc_r+0x28>
 80097c4:	230c      	movs	r3, #12
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	2600      	movs	r6, #0
 80097ca:	4630      	mov	r0, r6
 80097cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d0:	4e2e      	ldr	r6, [pc, #184]	; (800988c <_malloc_r+0xe4>)
 80097d2:	f000 fe89 	bl	800a4e8 <__malloc_lock>
 80097d6:	6833      	ldr	r3, [r6, #0]
 80097d8:	461c      	mov	r4, r3
 80097da:	bb34      	cbnz	r4, 800982a <_malloc_r+0x82>
 80097dc:	4629      	mov	r1, r5
 80097de:	4638      	mov	r0, r7
 80097e0:	f7ff ffc2 	bl	8009768 <sbrk_aligned>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	4604      	mov	r4, r0
 80097e8:	d14d      	bne.n	8009886 <_malloc_r+0xde>
 80097ea:	6834      	ldr	r4, [r6, #0]
 80097ec:	4626      	mov	r6, r4
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	d140      	bne.n	8009874 <_malloc_r+0xcc>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	4631      	mov	r1, r6
 80097f6:	4638      	mov	r0, r7
 80097f8:	eb04 0803 	add.w	r8, r4, r3
 80097fc:	f000 fb4e 	bl	8009e9c <_sbrk_r>
 8009800:	4580      	cmp	r8, r0
 8009802:	d13a      	bne.n	800987a <_malloc_r+0xd2>
 8009804:	6821      	ldr	r1, [r4, #0]
 8009806:	3503      	adds	r5, #3
 8009808:	1a6d      	subs	r5, r5, r1
 800980a:	f025 0503 	bic.w	r5, r5, #3
 800980e:	3508      	adds	r5, #8
 8009810:	2d0c      	cmp	r5, #12
 8009812:	bf38      	it	cc
 8009814:	250c      	movcc	r5, #12
 8009816:	4629      	mov	r1, r5
 8009818:	4638      	mov	r0, r7
 800981a:	f7ff ffa5 	bl	8009768 <sbrk_aligned>
 800981e:	3001      	adds	r0, #1
 8009820:	d02b      	beq.n	800987a <_malloc_r+0xd2>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	442b      	add	r3, r5
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	e00e      	b.n	8009848 <_malloc_r+0xa0>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	1b52      	subs	r2, r2, r5
 800982e:	d41e      	bmi.n	800986e <_malloc_r+0xc6>
 8009830:	2a0b      	cmp	r2, #11
 8009832:	d916      	bls.n	8009862 <_malloc_r+0xba>
 8009834:	1961      	adds	r1, r4, r5
 8009836:	42a3      	cmp	r3, r4
 8009838:	6025      	str	r5, [r4, #0]
 800983a:	bf18      	it	ne
 800983c:	6059      	strne	r1, [r3, #4]
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	bf08      	it	eq
 8009842:	6031      	streq	r1, [r6, #0]
 8009844:	5162      	str	r2, [r4, r5]
 8009846:	604b      	str	r3, [r1, #4]
 8009848:	4638      	mov	r0, r7
 800984a:	f104 060b 	add.w	r6, r4, #11
 800984e:	f000 fe51 	bl	800a4f4 <__malloc_unlock>
 8009852:	f026 0607 	bic.w	r6, r6, #7
 8009856:	1d23      	adds	r3, r4, #4
 8009858:	1af2      	subs	r2, r6, r3
 800985a:	d0b6      	beq.n	80097ca <_malloc_r+0x22>
 800985c:	1b9b      	subs	r3, r3, r6
 800985e:	50a3      	str	r3, [r4, r2]
 8009860:	e7b3      	b.n	80097ca <_malloc_r+0x22>
 8009862:	6862      	ldr	r2, [r4, #4]
 8009864:	42a3      	cmp	r3, r4
 8009866:	bf0c      	ite	eq
 8009868:	6032      	streq	r2, [r6, #0]
 800986a:	605a      	strne	r2, [r3, #4]
 800986c:	e7ec      	b.n	8009848 <_malloc_r+0xa0>
 800986e:	4623      	mov	r3, r4
 8009870:	6864      	ldr	r4, [r4, #4]
 8009872:	e7b2      	b.n	80097da <_malloc_r+0x32>
 8009874:	4634      	mov	r4, r6
 8009876:	6876      	ldr	r6, [r6, #4]
 8009878:	e7b9      	b.n	80097ee <_malloc_r+0x46>
 800987a:	230c      	movs	r3, #12
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	4638      	mov	r0, r7
 8009880:	f000 fe38 	bl	800a4f4 <__malloc_unlock>
 8009884:	e7a1      	b.n	80097ca <_malloc_r+0x22>
 8009886:	6025      	str	r5, [r4, #0]
 8009888:	e7de      	b.n	8009848 <_malloc_r+0xa0>
 800988a:	bf00      	nop
 800988c:	200001c4 	.word	0x200001c4

08009890 <__sfputc_r>:
 8009890:	6893      	ldr	r3, [r2, #8]
 8009892:	3b01      	subs	r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	b410      	push	{r4}
 8009898:	6093      	str	r3, [r2, #8]
 800989a:	da08      	bge.n	80098ae <__sfputc_r+0x1e>
 800989c:	6994      	ldr	r4, [r2, #24]
 800989e:	42a3      	cmp	r3, r4
 80098a0:	db01      	blt.n	80098a6 <__sfputc_r+0x16>
 80098a2:	290a      	cmp	r1, #10
 80098a4:	d103      	bne.n	80098ae <__sfputc_r+0x1e>
 80098a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098aa:	f000 bb35 	b.w	8009f18 <__swbuf_r>
 80098ae:	6813      	ldr	r3, [r2, #0]
 80098b0:	1c58      	adds	r0, r3, #1
 80098b2:	6010      	str	r0, [r2, #0]
 80098b4:	7019      	strb	r1, [r3, #0]
 80098b6:	4608      	mov	r0, r1
 80098b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098bc:	4770      	bx	lr

080098be <__sfputs_r>:
 80098be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c0:	4606      	mov	r6, r0
 80098c2:	460f      	mov	r7, r1
 80098c4:	4614      	mov	r4, r2
 80098c6:	18d5      	adds	r5, r2, r3
 80098c8:	42ac      	cmp	r4, r5
 80098ca:	d101      	bne.n	80098d0 <__sfputs_r+0x12>
 80098cc:	2000      	movs	r0, #0
 80098ce:	e007      	b.n	80098e0 <__sfputs_r+0x22>
 80098d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d4:	463a      	mov	r2, r7
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7ff ffda 	bl	8009890 <__sfputc_r>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d1f3      	bne.n	80098c8 <__sfputs_r+0xa>
 80098e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098e4 <_vfiprintf_r>:
 80098e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	460d      	mov	r5, r1
 80098ea:	b09d      	sub	sp, #116	; 0x74
 80098ec:	4614      	mov	r4, r2
 80098ee:	4698      	mov	r8, r3
 80098f0:	4606      	mov	r6, r0
 80098f2:	b118      	cbz	r0, 80098fc <_vfiprintf_r+0x18>
 80098f4:	6983      	ldr	r3, [r0, #24]
 80098f6:	b90b      	cbnz	r3, 80098fc <_vfiprintf_r+0x18>
 80098f8:	f000 fcf0 	bl	800a2dc <__sinit>
 80098fc:	4b89      	ldr	r3, [pc, #548]	; (8009b24 <_vfiprintf_r+0x240>)
 80098fe:	429d      	cmp	r5, r3
 8009900:	d11b      	bne.n	800993a <_vfiprintf_r+0x56>
 8009902:	6875      	ldr	r5, [r6, #4]
 8009904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009906:	07d9      	lsls	r1, r3, #31
 8009908:	d405      	bmi.n	8009916 <_vfiprintf_r+0x32>
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	059a      	lsls	r2, r3, #22
 800990e:	d402      	bmi.n	8009916 <_vfiprintf_r+0x32>
 8009910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009912:	f000 fd81 	bl	800a418 <__retarget_lock_acquire_recursive>
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	071b      	lsls	r3, r3, #28
 800991a:	d501      	bpl.n	8009920 <_vfiprintf_r+0x3c>
 800991c:	692b      	ldr	r3, [r5, #16]
 800991e:	b9eb      	cbnz	r3, 800995c <_vfiprintf_r+0x78>
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f000 fb4a 	bl	8009fbc <__swsetup_r>
 8009928:	b1c0      	cbz	r0, 800995c <_vfiprintf_r+0x78>
 800992a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800992c:	07dc      	lsls	r4, r3, #31
 800992e:	d50e      	bpl.n	800994e <_vfiprintf_r+0x6a>
 8009930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009934:	b01d      	add	sp, #116	; 0x74
 8009936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993a:	4b7b      	ldr	r3, [pc, #492]	; (8009b28 <_vfiprintf_r+0x244>)
 800993c:	429d      	cmp	r5, r3
 800993e:	d101      	bne.n	8009944 <_vfiprintf_r+0x60>
 8009940:	68b5      	ldr	r5, [r6, #8]
 8009942:	e7df      	b.n	8009904 <_vfiprintf_r+0x20>
 8009944:	4b79      	ldr	r3, [pc, #484]	; (8009b2c <_vfiprintf_r+0x248>)
 8009946:	429d      	cmp	r5, r3
 8009948:	bf08      	it	eq
 800994a:	68f5      	ldreq	r5, [r6, #12]
 800994c:	e7da      	b.n	8009904 <_vfiprintf_r+0x20>
 800994e:	89ab      	ldrh	r3, [r5, #12]
 8009950:	0598      	lsls	r0, r3, #22
 8009952:	d4ed      	bmi.n	8009930 <_vfiprintf_r+0x4c>
 8009954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009956:	f000 fd60 	bl	800a41a <__retarget_lock_release_recursive>
 800995a:	e7e9      	b.n	8009930 <_vfiprintf_r+0x4c>
 800995c:	2300      	movs	r3, #0
 800995e:	9309      	str	r3, [sp, #36]	; 0x24
 8009960:	2320      	movs	r3, #32
 8009962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009966:	f8cd 800c 	str.w	r8, [sp, #12]
 800996a:	2330      	movs	r3, #48	; 0x30
 800996c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b30 <_vfiprintf_r+0x24c>
 8009970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009974:	f04f 0901 	mov.w	r9, #1
 8009978:	4623      	mov	r3, r4
 800997a:	469a      	mov	sl, r3
 800997c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009980:	b10a      	cbz	r2, 8009986 <_vfiprintf_r+0xa2>
 8009982:	2a25      	cmp	r2, #37	; 0x25
 8009984:	d1f9      	bne.n	800997a <_vfiprintf_r+0x96>
 8009986:	ebba 0b04 	subs.w	fp, sl, r4
 800998a:	d00b      	beq.n	80099a4 <_vfiprintf_r+0xc0>
 800998c:	465b      	mov	r3, fp
 800998e:	4622      	mov	r2, r4
 8009990:	4629      	mov	r1, r5
 8009992:	4630      	mov	r0, r6
 8009994:	f7ff ff93 	bl	80098be <__sfputs_r>
 8009998:	3001      	adds	r0, #1
 800999a:	f000 80aa 	beq.w	8009af2 <_vfiprintf_r+0x20e>
 800999e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099a0:	445a      	add	r2, fp
 80099a2:	9209      	str	r2, [sp, #36]	; 0x24
 80099a4:	f89a 3000 	ldrb.w	r3, [sl]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 80a2 	beq.w	8009af2 <_vfiprintf_r+0x20e>
 80099ae:	2300      	movs	r3, #0
 80099b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b8:	f10a 0a01 	add.w	sl, sl, #1
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	9307      	str	r3, [sp, #28]
 80099c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099c4:	931a      	str	r3, [sp, #104]	; 0x68
 80099c6:	4654      	mov	r4, sl
 80099c8:	2205      	movs	r2, #5
 80099ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ce:	4858      	ldr	r0, [pc, #352]	; (8009b30 <_vfiprintf_r+0x24c>)
 80099d0:	f7f6 fc16 	bl	8000200 <memchr>
 80099d4:	9a04      	ldr	r2, [sp, #16]
 80099d6:	b9d8      	cbnz	r0, 8009a10 <_vfiprintf_r+0x12c>
 80099d8:	06d1      	lsls	r1, r2, #27
 80099da:	bf44      	itt	mi
 80099dc:	2320      	movmi	r3, #32
 80099de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e2:	0713      	lsls	r3, r2, #28
 80099e4:	bf44      	itt	mi
 80099e6:	232b      	movmi	r3, #43	; 0x2b
 80099e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ec:	f89a 3000 	ldrb.w	r3, [sl]
 80099f0:	2b2a      	cmp	r3, #42	; 0x2a
 80099f2:	d015      	beq.n	8009a20 <_vfiprintf_r+0x13c>
 80099f4:	9a07      	ldr	r2, [sp, #28]
 80099f6:	4654      	mov	r4, sl
 80099f8:	2000      	movs	r0, #0
 80099fa:	f04f 0c0a 	mov.w	ip, #10
 80099fe:	4621      	mov	r1, r4
 8009a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a04:	3b30      	subs	r3, #48	; 0x30
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d94e      	bls.n	8009aa8 <_vfiprintf_r+0x1c4>
 8009a0a:	b1b0      	cbz	r0, 8009a3a <_vfiprintf_r+0x156>
 8009a0c:	9207      	str	r2, [sp, #28]
 8009a0e:	e014      	b.n	8009a3a <_vfiprintf_r+0x156>
 8009a10:	eba0 0308 	sub.w	r3, r0, r8
 8009a14:	fa09 f303 	lsl.w	r3, r9, r3
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	46a2      	mov	sl, r4
 8009a1e:	e7d2      	b.n	80099c6 <_vfiprintf_r+0xe2>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	1d19      	adds	r1, r3, #4
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	9103      	str	r1, [sp, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	bfbb      	ittet	lt
 8009a2c:	425b      	neglt	r3, r3
 8009a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a32:	9307      	strge	r3, [sp, #28]
 8009a34:	9307      	strlt	r3, [sp, #28]
 8009a36:	bfb8      	it	lt
 8009a38:	9204      	strlt	r2, [sp, #16]
 8009a3a:	7823      	ldrb	r3, [r4, #0]
 8009a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3e:	d10c      	bne.n	8009a5a <_vfiprintf_r+0x176>
 8009a40:	7863      	ldrb	r3, [r4, #1]
 8009a42:	2b2a      	cmp	r3, #42	; 0x2a
 8009a44:	d135      	bne.n	8009ab2 <_vfiprintf_r+0x1ce>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	1d1a      	adds	r2, r3, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	9203      	str	r2, [sp, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfb8      	it	lt
 8009a52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a56:	3402      	adds	r4, #2
 8009a58:	9305      	str	r3, [sp, #20]
 8009a5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b40 <_vfiprintf_r+0x25c>
 8009a5e:	7821      	ldrb	r1, [r4, #0]
 8009a60:	2203      	movs	r2, #3
 8009a62:	4650      	mov	r0, sl
 8009a64:	f7f6 fbcc 	bl	8000200 <memchr>
 8009a68:	b140      	cbz	r0, 8009a7c <_vfiprintf_r+0x198>
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	eba0 000a 	sub.w	r0, r0, sl
 8009a70:	fa03 f000 	lsl.w	r0, r3, r0
 8009a74:	9b04      	ldr	r3, [sp, #16]
 8009a76:	4303      	orrs	r3, r0
 8009a78:	3401      	adds	r4, #1
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a80:	482c      	ldr	r0, [pc, #176]	; (8009b34 <_vfiprintf_r+0x250>)
 8009a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a86:	2206      	movs	r2, #6
 8009a88:	f7f6 fbba 	bl	8000200 <memchr>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d03f      	beq.n	8009b10 <_vfiprintf_r+0x22c>
 8009a90:	4b29      	ldr	r3, [pc, #164]	; (8009b38 <_vfiprintf_r+0x254>)
 8009a92:	bb1b      	cbnz	r3, 8009adc <_vfiprintf_r+0x1f8>
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	3307      	adds	r3, #7
 8009a98:	f023 0307 	bic.w	r3, r3, #7
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	9303      	str	r3, [sp, #12]
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	443b      	add	r3, r7
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	e767      	b.n	8009978 <_vfiprintf_r+0x94>
 8009aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aac:	460c      	mov	r4, r1
 8009aae:	2001      	movs	r0, #1
 8009ab0:	e7a5      	b.n	80099fe <_vfiprintf_r+0x11a>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	3401      	adds	r4, #1
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f04f 0c0a 	mov.w	ip, #10
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac4:	3a30      	subs	r2, #48	; 0x30
 8009ac6:	2a09      	cmp	r2, #9
 8009ac8:	d903      	bls.n	8009ad2 <_vfiprintf_r+0x1ee>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0c5      	beq.n	8009a5a <_vfiprintf_r+0x176>
 8009ace:	9105      	str	r1, [sp, #20]
 8009ad0:	e7c3      	b.n	8009a5a <_vfiprintf_r+0x176>
 8009ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e7f0      	b.n	8009abe <_vfiprintf_r+0x1da>
 8009adc:	ab03      	add	r3, sp, #12
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	462a      	mov	r2, r5
 8009ae2:	4b16      	ldr	r3, [pc, #88]	; (8009b3c <_vfiprintf_r+0x258>)
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f3af 8000 	nop.w
 8009aec:	4607      	mov	r7, r0
 8009aee:	1c78      	adds	r0, r7, #1
 8009af0:	d1d6      	bne.n	8009aa0 <_vfiprintf_r+0x1bc>
 8009af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af4:	07d9      	lsls	r1, r3, #31
 8009af6:	d405      	bmi.n	8009b04 <_vfiprintf_r+0x220>
 8009af8:	89ab      	ldrh	r3, [r5, #12]
 8009afa:	059a      	lsls	r2, r3, #22
 8009afc:	d402      	bmi.n	8009b04 <_vfiprintf_r+0x220>
 8009afe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b00:	f000 fc8b 	bl	800a41a <__retarget_lock_release_recursive>
 8009b04:	89ab      	ldrh	r3, [r5, #12]
 8009b06:	065b      	lsls	r3, r3, #25
 8009b08:	f53f af12 	bmi.w	8009930 <_vfiprintf_r+0x4c>
 8009b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b0e:	e711      	b.n	8009934 <_vfiprintf_r+0x50>
 8009b10:	ab03      	add	r3, sp, #12
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	462a      	mov	r2, r5
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <_vfiprintf_r+0x258>)
 8009b18:	a904      	add	r1, sp, #16
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 f880 	bl	8009c20 <_printf_i>
 8009b20:	e7e4      	b.n	8009aec <_vfiprintf_r+0x208>
 8009b22:	bf00      	nop
 8009b24:	0800b2c4 	.word	0x0800b2c4
 8009b28:	0800b2e4 	.word	0x0800b2e4
 8009b2c:	0800b2a4 	.word	0x0800b2a4
 8009b30:	0800b270 	.word	0x0800b270
 8009b34:	0800b27a 	.word	0x0800b27a
 8009b38:	00000000 	.word	0x00000000
 8009b3c:	080098bf 	.word	0x080098bf
 8009b40:	0800b276 	.word	0x0800b276

08009b44 <_printf_common>:
 8009b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b48:	4616      	mov	r6, r2
 8009b4a:	4699      	mov	r9, r3
 8009b4c:	688a      	ldr	r2, [r1, #8]
 8009b4e:	690b      	ldr	r3, [r1, #16]
 8009b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b54:	4293      	cmp	r3, r2
 8009b56:	bfb8      	it	lt
 8009b58:	4613      	movlt	r3, r2
 8009b5a:	6033      	str	r3, [r6, #0]
 8009b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b60:	4607      	mov	r7, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	b10a      	cbz	r2, 8009b6a <_printf_common+0x26>
 8009b66:	3301      	adds	r3, #1
 8009b68:	6033      	str	r3, [r6, #0]
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	0699      	lsls	r1, r3, #26
 8009b6e:	bf42      	ittt	mi
 8009b70:	6833      	ldrmi	r3, [r6, #0]
 8009b72:	3302      	addmi	r3, #2
 8009b74:	6033      	strmi	r3, [r6, #0]
 8009b76:	6825      	ldr	r5, [r4, #0]
 8009b78:	f015 0506 	ands.w	r5, r5, #6
 8009b7c:	d106      	bne.n	8009b8c <_printf_common+0x48>
 8009b7e:	f104 0a19 	add.w	sl, r4, #25
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	6832      	ldr	r2, [r6, #0]
 8009b86:	1a9b      	subs	r3, r3, r2
 8009b88:	42ab      	cmp	r3, r5
 8009b8a:	dc26      	bgt.n	8009bda <_printf_common+0x96>
 8009b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b90:	1e13      	subs	r3, r2, #0
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	bf18      	it	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	0692      	lsls	r2, r2, #26
 8009b9a:	d42b      	bmi.n	8009bf4 <_printf_common+0xb0>
 8009b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	47c0      	blx	r8
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d01e      	beq.n	8009be8 <_printf_common+0xa4>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	68e5      	ldr	r5, [r4, #12]
 8009bae:	6832      	ldr	r2, [r6, #0]
 8009bb0:	f003 0306 	and.w	r3, r3, #6
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	bf08      	it	eq
 8009bb8:	1aad      	subeq	r5, r5, r2
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	6922      	ldr	r2, [r4, #16]
 8009bbe:	bf0c      	ite	eq
 8009bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bc4:	2500      	movne	r5, #0
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	bfc4      	itt	gt
 8009bca:	1a9b      	subgt	r3, r3, r2
 8009bcc:	18ed      	addgt	r5, r5, r3
 8009bce:	2600      	movs	r6, #0
 8009bd0:	341a      	adds	r4, #26
 8009bd2:	42b5      	cmp	r5, r6
 8009bd4:	d11a      	bne.n	8009c0c <_printf_common+0xc8>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	e008      	b.n	8009bec <_printf_common+0xa8>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4652      	mov	r2, sl
 8009bde:	4649      	mov	r1, r9
 8009be0:	4638      	mov	r0, r7
 8009be2:	47c0      	blx	r8
 8009be4:	3001      	adds	r0, #1
 8009be6:	d103      	bne.n	8009bf0 <_printf_common+0xac>
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf0:	3501      	adds	r5, #1
 8009bf2:	e7c6      	b.n	8009b82 <_printf_common+0x3e>
 8009bf4:	18e1      	adds	r1, r4, r3
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	2030      	movs	r0, #48	; 0x30
 8009bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bfe:	4422      	add	r2, r4
 8009c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c08:	3302      	adds	r3, #2
 8009c0a:	e7c7      	b.n	8009b9c <_printf_common+0x58>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4622      	mov	r2, r4
 8009c10:	4649      	mov	r1, r9
 8009c12:	4638      	mov	r0, r7
 8009c14:	47c0      	blx	r8
 8009c16:	3001      	adds	r0, #1
 8009c18:	d0e6      	beq.n	8009be8 <_printf_common+0xa4>
 8009c1a:	3601      	adds	r6, #1
 8009c1c:	e7d9      	b.n	8009bd2 <_printf_common+0x8e>
	...

08009c20 <_printf_i>:
 8009c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	7e0f      	ldrb	r7, [r1, #24]
 8009c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c28:	2f78      	cmp	r7, #120	; 0x78
 8009c2a:	4691      	mov	r9, r2
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	469a      	mov	sl, r3
 8009c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c36:	d807      	bhi.n	8009c48 <_printf_i+0x28>
 8009c38:	2f62      	cmp	r7, #98	; 0x62
 8009c3a:	d80a      	bhi.n	8009c52 <_printf_i+0x32>
 8009c3c:	2f00      	cmp	r7, #0
 8009c3e:	f000 80d8 	beq.w	8009df2 <_printf_i+0x1d2>
 8009c42:	2f58      	cmp	r7, #88	; 0x58
 8009c44:	f000 80a3 	beq.w	8009d8e <_printf_i+0x16e>
 8009c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c50:	e03a      	b.n	8009cc8 <_printf_i+0xa8>
 8009c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c56:	2b15      	cmp	r3, #21
 8009c58:	d8f6      	bhi.n	8009c48 <_printf_i+0x28>
 8009c5a:	a101      	add	r1, pc, #4	; (adr r1, 8009c60 <_printf_i+0x40>)
 8009c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c60:	08009cb9 	.word	0x08009cb9
 8009c64:	08009ccd 	.word	0x08009ccd
 8009c68:	08009c49 	.word	0x08009c49
 8009c6c:	08009c49 	.word	0x08009c49
 8009c70:	08009c49 	.word	0x08009c49
 8009c74:	08009c49 	.word	0x08009c49
 8009c78:	08009ccd 	.word	0x08009ccd
 8009c7c:	08009c49 	.word	0x08009c49
 8009c80:	08009c49 	.word	0x08009c49
 8009c84:	08009c49 	.word	0x08009c49
 8009c88:	08009c49 	.word	0x08009c49
 8009c8c:	08009dd9 	.word	0x08009dd9
 8009c90:	08009cfd 	.word	0x08009cfd
 8009c94:	08009dbb 	.word	0x08009dbb
 8009c98:	08009c49 	.word	0x08009c49
 8009c9c:	08009c49 	.word	0x08009c49
 8009ca0:	08009dfb 	.word	0x08009dfb
 8009ca4:	08009c49 	.word	0x08009c49
 8009ca8:	08009cfd 	.word	0x08009cfd
 8009cac:	08009c49 	.word	0x08009c49
 8009cb0:	08009c49 	.word	0x08009c49
 8009cb4:	08009dc3 	.word	0x08009dc3
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	1d1a      	adds	r2, r3, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	602a      	str	r2, [r5, #0]
 8009cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e0a3      	b.n	8009e14 <_printf_i+0x1f4>
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	6829      	ldr	r1, [r5, #0]
 8009cd0:	0606      	lsls	r6, r0, #24
 8009cd2:	f101 0304 	add.w	r3, r1, #4
 8009cd6:	d50a      	bpl.n	8009cee <_printf_i+0xce>
 8009cd8:	680e      	ldr	r6, [r1, #0]
 8009cda:	602b      	str	r3, [r5, #0]
 8009cdc:	2e00      	cmp	r6, #0
 8009cde:	da03      	bge.n	8009ce8 <_printf_i+0xc8>
 8009ce0:	232d      	movs	r3, #45	; 0x2d
 8009ce2:	4276      	negs	r6, r6
 8009ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce8:	485e      	ldr	r0, [pc, #376]	; (8009e64 <_printf_i+0x244>)
 8009cea:	230a      	movs	r3, #10
 8009cec:	e019      	b.n	8009d22 <_printf_i+0x102>
 8009cee:	680e      	ldr	r6, [r1, #0]
 8009cf0:	602b      	str	r3, [r5, #0]
 8009cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cf6:	bf18      	it	ne
 8009cf8:	b236      	sxthne	r6, r6
 8009cfa:	e7ef      	b.n	8009cdc <_printf_i+0xbc>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	6820      	ldr	r0, [r4, #0]
 8009d00:	1d19      	adds	r1, r3, #4
 8009d02:	6029      	str	r1, [r5, #0]
 8009d04:	0601      	lsls	r1, r0, #24
 8009d06:	d501      	bpl.n	8009d0c <_printf_i+0xec>
 8009d08:	681e      	ldr	r6, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <_printf_i+0xf2>
 8009d0c:	0646      	lsls	r6, r0, #25
 8009d0e:	d5fb      	bpl.n	8009d08 <_printf_i+0xe8>
 8009d10:	881e      	ldrh	r6, [r3, #0]
 8009d12:	4854      	ldr	r0, [pc, #336]	; (8009e64 <_printf_i+0x244>)
 8009d14:	2f6f      	cmp	r7, #111	; 0x6f
 8009d16:	bf0c      	ite	eq
 8009d18:	2308      	moveq	r3, #8
 8009d1a:	230a      	movne	r3, #10
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d22:	6865      	ldr	r5, [r4, #4]
 8009d24:	60a5      	str	r5, [r4, #8]
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	bfa2      	ittt	ge
 8009d2a:	6821      	ldrge	r1, [r4, #0]
 8009d2c:	f021 0104 	bicge.w	r1, r1, #4
 8009d30:	6021      	strge	r1, [r4, #0]
 8009d32:	b90e      	cbnz	r6, 8009d38 <_printf_i+0x118>
 8009d34:	2d00      	cmp	r5, #0
 8009d36:	d04d      	beq.n	8009dd4 <_printf_i+0x1b4>
 8009d38:	4615      	mov	r5, r2
 8009d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d42:	5dc7      	ldrb	r7, [r0, r7]
 8009d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d48:	4637      	mov	r7, r6
 8009d4a:	42bb      	cmp	r3, r7
 8009d4c:	460e      	mov	r6, r1
 8009d4e:	d9f4      	bls.n	8009d3a <_printf_i+0x11a>
 8009d50:	2b08      	cmp	r3, #8
 8009d52:	d10b      	bne.n	8009d6c <_printf_i+0x14c>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	07de      	lsls	r6, r3, #31
 8009d58:	d508      	bpl.n	8009d6c <_printf_i+0x14c>
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	6861      	ldr	r1, [r4, #4]
 8009d5e:	4299      	cmp	r1, r3
 8009d60:	bfde      	ittt	le
 8009d62:	2330      	movle	r3, #48	; 0x30
 8009d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d68:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d6c:	1b52      	subs	r2, r2, r5
 8009d6e:	6122      	str	r2, [r4, #16]
 8009d70:	f8cd a000 	str.w	sl, [sp]
 8009d74:	464b      	mov	r3, r9
 8009d76:	aa03      	add	r2, sp, #12
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f7ff fee2 	bl	8009b44 <_printf_common>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d14c      	bne.n	8009e1e <_printf_i+0x1fe>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d88:	b004      	add	sp, #16
 8009d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8e:	4835      	ldr	r0, [pc, #212]	; (8009e64 <_printf_i+0x244>)
 8009d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d94:	6829      	ldr	r1, [r5, #0]
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d9c:	6029      	str	r1, [r5, #0]
 8009d9e:	061d      	lsls	r5, r3, #24
 8009da0:	d514      	bpl.n	8009dcc <_printf_i+0x1ac>
 8009da2:	07df      	lsls	r7, r3, #31
 8009da4:	bf44      	itt	mi
 8009da6:	f043 0320 	orrmi.w	r3, r3, #32
 8009daa:	6023      	strmi	r3, [r4, #0]
 8009dac:	b91e      	cbnz	r6, 8009db6 <_printf_i+0x196>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	f023 0320 	bic.w	r3, r3, #32
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	2310      	movs	r3, #16
 8009db8:	e7b0      	b.n	8009d1c <_printf_i+0xfc>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	f043 0320 	orr.w	r3, r3, #32
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	2378      	movs	r3, #120	; 0x78
 8009dc4:	4828      	ldr	r0, [pc, #160]	; (8009e68 <_printf_i+0x248>)
 8009dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dca:	e7e3      	b.n	8009d94 <_printf_i+0x174>
 8009dcc:	0659      	lsls	r1, r3, #25
 8009dce:	bf48      	it	mi
 8009dd0:	b2b6      	uxthmi	r6, r6
 8009dd2:	e7e6      	b.n	8009da2 <_printf_i+0x182>
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	e7bb      	b.n	8009d50 <_printf_i+0x130>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	6826      	ldr	r6, [r4, #0]
 8009ddc:	6961      	ldr	r1, [r4, #20]
 8009dde:	1d18      	adds	r0, r3, #4
 8009de0:	6028      	str	r0, [r5, #0]
 8009de2:	0635      	lsls	r5, r6, #24
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	d501      	bpl.n	8009dec <_printf_i+0x1cc>
 8009de8:	6019      	str	r1, [r3, #0]
 8009dea:	e002      	b.n	8009df2 <_printf_i+0x1d2>
 8009dec:	0670      	lsls	r0, r6, #25
 8009dee:	d5fb      	bpl.n	8009de8 <_printf_i+0x1c8>
 8009df0:	8019      	strh	r1, [r3, #0]
 8009df2:	2300      	movs	r3, #0
 8009df4:	6123      	str	r3, [r4, #16]
 8009df6:	4615      	mov	r5, r2
 8009df8:	e7ba      	b.n	8009d70 <_printf_i+0x150>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	1d1a      	adds	r2, r3, #4
 8009dfe:	602a      	str	r2, [r5, #0]
 8009e00:	681d      	ldr	r5, [r3, #0]
 8009e02:	6862      	ldr	r2, [r4, #4]
 8009e04:	2100      	movs	r1, #0
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7f6 f9fa 	bl	8000200 <memchr>
 8009e0c:	b108      	cbz	r0, 8009e12 <_printf_i+0x1f2>
 8009e0e:	1b40      	subs	r0, r0, r5
 8009e10:	6060      	str	r0, [r4, #4]
 8009e12:	6863      	ldr	r3, [r4, #4]
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	2300      	movs	r3, #0
 8009e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e1c:	e7a8      	b.n	8009d70 <_printf_i+0x150>
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	462a      	mov	r2, r5
 8009e22:	4649      	mov	r1, r9
 8009e24:	4640      	mov	r0, r8
 8009e26:	47d0      	blx	sl
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d0ab      	beq.n	8009d84 <_printf_i+0x164>
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	079b      	lsls	r3, r3, #30
 8009e30:	d413      	bmi.n	8009e5a <_printf_i+0x23a>
 8009e32:	68e0      	ldr	r0, [r4, #12]
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	4298      	cmp	r0, r3
 8009e38:	bfb8      	it	lt
 8009e3a:	4618      	movlt	r0, r3
 8009e3c:	e7a4      	b.n	8009d88 <_printf_i+0x168>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4632      	mov	r2, r6
 8009e42:	4649      	mov	r1, r9
 8009e44:	4640      	mov	r0, r8
 8009e46:	47d0      	blx	sl
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d09b      	beq.n	8009d84 <_printf_i+0x164>
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	68e3      	ldr	r3, [r4, #12]
 8009e50:	9903      	ldr	r1, [sp, #12]
 8009e52:	1a5b      	subs	r3, r3, r1
 8009e54:	42ab      	cmp	r3, r5
 8009e56:	dcf2      	bgt.n	8009e3e <_printf_i+0x21e>
 8009e58:	e7eb      	b.n	8009e32 <_printf_i+0x212>
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	f104 0619 	add.w	r6, r4, #25
 8009e60:	e7f5      	b.n	8009e4e <_printf_i+0x22e>
 8009e62:	bf00      	nop
 8009e64:	0800b281 	.word	0x0800b281
 8009e68:	0800b292 	.word	0x0800b292

08009e6c <iprintf>:
 8009e6c:	b40f      	push	{r0, r1, r2, r3}
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <iprintf+0x2c>)
 8009e70:	b513      	push	{r0, r1, r4, lr}
 8009e72:	681c      	ldr	r4, [r3, #0]
 8009e74:	b124      	cbz	r4, 8009e80 <iprintf+0x14>
 8009e76:	69a3      	ldr	r3, [r4, #24]
 8009e78:	b913      	cbnz	r3, 8009e80 <iprintf+0x14>
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fa2e 	bl	800a2dc <__sinit>
 8009e80:	ab05      	add	r3, sp, #20
 8009e82:	9a04      	ldr	r2, [sp, #16]
 8009e84:	68a1      	ldr	r1, [r4, #8]
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f7ff fd2b 	bl	80098e4 <_vfiprintf_r>
 8009e8e:	b002      	add	sp, #8
 8009e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e94:	b004      	add	sp, #16
 8009e96:	4770      	bx	lr
 8009e98:	2000000c 	.word	0x2000000c

08009e9c <_sbrk_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d06      	ldr	r5, [pc, #24]	; (8009eb8 <_sbrk_r+0x1c>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	f7f6 fe1e 	bl	8000ae8 <_sbrk>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d102      	bne.n	8009eb6 <_sbrk_r+0x1a>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	b103      	cbz	r3, 8009eb6 <_sbrk_r+0x1a>
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	200001d0 	.word	0x200001d0

08009ebc <strchr>:
 8009ebc:	b2c9      	uxtb	r1, r1
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec4:	b11a      	cbz	r2, 8009ece <strchr+0x12>
 8009ec6:	428a      	cmp	r2, r1
 8009ec8:	d1f9      	bne.n	8009ebe <strchr+0x2>
 8009eca:	4618      	mov	r0, r3
 8009ecc:	4770      	bx	lr
 8009ece:	2900      	cmp	r1, #0
 8009ed0:	bf18      	it	ne
 8009ed2:	2300      	movne	r3, #0
 8009ed4:	e7f9      	b.n	8009eca <strchr+0xe>

08009ed6 <strcspn>:
 8009ed6:	b570      	push	{r4, r5, r6, lr}
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461e      	mov	r6, r3
 8009edc:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009ee0:	b144      	cbz	r4, 8009ef4 <strcspn+0x1e>
 8009ee2:	1e4a      	subs	r2, r1, #1
 8009ee4:	e001      	b.n	8009eea <strcspn+0x14>
 8009ee6:	42a5      	cmp	r5, r4
 8009ee8:	d004      	beq.n	8009ef4 <strcspn+0x1e>
 8009eea:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	d1f9      	bne.n	8009ee6 <strcspn+0x10>
 8009ef2:	e7f2      	b.n	8009eda <strcspn+0x4>
 8009ef4:	1a30      	subs	r0, r6, r0
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}

08009ef8 <strspn>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	4603      	mov	r3, r0
 8009efc:	461e      	mov	r6, r3
 8009efe:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009f02:	b13c      	cbz	r4, 8009f14 <strspn+0x1c>
 8009f04:	1e4a      	subs	r2, r1, #1
 8009f06:	e001      	b.n	8009f0c <strspn+0x14>
 8009f08:	42a5      	cmp	r5, r4
 8009f0a:	d0f7      	beq.n	8009efc <strspn+0x4>
 8009f0c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009f10:	2d00      	cmp	r5, #0
 8009f12:	d1f9      	bne.n	8009f08 <strspn+0x10>
 8009f14:	1a30      	subs	r0, r6, r0
 8009f16:	bd70      	pop	{r4, r5, r6, pc}

08009f18 <__swbuf_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b118      	cbz	r0, 8009f2a <__swbuf_r+0x12>
 8009f22:	6983      	ldr	r3, [r0, #24]
 8009f24:	b90b      	cbnz	r3, 8009f2a <__swbuf_r+0x12>
 8009f26:	f000 f9d9 	bl	800a2dc <__sinit>
 8009f2a:	4b21      	ldr	r3, [pc, #132]	; (8009fb0 <__swbuf_r+0x98>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	d12b      	bne.n	8009f88 <__swbuf_r+0x70>
 8009f30:	686c      	ldr	r4, [r5, #4]
 8009f32:	69a3      	ldr	r3, [r4, #24]
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	071a      	lsls	r2, r3, #28
 8009f3a:	d52f      	bpl.n	8009f9c <__swbuf_r+0x84>
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	b36b      	cbz	r3, 8009f9c <__swbuf_r+0x84>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	6820      	ldr	r0, [r4, #0]
 8009f44:	1ac0      	subs	r0, r0, r3
 8009f46:	6963      	ldr	r3, [r4, #20]
 8009f48:	b2f6      	uxtb	r6, r6
 8009f4a:	4283      	cmp	r3, r0
 8009f4c:	4637      	mov	r7, r6
 8009f4e:	dc04      	bgt.n	8009f5a <__swbuf_r+0x42>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 f92e 	bl	800a1b4 <_fflush_r>
 8009f58:	bb30      	cbnz	r0, 8009fa8 <__swbuf_r+0x90>
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	60a3      	str	r3, [r4, #8]
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	6022      	str	r2, [r4, #0]
 8009f66:	701e      	strb	r6, [r3, #0]
 8009f68:	6963      	ldr	r3, [r4, #20]
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	d004      	beq.n	8009f7a <__swbuf_r+0x62>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	07db      	lsls	r3, r3, #31
 8009f74:	d506      	bpl.n	8009f84 <__swbuf_r+0x6c>
 8009f76:	2e0a      	cmp	r6, #10
 8009f78:	d104      	bne.n	8009f84 <__swbuf_r+0x6c>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f000 f919 	bl	800a1b4 <_fflush_r>
 8009f82:	b988      	cbnz	r0, 8009fa8 <__swbuf_r+0x90>
 8009f84:	4638      	mov	r0, r7
 8009f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <__swbuf_r+0x9c>)
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	d101      	bne.n	8009f92 <__swbuf_r+0x7a>
 8009f8e:	68ac      	ldr	r4, [r5, #8]
 8009f90:	e7cf      	b.n	8009f32 <__swbuf_r+0x1a>
 8009f92:	4b09      	ldr	r3, [pc, #36]	; (8009fb8 <__swbuf_r+0xa0>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	bf08      	it	eq
 8009f98:	68ec      	ldreq	r4, [r5, #12]
 8009f9a:	e7ca      	b.n	8009f32 <__swbuf_r+0x1a>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 f80c 	bl	8009fbc <__swsetup_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d0cb      	beq.n	8009f40 <__swbuf_r+0x28>
 8009fa8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009fac:	e7ea      	b.n	8009f84 <__swbuf_r+0x6c>
 8009fae:	bf00      	nop
 8009fb0:	0800b2c4 	.word	0x0800b2c4
 8009fb4:	0800b2e4 	.word	0x0800b2e4
 8009fb8:	0800b2a4 	.word	0x0800b2a4

08009fbc <__swsetup_r>:
 8009fbc:	4b32      	ldr	r3, [pc, #200]	; (800a088 <__swsetup_r+0xcc>)
 8009fbe:	b570      	push	{r4, r5, r6, lr}
 8009fc0:	681d      	ldr	r5, [r3, #0]
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	b125      	cbz	r5, 8009fd2 <__swsetup_r+0x16>
 8009fc8:	69ab      	ldr	r3, [r5, #24]
 8009fca:	b913      	cbnz	r3, 8009fd2 <__swsetup_r+0x16>
 8009fcc:	4628      	mov	r0, r5
 8009fce:	f000 f985 	bl	800a2dc <__sinit>
 8009fd2:	4b2e      	ldr	r3, [pc, #184]	; (800a08c <__swsetup_r+0xd0>)
 8009fd4:	429c      	cmp	r4, r3
 8009fd6:	d10f      	bne.n	8009ff8 <__swsetup_r+0x3c>
 8009fd8:	686c      	ldr	r4, [r5, #4]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe0:	0719      	lsls	r1, r3, #28
 8009fe2:	d42c      	bmi.n	800a03e <__swsetup_r+0x82>
 8009fe4:	06dd      	lsls	r5, r3, #27
 8009fe6:	d411      	bmi.n	800a00c <__swsetup_r+0x50>
 8009fe8:	2309      	movs	r3, #9
 8009fea:	6033      	str	r3, [r6, #0]
 8009fec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ff6:	e03e      	b.n	800a076 <__swsetup_r+0xba>
 8009ff8:	4b25      	ldr	r3, [pc, #148]	; (800a090 <__swsetup_r+0xd4>)
 8009ffa:	429c      	cmp	r4, r3
 8009ffc:	d101      	bne.n	800a002 <__swsetup_r+0x46>
 8009ffe:	68ac      	ldr	r4, [r5, #8]
 800a000:	e7eb      	b.n	8009fda <__swsetup_r+0x1e>
 800a002:	4b24      	ldr	r3, [pc, #144]	; (800a094 <__swsetup_r+0xd8>)
 800a004:	429c      	cmp	r4, r3
 800a006:	bf08      	it	eq
 800a008:	68ec      	ldreq	r4, [r5, #12]
 800a00a:	e7e6      	b.n	8009fda <__swsetup_r+0x1e>
 800a00c:	0758      	lsls	r0, r3, #29
 800a00e:	d512      	bpl.n	800a036 <__swsetup_r+0x7a>
 800a010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a012:	b141      	cbz	r1, 800a026 <__swsetup_r+0x6a>
 800a014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a018:	4299      	cmp	r1, r3
 800a01a:	d002      	beq.n	800a022 <__swsetup_r+0x66>
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7ff fb57 	bl	80096d0 <_free_r>
 800a022:	2300      	movs	r3, #0
 800a024:	6363      	str	r3, [r4, #52]	; 0x34
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	2300      	movs	r3, #0
 800a030:	6063      	str	r3, [r4, #4]
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f043 0308 	orr.w	r3, r3, #8
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	b94b      	cbnz	r3, 800a056 <__swsetup_r+0x9a>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04c:	d003      	beq.n	800a056 <__swsetup_r+0x9a>
 800a04e:	4621      	mov	r1, r4
 800a050:	4630      	mov	r0, r6
 800a052:	f000 fa09 	bl	800a468 <__smakebuf_r>
 800a056:	89a0      	ldrh	r0, [r4, #12]
 800a058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a05c:	f010 0301 	ands.w	r3, r0, #1
 800a060:	d00a      	beq.n	800a078 <__swsetup_r+0xbc>
 800a062:	2300      	movs	r3, #0
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	6963      	ldr	r3, [r4, #20]
 800a068:	425b      	negs	r3, r3
 800a06a:	61a3      	str	r3, [r4, #24]
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	b943      	cbnz	r3, 800a082 <__swsetup_r+0xc6>
 800a070:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a074:	d1ba      	bne.n	8009fec <__swsetup_r+0x30>
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	0781      	lsls	r1, r0, #30
 800a07a:	bf58      	it	pl
 800a07c:	6963      	ldrpl	r3, [r4, #20]
 800a07e:	60a3      	str	r3, [r4, #8]
 800a080:	e7f4      	b.n	800a06c <__swsetup_r+0xb0>
 800a082:	2000      	movs	r0, #0
 800a084:	e7f7      	b.n	800a076 <__swsetup_r+0xba>
 800a086:	bf00      	nop
 800a088:	2000000c 	.word	0x2000000c
 800a08c:	0800b2c4 	.word	0x0800b2c4
 800a090:	0800b2e4 	.word	0x0800b2e4
 800a094:	0800b2a4 	.word	0x0800b2a4

0800a098 <abort>:
 800a098:	b508      	push	{r3, lr}
 800a09a:	2006      	movs	r0, #6
 800a09c:	f000 fa58 	bl	800a550 <raise>
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f7f6 fca9 	bl	80009f8 <_exit>
	...

0800a0a8 <__sflush_r>:
 800a0a8:	898a      	ldrh	r2, [r1, #12]
 800a0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	0710      	lsls	r0, r2, #28
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	d458      	bmi.n	800a168 <__sflush_r+0xc0>
 800a0b6:	684b      	ldr	r3, [r1, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dc05      	bgt.n	800a0c8 <__sflush_r+0x20>
 800a0bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dc02      	bgt.n	800a0c8 <__sflush_r+0x20>
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	d0f9      	beq.n	800a0c2 <__sflush_r+0x1a>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0d4:	682f      	ldr	r7, [r5, #0]
 800a0d6:	602b      	str	r3, [r5, #0]
 800a0d8:	d032      	beq.n	800a140 <__sflush_r+0x98>
 800a0da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	075a      	lsls	r2, r3, #29
 800a0e0:	d505      	bpl.n	800a0ee <__sflush_r+0x46>
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	1ac0      	subs	r0, r0, r3
 800a0e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0e8:	b10b      	cbz	r3, 800a0ee <__sflush_r+0x46>
 800a0ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ec:	1ac0      	subs	r0, r0, r3
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0f4:	6a21      	ldr	r1, [r4, #32]
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	47b0      	blx	r6
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	d106      	bne.n	800a10e <__sflush_r+0x66>
 800a100:	6829      	ldr	r1, [r5, #0]
 800a102:	291d      	cmp	r1, #29
 800a104:	d82c      	bhi.n	800a160 <__sflush_r+0xb8>
 800a106:	4a2a      	ldr	r2, [pc, #168]	; (800a1b0 <__sflush_r+0x108>)
 800a108:	40ca      	lsrs	r2, r1
 800a10a:	07d6      	lsls	r6, r2, #31
 800a10c:	d528      	bpl.n	800a160 <__sflush_r+0xb8>
 800a10e:	2200      	movs	r2, #0
 800a110:	6062      	str	r2, [r4, #4]
 800a112:	04d9      	lsls	r1, r3, #19
 800a114:	6922      	ldr	r2, [r4, #16]
 800a116:	6022      	str	r2, [r4, #0]
 800a118:	d504      	bpl.n	800a124 <__sflush_r+0x7c>
 800a11a:	1c42      	adds	r2, r0, #1
 800a11c:	d101      	bne.n	800a122 <__sflush_r+0x7a>
 800a11e:	682b      	ldr	r3, [r5, #0]
 800a120:	b903      	cbnz	r3, 800a124 <__sflush_r+0x7c>
 800a122:	6560      	str	r0, [r4, #84]	; 0x54
 800a124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a126:	602f      	str	r7, [r5, #0]
 800a128:	2900      	cmp	r1, #0
 800a12a:	d0ca      	beq.n	800a0c2 <__sflush_r+0x1a>
 800a12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a130:	4299      	cmp	r1, r3
 800a132:	d002      	beq.n	800a13a <__sflush_r+0x92>
 800a134:	4628      	mov	r0, r5
 800a136:	f7ff facb 	bl	80096d0 <_free_r>
 800a13a:	2000      	movs	r0, #0
 800a13c:	6360      	str	r0, [r4, #52]	; 0x34
 800a13e:	e7c1      	b.n	800a0c4 <__sflush_r+0x1c>
 800a140:	6a21      	ldr	r1, [r4, #32]
 800a142:	2301      	movs	r3, #1
 800a144:	4628      	mov	r0, r5
 800a146:	47b0      	blx	r6
 800a148:	1c41      	adds	r1, r0, #1
 800a14a:	d1c7      	bne.n	800a0dc <__sflush_r+0x34>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0c4      	beq.n	800a0dc <__sflush_r+0x34>
 800a152:	2b1d      	cmp	r3, #29
 800a154:	d001      	beq.n	800a15a <__sflush_r+0xb2>
 800a156:	2b16      	cmp	r3, #22
 800a158:	d101      	bne.n	800a15e <__sflush_r+0xb6>
 800a15a:	602f      	str	r7, [r5, #0]
 800a15c:	e7b1      	b.n	800a0c2 <__sflush_r+0x1a>
 800a15e:	89a3      	ldrh	r3, [r4, #12]
 800a160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a164:	81a3      	strh	r3, [r4, #12]
 800a166:	e7ad      	b.n	800a0c4 <__sflush_r+0x1c>
 800a168:	690f      	ldr	r7, [r1, #16]
 800a16a:	2f00      	cmp	r7, #0
 800a16c:	d0a9      	beq.n	800a0c2 <__sflush_r+0x1a>
 800a16e:	0793      	lsls	r3, r2, #30
 800a170:	680e      	ldr	r6, [r1, #0]
 800a172:	bf08      	it	eq
 800a174:	694b      	ldreq	r3, [r1, #20]
 800a176:	600f      	str	r7, [r1, #0]
 800a178:	bf18      	it	ne
 800a17a:	2300      	movne	r3, #0
 800a17c:	eba6 0807 	sub.w	r8, r6, r7
 800a180:	608b      	str	r3, [r1, #8]
 800a182:	f1b8 0f00 	cmp.w	r8, #0
 800a186:	dd9c      	ble.n	800a0c2 <__sflush_r+0x1a>
 800a188:	6a21      	ldr	r1, [r4, #32]
 800a18a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a18c:	4643      	mov	r3, r8
 800a18e:	463a      	mov	r2, r7
 800a190:	4628      	mov	r0, r5
 800a192:	47b0      	blx	r6
 800a194:	2800      	cmp	r0, #0
 800a196:	dc06      	bgt.n	800a1a6 <__sflush_r+0xfe>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a19e:	81a3      	strh	r3, [r4, #12]
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a4:	e78e      	b.n	800a0c4 <__sflush_r+0x1c>
 800a1a6:	4407      	add	r7, r0
 800a1a8:	eba8 0800 	sub.w	r8, r8, r0
 800a1ac:	e7e9      	b.n	800a182 <__sflush_r+0xda>
 800a1ae:	bf00      	nop
 800a1b0:	20400001 	.word	0x20400001

0800a1b4 <_fflush_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	690b      	ldr	r3, [r1, #16]
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	b913      	cbnz	r3, 800a1c4 <_fflush_r+0x10>
 800a1be:	2500      	movs	r5, #0
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	b118      	cbz	r0, 800a1ce <_fflush_r+0x1a>
 800a1c6:	6983      	ldr	r3, [r0, #24]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <_fflush_r+0x1a>
 800a1ca:	f000 f887 	bl	800a2dc <__sinit>
 800a1ce:	4b14      	ldr	r3, [pc, #80]	; (800a220 <_fflush_r+0x6c>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	d11b      	bne.n	800a20c <_fflush_r+0x58>
 800a1d4:	686c      	ldr	r4, [r5, #4]
 800a1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0ef      	beq.n	800a1be <_fflush_r+0xa>
 800a1de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1e0:	07d0      	lsls	r0, r2, #31
 800a1e2:	d404      	bmi.n	800a1ee <_fflush_r+0x3a>
 800a1e4:	0599      	lsls	r1, r3, #22
 800a1e6:	d402      	bmi.n	800a1ee <_fflush_r+0x3a>
 800a1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ea:	f000 f915 	bl	800a418 <__retarget_lock_acquire_recursive>
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f7ff ff59 	bl	800a0a8 <__sflush_r>
 800a1f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1f8:	07da      	lsls	r2, r3, #31
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	d4e0      	bmi.n	800a1c0 <_fflush_r+0xc>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	059b      	lsls	r3, r3, #22
 800a202:	d4dd      	bmi.n	800a1c0 <_fflush_r+0xc>
 800a204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a206:	f000 f908 	bl	800a41a <__retarget_lock_release_recursive>
 800a20a:	e7d9      	b.n	800a1c0 <_fflush_r+0xc>
 800a20c:	4b05      	ldr	r3, [pc, #20]	; (800a224 <_fflush_r+0x70>)
 800a20e:	429c      	cmp	r4, r3
 800a210:	d101      	bne.n	800a216 <_fflush_r+0x62>
 800a212:	68ac      	ldr	r4, [r5, #8]
 800a214:	e7df      	b.n	800a1d6 <_fflush_r+0x22>
 800a216:	4b04      	ldr	r3, [pc, #16]	; (800a228 <_fflush_r+0x74>)
 800a218:	429c      	cmp	r4, r3
 800a21a:	bf08      	it	eq
 800a21c:	68ec      	ldreq	r4, [r5, #12]
 800a21e:	e7da      	b.n	800a1d6 <_fflush_r+0x22>
 800a220:	0800b2c4 	.word	0x0800b2c4
 800a224:	0800b2e4 	.word	0x0800b2e4
 800a228:	0800b2a4 	.word	0x0800b2a4

0800a22c <std>:
 800a22c:	2300      	movs	r3, #0
 800a22e:	b510      	push	{r4, lr}
 800a230:	4604      	mov	r4, r0
 800a232:	e9c0 3300 	strd	r3, r3, [r0]
 800a236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a23a:	6083      	str	r3, [r0, #8]
 800a23c:	8181      	strh	r1, [r0, #12]
 800a23e:	6643      	str	r3, [r0, #100]	; 0x64
 800a240:	81c2      	strh	r2, [r0, #14]
 800a242:	6183      	str	r3, [r0, #24]
 800a244:	4619      	mov	r1, r3
 800a246:	2208      	movs	r2, #8
 800a248:	305c      	adds	r0, #92	; 0x5c
 800a24a:	f7ff fa39 	bl	80096c0 <memset>
 800a24e:	4b05      	ldr	r3, [pc, #20]	; (800a264 <std+0x38>)
 800a250:	6263      	str	r3, [r4, #36]	; 0x24
 800a252:	4b05      	ldr	r3, [pc, #20]	; (800a268 <std+0x3c>)
 800a254:	62a3      	str	r3, [r4, #40]	; 0x28
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <std+0x40>)
 800a258:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <std+0x44>)
 800a25c:	6224      	str	r4, [r4, #32]
 800a25e:	6323      	str	r3, [r4, #48]	; 0x30
 800a260:	bd10      	pop	{r4, pc}
 800a262:	bf00      	nop
 800a264:	0800a589 	.word	0x0800a589
 800a268:	0800a5ab 	.word	0x0800a5ab
 800a26c:	0800a5e3 	.word	0x0800a5e3
 800a270:	0800a607 	.word	0x0800a607

0800a274 <_cleanup_r>:
 800a274:	4901      	ldr	r1, [pc, #4]	; (800a27c <_cleanup_r+0x8>)
 800a276:	f000 b8af 	b.w	800a3d8 <_fwalk_reent>
 800a27a:	bf00      	nop
 800a27c:	0800a1b5 	.word	0x0800a1b5

0800a280 <__sfmoreglue>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	2268      	movs	r2, #104	; 0x68
 800a284:	1e4d      	subs	r5, r1, #1
 800a286:	4355      	muls	r5, r2
 800a288:	460e      	mov	r6, r1
 800a28a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a28e:	f7ff fa8b 	bl	80097a8 <_malloc_r>
 800a292:	4604      	mov	r4, r0
 800a294:	b140      	cbz	r0, 800a2a8 <__sfmoreglue+0x28>
 800a296:	2100      	movs	r1, #0
 800a298:	e9c0 1600 	strd	r1, r6, [r0]
 800a29c:	300c      	adds	r0, #12
 800a29e:	60a0      	str	r0, [r4, #8]
 800a2a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2a4:	f7ff fa0c 	bl	80096c0 <memset>
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}

0800a2ac <__sfp_lock_acquire>:
 800a2ac:	4801      	ldr	r0, [pc, #4]	; (800a2b4 <__sfp_lock_acquire+0x8>)
 800a2ae:	f000 b8b3 	b.w	800a418 <__retarget_lock_acquire_recursive>
 800a2b2:	bf00      	nop
 800a2b4:	200001cd 	.word	0x200001cd

0800a2b8 <__sfp_lock_release>:
 800a2b8:	4801      	ldr	r0, [pc, #4]	; (800a2c0 <__sfp_lock_release+0x8>)
 800a2ba:	f000 b8ae 	b.w	800a41a <__retarget_lock_release_recursive>
 800a2be:	bf00      	nop
 800a2c0:	200001cd 	.word	0x200001cd

0800a2c4 <__sinit_lock_acquire>:
 800a2c4:	4801      	ldr	r0, [pc, #4]	; (800a2cc <__sinit_lock_acquire+0x8>)
 800a2c6:	f000 b8a7 	b.w	800a418 <__retarget_lock_acquire_recursive>
 800a2ca:	bf00      	nop
 800a2cc:	200001ce 	.word	0x200001ce

0800a2d0 <__sinit_lock_release>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	; (800a2d8 <__sinit_lock_release+0x8>)
 800a2d2:	f000 b8a2 	b.w	800a41a <__retarget_lock_release_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	200001ce 	.word	0x200001ce

0800a2dc <__sinit>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f7ff fff0 	bl	800a2c4 <__sinit_lock_acquire>
 800a2e4:	69a3      	ldr	r3, [r4, #24]
 800a2e6:	b11b      	cbz	r3, 800a2f0 <__sinit+0x14>
 800a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ec:	f7ff bff0 	b.w	800a2d0 <__sinit_lock_release>
 800a2f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a2f6:	4b13      	ldr	r3, [pc, #76]	; (800a344 <__sinit+0x68>)
 800a2f8:	4a13      	ldr	r2, [pc, #76]	; (800a348 <__sinit+0x6c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	bf04      	itt	eq
 800a302:	2301      	moveq	r3, #1
 800a304:	61a3      	streq	r3, [r4, #24]
 800a306:	4620      	mov	r0, r4
 800a308:	f000 f820 	bl	800a34c <__sfp>
 800a30c:	6060      	str	r0, [r4, #4]
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 f81c 	bl	800a34c <__sfp>
 800a314:	60a0      	str	r0, [r4, #8]
 800a316:	4620      	mov	r0, r4
 800a318:	f000 f818 	bl	800a34c <__sfp>
 800a31c:	2200      	movs	r2, #0
 800a31e:	60e0      	str	r0, [r4, #12]
 800a320:	2104      	movs	r1, #4
 800a322:	6860      	ldr	r0, [r4, #4]
 800a324:	f7ff ff82 	bl	800a22c <std>
 800a328:	68a0      	ldr	r0, [r4, #8]
 800a32a:	2201      	movs	r2, #1
 800a32c:	2109      	movs	r1, #9
 800a32e:	f7ff ff7d 	bl	800a22c <std>
 800a332:	68e0      	ldr	r0, [r4, #12]
 800a334:	2202      	movs	r2, #2
 800a336:	2112      	movs	r1, #18
 800a338:	f7ff ff78 	bl	800a22c <std>
 800a33c:	2301      	movs	r3, #1
 800a33e:	61a3      	str	r3, [r4, #24]
 800a340:	e7d2      	b.n	800a2e8 <__sinit+0xc>
 800a342:	bf00      	nop
 800a344:	0800b26c 	.word	0x0800b26c
 800a348:	0800a275 	.word	0x0800a275

0800a34c <__sfp>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	4607      	mov	r7, r0
 800a350:	f7ff ffac 	bl	800a2ac <__sfp_lock_acquire>
 800a354:	4b1e      	ldr	r3, [pc, #120]	; (800a3d0 <__sfp+0x84>)
 800a356:	681e      	ldr	r6, [r3, #0]
 800a358:	69b3      	ldr	r3, [r6, #24]
 800a35a:	b913      	cbnz	r3, 800a362 <__sfp+0x16>
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7ff ffbd 	bl	800a2dc <__sinit>
 800a362:	3648      	adds	r6, #72	; 0x48
 800a364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a368:	3b01      	subs	r3, #1
 800a36a:	d503      	bpl.n	800a374 <__sfp+0x28>
 800a36c:	6833      	ldr	r3, [r6, #0]
 800a36e:	b30b      	cbz	r3, 800a3b4 <__sfp+0x68>
 800a370:	6836      	ldr	r6, [r6, #0]
 800a372:	e7f7      	b.n	800a364 <__sfp+0x18>
 800a374:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a378:	b9d5      	cbnz	r5, 800a3b0 <__sfp+0x64>
 800a37a:	4b16      	ldr	r3, [pc, #88]	; (800a3d4 <__sfp+0x88>)
 800a37c:	60e3      	str	r3, [r4, #12]
 800a37e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a382:	6665      	str	r5, [r4, #100]	; 0x64
 800a384:	f000 f847 	bl	800a416 <__retarget_lock_init_recursive>
 800a388:	f7ff ff96 	bl	800a2b8 <__sfp_lock_release>
 800a38c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a394:	6025      	str	r5, [r4, #0]
 800a396:	61a5      	str	r5, [r4, #24]
 800a398:	2208      	movs	r2, #8
 800a39a:	4629      	mov	r1, r5
 800a39c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3a0:	f7ff f98e 	bl	80096c0 <memset>
 800a3a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b0:	3468      	adds	r4, #104	; 0x68
 800a3b2:	e7d9      	b.n	800a368 <__sfp+0x1c>
 800a3b4:	2104      	movs	r1, #4
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f7ff ff62 	bl	800a280 <__sfmoreglue>
 800a3bc:	4604      	mov	r4, r0
 800a3be:	6030      	str	r0, [r6, #0]
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d1d5      	bne.n	800a370 <__sfp+0x24>
 800a3c4:	f7ff ff78 	bl	800a2b8 <__sfp_lock_release>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	e7ee      	b.n	800a3ac <__sfp+0x60>
 800a3ce:	bf00      	nop
 800a3d0:	0800b26c 	.word	0x0800b26c
 800a3d4:	ffff0001 	.word	0xffff0001

0800a3d8 <_fwalk_reent>:
 800a3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	4606      	mov	r6, r0
 800a3de:	4688      	mov	r8, r1
 800a3e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3e4:	2700      	movs	r7, #0
 800a3e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3ea:	f1b9 0901 	subs.w	r9, r9, #1
 800a3ee:	d505      	bpl.n	800a3fc <_fwalk_reent+0x24>
 800a3f0:	6824      	ldr	r4, [r4, #0]
 800a3f2:	2c00      	cmp	r4, #0
 800a3f4:	d1f7      	bne.n	800a3e6 <_fwalk_reent+0xe>
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fc:	89ab      	ldrh	r3, [r5, #12]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d907      	bls.n	800a412 <_fwalk_reent+0x3a>
 800a402:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a406:	3301      	adds	r3, #1
 800a408:	d003      	beq.n	800a412 <_fwalk_reent+0x3a>
 800a40a:	4629      	mov	r1, r5
 800a40c:	4630      	mov	r0, r6
 800a40e:	47c0      	blx	r8
 800a410:	4307      	orrs	r7, r0
 800a412:	3568      	adds	r5, #104	; 0x68
 800a414:	e7e9      	b.n	800a3ea <_fwalk_reent+0x12>

0800a416 <__retarget_lock_init_recursive>:
 800a416:	4770      	bx	lr

0800a418 <__retarget_lock_acquire_recursive>:
 800a418:	4770      	bx	lr

0800a41a <__retarget_lock_release_recursive>:
 800a41a:	4770      	bx	lr

0800a41c <__swhatbuf_r>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	460e      	mov	r6, r1
 800a420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a424:	2900      	cmp	r1, #0
 800a426:	b096      	sub	sp, #88	; 0x58
 800a428:	4614      	mov	r4, r2
 800a42a:	461d      	mov	r5, r3
 800a42c:	da08      	bge.n	800a440 <__swhatbuf_r+0x24>
 800a42e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	061a      	lsls	r2, r3, #24
 800a438:	d410      	bmi.n	800a45c <__swhatbuf_r+0x40>
 800a43a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43e:	e00e      	b.n	800a45e <__swhatbuf_r+0x42>
 800a440:	466a      	mov	r2, sp
 800a442:	f000 f907 	bl	800a654 <_fstat_r>
 800a446:	2800      	cmp	r0, #0
 800a448:	dbf1      	blt.n	800a42e <__swhatbuf_r+0x12>
 800a44a:	9a01      	ldr	r2, [sp, #4]
 800a44c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a450:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a454:	425a      	negs	r2, r3
 800a456:	415a      	adcs	r2, r3
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	e7ee      	b.n	800a43a <__swhatbuf_r+0x1e>
 800a45c:	2340      	movs	r3, #64	; 0x40
 800a45e:	2000      	movs	r0, #0
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	b016      	add	sp, #88	; 0x58
 800a464:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a468 <__smakebuf_r>:
 800a468:	898b      	ldrh	r3, [r1, #12]
 800a46a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a46c:	079d      	lsls	r5, r3, #30
 800a46e:	4606      	mov	r6, r0
 800a470:	460c      	mov	r4, r1
 800a472:	d507      	bpl.n	800a484 <__smakebuf_r+0x1c>
 800a474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	6123      	str	r3, [r4, #16]
 800a47c:	2301      	movs	r3, #1
 800a47e:	6163      	str	r3, [r4, #20]
 800a480:	b002      	add	sp, #8
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	ab01      	add	r3, sp, #4
 800a486:	466a      	mov	r2, sp
 800a488:	f7ff ffc8 	bl	800a41c <__swhatbuf_r>
 800a48c:	9900      	ldr	r1, [sp, #0]
 800a48e:	4605      	mov	r5, r0
 800a490:	4630      	mov	r0, r6
 800a492:	f7ff f989 	bl	80097a8 <_malloc_r>
 800a496:	b948      	cbnz	r0, 800a4ac <__smakebuf_r+0x44>
 800a498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49c:	059a      	lsls	r2, r3, #22
 800a49e:	d4ef      	bmi.n	800a480 <__smakebuf_r+0x18>
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	f043 0302 	orr.w	r3, r3, #2
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	e7e3      	b.n	800a474 <__smakebuf_r+0xc>
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	; (800a4e4 <__smakebuf_r+0x7c>)
 800a4ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	6020      	str	r0, [r4, #0]
 800a4b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	9b00      	ldr	r3, [sp, #0]
 800a4bc:	6163      	str	r3, [r4, #20]
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	6120      	str	r0, [r4, #16]
 800a4c2:	b15b      	cbz	r3, 800a4dc <__smakebuf_r+0x74>
 800a4c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f000 f8d5 	bl	800a678 <_isatty_r>
 800a4ce:	b128      	cbz	r0, 800a4dc <__smakebuf_r+0x74>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	f023 0303 	bic.w	r3, r3, #3
 800a4d6:	f043 0301 	orr.w	r3, r3, #1
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	89a0      	ldrh	r0, [r4, #12]
 800a4de:	4305      	orrs	r5, r0
 800a4e0:	81a5      	strh	r5, [r4, #12]
 800a4e2:	e7cd      	b.n	800a480 <__smakebuf_r+0x18>
 800a4e4:	0800a275 	.word	0x0800a275

0800a4e8 <__malloc_lock>:
 800a4e8:	4801      	ldr	r0, [pc, #4]	; (800a4f0 <__malloc_lock+0x8>)
 800a4ea:	f7ff bf95 	b.w	800a418 <__retarget_lock_acquire_recursive>
 800a4ee:	bf00      	nop
 800a4f0:	200001cc 	.word	0x200001cc

0800a4f4 <__malloc_unlock>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <__malloc_unlock+0x8>)
 800a4f6:	f7ff bf90 	b.w	800a41a <__retarget_lock_release_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	200001cc 	.word	0x200001cc

0800a500 <_raise_r>:
 800a500:	291f      	cmp	r1, #31
 800a502:	b538      	push	{r3, r4, r5, lr}
 800a504:	4604      	mov	r4, r0
 800a506:	460d      	mov	r5, r1
 800a508:	d904      	bls.n	800a514 <_raise_r+0x14>
 800a50a:	2316      	movs	r3, #22
 800a50c:	6003      	str	r3, [r0, #0]
 800a50e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a516:	b112      	cbz	r2, 800a51e <_raise_r+0x1e>
 800a518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a51c:	b94b      	cbnz	r3, 800a532 <_raise_r+0x32>
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 f830 	bl	800a584 <_getpid_r>
 800a524:	462a      	mov	r2, r5
 800a526:	4601      	mov	r1, r0
 800a528:	4620      	mov	r0, r4
 800a52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a52e:	f000 b817 	b.w	800a560 <_kill_r>
 800a532:	2b01      	cmp	r3, #1
 800a534:	d00a      	beq.n	800a54c <_raise_r+0x4c>
 800a536:	1c59      	adds	r1, r3, #1
 800a538:	d103      	bne.n	800a542 <_raise_r+0x42>
 800a53a:	2316      	movs	r3, #22
 800a53c:	6003      	str	r3, [r0, #0]
 800a53e:	2001      	movs	r0, #1
 800a540:	e7e7      	b.n	800a512 <_raise_r+0x12>
 800a542:	2400      	movs	r4, #0
 800a544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a548:	4628      	mov	r0, r5
 800a54a:	4798      	blx	r3
 800a54c:	2000      	movs	r0, #0
 800a54e:	e7e0      	b.n	800a512 <_raise_r+0x12>

0800a550 <raise>:
 800a550:	4b02      	ldr	r3, [pc, #8]	; (800a55c <raise+0xc>)
 800a552:	4601      	mov	r1, r0
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	f7ff bfd3 	b.w	800a500 <_raise_r>
 800a55a:	bf00      	nop
 800a55c:	2000000c 	.word	0x2000000c

0800a560 <_kill_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	; (800a580 <_kill_r+0x20>)
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	4611      	mov	r1, r2
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	f7f6 fa33 	bl	80009d8 <_kill>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	d102      	bne.n	800a57c <_kill_r+0x1c>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	b103      	cbz	r3, 800a57c <_kill_r+0x1c>
 800a57a:	6023      	str	r3, [r4, #0]
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
 800a57e:	bf00      	nop
 800a580:	200001d0 	.word	0x200001d0

0800a584 <_getpid_r>:
 800a584:	f7f6 ba20 	b.w	80009c8 <_getpid>

0800a588 <__sread>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	460c      	mov	r4, r1
 800a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a590:	f000 f894 	bl	800a6bc <_read_r>
 800a594:	2800      	cmp	r0, #0
 800a596:	bfab      	itete	ge
 800a598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a59a:	89a3      	ldrhlt	r3, [r4, #12]
 800a59c:	181b      	addge	r3, r3, r0
 800a59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5a2:	bfac      	ite	ge
 800a5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5a6:	81a3      	strhlt	r3, [r4, #12]
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <__swrite>:
 800a5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	898b      	ldrh	r3, [r1, #12]
 800a5b2:	05db      	lsls	r3, r3, #23
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	4616      	mov	r6, r2
 800a5ba:	d505      	bpl.n	800a5c8 <__swrite+0x1e>
 800a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f000 f868 	bl	800a698 <_lseek_r>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	4628      	mov	r0, r5
 800a5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5de:	f000 b817 	b.w	800a610 <_write_r>

0800a5e2 <__sseek>:
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ea:	f000 f855 	bl	800a698 <_lseek_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	bf15      	itete	ne
 800a5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5fe:	81a3      	strheq	r3, [r4, #12]
 800a600:	bf18      	it	ne
 800a602:	81a3      	strhne	r3, [r4, #12]
 800a604:	bd10      	pop	{r4, pc}

0800a606 <__sclose>:
 800a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60a:	f000 b813 	b.w	800a634 <_close_r>
	...

0800a610 <_write_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d07      	ldr	r5, [pc, #28]	; (800a630 <_write_r+0x20>)
 800a614:	4604      	mov	r4, r0
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7f6 fa11 	bl	8000a46 <_write>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_write_r+0x1e>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_write_r+0x1e>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	200001d0 	.word	0x200001d0

0800a634 <_close_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d06      	ldr	r5, [pc, #24]	; (800a650 <_close_r+0x1c>)
 800a638:	2300      	movs	r3, #0
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	f7f6 fa1d 	bl	8000a7e <_close>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_close_r+0x1a>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_close_r+0x1a>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	200001d0 	.word	0x200001d0

0800a654 <_fstat_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d07      	ldr	r5, [pc, #28]	; (800a674 <_fstat_r+0x20>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	4611      	mov	r1, r2
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	f7f6 fa18 	bl	8000a96 <_fstat>
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	d102      	bne.n	800a670 <_fstat_r+0x1c>
 800a66a:	682b      	ldr	r3, [r5, #0]
 800a66c:	b103      	cbz	r3, 800a670 <_fstat_r+0x1c>
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	bf00      	nop
 800a674:	200001d0 	.word	0x200001d0

0800a678 <_isatty_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d06      	ldr	r5, [pc, #24]	; (800a694 <_isatty_r+0x1c>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	602b      	str	r3, [r5, #0]
 800a684:	f7f6 fa17 	bl	8000ab6 <_isatty>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_isatty_r+0x1a>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_isatty_r+0x1a>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	200001d0 	.word	0x200001d0

0800a698 <_lseek_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d07      	ldr	r5, [pc, #28]	; (800a6b8 <_lseek_r+0x20>)
 800a69c:	4604      	mov	r4, r0
 800a69e:	4608      	mov	r0, r1
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f7f6 fa10 	bl	8000acc <_lseek>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_lseek_r+0x1e>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_lseek_r+0x1e>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	200001d0 	.word	0x200001d0

0800a6bc <_read_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d07      	ldr	r5, [pc, #28]	; (800a6dc <_read_r+0x20>)
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f7f6 f99e 	bl	8000a0c <_read>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_read_r+0x1e>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_read_r+0x1e>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	200001d0 	.word	0x200001d0

0800a6e0 <_init>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr

0800a6ec <_fini>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	bf00      	nop
 800a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f2:	bc08      	pop	{r3}
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	4770      	bx	lr
