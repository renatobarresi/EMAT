
USB_MSC_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008474  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008698  08008698  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a0  080086a0  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  080086a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020124  2**0
                  CONTENTS
 10 .bss          00000c84  20000124  20000124  00020124  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000da8  20000da8  00020124  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6a8  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ddb  00000000  00000000  0002f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  000325d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af8  00000000  00000000  00033240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026554  00000000  00000000  00033d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011277  00000000  00000000  0005a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3cb4  00000000  00000000  0006b503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f1b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b8  00000000  00000000  0013f208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000124 	.word	0x20000124
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008608 	.word	0x08008608

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000128 	.word	0x20000128
 80001e8:	08008608 	.word	0x08008608

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa14 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f806 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f86e 	bl	80005dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000500:	f007 fb70 	bl	8007be4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x14>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 f86e 	bl	80085f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000568:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 ffdf 	bl	8002550 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f924 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fa40 	bl	8002a40 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f90d 	bl	80007e4 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	4b75      	ldr	r3, [pc, #468]	; (80007cc <MX_GPIO_Init+0x1f0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a74      	ldr	r2, [pc, #464]	; (80007cc <MX_GPIO_Init+0x1f0>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b72      	ldr	r3, [pc, #456]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	4b6e      	ldr	r3, [pc, #440]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a6d      	ldr	r2, [pc, #436]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b67      	ldr	r3, [pc, #412]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a66      	ldr	r2, [pc, #408]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b64      	ldr	r3, [pc, #400]	; (80007cc <MX_GPIO_Init+0x1f0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b60      	ldr	r3, [pc, #384]	; (80007cc <MX_GPIO_Init+0x1f0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a5f      	ldr	r2, [pc, #380]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b5d      	ldr	r3, [pc, #372]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b59      	ldr	r3, [pc, #356]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a58      	ldr	r2, [pc, #352]	; (80007cc <MX_GPIO_Init+0x1f0>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b56      	ldr	r3, [pc, #344]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b52      	ldr	r3, [pc, #328]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a51      	ldr	r2, [pc, #324]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <MX_GPIO_Init+0x1f0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f244 0181 	movw	r1, #16513	; 0x4081
 80006a0:	484b      	ldr	r0, [pc, #300]	; (80007d0 <MX_GPIO_Init+0x1f4>)
 80006a2:	f000 fc91 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	484a      	ldr	r0, [pc, #296]	; (80007d4 <MX_GPIO_Init+0x1f8>)
 80006ac:	f000 fc8c 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4844      	ldr	r0, [pc, #272]	; (80007d8 <MX_GPIO_Init+0x1fc>)
 80006c8:	f000 fad2 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006cc:	2332      	movs	r3, #50	; 0x32
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006dc:	230b      	movs	r3, #11
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	483c      	ldr	r0, [pc, #240]	; (80007d8 <MX_GPIO_Init+0x1fc>)
 80006e8:	f000 fac2 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ec:	2386      	movs	r3, #134	; 0x86
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4835      	ldr	r0, [pc, #212]	; (80007dc <MX_GPIO_Init+0x200>)
 8000708:	f000 fab2 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800070c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	482a      	ldr	r0, [pc, #168]	; (80007d0 <MX_GPIO_Init+0x1f4>)
 8000726:	f000 faa3 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800073c:	230b      	movs	r3, #11
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4822      	ldr	r0, [pc, #136]	; (80007d0 <MX_GPIO_Init+0x1f4>)
 8000748:	f000 fa92 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800074c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800075e:	2307      	movs	r3, #7
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	481d      	ldr	r0, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x204>)
 800076a:	f000 fa81 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800076e:	2340      	movs	r3, #64	; 0x40
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <MX_GPIO_Init+0x1f8>)
 8000786:	f000 fa73 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_GPIO_Init+0x1f8>)
 800079e:	f000 fa67 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b4:	230b      	movs	r3, #11
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_GPIO_Init+0x1f8>)
 80007c0:	f000 fa56 	bl	8000c70 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3730      	adds	r7, #48	; 0x30
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020400 	.word	0x40020400
 80007d4:	40021800 	.word	0x40021800
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <HAL_MspInit+0x4c>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f89a 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <OTG_FS_IRQHandler+0x10>)
 800089a:	f000 fcfe 	bl	800129a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000624 	.word	0x20000624

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e8:	4c0b      	ldr	r4, [pc, #44]	; (8000918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f6:	f7ff ffd7 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f007 fe59 	bl	80085b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fdf7 	bl	80004f0 <main>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000904:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8000910:	080086a8 	.word	0x080086a8
  ldr r2, =_sbss
 8000914:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8000918:	20000da8 	.word	0x20000da8

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_Init+0x40>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_Init+0x40>)
 8000936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x40>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f94f 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f808 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff ff4c 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f967 	bl	8000c56 <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a0:	f000 f92f 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000140 	.word	0x20000140

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000140 	.word	0x20000140

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff ffee 	bl	80009ec <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffde 	bl	80009ec <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <__NVIC_EnableIRQ+0x38>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f7ff ff8e 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff29 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff3e 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff8e 	bl	8000b40 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5d 	bl	8000aec <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff31 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	e177      	b.n	8000f7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 8166 	bne.w	8000f76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d130      	bne.n	8000d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f003 0201 	and.w	r2, r3, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d017      	beq.n	8000d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d123      	bne.n	8000db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	69b9      	ldr	r1, [r7, #24]
 8000db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0203 	and.w	r2, r3, #3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80c0 	beq.w	8000f76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b66      	ldr	r3, [pc, #408]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a65      	ldr	r2, [pc, #404]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b63      	ldr	r3, [pc, #396]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e12:	4a61      	ldr	r2, [pc, #388]	; (8000f98 <HAL_GPIO_Init+0x328>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <HAL_GPIO_Init+0x32c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d037      	beq.n	8000eae <HAL_GPIO_Init+0x23e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a57      	ldr	r2, [pc, #348]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d031      	beq.n	8000eaa <HAL_GPIO_Init+0x23a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a56      	ldr	r2, [pc, #344]	; (8000fa4 <HAL_GPIO_Init+0x334>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d02b      	beq.n	8000ea6 <HAL_GPIO_Init+0x236>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a55      	ldr	r2, [pc, #340]	; (8000fa8 <HAL_GPIO_Init+0x338>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d025      	beq.n	8000ea2 <HAL_GPIO_Init+0x232>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a54      	ldr	r2, [pc, #336]	; (8000fac <HAL_GPIO_Init+0x33c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01f      	beq.n	8000e9e <HAL_GPIO_Init+0x22e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a53      	ldr	r2, [pc, #332]	; (8000fb0 <HAL_GPIO_Init+0x340>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x22a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <HAL_GPIO_Init+0x344>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x226>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a51      	ldr	r2, [pc, #324]	; (8000fb8 <HAL_GPIO_Init+0x348>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <HAL_GPIO_Init+0x34c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x21e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x350>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x21a>
 8000e86:	2309      	movs	r3, #9
 8000e88:	e012      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	e010      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000e8e:	2308      	movs	r3, #8
 8000e90:	e00e      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000e92:	2307      	movs	r3, #7
 8000e94:	e00c      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000e96:	2306      	movs	r3, #6
 8000e98:	e00a      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	e008      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x240>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	f002 0203 	and.w	r2, r2, #3
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec0:	4935      	ldr	r1, [pc, #212]	; (8000f98 <HAL_GPIO_Init+0x328>)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef2:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f1c:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f46:	4a1f      	ldr	r2, [pc, #124]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_GPIO_Init+0x354>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	f67f ae84 	bls.w	8000c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40021400 	.word	0x40021400
 8000fb4:	40021800 	.word	0x40021800
 8000fb8:	40021c00 	.word	0x40021c00
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40022400 	.word	0x40022400
 8000fc4:	40013c00 	.word	0x40013c00

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffc:	b08f      	sub	sp, #60	; 0x3c
 8000ffe:	af0a      	add	r7, sp, #40	; 0x28
 8001000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e10f      	b.n	800122c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f006 ff80 	bl	8007f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f002 f805 	bl	800305a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687e      	ldr	r6, [r7, #4]
 8001058:	466d      	mov	r5, sp
 800105a:	f106 0410 	add.w	r4, r6, #16
 800105e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800106a:	e885 0003 	stmia.w	r5, {r0, r1}
 800106e:	1d33      	adds	r3, r6, #4
 8001070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f001 fedc 	bl	8002e30 <USB_CoreInit>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2202      	movs	r2, #2
 8001082:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0d0      	b.n	800122c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fff3 	bl	800307c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e04a      	b.n	8001132 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	333d      	adds	r3, #61	; 0x3d
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	333c      	adds	r3, #60	; 0x3c
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	b298      	uxth	r0, r3
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3344      	adds	r3, #68	; 0x44
 80010d8:	4602      	mov	r2, r0
 80010da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	3340      	adds	r3, #64	; 0x40
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	3348      	adds	r3, #72	; 0x48
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	334c      	adds	r3, #76	; 0x4c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3354      	adds	r3, #84	; 0x54
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	3301      	adds	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3af      	bcc.n	800109c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e044      	b.n	80011cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	3301      	adds	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3b5      	bcc.n	8001142 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	687e      	ldr	r6, [r7, #4]
 80011de:	466d      	mov	r5, sp
 80011e0:	f106 0410 	add.w	r4, r6, #16
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011f4:	1d33      	adds	r3, r6, #4
 80011f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f001 ff8b 	bl	8003114 <USB_DevInit>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e00d      	b.n	800122c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f003 f8da 	bl	80043de <USB_DevDisconnect>

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001234 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_PCD_Start+0x1c>
 800124c:	2302      	movs	r3, #2
 800124e:	e020      	b.n	8001292 <HAL_PCD_Start+0x5e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	2b01      	cmp	r3, #1
 800125e:	d109      	bne.n	8001274 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fedd 	bl	8003038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 f88a 	bl	800439c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800129a:	b590      	push	{r4, r7, lr}
 800129c:	b08d      	sub	sp, #52	; 0x34
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 f948 	bl	8004546 <USB_GetMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f040 848a 	bne.w	8001bd2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 f8ac 	bl	8004420 <USB_ReadInterrupts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8480 	beq.w	8001bd0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 f899 	bl	8004420 <USB_ReadInterrupts>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d107      	bne.n	8001308 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f002 0202 	and.w	r2, r2, #2
 8001306:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f003 f887 	bl	8004420 <USB_ReadInterrupts>
 8001312:	4603      	mov	r3, r0
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b10      	cmp	r3, #16
 800131a:	d161      	bne.n	80013e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0210 	bic.w	r2, r2, #16
 800132a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	f003 020f 	and.w	r2, r3, #15
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	0c5b      	lsrs	r3, r3, #17
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	2b02      	cmp	r3, #2
 8001356:	d124      	bne.n	80013a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d035      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800136e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	6a38      	ldr	r0, [r7, #32]
 8001378:	f002 febe 	bl	80040f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001388:	441a      	add	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139a:	441a      	add	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	e016      	b.n	80013d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	0c5b      	lsrs	r3, r3, #17
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d110      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013b4:	2208      	movs	r2, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	6a38      	ldr	r0, [r7, #32]
 80013ba:	f002 fe9d 	bl	80040f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ca:	441a      	add	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0210 	orr.w	r2, r2, #16
 80013de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f81b 	bl	8004420 <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013f4:	f040 80a7 	bne.w	8001546 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f003 f820 	bl	8004446 <USB_ReadDevAllOutEpInterrupt>
 8001406:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001408:	e099      	b.n	800153e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 808e 	beq.w	8001532 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f003 f844 	bl	80044ae <USB_ReadDevOutEPInterrupt>
 8001426:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143e:	461a      	mov	r2, r3
 8001440:	2301      	movs	r3, #1
 8001442:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fef0 	bl	800222c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00c      	beq.n	8001470 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	015a      	lsls	r2, r3, #5
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001462:	461a      	mov	r2, r3
 8001464:	2308      	movs	r3, #8
 8001466:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 ffc6 	bl	80023fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001486:	461a      	mov	r2, r3
 8001488:	2310      	movs	r3, #16
 800148a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d030      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	2b80      	cmp	r3, #128	; 0x80
 80014a0:	d109      	bne.n	80014b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2200      	movs	r2, #0
 80014d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f006 fe37 	bl	8008154 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2302      	movs	r3, #2
 80014f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150e:	461a      	mov	r2, r3
 8001510:	2320      	movs	r3, #32
 8001512:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152a:	461a      	mov	r2, r3
 800152c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001530:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3301      	adds	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	2b00      	cmp	r3, #0
 8001542:	f47f af62 	bne.w	800140a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f002 ff68 	bl	8004420 <USB_ReadInterrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800155a:	f040 80db 	bne.w	8001714 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f002 ff89 	bl	800447a <USB_ReadDevAllInEpInterrupt>
 8001568:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800156e:	e0cd      	b.n	800170c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80c2 	beq.w	8001700 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f002 ffaf 	bl	80044ea <USB_ReadDevInEPInterrupt>
 800158c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d057      	beq.n	8001648 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	2201      	movs	r2, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69f9      	ldr	r1, [r7, #28]
 80015b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015b8:	4013      	ands	r3, r2
 80015ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c8:	461a      	mov	r2, r3
 80015ca:	2301      	movs	r3, #1
 80015cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d132      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	334c      	adds	r3, #76	; 0x4c
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	3348      	adds	r3, #72	; 0x48
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4419      	add	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4403      	add	r3, r0
 800160a:	334c      	adds	r3, #76	; 0x4c
 800160c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	2b00      	cmp	r3, #0
 8001612:	d113      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3354      	adds	r3, #84	; 0x54
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001634:	461a      	mov	r2, r3
 8001636:	2101      	movs	r1, #1
 8001638:	f002 ffb6 	bl	80045a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f006 fd01 	bl	800804a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165e:	461a      	mov	r2, r3
 8001660:	2308      	movs	r3, #8
 8001662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	2310      	movs	r3, #16
 800167e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001696:	461a      	mov	r2, r3
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d023      	beq.n	80016ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f001 fe97 	bl	80033dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	3338      	adds	r3, #56	; 0x38
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	3304      	adds	r3, #4
 80016c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2200      	movs	r2, #0
 80016ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f006 fd4e 	bl	8008178 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	461a      	mov	r2, r3
 80016ea:	2302      	movs	r3, #2
 80016ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fd08 	bl	8002110 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3301      	adds	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	f47f af2e 	bne.w	8001570 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fe81 	bl	8004420 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001728:	d122      	bne.n	8001770 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001750:	2100      	movs	r1, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fef0 	bl	8002538 <HAL_PCDEx_LPM_Callback>
 8001758:	e002      	b.n	8001760 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f006 fcec 	bl	8008138 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800176e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f002 fe53 	bl	8004420 <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001784:	d112      	bne.n	80017ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d102      	bne.n	800179c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f006 fca8 	bl	80080ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017aa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fe35 	bl	8004420 <USB_ReadInterrupts>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c0:	f040 80b7 	bne.w	8001932 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2110      	movs	r1, #16
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 fdfc 	bl	80033dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e8:	e046      	b.n	8001878 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f6:	461a      	mov	r2, r3
 80017f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180e:	0151      	lsls	r1, r2, #5
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	440a      	add	r2, r1
 8001814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800181c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	461a      	mov	r2, r3
 800182c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001830:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001842:	0151      	lsls	r1, r2, #5
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	440a      	add	r2, r1
 8001848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800184c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001850:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001862:	0151      	lsls	r1, r2, #5
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	440a      	add	r2, r1
 8001868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800186c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001870:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	3301      	adds	r3, #1
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187e:	429a      	cmp	r2, r3
 8001880:	d3b3      	bcc.n	80017ea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001894:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	2b00      	cmp	r3, #0
 800189c:	d016      	beq.n	80018cc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ae:	f043 030b 	orr.w	r3, r3, #11
 80018b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c4:	f043 030b 	orr.w	r3, r3, #11
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	e015      	b.n	80018f8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f2:	f043 030b 	orr.w	r3, r3, #11
 80018f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001906:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800190a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800191c:	461a      	mov	r2, r3
 800191e:	f002 fe43 	bl	80045a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fd72 	bl	8004420 <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001946:	d124      	bne.n	8001992 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f002 fe08 	bl	8004562 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fdbd 	bl	80034d6 <USB_GetDevSpeed>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	f001 fa56 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 800196c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f001 fabc 	bl	8002ef4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f006 fb8c 	bl	800809a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001990:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fd42 	bl	8004420 <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d10a      	bne.n	80019bc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f006 fb69 	bl	800807e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f002 0208 	and.w	r2, r2, #8
 80019ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fd2d 	bl	8004420 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d122      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e014      	b.n	8001a0c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fb27 	bl	8002054 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3301      	adds	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d3e5      	bcc.n	80019e2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fd00 	bl	8004420 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2a:	d13b      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e02b      	b.n	8001a8a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3340      	adds	r3, #64	; 0x40
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d115      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da12      	bge.n	8001a84 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	333f      	adds	r3, #63	; 0x3f
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fae8 	bl	8002054 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	3301      	adds	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3ce      	bcc.n	8001a32 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fcb9 	bl	8004420 <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ab8:	d155      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	e045      	b.n	8001b4c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d12e      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ae8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da2b      	bge.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001afa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d121      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10a      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6053      	str	r3, [r2, #4]
            break;
 8001b44:	e007      	b.n	8001b56 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3b4      	bcc.n	8001ac0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fc58 	bl	8004420 <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d10a      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f006 fb0d 	bl	800819c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fc42 	bl	8004420 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d115      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f006 fafd 	bl	80081b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e000      	b.n	8001bd2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001bd0:	bf00      	nop
    }
  }
}
 8001bd2:	3734      	adds	r7, #52	; 0x34
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}

08001bd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_PCD_SetAddress+0x1a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e013      	b.n	8001c1a <HAL_PCD_SetAddress+0x42>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fba0 	bl	8004350 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	4608      	mov	r0, r1
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4603      	mov	r3, r0
 8001c32:	70fb      	strb	r3, [r7, #3]
 8001c34:	460b      	mov	r3, r1
 8001c36:	803b      	strh	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da0f      	bge.n	8001c68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3338      	adds	r3, #56	; 0x38
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	705a      	strb	r2, [r3, #1]
 8001c66:	e00f      	b.n	8001c88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 020f 	and.w	r2, r3, #15
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c94:	883a      	ldrh	r2, [r7, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	78ba      	ldrb	r2, [r7, #2]
 8001c9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cb2:	78bb      	ldrb	r3, [r7, #2]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_EP_Open+0xaa>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e00e      	b.n	8001cea <HAL_PCD_EP_Open+0xc8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fc20 	bl	8003520 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da0f      	bge.n	8001d26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	3338      	adds	r3, #56	; 0x38
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	705a      	strb	r2, [r3, #1]
 8001d24:	e00f      	b.n	8001d46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_PCD_EP_Close+0x6e>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e00e      	b.n	8001d7e <HAL_PCD_EP_Close+0x8c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fc5e 	bl	8003630 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	460b      	mov	r3, r1
 8001d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d102      	bne.n	8001de2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001de2:	7afb      	ldrb	r3, [r7, #11]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	f001 ff3d 	bl	8003c78 <USB_EP0StartXfer>
 8001dfe:	e008      	b.n	8001e12 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	f001 fceb 	bl	80037e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3338      	adds	r3, #56	; 0x38
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f001 fedb 	bl	8003c78 <USB_EP0StartXfer>
 8001ec2:	e008      	b.n	8001ed6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	f001 fc89 	bl	80037e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d901      	bls.n	8001efe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e050      	b.n	8001fa0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da0f      	bge.n	8001f26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	3338      	adds	r3, #56	; 0x38
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	e00d      	b.n	8001f42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_PCD_EP_SetStall+0x82>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e01e      	b.n	8001fa0 <HAL_PCD_EP_SetStall+0xc0>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 f919 	bl	80041a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	b2d9      	uxtb	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f90:	461a      	mov	r2, r3
 8001f92:	f002 fb09 	bl	80045a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d901      	bls.n	8001fc6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e042      	b.n	800204c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0f      	bge.n	8001fee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	3338      	adds	r3, #56	; 0x38
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	705a      	strb	r2, [r3, #1]
 8001fec:	e00f      	b.n	800200e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_PCD_EP_ClrStall+0x86>
 800202a:	2302      	movs	r3, #2
 800202c:	e00e      	b.n	800204c <HAL_PCD_EP_ClrStall+0xa4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f002 f921 	bl	8004284 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da0c      	bge.n	8002082 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 020f 	and.w	r2, r3, #15
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	3338      	adds	r3, #56	; 0x38
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e00c      	b.n	800209c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 ff40 	bl	8003f28 <USB_EPStopXfer>
 80020a8:	4603      	mov	r3, r0
 80020aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020ac:	7afb      	ldrb	r3, [r7, #11]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_PCD_EP_Flush+0x1a>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e01b      	b.n	8002108 <HAL_PCD_EP_Flush+0x52>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80020d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	da09      	bge.n	80020f4 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	4619      	mov	r1, r3
 80020ec:	4610      	mov	r0, r2
 80020ee:	f001 f975 	bl	80033dc <USB_FlushTxFifo>
 80020f2:	e004      	b.n	80020fe <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 f9a3 	bl	8003444 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af02      	add	r7, sp, #8
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	429a      	cmp	r2, r3
 8002142:	d901      	bls.n	8002148 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e06c      	b.n	8002222 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	429a      	cmp	r2, r3
 800215c:	d902      	bls.n	8002164 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	3303      	adds	r3, #3
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216c:	e02b      	b.n	80021c6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	429a      	cmp	r2, r3
 8002182:	d902      	bls.n	800218a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3303      	adds	r3, #3
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4603      	mov	r3, r0
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f001 ff67 	bl	800407c <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	441a      	add	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	441a      	add	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d809      	bhi.n	80021f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d203      	bcs.n	80021f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1be      	bne.n	800216e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d811      	bhi.n	8002220 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	2201      	movs	r2, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	43db      	mvns	r3, r3
 8002216:	6939      	ldr	r1, [r7, #16]
 8002218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800221c:	4013      	ands	r3, r2
 800221e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	333c      	adds	r3, #60	; 0x3c
 8002244:	3304      	adds	r3, #4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d17b      	bne.n	800235a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d015      	beq.n	8002298 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4a61      	ldr	r2, [pc, #388]	; (80023f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	f240 80b9 	bls.w	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80b3 	beq.w	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228e:	461a      	mov	r2, r3
 8002290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002294:	6093      	str	r3, [r2, #8]
 8002296:	e0a7      	b.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ae:	461a      	mov	r2, r3
 80022b0:	2320      	movs	r3, #32
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	e098      	b.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8093 	bne.w	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d90f      	bls.n	80022ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e0:	461a      	mov	r2, r3
 80022e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e6:	6093      	str	r3, [r2, #8]
 80022e8:	e07e      	b.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	3304      	adds	r3, #4
 80022fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	0159      	lsls	r1, r3, #5
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	440b      	add	r3, r1
 800230c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	1ad2      	subs	r2, r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d114      	bne.n	800234c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002334:	461a      	mov	r2, r3
 8002336:	2101      	movs	r1, #1
 8002338:	f002 f936 	bl	80045a8 <USB_EP0_OutStart>
 800233c:	e006      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	441a      	add	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f005 fe5e 	bl	8008014 <HAL_PCD_DataOutStageCallback>
 8002358:	e046      	b.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d124      	bne.n	80023ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002378:	461a      	mov	r2, r3
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	e032      	b.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002398:	461a      	mov	r2, r3
 800239a:	2320      	movs	r3, #32
 800239c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f005 fe35 	bl	8008014 <HAL_PCD_DataOutStageCallback>
 80023aa:	e01d      	b.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d114      	bne.n	80023dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d108      	bne.n	80023dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d4:	461a      	mov	r2, r3
 80023d6:	2100      	movs	r1, #0
 80023d8:	f002 f8e6 	bl	80045a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f005 fe16 	bl	8008014 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	4f54300a 	.word	0x4f54300a
 80023f8:	4f54310a 	.word	0x4f54310a

080023fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	333c      	adds	r3, #60	; 0x3c
 8002414:	3304      	adds	r3, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <PCD_EP_OutSetupPacket_int+0x88>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d90e      	bls.n	8002450 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002448:	461a      	mov	r2, r3
 800244a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f005 fdcd 	bl	8007ff0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <PCD_EP_OutSetupPacket_int+0x88>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d90c      	bls.n	8002478 <PCD_EP_OutSetupPacket_int+0x7c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002470:	461a      	mov	r2, r3
 8002472:	2101      	movs	r1, #1
 8002474:	f002 f898 	bl	80045a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	4f54300a 	.word	0x4f54300a

08002488 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	4613      	mov	r3, r2
 8002496:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024a6:	883b      	ldrh	r3, [r7, #0]
 80024a8:	0419      	lsls	r1, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
 80024b4:	e028      	b.n	8002508 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4413      	add	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e00d      	b.n	80024e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	3340      	adds	r3, #64	; 0x40
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4413      	add	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	3301      	adds	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d3ec      	bcc.n	80024ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024f0:	883b      	ldrh	r3, [r7, #0]
 80024f2:	0418      	lsls	r0, r3, #16
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4302      	orrs	r2, r0
 8002500:	3340      	adds	r3, #64	; 0x40
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e267      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d075      	beq.n	800265a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256e:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d00c      	beq.n	8002594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257a:	4b85      	ldr	r3, [pc, #532]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002582:	2b08      	cmp	r3, #8
 8002584:	d112      	bne.n	80025ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b82      	ldr	r3, [pc, #520]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002592:	d10b      	bne.n	80025ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	4b7e      	ldr	r3, [pc, #504]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d05b      	beq.n	8002658 <HAL_RCC_OscConfig+0x108>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d157      	bne.n	8002658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e242      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d106      	bne.n	80025c4 <HAL_RCC_OscConfig+0x74>
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a75      	ldr	r2, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e01d      	b.n	8002600 <HAL_RCC_OscConfig+0xb0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x98>
 80025ce:	4b70      	ldr	r3, [pc, #448]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6f      	ldr	r2, [pc, #444]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6d      	ldr	r3, [pc, #436]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6c      	ldr	r2, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0xb0>
 80025e8:	4b69      	ldr	r3, [pc, #420]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a68      	ldr	r2, [pc, #416]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe f9f0 	bl	80009ec <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe f9ec 	bl	80009ec <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e207      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b5b      	ldr	r3, [pc, #364]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0xc0>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe f9dc 	bl	80009ec <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe f9d8 	bl	80009ec <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1f3      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0xe8>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b44      	ldr	r3, [pc, #272]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d116      	bne.n	80026b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x152>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1c7      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	e03a      	b.n	800272e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c0:	4b34      	ldr	r3, [pc, #208]	; (8002794 <HAL_RCC_OscConfig+0x244>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe f991 	bl	80009ec <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe f98d 	bl	80009ec <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1a8      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4925      	ldr	r1, [pc, #148]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e015      	b.n	800272e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_OscConfig+0x244>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe f970 	bl	80009ec <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002710:	f7fe f96c 	bl	80009ec <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e187      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d036      	beq.n	80027a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCC_OscConfig+0x248>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe f950 	bl	80009ec <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002750:	f7fe f94c 	bl	80009ec <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e167      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_OscConfig+0x240>)
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x200>
 800276e:	e01b      	b.n	80027a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x248>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe f939 	bl	80009ec <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	e00e      	b.n	800279c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277e:	f7fe f935 	bl	80009ec <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d907      	bls.n	800279c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e150      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
 8002790:	40023800 	.word	0x40023800
 8002794:	42470000 	.word	0x42470000
 8002798:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ea      	bne.n	800277e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8097 	beq.w	80028e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a7c      	ldr	r2, [pc, #496]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e2:	2301      	movs	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b77      	ldr	r3, [pc, #476]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f2:	4b74      	ldr	r3, [pc, #464]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fe:	f7fe f8f5 	bl	80009ec <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002806:	f7fe f8f1 	bl	80009ec <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e10c      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCC_OscConfig+0x474>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x2ea>
 800282c:	4b64      	ldr	r3, [pc, #400]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a63      	ldr	r2, [pc, #396]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	e01c      	b.n	8002874 <HAL_RCC_OscConfig+0x324>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b05      	cmp	r3, #5
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x30c>
 8002842:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	4a5b      	ldr	r2, [pc, #364]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6713      	str	r3, [r2, #112]	; 0x70
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0x324>
 800285c:	4b58      	ldr	r3, [pc, #352]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a57      	ldr	r2, [pc, #348]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
 8002868:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 0304 	bic.w	r3, r3, #4
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d015      	beq.n	80028a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe f8b6 	bl	80009ec <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe f8b2 	bl	80009ec <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0cb      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ee      	beq.n	8002884 <HAL_RCC_OscConfig+0x334>
 80028a6:	e014      	b.n	80028d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7fe f8a0 	bl	80009ec <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7fe f89c 	bl	80009ec <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e0b5      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ee      	bne.n	80028b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d8:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4a38      	ldr	r2, [pc, #224]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a1 	beq.w	8002a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ee:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d05c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d141      	bne.n	8002986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_RCC_OscConfig+0x478>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe f870 	bl	80009ec <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe f86c 	bl	80009ec <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e087      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	3b01      	subs	r3, #1
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	491b      	ldr	r1, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_RCC_OscConfig+0x478>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe f845 	bl	80009ec <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002966:	f7fe f841 	bl	80009ec <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e05c      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x416>
 8002984:	e054      	b.n	8002a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_RCC_OscConfig+0x478>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe f82e 	bl	80009ec <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe f82a 	bl	80009ec <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e045      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_OscConfig+0x470>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x444>
 80029b2:	e03d      	b.n	8002a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e038      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000
 80029c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x4ec>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d028      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d121      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d11a      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d111      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0cc      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d90c      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b65      	ldr	r3, [pc, #404]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b8      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a94:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	494d      	ldr	r1, [pc, #308]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d044      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d119      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e067      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4934      	ldr	r1, [pc, #208]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b30:	f7fd ff5c 	bl	80009ec <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7fd ff58 	bl	80009ec <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e04f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 020c 	and.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1eb      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d20c      	bcs.n	8002b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e032      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	490e      	ldr	r1, [pc, #56]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc6:	f000 f821 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	490a      	ldr	r1, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	5ccb      	ldrb	r3, [r1, r3]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd febc 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	08008664 	.word	0x08008664
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c10:	b094      	sub	sp, #80	; 0x50
 8002c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
 8002c18:	2300      	movs	r3, #0
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c24:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x40>
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	f200 80e1 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3e:	e0db      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c44:	e0db      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c46:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c4a:	e0d8      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d063      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	2200      	movs	r2, #0
 8002c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
 8002c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c7e:	4622      	mov	r2, r4
 8002c80:	462b      	mov	r3, r5
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	0159      	lsls	r1, r3, #5
 8002c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c90:	0150      	lsls	r0, r2, #5
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4621      	mov	r1, r4
 8002c98:	1a51      	subs	r1, r2, r1
 8002c9a:	6139      	str	r1, [r7, #16]
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	018b      	lsls	r3, r1, #6
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cba:	4651      	mov	r1, sl
 8002cbc:	018a      	lsls	r2, r1, #6
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cde:	4690      	mov	r8, r2
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	eb18 0303 	adds.w	r3, r8, r3
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	462b      	mov	r3, r5
 8002cec:	eb49 0303 	adc.w	r3, r9, r3
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	024b      	lsls	r3, r1, #9
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d08:	4621      	mov	r1, r4
 8002d0a:	024a      	lsls	r2, r1, #9
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d1c:	f7fd fa66 	bl	80001ec <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	e058      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	4611      	mov	r1, r2
 8002d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	f04f 0000 	mov.w	r0, #0
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	0159      	lsls	r1, r3, #5
 8002d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d56:	0150      	lsls	r0, r2, #5
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d62:	4649      	mov	r1, r9
 8002d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d80:	eb63 050b 	sbc.w	r5, r3, fp
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	00eb      	lsls	r3, r5, #3
 8002d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4643      	mov	r3, r8
 8002d9a:	18e3      	adds	r3, r4, r3
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	464b      	mov	r3, r9
 8002da0:	eb45 0303 	adc.w	r3, r5, r3
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db2:	4629      	mov	r1, r5
 8002db4:	028b      	lsls	r3, r1, #10
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	028a      	lsls	r2, r1, #10
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	61fa      	str	r2, [r7, #28]
 8002dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd0:	f7fd fa0c 	bl	80001ec <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3750      	adds	r7, #80	; 0x50
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	007a1200 	.word	0x007a1200

08002e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e30:	b084      	sub	sp, #16
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	f107 001c 	add.w	r0, r7, #28
 8002e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d122      	bne.n	8002e8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f001 fbee 	bl	8004664 <USB_CoreReset>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e01a      	b.n	8002ec4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f001 fbe2 	bl	8004664 <USB_CoreReset>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb6:	e005      	b.n	8002ec4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10b      	bne.n	8002ee2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f043 0206 	orr.w	r2, r3, #6
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eee:	b004      	add	sp, #16
 8002ef0:	4770      	bx	lr
	...

08002ef4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d165      	bne.n	8002fd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4a41      	ldr	r2, [pc, #260]	; (8003010 <USB_SetTurnaroundTime+0x11c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d906      	bls.n	8002f1e <USB_SetTurnaroundTime+0x2a>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4a40      	ldr	r2, [pc, #256]	; (8003014 <USB_SetTurnaroundTime+0x120>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d202      	bcs.n	8002f1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f18:	230f      	movs	r3, #15
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e062      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4a3c      	ldr	r2, [pc, #240]	; (8003014 <USB_SetTurnaroundTime+0x120>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d306      	bcc.n	8002f34 <USB_SetTurnaroundTime+0x40>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <USB_SetTurnaroundTime+0x124>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d202      	bcs.n	8002f34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f2e:	230e      	movs	r3, #14
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e057      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4a38      	ldr	r2, [pc, #224]	; (8003018 <USB_SetTurnaroundTime+0x124>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d306      	bcc.n	8002f4a <USB_SetTurnaroundTime+0x56>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a37      	ldr	r2, [pc, #220]	; (800301c <USB_SetTurnaroundTime+0x128>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d202      	bcs.n	8002f4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f44:	230d      	movs	r3, #13
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e04c      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4a33      	ldr	r2, [pc, #204]	; (800301c <USB_SetTurnaroundTime+0x128>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d306      	bcc.n	8002f60 <USB_SetTurnaroundTime+0x6c>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4a32      	ldr	r2, [pc, #200]	; (8003020 <USB_SetTurnaroundTime+0x12c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d802      	bhi.n	8002f60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e041      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <USB_SetTurnaroundTime+0x12c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d906      	bls.n	8002f76 <USB_SetTurnaroundTime+0x82>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4a2e      	ldr	r2, [pc, #184]	; (8003024 <USB_SetTurnaroundTime+0x130>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d802      	bhi.n	8002f76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f70:	230b      	movs	r3, #11
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e036      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <USB_SetTurnaroundTime+0x130>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d906      	bls.n	8002f8c <USB_SetTurnaroundTime+0x98>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <USB_SetTurnaroundTime+0x134>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d802      	bhi.n	8002f8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f86:	230a      	movs	r3, #10
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e02b      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <USB_SetTurnaroundTime+0x134>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d906      	bls.n	8002fa2 <USB_SetTurnaroundTime+0xae>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4a25      	ldr	r2, [pc, #148]	; (800302c <USB_SetTurnaroundTime+0x138>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d202      	bcs.n	8002fa2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f9c:	2309      	movs	r3, #9
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e020      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4a21      	ldr	r2, [pc, #132]	; (800302c <USB_SetTurnaroundTime+0x138>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d306      	bcc.n	8002fb8 <USB_SetTurnaroundTime+0xc4>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4a20      	ldr	r2, [pc, #128]	; (8003030 <USB_SetTurnaroundTime+0x13c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d802      	bhi.n	8002fb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e015      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <USB_SetTurnaroundTime+0x13c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d906      	bls.n	8002fce <USB_SetTurnaroundTime+0xda>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <USB_SetTurnaroundTime+0x140>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d202      	bcs.n	8002fce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002fc8:	2307      	movs	r3, #7
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e00a      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002fce:	2306      	movs	r3, #6
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e007      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002fda:	2309      	movs	r3, #9
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e001      	b.n	8002fe4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002fe0:	2309      	movs	r3, #9
 8002fe2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	029b      	lsls	r3, r3, #10
 8002ff8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	00d8acbf 	.word	0x00d8acbf
 8003014:	00e4e1c0 	.word	0x00e4e1c0
 8003018:	00f42400 	.word	0x00f42400
 800301c:	01067380 	.word	0x01067380
 8003020:	011a499f 	.word	0x011a499f
 8003024:	01312cff 	.word	0x01312cff
 8003028:	014ca43f 	.word	0x014ca43f
 800302c:	016e3600 	.word	0x016e3600
 8003030:	01a6ab1f 	.word	0x01a6ab1f
 8003034:	01e84800 	.word	0x01e84800

08003038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d115      	bne.n	80030ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7fd fcaa 	bl	8000a04 <HAL_Delay>
      ms++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 fa45 	bl	8004546 <USB_GetMode>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d01e      	beq.n	8003100 <USB_SetCurrentMode+0x84>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b31      	cmp	r3, #49	; 0x31
 80030c6:	d9f0      	bls.n	80030aa <USB_SetCurrentMode+0x2e>
 80030c8:	e01a      	b.n	8003100 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d115      	bne.n	80030fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030dc:	2001      	movs	r0, #1
 80030de:	f7fd fc91 	bl	8000a04 <HAL_Delay>
      ms++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f001 fa2c 	bl	8004546 <USB_GetMode>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <USB_SetCurrentMode+0x84>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b31      	cmp	r3, #49	; 0x31
 80030f8:	d9f0      	bls.n	80030dc <USB_SetCurrentMode+0x60>
 80030fa:	e001      	b.n	8003100 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e005      	b.n	800310c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b32      	cmp	r3, #50	; 0x32
 8003104:	d101      	bne.n	800310a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003114:	b084      	sub	sp, #16
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e009      	b.n	8003148 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	3340      	adds	r3, #64	; 0x40
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	3301      	adds	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b0e      	cmp	r3, #14
 800314c:	d9f2      	bls.n	8003134 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11c      	bne.n	800318e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
 800318c:	e00b      	b.n	80031a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031ac:	461a      	mov	r2, r3
 80031ae:	2300      	movs	r3, #0
 80031b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	4619      	mov	r1, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	461a      	mov	r2, r3
 80031c2:	680b      	ldr	r3, [r1, #0]
 80031c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10c      	bne.n	80031e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f965 	bl	80034a4 <USB_SetDevSpeed>
 80031da:	e008      	b.n	80031ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031dc:	2101      	movs	r1, #1
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f960 	bl	80034a4 <USB_SetDevSpeed>
 80031e4:	e003      	b.n	80031ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031e6:	2103      	movs	r1, #3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f95b 	bl	80034a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031ee:	2110      	movs	r1, #16
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8f3 	bl	80033dc <USB_FlushTxFifo>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f91f 	bl	8003444 <USB_FlushRxFifo>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	461a      	mov	r2, r3
 8003224:	2300      	movs	r3, #0
 8003226:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	461a      	mov	r2, r3
 8003230:	2300      	movs	r3, #0
 8003232:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	e043      	b.n	80032c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800324c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003250:	d118      	bne.n	8003284 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003264:	461a      	mov	r2, r3
 8003266:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e013      	b.n	8003296 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327a:	461a      	mov	r2, r3
 800327c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e008      	b.n	8003296 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	461a      	mov	r2, r3
 8003292:	2300      	movs	r3, #0
 8003294:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	461a      	mov	r2, r3
 80032a4:	2300      	movs	r3, #0
 80032a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b4:	461a      	mov	r2, r3
 80032b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	3301      	adds	r3, #1
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d3b7      	bcc.n	800323a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	e043      	b.n	8003358 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032e6:	d118      	bne.n	800331a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	461a      	mov	r2, r3
 80032fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e013      	b.n	800332c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e008      	b.n	800332c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	2300      	movs	r3, #0
 800332a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2300      	movs	r3, #0
 800333c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	461a      	mov	r2, r3
 800334c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3301      	adds	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d3b7      	bcc.n	80032d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003372:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003380:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f043 0210 	orr.w	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <USB_DevInit+0x2c4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f043 0208 	orr.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033d4:	b004      	add	sp, #16
 80033d6:	4770      	bx	lr
 80033d8:	803c3800 	.word	0x803c3800

080033dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3301      	adds	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a13      	ldr	r2, [pc, #76]	; (8003440 <USB_FlushTxFifo+0x64>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e01b      	b.n	8003434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	daf2      	bge.n	80033ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	019b      	lsls	r3, r3, #6
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3301      	adds	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a08      	ldr	r2, [pc, #32]	; (8003440 <USB_FlushTxFifo+0x64>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e006      	b.n	8003434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b20      	cmp	r3, #32
 8003430:	d0f0      	beq.n	8003414 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	00030d40 	.word	0x00030d40

08003444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <USB_FlushRxFifo+0x5c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e018      	b.n	8003494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	daf2      	bge.n	8003450 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2210      	movs	r2, #16
 8003472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3301      	adds	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <USB_FlushRxFifo+0x5c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e006      	b.n	8003494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b10      	cmp	r3, #16
 8003490:	d0f0      	beq.n	8003474 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	00030d40 	.word	0x00030d40

080034a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b087      	sub	sp, #28
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0306 	and.w	r3, r3, #6
 80034ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
 80034fa:	e00a      	b.n	8003512 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d002      	beq.n	8003508 <USB_GetDevSpeed+0x32>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b06      	cmp	r3, #6
 8003506:	d102      	bne.n	800350e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003508:	2302      	movs	r3, #2
 800350a:	75fb      	strb	r3, [r7, #23]
 800350c:	e001      	b.n	8003512 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800350e:	230f      	movs	r3, #15
 8003510:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
}
 8003514:	4618      	mov	r0, r3
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d13a      	bne.n	80035b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	b29b      	uxth	r3, r3
 8003554:	68f9      	ldr	r1, [r7, #12]
 8003556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800355a:	4313      	orrs	r3, r2
 800355c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d155      	bne.n	8003620 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	791b      	ldrb	r3, [r3, #4]
 800358e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003590:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	059b      	lsls	r3, r3, #22
 8003596:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003598:	4313      	orrs	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	0151      	lsls	r1, r2, #5
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	440a      	add	r2, r1
 80035a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e036      	b.n	8003620 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11a      	bne.n	8003620 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	791b      	ldrb	r3, [r3, #4]
 8003604:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003606:	430b      	orrs	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	785b      	ldrb	r3, [r3, #1]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d161      	bne.n	8003710 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800365e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003662:	d11f      	bne.n	80036a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	0151      	lsls	r1, r2, #5
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	440a      	add	r2, r1
 800367a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003682:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	0151      	lsls	r1, r2, #5
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	440a      	add	r2, r1
 800369a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800369e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036c4:	4013      	ands	r3, r2
 80036c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036e8:	4013      	ands	r3, r2
 80036ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	0159      	lsls	r1, r3, #5
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	440b      	add	r3, r1
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	4619      	mov	r1, r3
 8003708:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <USB_DeactivateEndpoint+0x1b0>)
 800370a:	4013      	ands	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
 800370e:	e060      	b.n	80037d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003726:	d11f      	bne.n	8003768 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	0151      	lsls	r1, r2, #5
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	440a      	add	r2, r1
 800373e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003746:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	440a      	add	r2, r1
 800375e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	43db      	mvns	r3, r3
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003788:	4013      	ands	r3, r2
 800378a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	43db      	mvns	r3, r3
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037ac:	4013      	ands	r3, r2
 80037ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	0159      	lsls	r1, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	440b      	add	r3, r1
 80037c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ca:	4619      	mov	r1, r3
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <USB_DeactivateEndpoint+0x1b4>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	ec337800 	.word	0xec337800
 80037e4:	eff37800 	.word	0xeff37800

080037e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 815c 	bne.w	8003ac2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d132      	bne.n	8003878 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003870:	0cdb      	lsrs	r3, r3, #19
 8003872:	04db      	lsls	r3, r3, #19
 8003874:	6113      	str	r3, [r2, #16]
 8003876:	e074      	b.n	8003962 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	440a      	add	r2, r1
 800388e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003892:	0cdb      	lsrs	r3, r3, #19
 8003894:	04db      	lsls	r3, r3, #19
 8003896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6999      	ldr	r1, [r3, #24]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	440b      	add	r3, r1
 80038d4:	1e59      	subs	r1, r3, #1
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	fbb1 f3f3 	udiv	r3, r1, r3
 80038de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038e0:	4b9d      	ldr	r3, [pc, #628]	; (8003b58 <USB_EPStartXfer+0x370>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	69b9      	ldr	r1, [r7, #24]
 80038e6:	0148      	lsls	r0, r1, #5
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	4401      	add	r1, r0
 80038ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038f0:	4313      	orrs	r3, r2
 80038f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	0148      	lsls	r0, r1, #5
 800390e:	69f9      	ldr	r1, [r7, #28]
 8003910:	4401      	add	r1, r0
 8003912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003916:	4313      	orrs	r3, r2
 8003918:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	791b      	ldrb	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d11f      	bne.n	8003962 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	0151      	lsls	r1, r2, #5
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	440a      	add	r2, r1
 8003938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800393c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003940:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003960:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d14b      	bne.n	8003a00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d128      	bne.n	80039de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d110      	bne.n	80039be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	e00f      	b.n	80039de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e133      	b.n	8003c68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	0151      	lsls	r1, r2, #5
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	440a      	add	r2, r1
 8003a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	791b      	ldrb	r3, [r3, #4]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d015      	beq.n	8003a54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 811b 	beq.w	8003c68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	69f9      	ldr	r1, [r7, #28]
 8003a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	634b      	str	r3, [r1, #52]	; 0x34
 8003a52:	e109      	b.n	8003c68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d110      	bne.n	8003a86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e00f      	b.n	8003aa6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	0151      	lsls	r1, r2, #5
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6919      	ldr	r1, [r3, #16]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	b298      	uxth	r0, r3
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4603      	mov	r3, r0
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fade 	bl	800407c <USB_WritePacket>
 8003ac0:	e0d2      	b.n	8003c68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	0151      	lsls	r1, r2, #5
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	440a      	add	r2, r1
 8003ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003adc:	0cdb      	lsrs	r3, r3, #19
 8003ade:	04db      	lsls	r3, r3, #19
 8003ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	0151      	lsls	r1, r2, #5
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	440a      	add	r2, r1
 8003af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d126      	bne.n	8003b5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	0148      	lsls	r0, r1, #5
 8003b28:	69f9      	ldr	r1, [r7, #28]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b52:	6113      	str	r3, [r2, #16]
 8003b54:	e03a      	b.n	8003bcc <USB_EPStartXfer+0x3e4>
 8003b56:	bf00      	nop
 8003b58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	1e5a      	subs	r2, r3, #1
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	8afa      	ldrh	r2, [r7, #22]
 8003b78:	fb03 f202 	mul.w	r2, r3, r2
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	8afb      	ldrh	r3, [r7, #22]
 8003b90:	04d9      	lsls	r1, r3, #19
 8003b92:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <USB_EPStartXfer+0x48c>)
 8003b94:	400b      	ands	r3, r1
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	0148      	lsls	r0, r1, #5
 8003b9a:	69f9      	ldr	r1, [r7, #28]
 8003b9c:	4401      	add	r1, r0
 8003b9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	0148      	lsls	r0, r1, #5
 8003bc0:	69f9      	ldr	r1, [r7, #28]
 8003bc2:	4401      	add	r1, r0
 8003bc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d10d      	bne.n	8003bee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6919      	ldr	r1, [r3, #16]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	460a      	mov	r2, r1
 8003bec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	791b      	ldrb	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d128      	bne.n	8003c48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d110      	bne.n	8003c28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00f      	b.n	8003c48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	1ff80000 	.word	0x1ff80000

08003c78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 80ce 	bne.w	8003e36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d132      	bne.n	8003d08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	0151      	lsls	r1, r2, #5
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	440a      	add	r2, r1
 8003cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ce4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d00:	0cdb      	lsrs	r3, r3, #19
 8003d02:	04db      	lsls	r3, r3, #19
 8003d04:	6113      	str	r3, [r2, #16]
 8003d06:	e04e      	b.n	8003da6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d22:	0cdb      	lsrs	r3, r3, #19
 8003d24:	04db      	lsls	r3, r3, #19
 8003d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	0151      	lsls	r1, r2, #5
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d903      	bls.n	8003d60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d96:	6939      	ldr	r1, [r7, #16]
 8003d98:	0148      	lsls	r0, r1, #5
 8003d9a:	6979      	ldr	r1, [r7, #20]
 8003d9c:	4401      	add	r1, r0
 8003d9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003da2:	4313      	orrs	r3, r2
 8003da4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d11e      	bne.n	8003dea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	e097      	b.n	8003f1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8083 	beq.w	8003f1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	6979      	ldr	r1, [r7, #20]
 8003e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e30:	4313      	orrs	r3, r2
 8003e32:	634b      	str	r3, [r1, #52]	; 0x34
 8003e34:	e071      	b.n	8003f1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e50:	0cdb      	lsrs	r3, r3, #19
 8003e52:	04db      	lsls	r3, r3, #19
 8003e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	0151      	lsls	r1, r2, #5
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	0148      	lsls	r0, r1, #5
 8003ecc:	6979      	ldr	r1, [r7, #20]
 8003ece:	4401      	add	r1, r0
 8003ed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10d      	bne.n	8003efa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6919      	ldr	r1, [r3, #16]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	0151      	lsls	r1, r2, #5
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	440a      	add	r2, r1
 8003f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	785b      	ldrb	r3, [r3, #1]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d14a      	bne.n	8003fdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f5e:	f040 8086 	bne.w	800406e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3301      	adds	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d902      	bls.n	8003fc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8003fbe:	e056      	b.n	800406e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd8:	d0e7      	beq.n	8003faa <USB_EPStopXfer+0x82>
 8003fda:	e048      	b.n	800406e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff4:	d13b      	bne.n	800406e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004018:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	7812      	ldrb	r2, [r2, #0]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f242 7210 	movw	r2, #10000	; 0x2710
 800404a:	4293      	cmp	r3, r2
 800404c:	d902      	bls.n	8004054 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
          break;
 8004052:	e00c      	b.n	800406e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406c:	d0e7      	beq.n	800403e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004070:	4618      	mov	r0, r3
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	460b      	mov	r3, r1
 800408c:	71fb      	strb	r3, [r7, #7]
 800408e:	4613      	mov	r3, r2
 8004090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800409a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d123      	bne.n	80040ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80040a2:	88bb      	ldrh	r3, [r7, #4]
 80040a4:	3303      	adds	r3, #3
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e018      	b.n	80040e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	031a      	lsls	r2, r3, #12
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	461a      	mov	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3301      	adds	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3301      	adds	r3, #1
 80040ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3301      	adds	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3301      	adds	r3, #1
 80040da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	3301      	adds	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3e2      	bcc.n	80040b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3724      	adds	r7, #36	; 0x24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b08b      	sub	sp, #44	; 0x2c
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	b29b      	uxth	r3, r3
 8004114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	e014      	b.n	800414e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	3301      	adds	r3, #1
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	3301      	adds	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	3301      	adds	r3, #1
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	3301      	adds	r3, #1
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	3301      	adds	r3, #1
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	6a3a      	ldr	r2, [r7, #32]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	429a      	cmp	r2, r3
 8004154:	d3e6      	bcc.n	8004124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004156:	8bfb      	ldrh	r3, [r7, #30]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01e      	beq.n	800419a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004166:	461a      	mov	r2, r3
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	b2da      	uxtb	r2, r3
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	701a      	strb	r2, [r3, #0]
      i++;
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	3301      	adds	r3, #1
 8004186:	623b      	str	r3, [r7, #32]
      pDest++;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	3301      	adds	r3, #1
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800418e:	8bfb      	ldrh	r3, [r7, #30]
 8004190:	3b01      	subs	r3, #1
 8004192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004194:	8bfb      	ldrh	r3, [r7, #30]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ea      	bne.n	8004170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800419c:	4618      	mov	r0, r3
 800419e:	372c      	adds	r7, #44	; 0x2c
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d12c      	bne.n	800421e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db12      	blt.n	80041fc <USB_EPSetStall+0x54>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	e02b      	b.n	8004276 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db12      	blt.n	8004256 <USB_EPSetStall+0xae>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00f      	beq.n	8004256 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004254:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	785b      	ldrb	r3, [r3, #1]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d128      	bne.n	80042f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	0151      	lsls	r1, r2, #5
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	440a      	add	r2, r1
 80042b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d003      	beq.n	80042d0 <USB_EPClearStall+0x4c>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	791b      	ldrb	r3, [r3, #4]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d138      	bne.n	8004342 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	e027      	b.n	8004342 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	440a      	add	r2, r1
 8004308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	791b      	ldrb	r3, [r3, #4]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d003      	beq.n	8004322 <USB_EPClearStall+0x9e>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	791b      	ldrb	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d10f      	bne.n	8004342 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800436e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004372:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ca:	f023 0302 	bic.w	r3, r3, #2
 80043ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043f8:	f023 0303 	bic.w	r3, r3, #3
 80043fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4013      	ands	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004438:	68fb      	ldr	r3, [r7, #12]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0c1b      	lsrs	r3, r3, #16
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	b29b      	uxth	r3, r3
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044dc:	68bb      	ldr	r3, [r7, #8]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	fa22 f303 	lsr.w	r3, r2, r3
 800451a:	01db      	lsls	r3, r3, #7
 800451c:	b2db      	uxtb	r3, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004538:	68bb      	ldr	r3, [r7, #8]
}
 800453a:	4618      	mov	r0, r3
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0301 	and.w	r3, r3, #1
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004580:	f023 0307 	bic.w	r3, r3, #7
 8004584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	460b      	mov	r3, r1
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	333c      	adds	r3, #60	; 0x3c
 80045be:	3304      	adds	r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4a26      	ldr	r2, [pc, #152]	; (8004660 <USB_EP0_OutStart+0xb8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d90a      	bls.n	80045e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045dc:	d101      	bne.n	80045e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e037      	b.n	8004652 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	461a      	mov	r2, r3
 80045ea:	2300      	movs	r3, #0
 80045ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f043 0318 	orr.w	r3, r3, #24
 8004614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004624:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004628:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10f      	bne.n	8004650 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	461a      	mov	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800464e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	4f54300a 	.word	0x4f54300a

08004664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <USB_CoreReset+0x64>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e01b      	b.n	80046ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	daf2      	bge.n	8004670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <USB_CoreReset+0x64>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d0f0      	beq.n	800469a <USB_CoreReset+0x36>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	00030d40 	.word	0x00030d40

080046cc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80046d8:	f44f 701d 	mov.w	r0, #628	; 0x274
 80046dc:	f003 ff24 	bl	8008528 <USBD_static_malloc>
 80046e0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	32b0      	adds	r2, #176	; 0xb0
 80046f2:	2100      	movs	r1, #0
 80046f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80046f8:	2302      	movs	r3, #2
 80046fa:	e06e      	b.n	80047da <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	32b0      	adds	r2, #176	; 0xb0
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	32b0      	adds	r2, #176	; 0xb0
 8004716:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7c1b      	ldrb	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d12b      	bne.n	8004780 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <USBD_MSC_Init+0x118>)
 800472a:	7819      	ldrb	r1, [r3, #0]
 800472c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004730:	2202      	movs	r2, #2
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f003 fdb5 	bl	80082a2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <USBD_MSC_Init+0x118>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004750:	2201      	movs	r2, #1
 8004752:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <USBD_MSC_Init+0x11c>)
 8004756:	7819      	ldrb	r1, [r3, #0]
 8004758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800475c:	2202      	movs	r2, #2
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f003 fd9f 	bl	80082a2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <USBD_MSC_Init+0x11c>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f003 020f 	and.w	r2, r3, #15
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3324      	adds	r3, #36	; 0x24
 800477a:	2201      	movs	r2, #1
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	e028      	b.n	80047d2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004780:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <USBD_MSC_Init+0x118>)
 8004782:	7819      	ldrb	r1, [r3, #0]
 8004784:	2340      	movs	r3, #64	; 0x40
 8004786:	2202      	movs	r2, #2
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f003 fd8a 	bl	80082a2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800478e:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <USBD_MSC_Init+0x118>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f003 020f 	and.w	r2, r3, #15
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047a6:	2201      	movs	r2, #1
 80047a8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <USBD_MSC_Init+0x11c>)
 80047ac:	7819      	ldrb	r1, [r3, #0]
 80047ae:	2340      	movs	r3, #64	; 0x40
 80047b0:	2202      	movs	r2, #2
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f003 fd75 	bl	80082a2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <USBD_MSC_Init+0x11c>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3324      	adds	r3, #36	; 0x24
 80047ce:	2201      	movs	r2, #1
 80047d0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa2c 	bl	8004c30 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	2000006f 	.word	0x2000006f
 80047e8:	2000006e 	.word	0x2000006e

080047ec <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80047f8:	4b26      	ldr	r3, [pc, #152]	; (8004894 <USBD_MSC_DeInit+0xa8>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f003 fd75 	bl	80082ee <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8004804:	4b23      	ldr	r3, [pc, #140]	; (8004894 <USBD_MSC_DeInit+0xa8>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800481c:	2200      	movs	r2, #0
 800481e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8004820:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <USBD_MSC_DeInit+0xac>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f003 fd61 	bl	80082ee <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <USBD_MSC_DeInit+0xac>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	3324      	adds	r3, #36	; 0x24
 8004842:	2200      	movs	r2, #0
 8004844:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	32b0      	adds	r2, #176	; 0xb0
 8004850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d018      	beq.n	800488a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fa67 	bl	8004d2c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	32b0      	adds	r2, #176	; 0xb0
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 fe69 	bl	8008544 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	32b0      	adds	r2, #176	; 0xb0
 800487c:	2100      	movs	r1, #0
 800487e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000006f 	.word	0x2000006f
 8004898:	2000006e 	.word	0x2000006e

0800489c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	32b0      	adds	r2, #176	; 0xb0
 80048b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0e1      	b.n	8004a8c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d053      	beq.n	800497c <USBD_MSC_Setup+0xe0>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	f040 80d1 	bne.w	8004a7c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	2bfe      	cmp	r3, #254	; 0xfe
 80048e0:	d002      	beq.n	80048e8 <USBD_MSC_Setup+0x4c>
 80048e2:	2bff      	cmp	r3, #255	; 0xff
 80048e4:	d02a      	beq.n	800493c <USBD_MSC_Setup+0xa0>
 80048e6:	e041      	b.n	800496c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	885b      	ldrh	r3, [r3, #2]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11e      	bne.n	800492e <USBD_MSC_Setup+0x92>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	88db      	ldrh	r3, [r3, #6]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d11a      	bne.n	800492e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da15      	bge.n	800492e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	33b0      	adds	r3, #176	; 0xb0
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	4798      	blx	r3
 8004916:	4603      	mov	r3, r0
 8004918:	461a      	mov	r2, r3
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2201      	movs	r2, #1
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f003 f8f9 	bl	8007b1c <USBD_CtlSendData>
 800492a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800492c:	e025      	b.n	800497a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f003 f882 	bl	8007a3a <USBD_CtlError>
            ret = USBD_FAIL;
 8004936:	2303      	movs	r3, #3
 8004938:	75fb      	strb	r3, [r7, #23]
          break;
 800493a:	e01e      	b.n	800497a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	885b      	ldrh	r3, [r3, #2]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <USBD_MSC_Setup+0xc2>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	88db      	ldrh	r3, [r3, #6]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004952:	2b00      	cmp	r3, #0
 8004954:	db03      	blt.n	800495e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9b4 	bl	8004cc4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800495c:	e00d      	b.n	800497a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800495e:	6839      	ldr	r1, [r7, #0]
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f003 f86a 	bl	8007a3a <USBD_CtlError>
            ret = USBD_FAIL;
 8004966:	2303      	movs	r3, #3
 8004968:	75fb      	strb	r3, [r7, #23]
          break;
 800496a:	e006      	b.n	800497a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f003 f863 	bl	8007a3a <USBD_CtlError>
          ret = USBD_FAIL;
 8004974:	2303      	movs	r3, #3
 8004976:	75fb      	strb	r3, [r7, #23]
          break;
 8004978:	bf00      	nop
      }
      break;
 800497a:	e086      	b.n	8004a8a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b0b      	cmp	r3, #11
 8004982:	d872      	bhi.n	8004a6a <USBD_MSC_Setup+0x1ce>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <USBD_MSC_Setup+0xf0>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049bd 	.word	0x080049bd
 8004990:	08004a39 	.word	0x08004a39
 8004994:	08004a6b 	.word	0x08004a6b
 8004998:	08004a6b 	.word	0x08004a6b
 800499c:	08004a6b 	.word	0x08004a6b
 80049a0:	08004a6b 	.word	0x08004a6b
 80049a4:	08004a6b 	.word	0x08004a6b
 80049a8:	08004a6b 	.word	0x08004a6b
 80049ac:	08004a6b 	.word	0x08004a6b
 80049b0:	08004a6b 	.word	0x08004a6b
 80049b4:	080049e7 	.word	0x080049e7
 80049b8:	08004a11 	.word	0x08004a11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d107      	bne.n	80049d8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80049c8:	f107 030e 	add.w	r3, r7, #14
 80049cc:	2202      	movs	r2, #2
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f003 f8a3 	bl	8007b1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049d6:	e050      	b.n	8004a7a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f003 f82d 	bl	8007a3a <USBD_CtlError>
            ret = USBD_FAIL;
 80049e0:	2303      	movs	r3, #3
 80049e2:	75fb      	strb	r3, [r7, #23]
          break;
 80049e4:	e049      	b.n	8004a7a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d107      	bne.n	8004a02 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2201      	movs	r2, #1
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f003 f88e 	bl	8007b1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a00:	e03b      	b.n	8004a7a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f003 f818 	bl	8007a3a <USBD_CtlError>
            ret = USBD_FAIL;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a0e:	e034      	b.n	8004a7a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d106      	bne.n	8004a2a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	885b      	ldrh	r3, [r3, #2]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a28:	e027      	b.n	8004a7a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f003 f804 	bl	8007a3a <USBD_CtlError>
            ret = USBD_FAIL;
 8004a32:	2303      	movs	r3, #3
 8004a34:	75fb      	strb	r3, [r7, #23]
          break;
 8004a36:	e020      	b.n	8004a7a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d119      	bne.n	8004a78 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	885b      	ldrh	r3, [r3, #2]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d115      	bne.n	8004a78 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	889b      	ldrh	r3, [r3, #4]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f003 fc69 	bl	800832c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	889b      	ldrh	r3, [r3, #4]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fb2e 	bl	80050c4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004a68:	e006      	b.n	8004a78 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f002 ffe4 	bl	8007a3a <USBD_CtlError>
          ret = USBD_FAIL;
 8004a72:	2303      	movs	r3, #3
 8004a74:	75fb      	strb	r3, [r7, #23]
          break;
 8004a76:	e000      	b.n	8004a7a <USBD_MSC_Setup+0x1de>
          break;
 8004a78:	bf00      	nop
      }
      break;
 8004a7a:	e006      	b.n	8004a8a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f002 ffdb 	bl	8007a3a <USBD_CtlError>
      ret = USBD_FAIL;
 8004a84:	2303      	movs	r3, #3
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f959 	bl	8004d5c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f983 	bl	8004dd0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004adc:	2181      	movs	r1, #129	; 0x81
 8004ade:	4812      	ldr	r0, [pc, #72]	; (8004b28 <USBD_MSC_GetHSCfgDesc+0x54>)
 8004ae0:	f002 f972 	bl	8006dc8 <USBD_GetEpDesc>
 8004ae4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	480f      	ldr	r0, [pc, #60]	; (8004b28 <USBD_MSC_GetHSCfgDesc+0x54>)
 8004aea:	f002 f96d 	bl	8006dc8 <USBD_GetEpDesc>
 8004aee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	711a      	strb	r2, [r3, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f042 0202 	orr.w	r2, r2, #2
 8004b02:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	711a      	strb	r2, [r3, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f042 0202 	orr.w	r2, r2, #2
 8004b16:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004b1e:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000044 	.word	0x20000044

08004b2c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004b34:	2181      	movs	r1, #129	; 0x81
 8004b36:	4812      	ldr	r0, [pc, #72]	; (8004b80 <USBD_MSC_GetFSCfgDesc+0x54>)
 8004b38:	f002 f946 	bl	8006dc8 <USBD_GetEpDesc>
 8004b3c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004b3e:	2101      	movs	r1, #1
 8004b40:	480f      	ldr	r0, [pc, #60]	; (8004b80 <USBD_MSC_GetFSCfgDesc+0x54>)
 8004b42:	f002 f941 	bl	8006dc8 <USBD_GetEpDesc>
 8004b46:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b56:	711a      	strb	r2, [r3, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6a:	711a      	strb	r2, [r3, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004b76:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000044 	.word	0x20000044

08004b84 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8004b8c:	2181      	movs	r1, #129	; 0x81
 8004b8e:	4812      	ldr	r0, [pc, #72]	; (8004bd8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8004b90:	f002 f91a 	bl	8006dc8 <USBD_GetEpDesc>
 8004b94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8004b96:	2101      	movs	r1, #1
 8004b98:	480f      	ldr	r0, [pc, #60]	; (8004bd8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8004b9a:	f002 f915 	bl	8006dc8 <USBD_GetEpDesc>
 8004b9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bae:	711a      	strb	r2, [r3, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc2:	711a      	strb	r2, [r3, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8004bce:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000044 	.word	0x20000044

08004bdc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	220a      	movs	r2, #10
 8004be8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004bea:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	20000064 	.word	0x20000064

08004bfc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e009      	b.n	8004c24 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	33b0      	adds	r3, #176	; 0xb0
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	32b0      	adds	r2, #176	; 0xb0
 8004c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d032      	beq.n	8004cb4 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	33b0      	adds	r3, #176	; 0xb0
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2000      	movs	r0, #0
 8004c86:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <MSC_BOT_Init+0x8c>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f003 fb4c 	bl	800832c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <MSC_BOT_Init+0x90>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f003 fb46 	bl	800832c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <MSC_BOT_Init+0x8c>)
 8004ca2:	7819      	ldrb	r1, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004caa:	231f      	movs	r3, #31
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f003 fc06 	bl	80084be <USBD_LL_PrepareReceive>
 8004cb2:	e000      	b.n	8004cb6 <MSC_BOT_Init+0x86>
    return;
 8004cb4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	2000006f 	.word	0x2000006f
 8004cc0:	2000006e 	.word	0x2000006e

08004cc4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	32b0      	adds	r2, #176	; 0xb0
 8004cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01b      	beq.n	8004d1a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <MSC_BOT_Reset+0x60>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f003 fb57 	bl	80083a8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <MSC_BOT_Reset+0x64>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f003 fb51 	bl	80083a8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <MSC_BOT_Reset+0x64>)
 8004d08:	7819      	ldrb	r1, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004d10:	231f      	movs	r3, #31
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f003 fbd3 	bl	80084be <USBD_LL_PrepareReceive>
 8004d18:	e000      	b.n	8004d1c <MSC_BOT_Reset+0x58>
    return;
 8004d1a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	2000006e 	.word	0x2000006e
 8004d28:	2000006f 	.word	0x2000006f

08004d2c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	32b0      	adds	r2, #176	; 0xb0
 8004d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d42:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	721a      	strb	r2, [r3, #8]
  }
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	32b0      	adds	r2, #176	; 0xb0
 8004d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d76:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	7a1b      	ldrb	r3, [r3, #8]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d005      	beq.n	8004d92 <MSC_BOT_DataIn+0x36>
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	db1c      	blt.n	8004dc4 <MSC_BOT_DataIn+0x68>
 8004d8a:	3b03      	subs	r3, #3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d819      	bhi.n	8004dc4 <MSC_BOT_DataIn+0x68>
 8004d90:	e011      	b.n	8004db6 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f9c9 	bl	8005138 <SCSI_ProcessCmd>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da0d      	bge.n	8004dc8 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004dac:	2101      	movs	r1, #1
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f90c 	bl	8004fcc <MSC_BOT_SendCSW>
      }
      break;
 8004db4:	e008      	b.n	8004dc8 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004db6:	2100      	movs	r1, #0
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f907 	bl	8004fcc <MSC_BOT_SendCSW>
      break;
 8004dbe:	e004      	b.n	8004dca <MSC_BOT_DataIn+0x6e>
    return;
 8004dc0:	bf00      	nop
 8004dc2:	e002      	b.n	8004dca <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8004dc4:	bf00      	nop
 8004dc6:	e000      	b.n	8004dca <MSC_BOT_DataIn+0x6e>
      break;
 8004dc8:	bf00      	nop
  }
}
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	32b0      	adds	r2, #176	; 0xb0
 8004de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01c      	beq.n	8004e2c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	7a1b      	ldrb	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <MSC_BOT_DataOut+0x30>
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d004      	beq.n	8004e08 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8004dfe:	e018      	b.n	8004e32 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f819 	bl	8004e38 <MSC_BOT_CBW_Decode>
      break;
 8004e06:	e014      	b.n	8004e32 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004e14:	461a      	mov	r2, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f98e 	bl	8005138 <SCSI_ProcessCmd>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da06      	bge.n	8004e30 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004e22:	2101      	movs	r1, #1
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f8d1 	bl	8004fcc <MSC_BOT_SendCSW>
      break;
 8004e2a:	e001      	b.n	8004e30 <MSC_BOT_DataOut+0x60>
    return;
 8004e2c:	bf00      	nop
 8004e2e:	e000      	b.n	8004e32 <MSC_BOT_DataOut+0x62>
      break;
 8004e30:	bf00      	nop
  }
}
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	32b0      	adds	r2, #176	; 0xb0
 8004e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d079      	beq.n	8004f4a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8004e6e:	4b3a      	ldr	r3, [pc, #232]	; (8004f58 <MSC_BOT_CBW_Decode+0x120>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f003 fb43 	bl	8008500 <USBD_LL_GetRxDataSize>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b1f      	cmp	r3, #31
 8004e7e:	d114      	bne.n	8004eaa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8004e86:	4a35      	ldr	r2, [pc, #212]	; (8004f5c <MSC_BOT_CBW_Decode+0x124>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d10e      	bne.n	8004eaa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d809      	bhi.n	8004eaa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d90e      	bls.n	8004ec8 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fe28 	bl	8005b0a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8bd 	bl	8005040 <MSC_BOT_Abort>
 8004ec6:	e043      	b.n	8004f50 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f92e 	bl	8005138 <SCSI_ProcessCmd>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da0c      	bge.n	8004efc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	7a1b      	ldrb	r3, [r3, #8]
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d104      	bne.n	8004ef4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004eea:	2101      	movs	r1, #1
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f86d 	bl	8004fcc <MSC_BOT_SendCSW>
 8004ef2:	e02d      	b.n	8004f50 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8a3 	bl	8005040 <MSC_BOT_Abort>
 8004efa:	e029      	b.n	8004f50 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	7a1b      	ldrb	r3, [r3, #8]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d024      	beq.n	8004f4e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d020      	beq.n	8004f4e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d01c      	beq.n	8004f4e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f103 0110 	add.w	r1, r3, #16
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f819 	bl	8004f60 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8004f2e:	e00f      	b.n	8004f50 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8004f38:	2100      	movs	r1, #0
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f846 	bl	8004fcc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8004f40:	e006      	b.n	8004f50 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f87c 	bl	8005040 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8004f48:	e002      	b.n	8004f50 <MSC_BOT_CBW_Decode+0x118>
    return;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8004f4e:	bf00      	nop
    }
  }
}
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2000006f 	.word	0x2000006f
 8004f5c:	43425355 	.word	0x43425355

08004f60 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	32b0      	adds	r2, #176	; 0xb0
 8004f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01e      	beq.n	8004fc0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	bf28      	it	cs
 8004f8e:	4613      	movcs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	1ad2      	subs	r2, r2, r3
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2204      	movs	r2, #4
 8004fae:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <MSC_BOT_SendData+0x68>)
 8004fb2:	7819      	ldrb	r1, [r3, #0]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f003 fa5f 	bl	800847c <USBD_LL_Transmit>
 8004fbe:	e000      	b.n	8004fc2 <MSC_BOT_SendData+0x62>
    return;
 8004fc0:	bf00      	nop
}
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	2000006e 	.word	0x2000006e

08004fcc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	32b0      	adds	r2, #176	; 0xb0
 8004fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01d      	beq.n	800502a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4a10      	ldr	r2, [pc, #64]	; (8005034 <MSC_BOT_SendCSW+0x68>)
 8004ff2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <MSC_BOT_SendCSW+0x6c>)
 8005006:	7819      	ldrb	r1, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800500e:	230d      	movs	r3, #13
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f003 fa33 	bl	800847c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <MSC_BOT_SendCSW+0x70>)
 8005018:	7819      	ldrb	r1, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005020:	231f      	movs	r3, #31
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f003 fa4b 	bl	80084be <USBD_LL_PrepareReceive>
 8005028:	e000      	b.n	800502c <MSC_BOT_SendCSW+0x60>
    return;
 800502a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	53425355 	.word	0x53425355
 8005038:	2000006e 	.word	0x2000006e
 800503c:	2000006f 	.word	0x2000006f

08005040 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	32b0      	adds	r2, #176	; 0xb0
 8005052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005056:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d02a      	beq.n	80050b4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10e      	bne.n	8005086 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <MSC_BOT_Abort+0x7c>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f003 f972 	bl	800836a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <MSC_BOT_Abort+0x80>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f003 f96c 	bl	800836a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	7a5b      	ldrb	r3, [r3, #9]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d10d      	bne.n	80050b6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <MSC_BOT_Abort+0x80>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f003 f962 	bl	800836a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <MSC_BOT_Abort+0x7c>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f003 f95c 	bl	800836a <USBD_LL_StallEP>
 80050b2:	e000      	b.n	80050b6 <MSC_BOT_Abort+0x76>
    return;
 80050b4:	bf00      	nop
  }
}
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	2000006f 	.word	0x2000006f
 80050c0:	2000006e 	.word	0x2000006e

080050c4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	32b0      	adds	r2, #176	; 0xb0
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01d      	beq.n	8005122 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	7a5b      	ldrb	r3, [r3, #9]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d10c      	bne.n	8005108 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <MSC_BOT_CplClrFeature+0x6c>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f003 f938 	bl	800836a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <MSC_BOT_CplClrFeature+0x70>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f003 f932 	bl	800836a <USBD_LL_StallEP>
 8005106:	e00f      	b.n	8005128 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800510c:	2b00      	cmp	r3, #0
 800510e:	da0a      	bge.n	8005126 <MSC_BOT_CplClrFeature+0x62>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	7a5b      	ldrb	r3, [r3, #9]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d006      	beq.n	8005126 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005118:	2101      	movs	r1, #1
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ff56 	bl	8004fcc <MSC_BOT_SendCSW>
 8005120:	e002      	b.n	8005128 <MSC_BOT_CplClrFeature+0x64>
    return;
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8005126:	bf00      	nop
  }
}
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	2000006e 	.word	0x2000006e
 8005134:	2000006f 	.word	0x2000006f

08005138 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	460b      	mov	r3, r1
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	32b0      	adds	r2, #176	; 0xb0
 8005150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005154:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005160:	e168      	b.n	8005434 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2baa      	cmp	r3, #170	; 0xaa
 8005168:	f000 8144 	beq.w	80053f4 <SCSI_ProcessCmd+0x2bc>
 800516c:	2baa      	cmp	r3, #170	; 0xaa
 800516e:	f300 8153 	bgt.w	8005418 <SCSI_ProcessCmd+0x2e0>
 8005172:	2ba8      	cmp	r3, #168	; 0xa8
 8005174:	f000 812c 	beq.w	80053d0 <SCSI_ProcessCmd+0x298>
 8005178:	2ba8      	cmp	r3, #168	; 0xa8
 800517a:	f300 814d 	bgt.w	8005418 <SCSI_ProcessCmd+0x2e0>
 800517e:	2b5a      	cmp	r3, #90	; 0x5a
 8005180:	f300 80c0 	bgt.w	8005304 <SCSI_ProcessCmd+0x1cc>
 8005184:	2b00      	cmp	r3, #0
 8005186:	f2c0 8147 	blt.w	8005418 <SCSI_ProcessCmd+0x2e0>
 800518a:	2b5a      	cmp	r3, #90	; 0x5a
 800518c:	f200 8144 	bhi.w	8005418 <SCSI_ProcessCmd+0x2e0>
 8005190:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <SCSI_ProcessCmd+0x60>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	0800530b 	.word	0x0800530b
 800519c:	08005419 	.word	0x08005419
 80051a0:	08005419 	.word	0x08005419
 80051a4:	0800531d 	.word	0x0800531d
 80051a8:	08005419 	.word	0x08005419
 80051ac:	08005419 	.word	0x08005419
 80051b0:	08005419 	.word	0x08005419
 80051b4:	08005419 	.word	0x08005419
 80051b8:	08005419 	.word	0x08005419
 80051bc:	08005419 	.word	0x08005419
 80051c0:	08005419 	.word	0x08005419
 80051c4:	08005419 	.word	0x08005419
 80051c8:	08005419 	.word	0x08005419
 80051cc:	08005419 	.word	0x08005419
 80051d0:	08005419 	.word	0x08005419
 80051d4:	08005419 	.word	0x08005419
 80051d8:	08005419 	.word	0x08005419
 80051dc:	08005419 	.word	0x08005419
 80051e0:	0800532f 	.word	0x0800532f
 80051e4:	08005419 	.word	0x08005419
 80051e8:	08005419 	.word	0x08005419
 80051ec:	08005419 	.word	0x08005419
 80051f0:	08005419 	.word	0x08005419
 80051f4:	08005419 	.word	0x08005419
 80051f8:	08005419 	.word	0x08005419
 80051fc:	08005419 	.word	0x08005419
 8005200:	08005365 	.word	0x08005365
 8005204:	08005341 	.word	0x08005341
 8005208:	08005419 	.word	0x08005419
 800520c:	08005419 	.word	0x08005419
 8005210:	08005353 	.word	0x08005353
 8005214:	08005419 	.word	0x08005419
 8005218:	08005419 	.word	0x08005419
 800521c:	08005419 	.word	0x08005419
 8005220:	08005419 	.word	0x08005419
 8005224:	08005389 	.word	0x08005389
 8005228:	08005419 	.word	0x08005419
 800522c:	0800539b 	.word	0x0800539b
 8005230:	08005419 	.word	0x08005419
 8005234:	08005419 	.word	0x08005419
 8005238:	080053bf 	.word	0x080053bf
 800523c:	08005419 	.word	0x08005419
 8005240:	080053e3 	.word	0x080053e3
 8005244:	08005419 	.word	0x08005419
 8005248:	08005419 	.word	0x08005419
 800524c:	08005419 	.word	0x08005419
 8005250:	08005419 	.word	0x08005419
 8005254:	08005407 	.word	0x08005407
 8005258:	08005419 	.word	0x08005419
 800525c:	08005419 	.word	0x08005419
 8005260:	08005419 	.word	0x08005419
 8005264:	08005419 	.word	0x08005419
 8005268:	08005419 	.word	0x08005419
 800526c:	08005419 	.word	0x08005419
 8005270:	08005419 	.word	0x08005419
 8005274:	08005419 	.word	0x08005419
 8005278:	08005419 	.word	0x08005419
 800527c:	08005419 	.word	0x08005419
 8005280:	08005419 	.word	0x08005419
 8005284:	08005419 	.word	0x08005419
 8005288:	08005419 	.word	0x08005419
 800528c:	08005419 	.word	0x08005419
 8005290:	08005419 	.word	0x08005419
 8005294:	08005419 	.word	0x08005419
 8005298:	08005419 	.word	0x08005419
 800529c:	08005419 	.word	0x08005419
 80052a0:	08005419 	.word	0x08005419
 80052a4:	08005419 	.word	0x08005419
 80052a8:	08005419 	.word	0x08005419
 80052ac:	08005419 	.word	0x08005419
 80052b0:	08005419 	.word	0x08005419
 80052b4:	08005419 	.word	0x08005419
 80052b8:	08005419 	.word	0x08005419
 80052bc:	08005419 	.word	0x08005419
 80052c0:	08005419 	.word	0x08005419
 80052c4:	08005419 	.word	0x08005419
 80052c8:	08005419 	.word	0x08005419
 80052cc:	08005419 	.word	0x08005419
 80052d0:	08005419 	.word	0x08005419
 80052d4:	08005419 	.word	0x08005419
 80052d8:	08005419 	.word	0x08005419
 80052dc:	08005419 	.word	0x08005419
 80052e0:	08005419 	.word	0x08005419
 80052e4:	08005419 	.word	0x08005419
 80052e8:	08005419 	.word	0x08005419
 80052ec:	08005419 	.word	0x08005419
 80052f0:	08005419 	.word	0x08005419
 80052f4:	08005419 	.word	0x08005419
 80052f8:	08005419 	.word	0x08005419
 80052fc:	08005419 	.word	0x08005419
 8005300:	08005377 	.word	0x08005377
 8005304:	2b9e      	cmp	r3, #158	; 0x9e
 8005306:	d051      	beq.n	80053ac <SCSI_ProcessCmd+0x274>
 8005308:	e086      	b.n	8005418 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f893 	bl	800543c <SCSI_TestUnitReady>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]
      break;
 800531a:	e089      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800531c:	7afb      	ldrb	r3, [r7, #11]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	4619      	mov	r1, r3
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fb6e 	bl	8005a04 <SCSI_RequestSense>
 8005328:	4603      	mov	r3, r0
 800532a:	75fb      	strb	r3, [r7, #23]
      break;
 800532c:	e080      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4619      	mov	r1, r3
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f8db 	bl	80054f0 <SCSI_Inquiry>
 800533a:	4603      	mov	r3, r0
 800533c:	75fb      	strb	r3, [r7, #23]
      break;
 800533e:	e077      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005340:	7afb      	ldrb	r3, [r7, #11]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4619      	mov	r1, r3
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fc2a 	bl	8005ba0 <SCSI_StartStopUnit>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	e06e      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	4619      	mov	r1, r3
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fc76 	bl	8005c4a <SCSI_AllowPreventRemovable>
 800535e:	4603      	mov	r3, r0
 8005360:	75fb      	strb	r3, [r7, #23]
      break;
 8005362:	e065      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4619      	mov	r1, r3
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 faea 	bl	8005944 <SCSI_ModeSense6>
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]
      break;
 8005374:	e05c      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4619      	mov	r1, r3
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fb11 	bl	80059a4 <SCSI_ModeSense10>
 8005382:	4603      	mov	r3, r0
 8005384:	75fb      	strb	r3, [r7, #23]
      break;
 8005386:	e053      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005388:	7afb      	ldrb	r3, [r7, #11]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4619      	mov	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fa5d 	bl	800584e <SCSI_ReadFormatCapacity>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	e04a      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f923 	bl	80055ec <SCSI_ReadCapacity10>
 80053a6:	4603      	mov	r3, r0
 80053a8:	75fb      	strb	r3, [r7, #23]
      break;
 80053aa:	e041      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80053ac:	7afb      	ldrb	r3, [r7, #11]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4619      	mov	r1, r3
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f998 	bl	80056e8 <SCSI_ReadCapacity16>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]
      break;
 80053bc:	e038      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80053be:	7afb      	ldrb	r3, [r7, #11]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fc6d 	bl	8005ca4 <SCSI_Read10>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]
      break;
 80053ce:	e02f      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80053d0:	7afb      	ldrb	r3, [r7, #11]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4619      	mov	r1, r3
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fd0e 	bl	8005df8 <SCSI_Read12>
 80053dc:	4603      	mov	r3, r0
 80053de:	75fb      	strb	r3, [r7, #23]
      break;
 80053e0:	e026      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4619      	mov	r1, r3
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fdb9 	bl	8005f60 <SCSI_Write10>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
      break;
 80053f2:	e01d      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80053f4:	7afb      	ldrb	r3, [r7, #11]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4619      	mov	r1, r3
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fe86 	bl	800610c <SCSI_Write12>
 8005400:	4603      	mov	r3, r0
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	e014      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4619      	mov	r1, r3
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 ff63 	bl	80062d8 <SCSI_Verify10>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]
      break;
 8005416:	e00b      	b.n	8005430 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005418:	7af9      	ldrb	r1, [r7, #11]
 800541a:	2320      	movs	r3, #32
 800541c:	2205      	movs	r2, #5
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fb73 	bl	8005b0a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2202      	movs	r2, #2
 8005428:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800542a:	23ff      	movs	r3, #255	; 0xff
 800542c:	75fb      	strb	r3, [r7, #23]
      break;
 800542e:	bf00      	nop
  }

  return ret;
 8005430:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	460b      	mov	r3, r1
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	32b0      	adds	r2, #176	; 0xb0
 8005454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005458:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005464:	e03f      	b.n	80054e6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005476:	2320      	movs	r3, #32
 8005478:	2205      	movs	r2, #5
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fb45 	bl	8005b0a <SCSI_SenseCode>

    return -1;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005484:	e02f      	b.n	80054e6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800548c:	2b02      	cmp	r3, #2
 800548e:	d10b      	bne.n	80054a8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005490:	7af9      	ldrb	r1, [r7, #11]
 8005492:	233a      	movs	r3, #58	; 0x3a
 8005494:	2202      	movs	r2, #2
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fb37 	bl	8005b0a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2205      	movs	r2, #5
 80054a0:	721a      	strb	r2, [r3, #8]
    return -1;
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a6:	e01e      	b.n	80054e6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	33b0      	adds	r3, #176	; 0xb0
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	7afa      	ldrb	r2, [r7, #11]
 80054bc:	4610      	mov	r0, r2
 80054be:	4798      	blx	r3
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80054c6:	7af9      	ldrb	r1, [r7, #11]
 80054c8:	233a      	movs	r3, #58	; 0x3a
 80054ca:	2202      	movs	r2, #2
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fb1c 	bl	8005b0a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2205      	movs	r2, #5
 80054d6:	721a      	strb	r2, [r3, #8]

    return -1;
 80054d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054dc:	e003      	b.n	80054e6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	60da      	str	r2, [r3, #12]

  return 0;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	460b      	mov	r3, r1
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	32b0      	adds	r2, #176	; 0xb0
 8005508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005518:	e05f      	b.n	80055da <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800552a:	2320      	movs	r3, #32
 800552c:	2205      	movs	r2, #5
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 faeb 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 8005534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005538:	e04f      	b.n	80055da <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3301      	adds	r3, #1
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3302      	adds	r3, #2
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d105      	bne.n	800555e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005552:	2206      	movs	r2, #6
 8005554:	4923      	ldr	r1, [pc, #140]	; (80055e4 <SCSI_Inquiry+0xf4>)
 8005556:	69b8      	ldr	r0, [r7, #24]
 8005558:	f001 f844 	bl	80065e4 <SCSI_UpdateBotData>
 800555c:	e03c      	b.n	80055d8 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3302      	adds	r3, #2
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d105      	bne.n	8005574 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005568:	2208      	movs	r2, #8
 800556a:	491f      	ldr	r1, [pc, #124]	; (80055e8 <SCSI_Inquiry+0xf8>)
 800556c:	69b8      	ldr	r0, [r7, #24]
 800556e:	f001 f839 	bl	80065e4 <SCSI_UpdateBotData>
 8005572:	e031      	b.n	80055d8 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800557a:	2324      	movs	r3, #36	; 0x24
 800557c:	2205      	movs	r2, #5
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fac3 	bl	8005b0a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005588:	e027      	b.n	80055da <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	33b0      	adds	r3, #176	; 0xb0
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	69d9      	ldr	r1, [r3, #28]
 800559c:	7afa      	ldrb	r2, [r7, #11]
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3304      	adds	r3, #4
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3305      	adds	r3, #5
 80055b4:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8bfa      	ldrh	r2, [r7, #30]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d303      	bcc.n	80055cc <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80055cc:	8bfb      	ldrh	r3, [r7, #30]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6979      	ldr	r1, [r7, #20]
 80055d2:	69b8      	ldr	r0, [r7, #24]
 80055d4:	f001 f806 	bl	80065e4 <SCSI_UpdateBotData>
  }

  return 0;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000070 	.word	0x20000070
 80055e8:	20000078 	.word	0x20000078

080055ec <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	460b      	mov	r3, r1
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	32b0      	adds	r2, #176	; 0xb0
 8005604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005608:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8005610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005614:	e064      	b.n	80056e0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	33b0      	adds	r3, #176	; 0xb0
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005634:	7af8      	ldrb	r0, [r7, #11]
 8005636:	4798      	blx	r3
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800563c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <SCSI_ReadCapacity10+0x62>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800564a:	2b02      	cmp	r3, #2
 800564c:	d108      	bne.n	8005660 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800564e:	7af9      	ldrb	r1, [r7, #11]
 8005650:	233a      	movs	r3, #58	; 0x3a
 8005652:	2202      	movs	r2, #2
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fa58 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800565e:	e03f      	b.n	80056e0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005666:	3b01      	subs	r3, #1
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	b2da      	uxtb	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005676:	3b01      	subs	r3, #1
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	b2da      	uxtb	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005686:	3b01      	subs	r3, #1
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	b2da      	uxtb	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005696:	b2db      	uxtb	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80056a6:	161b      	asrs	r3, r3, #24
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80056b4:	141b      	asrs	r3, r3, #16
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2208      	movs	r2, #8
 80056dc:	60da      	str	r2, [r3, #12]

  return 0;
 80056de:	2300      	movs	r3, #0

}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	460b      	mov	r3, r1
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	32b0      	adds	r2, #176	; 0xb0
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800570c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005710:	e099      	b.n	8005846 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	33b0      	adds	r3, #176	; 0xb0
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005730:	7af8      	ldrb	r0, [r7, #11]
 8005732:	4798      	blx	r3
 8005734:	4603      	mov	r3, r0
 8005736:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <SCSI_ReadCapacity16+0x62>
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005746:	2b02      	cmp	r3, #2
 8005748:	d108      	bne.n	800575c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800574a:	7af9      	ldrb	r1, [r7, #11]
 800574c:	233a      	movs	r3, #58	; 0x3a
 800574e:	2202      	movs	r2, #2
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f9da 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575a:	e074      	b.n	8005846 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	330a      	adds	r3, #10
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	330b      	adds	r3, #11
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800576c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	330c      	adds	r3, #12
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005776:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	320d      	adds	r2, #13
 800577c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800577e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005784:	2300      	movs	r3, #0
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e007      	b.n	800579a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800578a:	7ffb      	ldrb	r3, [r7, #31]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4413      	add	r3, r2
 8005790:	2200      	movs	r2, #0
 8005792:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005794:	7ffb      	ldrb	r3, [r7, #31]
 8005796:	3301      	adds	r3, #1
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	7ffa      	ldrb	r2, [r7, #31]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3f2      	bcc.n	800578a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057aa:	3b01      	subs	r3, #1
 80057ac:	0e1b      	lsrs	r3, r3, #24
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057ba:	3b01      	subs	r3, #1
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057ca:	3b01      	subs	r3, #1
 80057cc:	0a1b      	lsrs	r3, r3, #8
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80057ea:	161b      	asrs	r3, r3, #24
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80057f8:	141b      	asrs	r3, r3, #16
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	b29b      	uxth	r3, r3
 800580a:	b2da      	uxtb	r2, r3
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005816:	b2da      	uxtb	r2, r3
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	330a      	adds	r3, #10
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	330b      	adds	r3, #11
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800582c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	330c      	adds	r3, #12
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005836:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	320d      	adds	r2, #13
 800583c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800583e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	60da      	str	r2, [r3, #12]

  return 0;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b088      	sub	sp, #32
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	460b      	mov	r3, r1
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	32b0      	adds	r2, #176	; 0xb0
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005876:	e061      	b.n	800593c <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	33b0      	adds	r3, #176	; 0xb0
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f107 0214 	add.w	r2, r7, #20
 800588e:	f107 0110 	add.w	r1, r7, #16
 8005892:	7af8      	ldrb	r0, [r7, #11]
 8005894:	4798      	blx	r3
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800589a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <SCSI_ReadFormatCapacity+0x5e>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d108      	bne.n	80058be <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80058ac:	7af9      	ldrb	r1, [r7, #11]
 80058ae:	233a      	movs	r3, #58	; 0x3a
 80058b0:	2202      	movs	r2, #2
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f929 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058bc:	e03e      	b.n	800593c <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80058be:	2300      	movs	r3, #0
 80058c0:	83fb      	strh	r3, [r7, #30]
 80058c2:	e007      	b.n	80058d4 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4413      	add	r3, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80058ce:	8bfb      	ldrh	r3, [r7, #30]
 80058d0:	3301      	adds	r3, #1
 80058d2:	83fb      	strh	r3, [r7, #30]
 80058d4:	8bfb      	ldrh	r3, [r7, #30]
 80058d6:	2b0b      	cmp	r3, #11
 80058d8:	d9f4      	bls.n	80058c4 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2208      	movs	r2, #8
 80058de:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	0e1b      	lsrs	r3, r3, #24
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	0c1b      	lsrs	r3, r3, #16
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b2da      	uxtb	r2, r3
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2202      	movs	r2, #2
 8005914:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005916:	8abb      	ldrh	r3, [r7, #20]
 8005918:	141b      	asrs	r3, r3, #16
 800591a:	b2da      	uxtb	r2, r3
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005920:	8abb      	ldrh	r3, [r7, #20]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	b29b      	uxth	r3, r3
 8005926:	b2da      	uxtb	r2, r3
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800592c:	8abb      	ldrh	r3, [r7, #20]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	220c      	movs	r2, #12
 8005938:	60da      	str	r2, [r3, #12]

  return 0;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	460b      	mov	r3, r1
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	32b0      	adds	r2, #176	; 0xb0
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005962:	2317      	movs	r3, #23
 8005964:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800596c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005970:	e011      	b.n	8005996 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	8afa      	ldrh	r2, [r7, #22]
 800597c:	429a      	cmp	r2, r3
 800597e:	d303      	bcc.n	8005988 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005988:	8afb      	ldrh	r3, [r7, #22]
 800598a:	461a      	mov	r2, r3
 800598c:	4904      	ldr	r1, [pc, #16]	; (80059a0 <SCSI_ModeSense6+0x5c>)
 800598e:	6938      	ldr	r0, [r7, #16]
 8005990:	f000 fe28 	bl	80065e4 <SCSI_UpdateBotData>

  return 0;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000080 	.word	0x20000080

080059a4 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	460b      	mov	r3, r1
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	32b0      	adds	r2, #176	; 0xb0
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80059c2:	231b      	movs	r3, #27
 80059c4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80059cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059d0:	e011      	b.n	80059f6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3308      	adds	r3, #8
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8afa      	ldrh	r2, [r7, #22]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d303      	bcc.n	80059e8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3308      	adds	r3, #8
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80059e8:	8afb      	ldrh	r3, [r7, #22]
 80059ea:	461a      	mov	r2, r3
 80059ec:	4904      	ldr	r1, [pc, #16]	; (8005a00 <SCSI_ModeSense10+0x5c>)
 80059ee:	6938      	ldr	r0, [r7, #16]
 80059f0:	f000 fdf8 	bl	80065e4 <SCSI_UpdateBotData>

  return 0;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000098 	.word	0x20000098

08005a04 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	32b0      	adds	r2, #176	; 0xb0
 8005a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a20:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8005a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a2c:	e069      	b.n	8005b02 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005a3e:	2320      	movs	r3, #32
 8005a40:	2205      	movs	r2, #5
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f861 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4c:	e059      	b.n	8005b02 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]
 8005a52:	e007      	b.n	8005a64 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4413      	add	r3, r2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	3301      	adds	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	2b11      	cmp	r3, #17
 8005a68:	d9f4      	bls.n	8005a54 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2270      	movs	r2, #112	; 0x70
 8005a6e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	220c      	movs	r2, #12
 8005a74:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d02e      	beq.n	8005ae4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	3248      	adds	r2, #72	; 0x48
 8005a92:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	3348      	adds	r3, #72	; 0x48
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	791a      	ldrb	r2, [r3, #4]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	3348      	adds	r3, #72	; 0x48
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	795a      	ldrb	r2, [r3, #5]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005ac8:	3301      	adds	r3, #1
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d103      	bne.n	8005ae4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2212      	movs	r2, #18
 8005ae8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3304      	adds	r3, #4
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b12      	cmp	r3, #18
 8005af2:	d805      	bhi.n	8005b00 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	70fb      	strb	r3, [r7, #3]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70bb      	strb	r3, [r7, #2]
 8005b20:	4613      	mov	r3, r2
 8005b22:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	32b0      	adds	r2, #176	; 0xb0
 8005b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b32:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d02c      	beq.n	8005b94 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005b40:	461a      	mov	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3248      	adds	r2, #72	; 0x48
 8005b46:	78b9      	ldrb	r1, [r7, #2]
 8005b48:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	3348      	adds	r3, #72	; 0x48
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	787a      	ldrb	r2, [r7, #1]
 8005b5c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	3348      	adds	r3, #72	; 0x48
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005b76:	3301      	adds	r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d105      	bne.n	8005b96 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005b92:	e000      	b.n	8005b96 <SCSI_SenseCode+0x8c>
    return;
 8005b94:	bf00      	nop
  }
}
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	32b0      	adds	r2, #176	; 0xb0
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d102      	bne.n	8005bca <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc8:	e03b      	b.n	8005c42 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d10f      	bne.n	8005bf4 <SCSI_StartStopUnit+0x54>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d108      	bne.n	8005bf4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005be2:	7af9      	ldrb	r1, [r7, #11]
 8005be4:	2324      	movs	r3, #36	; 0x24
 8005be6:	2205      	movs	r2, #5
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff ff8e 	bl	8005b0a <SCSI_SenseCode>

    return -1;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf2:	e026      	b.n	8005c42 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d104      	bne.n	8005c0c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005c0a:	e016      	b.n	8005c3a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d104      	bne.n	8005c24 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005c22:	e00a      	b.n	8005c3a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d103      	bne.n	8005c3a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	60da      	str	r2, [r3, #12]

  return 0;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	460b      	mov	r3, r1
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	32b0      	adds	r2, #176	; 0xb0
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c72:	e011      	b.n	8005c98 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005c86:	e003      	b.n	8005c90 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2200      	movs	r2, #0
 8005c94:	60da      	str	r2, [r3, #12]

  return 0;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	460b      	mov	r3, r1
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	32b0      	adds	r2, #176	; 0xb0
 8005cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <SCSI_Read10+0x2a>
  {
    return -1;
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ccc:	e090      	b.n	8005df0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	7a1b      	ldrb	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f040 8082 	bne.w	8005ddc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005cde:	b25b      	sxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db0a      	blt.n	8005cfa <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005cea:	2320      	movs	r3, #32
 8005cec:	2205      	movs	r2, #5
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff0b 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf8:	e07a      	b.n	8005df0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d108      	bne.n	8005d16 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d04:	7af9      	ldrb	r1, [r7, #11]
 8005d06:	233a      	movs	r3, #58	; 0x3a
 8005d08:	2202      	movs	r2, #2
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff fefd 	bl	8005b0a <SCSI_SenseCode>

      return -1;
 8005d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d14:	e06c      	b.n	8005df0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	33b0      	adds	r3, #176	; 0xb0
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	7afa      	ldrb	r2, [r7, #11]
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4798      	blx	r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d34:	7af9      	ldrb	r1, [r7, #11]
 8005d36:	233a      	movs	r3, #58	; 0x3a
 8005d38:	2202      	movs	r2, #2
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff fee5 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d44:	e054      	b.n	8005df0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3302      	adds	r3, #2
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3303      	adds	r3, #3
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005d56:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005d60:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	3205      	adds	r2, #5
 8005d66:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005d68:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3307      	adds	r3, #7
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	3208      	adds	r2, #8
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005d92:	7af9      	ldrb	r1, [r7, #11]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fadc 	bl	8006352 <SCSI_CheckAddressRange>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	da02      	bge.n	8005da6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005da4:	e024      	b.n	8005df0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d00a      	beq.n	8005dd6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005dc6:	2320      	movs	r3, #32
 8005dc8:	2205      	movs	r2, #5
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff fe9d 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dd4:	e00c      	b.n	8005df0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	4619      	mov	r1, r3
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fadf 	bl	80063ac <SCSI_ProcessRead>
 8005dee:	4603      	mov	r3, r0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	460b      	mov	r3, r1
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	32b0      	adds	r2, #176	; 0xb0
 8005e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e14:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <SCSI_Read12+0x2a>
  {
    return -1;
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e20:	e09a      	b.n	8005f58 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	7a1b      	ldrb	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 808c 	bne.w	8005f44 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005e32:	b25b      	sxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	db0a      	blt.n	8005e4e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005e3e:	2320      	movs	r3, #32
 8005e40:	2205      	movs	r2, #5
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff fe61 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e4c:	e084      	b.n	8005f58 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d108      	bne.n	8005e6a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e58:	7af9      	ldrb	r1, [r7, #11]
 8005e5a:	233a      	movs	r3, #58	; 0x3a
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff fe53 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e68:	e076      	b.n	8005f58 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	33b0      	adds	r3, #176	; 0xb0
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	7afa      	ldrb	r2, [r7, #11]
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4798      	blx	r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e88:	7af9      	ldrb	r1, [r7, #11]
 8005e8a:	233a      	movs	r3, #58	; 0x3a
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff fe3b 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e98:	e05e      	b.n	8005f58 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3303      	adds	r3, #3
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005eaa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005eb4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	3205      	adds	r2, #5
 8005eba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005ebc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3306      	adds	r3, #6
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3307      	adds	r3, #7
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ed4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8005ede:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	3209      	adds	r2, #9
 8005ee4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8005ee6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005efa:	7af9      	ldrb	r1, [r7, #11]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa28 	bl	8006352 <SCSI_CheckAddressRange>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da02      	bge.n	8005f0e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f0c:	e024      	b.n	8005f58 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005f1a:	6979      	ldr	r1, [r7, #20]
 8005f1c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005f20:	fb01 f303 	mul.w	r3, r1, r3
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d00a      	beq.n	8005f3e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f2e:	2320      	movs	r3, #32
 8005f30:	2205      	movs	r2, #5
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff fde9 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f3c:	e00c      	b.n	8005f58 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2202      	movs	r2, #2
 8005f42:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005f4c:	7afb      	ldrb	r3, [r7, #11]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fa2b 	bl	80063ac <SCSI_ProcessRead>
 8005f56:	4603      	mov	r3, r0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	32b0      	adds	r2, #176	; 0xb0
 8005f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <SCSI_Write10+0x2a>
  {
    return -1;
 8005f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f88:	e0ba      	b.n	8006100 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	7a1b      	ldrb	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 80b0 	bne.w	80060f4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	2205      	movs	r2, #5
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fdae 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb2:	e0a5      	b.n	8006100 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005fba:	b25b      	sxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	da0a      	bge.n	8005fd6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005fc6:	2320      	movs	r3, #32
 8005fc8:	2205      	movs	r2, #5
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff fd9d 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd4:	e094      	b.n	8006100 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	33b0      	adds	r3, #176	; 0xb0
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	7afa      	ldrb	r2, [r7, #11]
 8005fea:	4610      	mov	r0, r2
 8005fec:	4798      	blx	r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ff4:	7af9      	ldrb	r1, [r7, #11]
 8005ff6:	233a      	movs	r3, #58	; 0x3a
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fd85 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006004:	e07c      	b.n	8006100 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	33b0      	adds	r3, #176	; 0xb0
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	7afa      	ldrb	r2, [r7, #11]
 800601a:	4610      	mov	r0, r2
 800601c:	4798      	blx	r3
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006024:	7af9      	ldrb	r1, [r7, #11]
 8006026:	2327      	movs	r3, #39	; 0x27
 8006028:	2202      	movs	r2, #2
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fd6d 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8006030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006034:	e064      	b.n	8006100 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3302      	adds	r3, #2
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3303      	adds	r3, #3
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006046:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006050:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	3205      	adds	r2, #5
 8006056:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006058:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3307      	adds	r3, #7
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	3208      	adds	r2, #8
 800606c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800606e:	431a      	orrs	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006082:	7af9      	ldrb	r1, [r7, #11]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f964 	bl	8006352 <SCSI_CheckAddressRange>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	da02      	bge.n	8006096 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006094:	e034      	b.n	8006100 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80060a2:	fb02 f303 	mul.w	r3, r2, r3
 80060a6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d00a      	beq.n	80060ca <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80060ba:	2320      	movs	r3, #32
 80060bc:	2205      	movs	r2, #5
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff fd23 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 80060c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060c8:	e01a      	b.n	8006100 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d0:	bf28      	it	cs
 80060d2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80060d6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2201      	movs	r2, #1
 80060dc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80060de:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <SCSI_Write10+0x1a8>)
 80060e0:	7819      	ldrb	r1, [r3, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f103 0210 	add.w	r2, r3, #16
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f002 f9e7 	bl	80084be <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e005      	b.n	8006100 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80060f4:	7afb      	ldrb	r3, [r7, #11]
 80060f6:	4619      	mov	r1, r3
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f9dd 	bl	80064b8 <SCSI_ProcessWrite>
 80060fe:	4603      	mov	r3, r0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	2000006f 	.word	0x2000006f

0800610c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	460b      	mov	r3, r1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	32b0      	adds	r2, #176	; 0xb0
 8006124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006128:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <SCSI_Write12+0x2a>
  {
    return -1;
 8006130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006134:	e0ca      	b.n	80062cc <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	7a1b      	ldrb	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 80c0 	bne.w	80062c0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006150:	2320      	movs	r3, #32
 8006152:	2205      	movs	r2, #5
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fcd8 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800615e:	e0b5      	b.n	80062cc <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006166:	b25b      	sxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	da0a      	bge.n	8006182 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006172:	2320      	movs	r3, #32
 8006174:	2205      	movs	r2, #5
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff fcc7 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 800617c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006180:	e0a4      	b.n	80062cc <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	33b0      	adds	r3, #176	; 0xb0
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	7afa      	ldrb	r2, [r7, #11]
 8006196:	4610      	mov	r0, r2
 8006198:	4798      	blx	r3
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80061a0:	7af9      	ldrb	r1, [r7, #11]
 80061a2:	233a      	movs	r3, #58	; 0x3a
 80061a4:	2202      	movs	r2, #2
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7ff fcaf 	bl	8005b0a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2205      	movs	r2, #5
 80061b0:	721a      	strb	r2, [r3, #8]
      return -1;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b6:	e089      	b.n	80062cc <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	33b0      	adds	r3, #176	; 0xb0
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	7afa      	ldrb	r2, [r7, #11]
 80061cc:	4610      	mov	r0, r2
 80061ce:	4798      	blx	r3
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80061d6:	7af9      	ldrb	r1, [r7, #11]
 80061d8:	2327      	movs	r3, #39	; 0x27
 80061da:	2202      	movs	r2, #2
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7ff fc94 	bl	8005b0a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2205      	movs	r2, #5
 80061e6:	721a      	strb	r2, [r3, #8]
      return -1;
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ec:	e06e      	b.n	80062cc <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3302      	adds	r3, #2
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3303      	adds	r3, #3
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80061fe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006208:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	3205      	adds	r2, #5
 800620e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006210:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3306      	adds	r3, #6
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3307      	adds	r3, #7
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006228:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3308      	adds	r3, #8
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006232:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	3209      	adds	r2, #9
 8006238:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800623a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800624e:	7af9      	ldrb	r1, [r7, #11]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f87e 	bl	8006352 <SCSI_CheckAddressRange>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	da02      	bge.n	8006262 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800625c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006260:	e034      	b.n	80062cc <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	429a      	cmp	r2, r3
 800627e:	d00a      	beq.n	8006296 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006286:	2320      	movs	r3, #32
 8006288:	2205      	movs	r2, #5
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fc3d 	bl	8005b0a <SCSI_SenseCode>
      return -1;
 8006290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006294:	e01a      	b.n	80062cc <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800629c:	bf28      	it	cs
 800629e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80062a2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2201      	movs	r2, #1
 80062a8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80062aa:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <SCSI_Write12+0x1c8>)
 80062ac:	7819      	ldrb	r1, [r3, #0]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f103 0210 	add.w	r2, r3, #16
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f002 f901 	bl	80084be <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	e005      	b.n	80062cc <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	4619      	mov	r1, r3
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f8f7 	bl	80064b8 <SCSI_ProcessWrite>
 80062ca:	4603      	mov	r3, r0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	2000006f 	.word	0x2000006f

080062d8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	460b      	mov	r3, r1
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	32b0      	adds	r2, #176	; 0xb0
 80062f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <SCSI_Verify10+0x2a>
  {
    return -1;
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006300:	e023      	b.n	800634a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3301      	adds	r3, #1
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006310:	7af9      	ldrb	r1, [r7, #11]
 8006312:	2324      	movs	r3, #36	; 0x24
 8006314:	2205      	movs	r2, #5
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7ff fbf7 	bl	8005b0a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800631c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006320:	e013      	b.n	800634a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800632e:	7af9      	ldrb	r1, [r7, #11]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f80e 	bl	8006352 <SCSI_CheckAddressRange>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	da02      	bge.n	8006342 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800633c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006340:	e003      	b.n	800634a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2200      	movs	r2, #0
 8006346:	60da      	str	r2, [r3, #12]

  return 0;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	460b      	mov	r3, r1
 8006360:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	32b0      	adds	r2, #176	; 0xb0
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8006378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637c:	e011      	b.n	80063a2 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	441a      	add	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800638a:	429a      	cmp	r2, r3
 800638c:	d908      	bls.n	80063a0 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800638e:	7af9      	ldrb	r1, [r7, #11]
 8006390:	2321      	movs	r3, #33	; 0x21
 8006392:	2205      	movs	r2, #5
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f7ff fbb8 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 800639a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800639e:	e000      	b.n	80063a2 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32b0      	adds	r2, #176	; 0xb0
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80063ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d2:	e06a      	b.n	80064aa <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80063e0:	fb02 f303 	mul.w	r3, r2, r3
 80063e4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ec:	bf28      	it	cs
 80063ee:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80063f2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	33b0      	adds	r3, #176	; 0xb0
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	691c      	ldr	r4, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f103 0110 	add.w	r1, r3, #16
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006418:	4618      	mov	r0, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006420:	b29b      	uxth	r3, r3
 8006422:	78f8      	ldrb	r0, [r7, #3]
 8006424:	47a0      	blx	r4
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	da08      	bge.n	800643e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800642c:	78f9      	ldrb	r1, [r7, #3]
 800642e:	2311      	movs	r3, #17
 8006430:	2204      	movs	r2, #4
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fb69 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 8006438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800643c:	e035      	b.n	80064aa <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800643e:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <SCSI_ProcessRead+0x108>)
 8006440:	7819      	ldrb	r1, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f103 0210 	add.w	r2, r3, #16
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f002 f816 	bl	800847c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800645c:	4619      	mov	r1, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	fbb3 f3f1 	udiv	r3, r3, r1
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006478:	4619      	mov	r1, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006480:	1ad2      	subs	r2, r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	1ad2      	subs	r2, r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2203      	movs	r2, #3
 80064a6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd90      	pop	{r4, r7, pc}
 80064b2:	bf00      	nop
 80064b4:	2000006e 	.word	0x2000006e

080064b8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32b0      	adds	r2, #176	; 0xb0
 80064ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80064da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064de:	e07a      	b.n	80065d6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f8:	bf28      	it	cs
 80064fa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80064fe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	33b0      	adds	r3, #176	; 0xb0
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	695c      	ldr	r4, [r3, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f103 0110 	add.w	r1, r3, #16
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006524:	4618      	mov	r0, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800652c:	b29b      	uxth	r3, r3
 800652e:	78f8      	ldrb	r0, [r7, #3]
 8006530:	47a0      	blx	r4
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	da08      	bge.n	800654a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006538:	78f9      	ldrb	r1, [r7, #3]
 800653a:	2303      	movs	r3, #3
 800653c:	2204      	movs	r2, #4
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fae3 	bl	8005b0a <SCSI_SenseCode>
    return -1;
 8006544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006548:	e045      	b.n	80065d6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006556:	4619      	mov	r1, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	fbb3 f3f1 	udiv	r3, r3, r1
 800655e:	441a      	add	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006572:	4619      	mov	r1, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	fbb3 f3f1 	udiv	r3, r3, r1
 800657a:	1ad2      	subs	r2, r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800659c:	2100      	movs	r1, #0
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fe fd14 	bl	8004fcc <MSC_BOT_SendCSW>
 80065a4:	e016      	b.n	80065d4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ba:	bf28      	it	cs
 80065bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80065c0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <SCSI_ProcessWrite+0x128>)
 80065c4:	7819      	ldrb	r1, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f103 0210 	add.w	r2, r3, #16
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 ff75 	bl	80084be <USBD_LL_PrepareReceive>
  }

  return 0;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000006f 	.word	0x2000006f

080065e4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d102      	bne.n	8006602 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006600:	e013      	b.n	800662a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8006602:	8afa      	ldrh	r2, [r7, #22]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006608:	e00b      	b.n	8006622 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800660a:	8afb      	ldrh	r3, [r7, #22]
 800660c:	3b01      	subs	r3, #1
 800660e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8006610:	8afb      	ldrh	r3, [r7, #22]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	441a      	add	r2, r3
 8006616:	8afb      	ldrh	r3, [r7, #22]
 8006618:	7811      	ldrb	r1, [r2, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	460a      	mov	r2, r1
 8006620:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8006622:	8afb      	ldrh	r3, [r7, #22]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f0      	bne.n	800660a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	4613      	mov	r3, r2
 8006642:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800664a:	2303      	movs	r3, #3
 800664c:	e01f      	b.n	800668e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	79fa      	ldrb	r2, [r7, #7]
 8006680:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 fda6 	bl	80081d4 <USBD_LL_Init>
 8006688:	4603      	mov	r3, r0
 800668a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e025      	b.n	80066fa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	32ae      	adds	r2, #174	; 0xae
 80066c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00f      	beq.n	80066ea <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	32ae      	adds	r2, #174	; 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	f107 020e 	add.w	r2, r7, #14
 80066de:	4610      	mov	r0, r2
 80066e0:	4798      	blx	r3
 80066e2:	4602      	mov	r2, r0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fdae 	bl	800826c <USBD_LL_Start>
 8006710:	4603      	mov	r3, r0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006722:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	4611      	mov	r1, r2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	4611      	mov	r1, r2
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800678e:	2303      	movs	r3, #3
 8006790:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 f909 	bl	80079c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d01a      	beq.n	800680e <USBD_LL_SetupStage+0x72>
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d822      	bhi.n	8006822 <USBD_LL_SetupStage+0x86>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <USBD_LL_SetupStage+0x4a>
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d00a      	beq.n	80067fa <USBD_LL_SetupStage+0x5e>
 80067e4:	e01d      	b.n	8006822 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fb60 	bl	8006eb4 <USBD_StdDevReq>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
      break;
 80067f8:	e020      	b.n	800683c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fbc8 	bl	8006f98 <USBD_StdItfReq>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
      break;
 800680c:	e016      	b.n	800683c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc2a 	bl	8007070 <USBD_StdEPReq>
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]
      break;
 8006820:	e00c      	b.n	800683c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006828:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800682c:	b2db      	uxtb	r3, r3
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fd9a 	bl	800836a <USBD_LL_StallEP>
 8006836:	4603      	mov	r3, r0
 8006838:	73fb      	strb	r3, [r7, #15]
      break;
 800683a:	bf00      	nop
  }

  return ret;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	460b      	mov	r3, r1
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d16e      	bne.n	800693c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006864:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800686c:	2b03      	cmp	r3, #3
 800686e:	f040 8098 	bne.w	80069a2 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	429a      	cmp	r2, r3
 800687c:	d913      	bls.n	80068a6 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4293      	cmp	r3, r2
 8006896:	bf28      	it	cs
 8006898:	4613      	movcs	r3, r2
 800689a:	461a      	mov	r2, r3
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f001 f968 	bl	8007b74 <USBD_CtlContinueRx>
 80068a4:	e07d      	b.n	80069a2 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d014      	beq.n	80068de <USBD_LL_DataOutStage+0x98>
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d81d      	bhi.n	80068f4 <USBD_LL_DataOutStage+0xae>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <USBD_LL_DataOutStage+0x7c>
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d003      	beq.n	80068c8 <USBD_LL_DataOutStage+0x82>
 80068c0:	e018      	b.n	80068f4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75bb      	strb	r3, [r7, #22]
            break;
 80068c6:	e018      	b.n	80068fa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fa5e 	bl	8006d94 <USBD_CoreFindIF>
 80068d8:	4603      	mov	r3, r0
 80068da:	75bb      	strb	r3, [r7, #22]
            break;
 80068dc:	e00d      	b.n	80068fa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	4619      	mov	r1, r3
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fa60 	bl	8006dae <USBD_CoreFindEP>
 80068ee:	4603      	mov	r3, r0
 80068f0:	75bb      	strb	r3, [r7, #22]
            break;
 80068f2:	e002      	b.n	80068fa <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	75bb      	strb	r3, [r7, #22]
            break;
 80068f8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80068fa:	7dbb      	ldrb	r3, [r7, #22]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d119      	bne.n	8006934 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b03      	cmp	r3, #3
 800690a:	d113      	bne.n	8006934 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800690c:	7dba      	ldrb	r2, [r7, #22]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	32ae      	adds	r2, #174	; 0xae
 8006912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800691c:	7dba      	ldrb	r2, [r7, #22]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006924:	7dba      	ldrb	r2, [r7, #22]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	32ae      	adds	r2, #174	; 0xae
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f001 f92e 	bl	8007b96 <USBD_CtlSendStatus>
 800693a:	e032      	b.n	80069a2 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4619      	mov	r1, r3
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fa31 	bl	8006dae <USBD_CoreFindEP>
 800694c:	4603      	mov	r3, r0
 800694e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006950:	7dbb      	ldrb	r3, [r7, #22]
 8006952:	2bff      	cmp	r3, #255	; 0xff
 8006954:	d025      	beq.n	80069a2 <USBD_LL_DataOutStage+0x15c>
 8006956:	7dbb      	ldrb	r3, [r7, #22]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d122      	bne.n	80069a2 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d117      	bne.n	8006998 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006968:	7dba      	ldrb	r2, [r7, #22]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	32ae      	adds	r2, #174	; 0xae
 800696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00f      	beq.n	8006998 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006978:	7dba      	ldrb	r2, [r7, #22]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006980:	7dba      	ldrb	r2, [r7, #22]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	32ae      	adds	r2, #174	; 0xae
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	7afa      	ldrb	r2, [r7, #11]
 800698e:	4611      	mov	r1, r2
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	4798      	blx	r3
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	e000      	b.n	80069a4 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	460b      	mov	r3, r1
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069ba:	7afb      	ldrb	r3, [r7, #11]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d16f      	bne.n	8006aa0 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3314      	adds	r3, #20
 80069c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d15a      	bne.n	8006a86 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d914      	bls.n	8006a06 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	1ad2      	subs	r2, r2, r3
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 f8ad 	bl	8007b52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069f8:	2300      	movs	r3, #0
 80069fa:	2200      	movs	r2, #0
 80069fc:	2100      	movs	r1, #0
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f001 fd5d 	bl	80084be <USBD_LL_PrepareReceive>
 8006a04:	e03f      	b.n	8006a86 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d11c      	bne.n	8006a4c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d316      	bcc.n	8006a4c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d20f      	bcs.n	8006a4c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2100      	movs	r1, #0
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f001 f88e 	bl	8007b52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2200      	movs	r2, #0
 8006a42:	2100      	movs	r1, #0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f001 fd3a 	bl	80084be <USBD_LL_PrepareReceive>
 8006a4a:	e01c      	b.n	8006a86 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d10f      	bne.n	8006a78 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d009      	beq.n	8006a78 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a78:	2180      	movs	r1, #128	; 0x80
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 fc75 	bl	800836a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f001 f89b 	bl	8007bbc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d03a      	beq.n	8006b06 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff fe42 	bl	800671a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a9e:	e032      	b.n	8006b06 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f97f 	bl	8006dae <USBD_CoreFindEP>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2bff      	cmp	r3, #255	; 0xff
 8006ab8:	d025      	beq.n	8006b06 <USBD_LL_DataInStage+0x15a>
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d122      	bne.n	8006b06 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d11c      	bne.n	8006b06 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006acc:	7dfa      	ldrb	r2, [r7, #23]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	32ae      	adds	r2, #174	; 0xae
 8006ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d014      	beq.n	8006b06 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006adc:	7dfa      	ldrb	r2, [r7, #23]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006ae4:	7dfa      	ldrb	r2, [r7, #23]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	32ae      	adds	r2, #174	; 0xae
 8006aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	7afa      	ldrb	r2, [r7, #11]
 8006af2:	4611      	mov	r1, r2
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	4798      	blx	r3
 8006af8:	4603      	mov	r3, r0
 8006afa:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006afc:	7dbb      	ldrb	r3, [r7, #22]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b02:	7dbb      	ldrb	r3, [r7, #22]
 8006b04:	e000      	b.n	8006b08 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d014      	beq.n	8006b76 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00e      	beq.n	8006b76 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6852      	ldr	r2, [r2, #4]
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	4611      	mov	r1, r2
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b72:	2303      	movs	r3, #3
 8006b74:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b76:	2340      	movs	r3, #64	; 0x40
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fb90 	bl	80082a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2240      	movs	r2, #64	; 0x40
 8006b8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	2200      	movs	r2, #0
 8006b96:	2180      	movs	r1, #128	; 0x80
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fb82 	bl	80082a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2240      	movs	r2, #64	; 0x40
 8006ba8:	621a      	str	r2, [r3, #32]

  return ret;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2204      	movs	r2, #4
 8006bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d106      	bne.n	8006c22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d110      	bne.n	8006c66 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	32ae      	adds	r2, #174	; 0xae
 8006c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e01c      	b.n	8006ccc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d115      	bne.n	8006cca <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	32ae      	adds	r2, #174	; 0xae
 8006ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	32ae      	adds	r2, #174	; 0xae
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32ae      	adds	r2, #174	; 0xae
 8006cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e01c      	b.n	8006d30 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d115      	bne.n	8006d2e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	32ae      	adds	r2, #174	; 0xae
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	32ae      	adds	r2, #174	; 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00e      	beq.n	8006d8a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6852      	ldr	r2, [r2, #4]
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006da0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	885b      	ldrh	r3, [r3, #2]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d920      	bls.n	8006e32 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006df8:	e013      	b.n	8006e22 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006dfa:	f107 030a 	add.w	r3, r7, #10
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6978      	ldr	r0, [r7, #20]
 8006e02:	f000 f81b 	bl	8006e3c <USBD_GetNextDesc>
 8006e06:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d108      	bne.n	8006e22 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	789b      	ldrb	r3, [r3, #2]
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d008      	beq.n	8006e30 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	897b      	ldrh	r3, [r7, #10]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d8e5      	bhi.n	8006dfa <USBD_GetEpDesc+0x32>
 8006e2e:	e000      	b.n	8006e32 <USBD_GetEpDesc+0x6a>
          break;
 8006e30:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e32:	693b      	ldr	r3, [r7, #16]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	881a      	ldrh	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	4413      	add	r3, r2
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4413      	add	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e68:	68fb      	ldr	r3, [r7, #12]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e94:	8a3b      	ldrh	r3, [r7, #16]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	b21a      	sxth	r2, r3
 8006e9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b21b      	sxth	r3, r3
 8006ea2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ea4:	89fb      	ldrh	r3, [r7, #14]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d005      	beq.n	8006eda <USBD_StdDevReq+0x26>
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	d857      	bhi.n	8006f82 <USBD_StdDevReq+0xce>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00f      	beq.n	8006ef6 <USBD_StdDevReq+0x42>
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d153      	bne.n	8006f82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	32ae      	adds	r2, #174	; 0xae
 8006ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef4:	e04a      	b.n	8006f8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b09      	cmp	r3, #9
 8006efc:	d83b      	bhi.n	8006f76 <USBD_StdDevReq+0xc2>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <USBD_StdDevReq+0x50>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f59 	.word	0x08006f59
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f77 	.word	0x08006f77
 8006f10:	08006f63 	.word	0x08006f63
 8006f14:	08006f77 	.word	0x08006f77
 8006f18:	08006f37 	.word	0x08006f37
 8006f1c:	08006f2d 	.word	0x08006f2d
 8006f20:	08006f77 	.word	0x08006f77
 8006f24:	08006f4f 	.word	0x08006f4f
 8006f28:	08006f41 	.word	0x08006f41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa3c 	bl	80073ac <USBD_GetDescriptor>
          break;
 8006f34:	e024      	b.n	8006f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fba1 	bl	8007680 <USBD_SetAddress>
          break;
 8006f3e:	e01f      	b.n	8006f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fbe0 	bl	8007708 <USBD_SetConfig>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73fb      	strb	r3, [r7, #15]
          break;
 8006f4c:	e018      	b.n	8006f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fc83 	bl	800785c <USBD_GetConfig>
          break;
 8006f56:	e013      	b.n	8006f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fcb4 	bl	80078c8 <USBD_GetStatus>
          break;
 8006f60:	e00e      	b.n	8006f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fce3 	bl	8007930 <USBD_SetFeature>
          break;
 8006f6a:	e009      	b.n	8006f80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fd07 	bl	8007982 <USBD_ClrFeature>
          break;
 8006f74:	e004      	b.n	8006f80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fd5e 	bl	8007a3a <USBD_CtlError>
          break;
 8006f7e:	bf00      	nop
      }
      break;
 8006f80:	e004      	b.n	8006f8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fd58 	bl	8007a3a <USBD_CtlError>
      break;
 8006f8a:	bf00      	nop
  }

  return ret;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop

08006f98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d005      	beq.n	8006fbe <USBD_StdItfReq+0x26>
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d852      	bhi.n	800705c <USBD_StdItfReq+0xc4>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <USBD_StdItfReq+0x26>
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d14e      	bne.n	800705c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d840      	bhi.n	800704e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	889b      	ldrh	r3, [r3, #4]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d836      	bhi.n	8007044 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	889b      	ldrh	r3, [r3, #4]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fed8 	bl	8006d94 <USBD_CoreFindIF>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2bff      	cmp	r3, #255	; 0xff
 8006fec:	d01d      	beq.n	800702a <USBD_StdItfReq+0x92>
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006ff4:	7bba      	ldrb	r2, [r7, #14]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32ae      	adds	r2, #174	; 0xae
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007004:	7bba      	ldrb	r2, [r7, #14]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800700c:	7bba      	ldrb	r2, [r7, #14]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	32ae      	adds	r2, #174	; 0xae
 8007012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007022:	e004      	b.n	800702e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007028:	e001      	b.n	800702e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	88db      	ldrh	r3, [r3, #6]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d110      	bne.n	8007058 <USBD_StdItfReq+0xc0>
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fdaa 	bl	8007b96 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007042:	e009      	b.n	8007058 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fcf7 	bl	8007a3a <USBD_CtlError>
          break;
 800704c:	e004      	b.n	8007058 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fcf2 	bl	8007a3a <USBD_CtlError>
          break;
 8007056:	e000      	b.n	800705a <USBD_StdItfReq+0xc2>
          break;
 8007058:	bf00      	nop
      }
      break;
 800705a:	e004      	b.n	8007066 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fceb 	bl	8007a3a <USBD_CtlError>
      break;
 8007064:	bf00      	nop
  }

  return ret;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	889b      	ldrh	r3, [r3, #4]
 8007082:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800708c:	2b40      	cmp	r3, #64	; 0x40
 800708e:	d007      	beq.n	80070a0 <USBD_StdEPReq+0x30>
 8007090:	2b40      	cmp	r3, #64	; 0x40
 8007092:	f200 817f 	bhi.w	8007394 <USBD_StdEPReq+0x324>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d02a      	beq.n	80070f0 <USBD_StdEPReq+0x80>
 800709a:	2b20      	cmp	r3, #32
 800709c:	f040 817a 	bne.w	8007394 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff fe82 	bl	8006dae <USBD_CoreFindEP>
 80070aa:	4603      	mov	r3, r0
 80070ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070ae:	7b7b      	ldrb	r3, [r7, #13]
 80070b0:	2bff      	cmp	r3, #255	; 0xff
 80070b2:	f000 8174 	beq.w	800739e <USBD_StdEPReq+0x32e>
 80070b6:	7b7b      	ldrb	r3, [r7, #13]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 8170 	bne.w	800739e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070be:	7b7a      	ldrb	r2, [r7, #13]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070c6:	7b7a      	ldrb	r2, [r7, #13]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	32ae      	adds	r2, #174	; 0xae
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8163 	beq.w	800739e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80070d8:	7b7a      	ldrb	r2, [r7, #13]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	32ae      	adds	r2, #174	; 0xae
 80070de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070ee:	e156      	b.n	800739e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d008      	beq.n	800710a <USBD_StdEPReq+0x9a>
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	f300 8145 	bgt.w	8007388 <USBD_StdEPReq+0x318>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 809b 	beq.w	800723a <USBD_StdEPReq+0x1ca>
 8007104:	2b01      	cmp	r3, #1
 8007106:	d03c      	beq.n	8007182 <USBD_StdEPReq+0x112>
 8007108:	e13e      	b.n	8007388 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d002      	beq.n	800711c <USBD_StdEPReq+0xac>
 8007116:	2b03      	cmp	r3, #3
 8007118:	d016      	beq.n	8007148 <USBD_StdEPReq+0xd8>
 800711a:	e02c      	b.n	8007176 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00d      	beq.n	800713e <USBD_StdEPReq+0xce>
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	2b80      	cmp	r3, #128	; 0x80
 8007126:	d00a      	beq.n	800713e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 f91c 	bl	800836a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 f918 	bl	800836a <USBD_LL_StallEP>
 800713a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800713c:	e020      	b.n	8007180 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fc7a 	bl	8007a3a <USBD_CtlError>
              break;
 8007146:	e01b      	b.n	8007180 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	885b      	ldrh	r3, [r3, #2]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10e      	bne.n	800716e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <USBD_StdEPReq+0xfe>
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b80      	cmp	r3, #128	; 0x80
 800715a:	d008      	beq.n	800716e <USBD_StdEPReq+0xfe>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	88db      	ldrh	r3, [r3, #6]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f8fe 	bl	800836a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fd11 	bl	8007b96 <USBD_CtlSendStatus>

              break;
 8007174:	e004      	b.n	8007180 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fc5e 	bl	8007a3a <USBD_CtlError>
              break;
 800717e:	bf00      	nop
          }
          break;
 8007180:	e107      	b.n	8007392 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d002      	beq.n	8007194 <USBD_StdEPReq+0x124>
 800718e:	2b03      	cmp	r3, #3
 8007190:	d016      	beq.n	80071c0 <USBD_StdEPReq+0x150>
 8007192:	e04b      	b.n	800722c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <USBD_StdEPReq+0x146>
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d00a      	beq.n	80071b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f8e0 	bl	800836a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f8dc 	bl	800836a <USBD_LL_StallEP>
 80071b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071b4:	e040      	b.n	8007238 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fc3e 	bl	8007a3a <USBD_CtlError>
              break;
 80071be:	e03b      	b.n	8007238 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	885b      	ldrh	r3, [r3, #2]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d136      	bne.n	8007236 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 f8e6 	bl	80083a8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fcda 	bl	8007b96 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fde1 	bl	8006dae <USBD_CoreFindEP>
 80071ec:	4603      	mov	r3, r0
 80071ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071f0:	7b7b      	ldrb	r3, [r7, #13]
 80071f2:	2bff      	cmp	r3, #255	; 0xff
 80071f4:	d01f      	beq.n	8007236 <USBD_StdEPReq+0x1c6>
 80071f6:	7b7b      	ldrb	r3, [r7, #13]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11c      	bne.n	8007236 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80071fc:	7b7a      	ldrb	r2, [r7, #13]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007204:	7b7a      	ldrb	r2, [r7, #13]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	32ae      	adds	r2, #174	; 0xae
 800720a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d010      	beq.n	8007236 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007214:	7b7a      	ldrb	r2, [r7, #13]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	32ae      	adds	r2, #174	; 0xae
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800722a:	e004      	b.n	8007236 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fc03 	bl	8007a3a <USBD_CtlError>
              break;
 8007234:	e000      	b.n	8007238 <USBD_StdEPReq+0x1c8>
              break;
 8007236:	bf00      	nop
          }
          break;
 8007238:	e0ab      	b.n	8007392 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d002      	beq.n	800724c <USBD_StdEPReq+0x1dc>
 8007246:	2b03      	cmp	r3, #3
 8007248:	d032      	beq.n	80072b0 <USBD_StdEPReq+0x240>
 800724a:	e097      	b.n	800737c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <USBD_StdEPReq+0x1f2>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b80      	cmp	r3, #128	; 0x80
 8007256:	d004      	beq.n	8007262 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fbed 	bl	8007a3a <USBD_CtlError>
                break;
 8007260:	e091      	b.n	8007386 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	da0b      	bge.n	8007282 <USBD_StdEPReq+0x212>
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	3310      	adds	r3, #16
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	3304      	adds	r3, #4
 8007280:	e00b      	b.n	800729a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	4413      	add	r3, r2
 8007298:	3304      	adds	r3, #4
 800729a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2202      	movs	r2, #2
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc37 	bl	8007b1c <USBD_CtlSendData>
              break;
 80072ae:	e06a      	b.n	8007386 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da11      	bge.n	80072dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	f003 020f 	and.w	r2, r3, #15
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	440b      	add	r3, r1
 80072ca:	3324      	adds	r3, #36	; 0x24
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d117      	bne.n	8007302 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fbb0 	bl	8007a3a <USBD_CtlError>
                  break;
 80072da:	e054      	b.n	8007386 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	f003 020f 	and.w	r2, r3, #15
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fb9d 	bl	8007a3a <USBD_CtlError>
                  break;
 8007300:	e041      	b.n	8007386 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007306:	2b00      	cmp	r3, #0
 8007308:	da0b      	bge.n	8007322 <USBD_StdEPReq+0x2b2>
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	3310      	adds	r3, #16
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	3304      	adds	r3, #4
 8007320:	e00b      	b.n	800733a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	4413      	add	r3, r2
 8007338:	3304      	adds	r3, #4
 800733a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <USBD_StdEPReq+0x2d8>
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b80      	cmp	r3, #128	; 0x80
 8007346:	d103      	bne.n	8007350 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e00e      	b.n	800736e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 f846 	bl	80083e6 <USBD_LL_IsStallEP>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e002      	b.n	800736e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2202      	movs	r2, #2
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fbd1 	bl	8007b1c <USBD_CtlSendData>
              break;
 800737a:	e004      	b.n	8007386 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fb5b 	bl	8007a3a <USBD_CtlError>
              break;
 8007384:	bf00      	nop
          }
          break;
 8007386:	e004      	b.n	8007392 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fb55 	bl	8007a3a <USBD_CtlError>
          break;
 8007390:	bf00      	nop
      }
      break;
 8007392:	e005      	b.n	80073a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fb4f 	bl	8007a3a <USBD_CtlError>
      break;
 800739c:	e000      	b.n	80073a0 <USBD_StdEPReq+0x330>
      break;
 800739e:	bf00      	nop
  }

  return ret;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	885b      	ldrh	r3, [r3, #2]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	2b06      	cmp	r3, #6
 80073ce:	f200 8128 	bhi.w	8007622 <USBD_GetDescriptor+0x276>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <USBD_GetDescriptor+0x2c>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073f5 	.word	0x080073f5
 80073dc:	0800740d 	.word	0x0800740d
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	08007623 	.word	0x08007623
 80073e8:	08007623 	.word	0x08007623
 80073ec:	080075c3 	.word	0x080075c3
 80073f0:	080075ef 	.word	0x080075ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
      break;
 800740a:	e112      	b.n	8007632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7c1b      	ldrb	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10d      	bne.n	8007430 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	f107 0208 	add.w	r2, r7, #8
 8007420:	4610      	mov	r0, r2
 8007422:	4798      	blx	r3
 8007424:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	2202      	movs	r2, #2
 800742c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800742e:	e100      	b.n	8007632 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	f107 0208 	add.w	r2, r7, #8
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	2202      	movs	r2, #2
 8007448:	701a      	strb	r2, [r3, #0]
      break;
 800744a:	e0f2      	b.n	8007632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	885b      	ldrh	r3, [r3, #2]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b05      	cmp	r3, #5
 8007454:	f200 80ac 	bhi.w	80075b0 <USBD_GetDescriptor+0x204>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <USBD_GetDescriptor+0xb4>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007479 	.word	0x08007479
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074e1 	.word	0x080074e1
 800746c:	08007515 	.word	0x08007515
 8007470:	08007549 	.word	0x08007549
 8007474:	0800757d 	.word	0x0800757d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	7c12      	ldrb	r2, [r2, #16]
 8007490:	f107 0108 	add.w	r1, r7, #8
 8007494:	4610      	mov	r0, r2
 8007496:	4798      	blx	r3
 8007498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800749a:	e091      	b.n	80075c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 facb 	bl	8007a3a <USBD_CtlError>
            err++;
 80074a4:	7afb      	ldrb	r3, [r7, #11]
 80074a6:	3301      	adds	r3, #1
 80074a8:	72fb      	strb	r3, [r7, #11]
          break;
 80074aa:	e089      	b.n	80075c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	7c12      	ldrb	r2, [r2, #16]
 80074c4:	f107 0108 	add.w	r1, r7, #8
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
 80074cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ce:	e077      	b.n	80075c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fab1 	bl	8007a3a <USBD_CtlError>
            err++;
 80074d8:	7afb      	ldrb	r3, [r7, #11]
 80074da:	3301      	adds	r3, #1
 80074dc:	72fb      	strb	r3, [r7, #11]
          break;
 80074de:	e06f      	b.n	80075c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007502:	e05d      	b.n	80075c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa97 	bl	8007a3a <USBD_CtlError>
            err++;
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	3301      	adds	r3, #1
 8007510:	72fb      	strb	r3, [r7, #11]
          break;
 8007512:	e055      	b.n	80075c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007536:	e043      	b.n	80075c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa7d 	bl	8007a3a <USBD_CtlError>
            err++;
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	3301      	adds	r3, #1
 8007544:	72fb      	strb	r3, [r7, #11]
          break;
 8007546:	e03b      	b.n	80075c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	7c12      	ldrb	r2, [r2, #16]
 8007560:	f107 0108 	add.w	r1, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756a:	e029      	b.n	80075c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa63 	bl	8007a3a <USBD_CtlError>
            err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
          break;
 800757a:	e021      	b.n	80075c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7c12      	ldrb	r2, [r2, #16]
 8007594:	f107 0108 	add.w	r1, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759e:	e00f      	b.n	80075c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa49 	bl	8007a3a <USBD_CtlError>
            err++;
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	3301      	adds	r3, #1
 80075ac:	72fb      	strb	r3, [r7, #11]
          break;
 80075ae:	e007      	b.n	80075c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa41 	bl	8007a3a <USBD_CtlError>
          err++;
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	3301      	adds	r3, #1
 80075bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075be:	bf00      	nop
      }
      break;
 80075c0:	e037      	b.n	8007632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7c1b      	ldrb	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d2:	f107 0208 	add.w	r2, r7, #8
 80075d6:	4610      	mov	r0, r2
 80075d8:	4798      	blx	r3
 80075da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075dc:	e029      	b.n	8007632 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa2a 	bl	8007a3a <USBD_CtlError>
        err++;
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	3301      	adds	r3, #1
 80075ea:	72fb      	strb	r3, [r7, #11]
      break;
 80075ec:	e021      	b.n	8007632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7c1b      	ldrb	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	f107 0208 	add.w	r2, r7, #8
 8007602:	4610      	mov	r0, r2
 8007604:	4798      	blx	r3
 8007606:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3301      	adds	r3, #1
 800760c:	2207      	movs	r2, #7
 800760e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007610:	e00f      	b.n	8007632 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa10 	bl	8007a3a <USBD_CtlError>
        err++;
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	3301      	adds	r3, #1
 800761e:	72fb      	strb	r3, [r7, #11]
      break;
 8007620:	e007      	b.n	8007632 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa08 	bl	8007a3a <USBD_CtlError>
      err++;
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	3301      	adds	r3, #1
 800762e:	72fb      	strb	r3, [r7, #11]
      break;
 8007630:	bf00      	nop
  }

  if (err != 0U)
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11e      	bne.n	8007676 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d016      	beq.n	800766e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007640:	893b      	ldrh	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00e      	beq.n	8007664 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	88da      	ldrh	r2, [r3, #6]
 800764a:	893b      	ldrh	r3, [r7, #8]
 800764c:	4293      	cmp	r3, r2
 800764e:	bf28      	it	cs
 8007650:	4613      	movcs	r3, r2
 8007652:	b29b      	uxth	r3, r3
 8007654:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007656:	893b      	ldrh	r3, [r7, #8]
 8007658:	461a      	mov	r2, r3
 800765a:	68f9      	ldr	r1, [r7, #12]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fa5d 	bl	8007b1c <USBD_CtlSendData>
 8007662:	e009      	b.n	8007678 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f9e7 	bl	8007a3a <USBD_CtlError>
 800766c:	e004      	b.n	8007678 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa91 	bl	8007b96 <USBD_CtlSendStatus>
 8007674:	e000      	b.n	8007678 <USBD_GetDescriptor+0x2cc>
    return;
 8007676:	bf00      	nop
  }
}
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop

08007680 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	889b      	ldrh	r3, [r3, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d131      	bne.n	80076f6 <USBD_SetAddress+0x76>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	88db      	ldrh	r3, [r3, #6]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d12d      	bne.n	80076f6 <USBD_SetAddress+0x76>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	2b7f      	cmp	r3, #127	; 0x7f
 80076a0:	d829      	bhi.n	80076f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	885b      	ldrh	r3, [r3, #2]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d104      	bne.n	80076c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9bc 	bl	8007a3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c2:	e01d      	b.n	8007700 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7bfa      	ldrb	r2, [r7, #15]
 80076c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 feb4 	bl	800843e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa5d 	bl	8007b96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d004      	beq.n	80076ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ea:	e009      	b.n	8007700 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f4:	e004      	b.n	8007700 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f99e 	bl	8007a3a <USBD_CtlError>
  }
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	885b      	ldrh	r3, [r3, #2]
 800771a:	b2da      	uxtb	r2, r3
 800771c:	4b4e      	ldr	r3, [pc, #312]	; (8007858 <USBD_SetConfig+0x150>)
 800771e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007720:	4b4d      	ldr	r3, [pc, #308]	; (8007858 <USBD_SetConfig+0x150>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d905      	bls.n	8007734 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f985 	bl	8007a3a <USBD_CtlError>
    return USBD_FAIL;
 8007730:	2303      	movs	r3, #3
 8007732:	e08c      	b.n	800784e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d002      	beq.n	8007746 <USBD_SetConfig+0x3e>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d029      	beq.n	8007798 <USBD_SetConfig+0x90>
 8007744:	e075      	b.n	8007832 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007746:	4b44      	ldr	r3, [pc, #272]	; (8007858 <USBD_SetConfig+0x150>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d020      	beq.n	8007790 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800774e:	4b42      	ldr	r3, [pc, #264]	; (8007858 <USBD_SetConfig+0x150>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007758:	4b3f      	ldr	r3, [pc, #252]	; (8007858 <USBD_SetConfig+0x150>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fe ffe6 	bl	8006730 <USBD_SetClassConfig>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d008      	beq.n	8007780 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f962 	bl	8007a3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2202      	movs	r2, #2
 800777a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800777e:	e065      	b.n	800784c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fa08 	bl	8007b96 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2203      	movs	r2, #3
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800778e:	e05d      	b.n	800784c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fa00 	bl	8007b96 <USBD_CtlSendStatus>
      break;
 8007796:	e059      	b.n	800784c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007798:	4b2f      	ldr	r3, [pc, #188]	; (8007858 <USBD_SetConfig+0x150>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d112      	bne.n	80077c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077a8:	4b2b      	ldr	r3, [pc, #172]	; (8007858 <USBD_SetConfig+0x150>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077b2:	4b29      	ldr	r3, [pc, #164]	; (8007858 <USBD_SetConfig+0x150>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7fe ffd5 	bl	8006768 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9e9 	bl	8007b96 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077c4:	e042      	b.n	800784c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <USBD_SetConfig+0x150>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d02a      	beq.n	800782a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fe ffc3 	bl	8006768 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077e2:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <USBD_SetConfig+0x150>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077ec:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <USBD_SetConfig+0x150>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fe ff9c 	bl	8006730 <USBD_SetClassConfig>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00f      	beq.n	8007822 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f918 	bl	8007a3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fe ffa8 	bl	8006768 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007820:	e014      	b.n	800784c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f9b7 	bl	8007b96 <USBD_CtlSendStatus>
      break;
 8007828:	e010      	b.n	800784c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9b3 	bl	8007b96 <USBD_CtlSendStatus>
      break;
 8007830:	e00c      	b.n	800784c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f900 	bl	8007a3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800783a:	4b07      	ldr	r3, [pc, #28]	; (8007858 <USBD_SetConfig+0x150>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe ff91 	bl	8006768 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007846:	2303      	movs	r3, #3
 8007848:	73fb      	strb	r3, [r7, #15]
      break;
 800784a:	bf00      	nop
  }

  return ret;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000144 	.word	0x20000144

0800785c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	88db      	ldrh	r3, [r3, #6]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d004      	beq.n	8007878 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8e2 	bl	8007a3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007876:	e023      	b.n	80078c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	dc02      	bgt.n	800788a <USBD_GetConfig+0x2e>
 8007884:	2b00      	cmp	r3, #0
 8007886:	dc03      	bgt.n	8007890 <USBD_GetConfig+0x34>
 8007888:	e015      	b.n	80078b6 <USBD_GetConfig+0x5a>
 800788a:	2b03      	cmp	r3, #3
 800788c:	d00b      	beq.n	80078a6 <USBD_GetConfig+0x4a>
 800788e:	e012      	b.n	80078b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3308      	adds	r3, #8
 800789a:	2201      	movs	r2, #1
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f93c 	bl	8007b1c <USBD_CtlSendData>
        break;
 80078a4:	e00c      	b.n	80078c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3304      	adds	r3, #4
 80078aa:	2201      	movs	r2, #1
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f934 	bl	8007b1c <USBD_CtlSendData>
        break;
 80078b4:	e004      	b.n	80078c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f8be 	bl	8007a3a <USBD_CtlError>
        break;
 80078be:	bf00      	nop
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d81e      	bhi.n	800791e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	88db      	ldrh	r3, [r3, #6]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d004      	beq.n	80078f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8a5 	bl	8007a3a <USBD_CtlError>
        break;
 80078f0:	e01a      	b.n	8007928 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f043 0202 	orr.w	r2, r3, #2
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	330c      	adds	r3, #12
 8007912:	2202      	movs	r2, #2
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f900 	bl	8007b1c <USBD_CtlSendData>
      break;
 800791c:	e004      	b.n	8007928 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f88a 	bl	8007a3a <USBD_CtlError>
      break;
 8007926:	bf00      	nop
  }
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	885b      	ldrh	r3, [r3, #2]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d107      	bne.n	8007952 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f923 	bl	8007b96 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007950:	e013      	b.n	800797a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d10b      	bne.n	8007972 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	889b      	ldrh	r3, [r3, #4]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	b2da      	uxtb	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f913 	bl	8007b96 <USBD_CtlSendStatus>
}
 8007970:	e003      	b.n	800797a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f860 	bl	8007a3a <USBD_CtlError>
}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007992:	b2db      	uxtb	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	2b02      	cmp	r3, #2
 8007998:	d80b      	bhi.n	80079b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d10c      	bne.n	80079bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f8f3 	bl	8007b96 <USBD_CtlSendStatus>
      }
      break;
 80079b0:	e004      	b.n	80079bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f840 	bl	8007a3a <USBD_CtlError>
      break;
 80079ba:	e000      	b.n	80079be <USBD_ClrFeature+0x3c>
      break;
 80079bc:	bf00      	nop
  }
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3301      	adds	r3, #1
 80079e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	781a      	ldrb	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7ff fa40 	bl	8006e76 <SWAPBYTE>
 80079f6:	4603      	mov	r3, r0
 80079f8:	461a      	mov	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f7ff fa33 	bl	8006e76 <SWAPBYTE>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff fa26 	bl	8006e76 <SWAPBYTE>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	80da      	strh	r2, [r3, #6]
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a44:	2180      	movs	r1, #128	; 0x80
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fc8f 	bl	800836a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fc8b 	bl	800836a <USBD_LL_StallEP>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d036      	beq.n	8007ae0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a76:	6938      	ldr	r0, [r7, #16]
 8007a78:	f000 f836 	bl	8007ae8 <USBD_GetLen>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	3301      	adds	r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	4413      	add	r3, r2
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007aac:	e013      	b.n	8007ad6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	3301      	adds	r3, #1
 8007abe:	613b      	str	r3, [r7, #16]
    idx++;
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	4413      	add	r3, r2
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e7      	bne.n	8007aae <USBD_GetString+0x52>
 8007ade:	e000      	b.n	8007ae2 <USBD_GetString+0x86>
    return;
 8007ae0:	bf00      	nop
  }
}
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007af8:	e005      	b.n	8007b06 <USBD_GetLen+0x1e>
  {
    len++;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	3301      	adds	r3, #1
 8007afe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f5      	bne.n	8007afa <USBD_GetLen+0x12>
  }

  return len;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 fc9a 	bl	800847c <USBD_LL_Transmit>

  return USBD_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	2100      	movs	r1, #0
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fc89 	bl	800847c <USBD_LL_Transmit>

  return USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fc99 	bl	80084be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fc65 	bl	800847c <USBD_LL_Transmit>

  return USBD_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fc73 	bl	80084be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007be8:	2200      	movs	r2, #0
 8007bea:	4912      	ldr	r1, [pc, #72]	; (8007c34 <MX_USB_DEVICE_Init+0x50>)
 8007bec:	4812      	ldr	r0, [pc, #72]	; (8007c38 <MX_USB_DEVICE_Init+0x54>)
 8007bee:	f7fe fd22 	bl	8006636 <USBD_Init>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bf8:	f7f8 fdf4 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007bfc:	490f      	ldr	r1, [pc, #60]	; (8007c3c <MX_USB_DEVICE_Init+0x58>)
 8007bfe:	480e      	ldr	r0, [pc, #56]	; (8007c38 <MX_USB_DEVICE_Init+0x54>)
 8007c00:	f7fe fd49 	bl	8006696 <USBD_RegisterClass>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c0a:	f7f8 fdeb 	bl	80007e4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007c0e:	490c      	ldr	r1, [pc, #48]	; (8007c40 <MX_USB_DEVICE_Init+0x5c>)
 8007c10:	4809      	ldr	r0, [pc, #36]	; (8007c38 <MX_USB_DEVICE_Init+0x54>)
 8007c12:	f7fc fff3 	bl	8004bfc <USBD_MSC_RegisterStorage>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c1c:	f7f8 fde2 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <MX_USB_DEVICE_Init+0x54>)
 8007c22:	f7fe fd6e 	bl	8006702 <USBD_Start>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c2c:	f7f8 fdda 	bl	80007e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c30:	bf00      	nop
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	200000b4 	.word	0x200000b4
 8007c38:	20000148 	.word	0x20000148
 8007c3c:	2000000c 	.word	0x2000000c
 8007c40:	20000104 	.word	0x20000104

08007c44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2212      	movs	r2, #18
 8007c54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c56:	4b03      	ldr	r3, [pc, #12]	; (8007c64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	200000d0 	.word	0x200000d0

08007c68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2204      	movs	r2, #4
 8007c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c7a:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	200000e4 	.word	0x200000e4

08007c8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4907      	ldr	r1, [pc, #28]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ca2:	4808      	ldr	r0, [pc, #32]	; (8007cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ca4:	f7ff feda 	bl	8007a5c <USBD_GetString>
 8007ca8:	e004      	b.n	8007cb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4904      	ldr	r1, [pc, #16]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007cae:	4805      	ldr	r0, [pc, #20]	; (8007cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cb0:	f7ff fed4 	bl	8007a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000424 	.word	0x20000424
 8007cc4:	08008620 	.word	0x08008620

08007cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cd8:	4804      	ldr	r0, [pc, #16]	; (8007cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cda:	f7ff febf 	bl	8007a5c <USBD_GetString>
  return USBD_StrDesc;
 8007cde:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000424 	.word	0x20000424
 8007cec:	08008634 	.word	0x08008634

08007cf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	221a      	movs	r2, #26
 8007d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d02:	f000 f843 	bl	8007d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d06:	4b02      	ldr	r3, [pc, #8]	; (8007d10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	200000e8 	.word	0x200000e8

08007d14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d105      	bne.n	8007d32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	4907      	ldr	r1, [pc, #28]	; (8007d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d2a:	4808      	ldr	r0, [pc, #32]	; (8007d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d2c:	f7ff fe96 	bl	8007a5c <USBD_GetString>
 8007d30:	e004      	b.n	8007d3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4904      	ldr	r1, [pc, #16]	; (8007d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d36:	4805      	ldr	r0, [pc, #20]	; (8007d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d38:	f7ff fe90 	bl	8007a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d3c:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000424 	.word	0x20000424
 8007d4c:	08008648 	.word	0x08008648

08007d50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	4907      	ldr	r1, [pc, #28]	; (8007d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d66:	4808      	ldr	r0, [pc, #32]	; (8007d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d68:	f7ff fe78 	bl	8007a5c <USBD_GetString>
 8007d6c:	e004      	b.n	8007d78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4904      	ldr	r1, [pc, #16]	; (8007d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d72:	4805      	ldr	r0, [pc, #20]	; (8007d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d74:	f7ff fe72 	bl	8007a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d78:	4b02      	ldr	r3, [pc, #8]	; (8007d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000424 	.word	0x20000424
 8007d88:	08008654 	.word	0x08008654

08007d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d92:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <Get_SerialNum+0x44>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <Get_SerialNum+0x48>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <Get_SerialNum+0x4c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d009      	beq.n	8007dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007db2:	2208      	movs	r2, #8
 8007db4:	4909      	ldr	r1, [pc, #36]	; (8007ddc <Get_SerialNum+0x50>)
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f814 	bl	8007de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	4908      	ldr	r1, [pc, #32]	; (8007de0 <Get_SerialNum+0x54>)
 8007dc0:	68b8      	ldr	r0, [r7, #8]
 8007dc2:	f000 f80f 	bl	8007de4 <IntToUnicode>
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	1fff7a10 	.word	0x1fff7a10
 8007dd4:	1fff7a14 	.word	0x1fff7a14
 8007dd8:	1fff7a18 	.word	0x1fff7a18
 8007ddc:	200000ea 	.word	0x200000ea
 8007de0:	200000fa 	.word	0x200000fa

08007de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007df6:	2300      	movs	r3, #0
 8007df8:	75fb      	strb	r3, [r7, #23]
 8007dfa:	e027      	b.n	8007e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	0f1b      	lsrs	r3, r3, #28
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d80b      	bhi.n	8007e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	0f1b      	lsrs	r3, r3, #28
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	440b      	add	r3, r1
 8007e14:	3230      	adds	r2, #48	; 0x30
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	e00a      	b.n	8007e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	0f1b      	lsrs	r3, r3, #28
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	4619      	mov	r1, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	440b      	add	r3, r1
 8007e2c:	3237      	adds	r2, #55	; 0x37
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]
 8007e4c:	7dfa      	ldrb	r2, [r7, #23]
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d3d3      	bcc.n	8007dfc <IntToUnicode+0x18>
  }
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	4603      	mov	r3, r0
 8007e6a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8007e6c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	4603      	mov	r3, r0
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e8e:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e96:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007e98:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	4603      	mov	r3, r0
 8007eae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 8007eb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8007ec8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8007eea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	461a      	mov	r2, r3
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8007f0c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007f1e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
	...

08007f2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	; 0x28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f34:	f107 0314 	add.w	r3, r7, #20
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	605a      	str	r2, [r3, #4]
 8007f3e:	609a      	str	r2, [r3, #8]
 8007f40:	60da      	str	r2, [r3, #12]
 8007f42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f4c:	d147      	bne.n	8007fde <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	4b25      	ldr	r3, [pc, #148]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	4a24      	ldr	r2, [pc, #144]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007f58:	f043 0301 	orr.w	r3, r3, #1
 8007f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f5e:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007f6a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f70:	2302      	movs	r3, #2
 8007f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f7c:	230a      	movs	r3, #10
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f80:	f107 0314 	add.w	r3, r7, #20
 8007f84:	4619      	mov	r1, r3
 8007f86:	4819      	ldr	r0, [pc, #100]	; (8007fec <HAL_PCD_MspInit+0xc0>)
 8007f88:	f7f8 fe72 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007f9a:	f107 0314 	add.w	r3, r7, #20
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4812      	ldr	r0, [pc, #72]	; (8007fec <HAL_PCD_MspInit+0xc0>)
 8007fa2:	f7f8 fe65 	bl	8000c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	4a0f      	ldr	r2, [pc, #60]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb0:	6353      	str	r3, [r2, #52]	; 0x34
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fba:	4a0b      	ldr	r2, [pc, #44]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <HAL_PCD_MspInit+0xbc>)
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	2043      	movs	r0, #67	; 0x43
 8007fd4:	f7f8 fe15 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fd8:	2043      	movs	r0, #67	; 0x43
 8007fda:	f7f8 fe2e 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fde:	bf00      	nop
 8007fe0:	3728      	adds	r7, #40	; 0x28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	40020000 	.word	0x40020000

08007ff0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f7fe fbc8 	bl	800679c <USBD_LL_SetupStage>
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	4619      	mov	r1, r3
 800803e:	f7fe fc02 	bl	8006846 <USBD_LL_DataOutStage>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	334c      	adds	r3, #76	; 0x4c
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	4619      	mov	r1, r3
 8008072:	f7fe fc9b 	bl	80069ac <USBD_LL_DataInStage>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fdcf 	bl	8006c30 <USBD_LL_SOF>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080a2:	2301      	movs	r3, #1
 80080a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
 80080b2:	e008      	b.n	80080c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d102      	bne.n	80080c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
 80080c0:	e001      	b.n	80080c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80080c2:	f7f8 fb8f 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080cc:	7bfa      	ldrb	r2, [r7, #15]
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fd6f 	bl	8006bb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe fd17 	bl	8006b10 <USBD_LL_Reset>
}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fd6a 	bl	8006bd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008120:	4b04      	ldr	r3, [pc, #16]	; (8008134 <HAL_PCD_SuspendCallback+0x48>)
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	4a03      	ldr	r2, [pc, #12]	; (8008134 <HAL_PCD_SuspendCallback+0x48>)
 8008126:	f043 0306 	orr.w	r3, r3, #6
 800812a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000ed00 	.word	0xe000ed00

08008138 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fd5a 	bl	8006c00 <USBD_LL_Resume>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe fdb2 	bl	8006cd4 <USBD_LL_IsoOUTIncomplete>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fd6e 	bl	8006c70 <USBD_LL_IsoINIncomplete>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fdc4 	bl	8006d38 <USBD_LL_DevConnected>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fdc1 	bl	8006d4e <USBD_LL_DevDisconnected>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d13c      	bne.n	800825e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <USBD_LL_Init+0x94>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a1e      	ldr	r2, [pc, #120]	; (8008268 <USBD_LL_Init+0x94>)
 80081f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081f4:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <USBD_LL_Init+0x94>)
 80081f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <USBD_LL_Init+0x94>)
 80081fe:	2204      	movs	r2, #4
 8008200:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008202:	4b19      	ldr	r3, [pc, #100]	; (8008268 <USBD_LL_Init+0x94>)
 8008204:	2202      	movs	r2, #2
 8008206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <USBD_LL_Init+0x94>)
 800820a:	2200      	movs	r2, #0
 800820c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800820e:	4b16      	ldr	r3, [pc, #88]	; (8008268 <USBD_LL_Init+0x94>)
 8008210:	2202      	movs	r2, #2
 8008212:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008214:	4b14      	ldr	r3, [pc, #80]	; (8008268 <USBD_LL_Init+0x94>)
 8008216:	2200      	movs	r2, #0
 8008218:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800821a:	4b13      	ldr	r3, [pc, #76]	; (8008268 <USBD_LL_Init+0x94>)
 800821c:	2200      	movs	r2, #0
 800821e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008220:	4b11      	ldr	r3, [pc, #68]	; (8008268 <USBD_LL_Init+0x94>)
 8008222:	2200      	movs	r2, #0
 8008224:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008226:	4b10      	ldr	r3, [pc, #64]	; (8008268 <USBD_LL_Init+0x94>)
 8008228:	2200      	movs	r2, #0
 800822a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800822c:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <USBD_LL_Init+0x94>)
 800822e:	2200      	movs	r2, #0
 8008230:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008232:	480d      	ldr	r0, [pc, #52]	; (8008268 <USBD_LL_Init+0x94>)
 8008234:	f7f8 fee1 	bl	8000ffa <HAL_PCD_Init>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800823e:	f7f8 fad1 	bl	80007e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008242:	2180      	movs	r1, #128	; 0x80
 8008244:	4808      	ldr	r0, [pc, #32]	; (8008268 <USBD_LL_Init+0x94>)
 8008246:	f7fa f966 	bl	8002516 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800824a:	2240      	movs	r2, #64	; 0x40
 800824c:	2100      	movs	r1, #0
 800824e:	4806      	ldr	r0, [pc, #24]	; (8008268 <USBD_LL_Init+0x94>)
 8008250:	f7fa f91a 	bl	8002488 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008254:	2280      	movs	r2, #128	; 0x80
 8008256:	2101      	movs	r1, #1
 8008258:	4803      	ldr	r0, [pc, #12]	; (8008268 <USBD_LL_Init+0x94>)
 800825a:	f7fa f915 	bl	8002488 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000624 	.word	0x20000624

0800826c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008282:	4618      	mov	r0, r3
 8008284:	f7f8 ffd6 	bl	8001234 <HAL_PCD_Start>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 f962 	bl	8008558 <USBD_Get_USB_Status>
 8008294:	4603      	mov	r3, r0
 8008296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008298:	7bbb      	ldrb	r3, [r7, #14]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	4608      	mov	r0, r1
 80082ac:	4611      	mov	r1, r2
 80082ae:	461a      	mov	r2, r3
 80082b0:	4603      	mov	r3, r0
 80082b2:	70fb      	strb	r3, [r7, #3]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70bb      	strb	r3, [r7, #2]
 80082b8:	4613      	mov	r3, r2
 80082ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082ca:	78bb      	ldrb	r3, [r7, #2]
 80082cc:	883a      	ldrh	r2, [r7, #0]
 80082ce:	78f9      	ldrb	r1, [r7, #3]
 80082d0:	f7f9 fca7 	bl	8001c22 <HAL_PCD_EP_Open>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f93c 	bl	8008558 <USBD_Get_USB_Status>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008308:	78fa      	ldrb	r2, [r7, #3]
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f7f9 fcf0 	bl	8001cf2 <HAL_PCD_EP_Close>
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 f91d 	bl	8008558 <USBD_Get_USB_Status>
 800831e:	4603      	mov	r3, r0
 8008320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008322:	7bbb      	ldrb	r3, [r7, #14]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008346:	78fa      	ldrb	r2, [r7, #3]
 8008348:	4611      	mov	r1, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f7f9 feb3 	bl	80020b6 <HAL_PCD_EP_Flush>
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f8fe 	bl	8008558 <USBD_Get_USB_Status>
 800835c:	4603      	mov	r3, r0
 800835e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008360:	7bbb      	ldrb	r3, [r7, #14]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f7f9 fda9 	bl	8001ee0 <HAL_PCD_EP_SetStall>
 800838e:	4603      	mov	r3, r0
 8008390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f8df 	bl	8008558 <USBD_Get_USB_Status>
 800839a:	4603      	mov	r3, r0
 800839c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800839e:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	4611      	mov	r1, r2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f9 fdee 	bl	8001fa8 <HAL_PCD_EP_ClrStall>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f8c0 	bl	8008558 <USBD_Get_USB_Status>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083f8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da0b      	bge.n	800841a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008408:	68f9      	ldr	r1, [r7, #12]
 800840a:	4613      	mov	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	440b      	add	r3, r1
 8008414:	333e      	adds	r3, #62	; 0x3e
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	e00b      	b.n	8008432 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008420:	68f9      	ldr	r1, [r7, #12]
 8008422:	4613      	mov	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008430:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	4611      	mov	r1, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f7f9 fbbb 	bl	8001bd8 <HAL_PCD_SetAddress>
 8008462:	4603      	mov	r3, r0
 8008464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f875 	bl	8008558 <USBD_Get_USB_Status>
 800846e:	4603      	mov	r3, r0
 8008470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008472:	7bbb      	ldrb	r3, [r7, #14]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	460b      	mov	r3, r1
 800848a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800849a:	7af9      	ldrb	r1, [r7, #11]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	f7f9 fcd4 	bl	8001e4c <HAL_PCD_EP_Transmit>
 80084a4:	4603      	mov	r3, r0
 80084a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f854 	bl	8008558 <USBD_Get_USB_Status>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
 80084ca:	460b      	mov	r3, r1
 80084cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084dc:	7af9      	ldrb	r1, [r7, #11]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	f7f9 fc50 	bl	8001d86 <HAL_PCD_EP_Receive>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 f833 	bl	8008558 <USBD_Get_USB_Status>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7f9 fc80 	bl	8001e1c <HAL_PCD_EP_GetRxCount>
 800851c:	4603      	mov	r3, r0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008530:	4b03      	ldr	r3, [pc, #12]	; (8008540 <USBD_static_malloc+0x18>)
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20000b30 	.word	0x20000b30

08008544 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]

}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d817      	bhi.n	800859c <USBD_Get_USB_Status+0x44>
 800856c:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <USBD_Get_USB_Status+0x1c>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	08008585 	.word	0x08008585
 8008578:	0800858b 	.word	0x0800858b
 800857c:	08008591 	.word	0x08008591
 8008580:	08008597 	.word	0x08008597
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	e00b      	b.n	80085a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800858a:	2303      	movs	r3, #3
 800858c:	73fb      	strb	r3, [r7, #15]
    break;
 800858e:	e008      	b.n	80085a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
    break;
 8008594:	e005      	b.n	80085a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	73fb      	strb	r3, [r7, #15]
    break;
 800859a:	e002      	b.n	80085a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	73fb      	strb	r3, [r7, #15]
    break;
 80085a0:	bf00      	nop
  }
  return usb_status;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <__libc_init_array>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4d0d      	ldr	r5, [pc, #52]	; (80085e8 <__libc_init_array+0x38>)
 80085b4:	4c0d      	ldr	r4, [pc, #52]	; (80085ec <__libc_init_array+0x3c>)
 80085b6:	1b64      	subs	r4, r4, r5
 80085b8:	10a4      	asrs	r4, r4, #2
 80085ba:	2600      	movs	r6, #0
 80085bc:	42a6      	cmp	r6, r4
 80085be:	d109      	bne.n	80085d4 <__libc_init_array+0x24>
 80085c0:	4d0b      	ldr	r5, [pc, #44]	; (80085f0 <__libc_init_array+0x40>)
 80085c2:	4c0c      	ldr	r4, [pc, #48]	; (80085f4 <__libc_init_array+0x44>)
 80085c4:	f000 f820 	bl	8008608 <_init>
 80085c8:	1b64      	subs	r4, r4, r5
 80085ca:	10a4      	asrs	r4, r4, #2
 80085cc:	2600      	movs	r6, #0
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	d105      	bne.n	80085de <__libc_init_array+0x2e>
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d8:	4798      	blx	r3
 80085da:	3601      	adds	r6, #1
 80085dc:	e7ee      	b.n	80085bc <__libc_init_array+0xc>
 80085de:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e2:	4798      	blx	r3
 80085e4:	3601      	adds	r6, #1
 80085e6:	e7f2      	b.n	80085ce <__libc_init_array+0x1e>
 80085e8:	080086a0 	.word	0x080086a0
 80085ec:	080086a0 	.word	0x080086a0
 80085f0:	080086a0 	.word	0x080086a0
 80085f4:	080086a4 	.word	0x080086a4

080085f8 <memset>:
 80085f8:	4402      	add	r2, r0
 80085fa:	4603      	mov	r3, r0
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d100      	bne.n	8008602 <memset+0xa>
 8008600:	4770      	bx	lr
 8008602:	f803 1b01 	strb.w	r1, [r3], #1
 8008606:	e7f9      	b.n	80085fc <memset+0x4>

08008608 <_init>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	bf00      	nop
 800860c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860e:	bc08      	pop	{r3}
 8008610:	469e      	mov	lr, r3
 8008612:	4770      	bx	lr

08008614 <_fini>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	bf00      	nop
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr
